
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005808  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a20  08005a20  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a20  08005a20  00006a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a28  08005a28  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00006a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  08005a3c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005a3c  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a53  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003430  00000000  00000000  00027a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001555  00000000  00000000  0002ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000060d4  00000000  00000000  0002df65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c511  00000000  00000000  00034039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed489  00000000  00000000  0005054a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078f8  00000000  00000000  0013da18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00145310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080059c8 	.word	0x080059c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080059c8 	.word	0x080059c8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:


unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000518:	d104      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	4a03      	ldr	r2, [pc, #12]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000522:	6013      	str	r3, [r2, #0]
  }
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000320 	.word	0x20000320

08000534 <_Z11get_time_usv>:

unsigned long get_time_us() {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <_Z11get_time_usv+0x2c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000540:	607b      	str	r3, [r7, #4]

  int s = sizeof(time_us);
 8000542:	2304      	movs	r3, #4
 8000544:	603b      	str	r3, [r7, #0]

  return seconds_elapsed * 1000000 + time_us;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <_Z11get_time_usv+0x30>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <_Z11get_time_usv+0x34>)
 800054c:	fb03 f202 	mul.w	r2, r3, r2
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4413      	add	r3, r2
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	200001ac 	.word	0x200001ac
 8000564:	20000320 	.word	0x20000320
 8000568:	000f4240 	.word	0x000f4240

0800056c <_ZN7StepperC1EP12GPIO_TypeDeftS1_t>:



class Stepper {
public:
  Stepper(GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	4613      	mov	r3, r2
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2201      	movs	r2, #1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f242 7210 	movw	r2, #10000	@ 0x2710
 800059a:	621a      	str	r2, [r3, #32]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <_ZN7StepperC1EP12GPIO_TypeDeftS1_t+0x8c>)
 80005a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	220a      	movs	r2, #10
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
    this->gpio_port_step = gpio_port_step;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	88fa      	ldrh	r2, [r7, #6]
 80005c6:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	8b3a      	ldrh	r2, [r7, #24]
 80005d2:	819a      	strh	r2, [r3, #12]

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	68b8      	ldr	r0, [r7, #8]
 80005dc:	f002 fca6 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 80005e0:	8b3b      	ldrh	r3, [r7, #24]
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f002 fca0 	bl	8002f2c <HAL_GPIO_WritePin>

  }
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	00989680 	.word	0x00989680

080005fc <_ZN7Stepper8set_goalEi>:

  void set_goal(int goal) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    this->goal = goal;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd01      	ble.n	8000620 <_ZN7Stepper8set_goalEi+0x24>
 800061c:	2201      	movs	r2, #1
 800061e:	e001      	b.n	8000624 <_ZN7Stepper8set_goalEi+0x28>
 8000620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 8000628:	f7ff ff84 	bl	8000534 <_Z11get_time_usv>
 800062c:	4602      	mov	r2, r0
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6898      	ldr	r0, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8999      	ldrh	r1, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d101      	bne.n	800064e <_ZN7Stepper8set_goalEi+0x52>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <_ZN7Stepper8set_goalEi+0x54>
 800064e:	2300      	movs	r3, #0
 8000650:	461a      	mov	r2, r3
 8000652:	f002 fc6b 	bl	8002f2c <HAL_GPIO_WritePin>
  }
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7e1b      	ldrb	r3, [r3, #24]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d057      	beq.n	800071e <_ZN7Stepper9spin_onceEv+0xc0>
      return;
    }

    if (state.state == State::HIGH) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7e1b      	ldrb	r3, [r3, #24]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d11a      	bne.n	80006ac <_ZN7Stepper9spin_onceEv+0x4e>
      if (get_time_us() - time_start_high > time_high) {
 8000676:	f7ff ff5d 	bl	8000534 <_Z11get_time_usv>
 800067a:	4602      	mov	r2, r0
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000686:	429a      	cmp	r2, r3
 8000688:	bf8c      	ite	hi
 800068a:	2301      	movhi	r3, #1
 800068c:	2300      	movls	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d03a      	beq.n	800070a <_ZN7Stepper9spin_onceEv+0xac>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 fc44 	bl	8002f2c <HAL_GPIO_WritePin>
        state.state = State::LOW;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2202      	movs	r2, #2
 80006a8:	761a      	strb	r2, [r3, #24]
 80006aa:	e02e      	b.n	800070a <_ZN7Stepper9spin_onceEv+0xac>
      }
    } else if (state.state == State::LOW) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7e1b      	ldrb	r3, [r3, #24]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d12a      	bne.n	800070a <_ZN7Stepper9spin_onceEv+0xac>
      if (get_time_us() - time_start_step > time_step) {
 80006b4:	f7ff ff3e 	bl	8000534 <_Z11get_time_usv>
 80006b8:	4602      	mov	r2, r0
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	1ad2      	subs	r2, r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c4:	429a      	cmp	r2, r3
 80006c6:	bf8c      	ite	hi
 80006c8:	2301      	movhi	r3, #1
 80006ca:	2300      	movls	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01b      	beq.n	800070a <_ZN7Stepper9spin_onceEv+0xac>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fc25 	bl	8002f2c <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 80006e8:	f7ff ff24 	bl	8000534 <_Z11get_time_usv>
 80006ec:	4602      	mov	r2, r0
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 80006f2:	f7ff ff1f 	bl	8000534 <_Z11get_time_usv>
 80006f6:	4602      	mov	r2, r0
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	441a      	add	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	429a      	cmp	r2, r3
 8000714:	d104      	bne.n	8000720 <_ZN7Stepper9spin_onceEv+0xc2>
      state.state = State::STOPPED;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
 800071c:	e000      	b.n	8000720 <_ZN7Stepper9spin_onceEv+0xc2>
      return;
 800071e:	bf00      	nop
    }
  }
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7e1b      	ldrb	r3, [r3, #24]
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf0c      	ite	eq
 8000736:	2301      	moveq	r3, #1
 8000738:	2300      	movne	r3, #0
 800073a:	b2db      	uxtb	r3, r3
  }
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b092      	sub	sp, #72	@ 0x48
 800074c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fe14 	bl	800137a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f84b 	bl	80007ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 faf3 	bl	8000d40 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800075a:	f000 fac7 	bl	8000cec <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800075e:	f000 fa65 	bl	8000c2c <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8000762:	f000 fa01 	bl	8000b68 <_ZL19MX_USART1_UART_Initv>
  MX_ADC2_Init();
 8000766:	f000 f897 	bl	8000898 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 800076a:	f000 f905 	bl	8000978 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 800076e:	f000 f94f 	bl	8000a10 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8000772:	f000 f99b 	bl	8000aac <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <main+0x98>)
 8000778:	f003 fd4c 	bl	8004214 <HAL_TIM_Base_Start_IT>

    Stepper stepper_lift = Stepper(STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 800077c:	4638      	mov	r0, r7
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000786:	2240      	movs	r2, #64	@ 0x40
 8000788:	4916      	ldr	r1, [pc, #88]	@ (80007e4 <main+0x9c>)
 800078a:	f7ff feef 	bl	800056c <_ZN7StepperC1EP12GPIO_TypeDeftS1_t>

    int pos_up = 100000;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <main+0xa0>)
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
    int pos_down = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	637b      	str	r3, [r7, #52]	@ 0x34
    int current_goal = pos_up;
 8000796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000798:	63fb      	str	r3, [r7, #60]	@ 0x3c

    stepper_lift.set_goal(pos_up);
 800079a:	463b      	mov	r3, r7
 800079c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff2c 	bl	80005fc <_ZN7Stepper8set_goalEi>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

     if (stepper_lift.is_stopped()) {
 80007a4:	463b      	mov	r3, r7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffbd 	bl	8000726 <_ZN7Stepper10is_stoppedEv>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d010      	beq.n	80007d4 <main+0x8c>
       HAL_Delay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b6:	f000 fe51 	bl	800145c <HAL_Delay>
        current_goal = current_goal == pos_up ? pos_down : pos_up;
 80007ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007be:	429a      	cmp	r2, r3
 80007c0:	d101      	bne.n	80007c6 <main+0x7e>
 80007c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c4:	e000      	b.n	80007c8 <main+0x80>
 80007c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        stepper_lift.set_goal(current_goal);
 80007ca:	463b      	mov	r3, r7
 80007cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff14 	bl	80005fc <_ZN7Stepper8set_goalEi>
     }

    stepper_lift.spin_once();
 80007d4:	463b      	mov	r3, r7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff41 	bl	800065e <_ZN7Stepper9spin_onceEv>
     if (stepper_lift.is_stopped()) {
 80007dc:	e7e2      	b.n	80007a4 <main+0x5c>
 80007de:	bf00      	nop
 80007e0:	200001ac 	.word	0x200001ac
 80007e4:	48000400 	.word	0x48000400
 80007e8:	000186a0 	.word	0x000186a0

080007ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	@ 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2238      	movs	r2, #56	@ 0x38
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 f8b8 	bl	8005970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080e:	2000      	movs	r0, #0
 8000810:	f002 fcd6 	bl	80031c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2340      	movs	r3, #64	@ 0x40
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800082a:	2304      	movs	r3, #4
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082e:	2355      	movs	r3, #85	@ 0x55
 8000830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fd70 	bl	8003328 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000858:	f000 fad6 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2303      	movs	r3, #3
 8000862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f003 f869 	bl	800394c <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800088a:	f000 fabd 	bl	8000e08 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 f863 	bl	8005970 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008aa:	4b30      	ldr	r3, [pc, #192]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008ac:	4a30      	ldr	r2, [pc, #192]	@ (8000970 <_ZL12MX_ADC2_Initv+0xd8>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000912:	4816      	ldr	r0, [pc, #88]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 8000914:	f000 ff9a 	bl	800184c <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8000928:	f000 fa6e 	bl	8000e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <_ZL12MX_ADC2_Initv+0xdc>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2306      	movs	r3, #6
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000934:	2305      	movs	r3, #5
 8000936:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000938:	237f      	movs	r3, #127	@ 0x7f
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093c:	2304      	movs	r3, #4
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <_ZL12MX_ADC2_Initv+0xd4>)
 800094a:	f001 f903 	bl	8001b54 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800095e:	f000 fa53 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000028 	.word	0x20000028
 8000970:	50000100 	.word	0x50000100
 8000974:	04300002 	.word	0x04300002

08000978 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <_ZL14MX_FDCAN1_Initv+0x90>)
 80009ea:	f001 ff6d 	bl	80028c8 <HAL_FDCAN_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80009fe:	f000 fa03 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f4 	.word	0x200000f4
 8000a0c:	40006400 	.word	0x40006400

08000a10 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <_ZL12MX_I2C1_Initv+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <_ZL12MX_I2C1_Initv+0x98>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4a:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a4c:	f002 fa86 	bl	8002f5c <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000a60:	f000 f9d2 	bl	8000e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a68:	f002 fb13 	bl	8003092 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000a7c:	f000 f9c4 	bl	8000e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a84:	f002 fb50 	bl	8003128 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f9b6 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000158 	.word	0x20000158
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	30a0a7fb 	.word	0x30a0a7fb

08000aac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aca:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ae0:	4a20      	ldr	r2, [pc, #128]	@ (8000b64 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af0:	481b      	ldr	r0, [pc, #108]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000af2:	f003 fb37 	bl	8004164 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000b06:	f000 f97f 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b18:	f003 fd36 	bl	8004588 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000b2c:	f000 f96c 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <_ZL12MX_TIM2_Initv+0xb4>)
 8000b3e:	f003 ff7d 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000b52:	f000 f959 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001ac 	.word	0x200001ac
 8000b64:	000f4240 	.word	0x000f4240

08000b68 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000b72:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b74:	4a2c      	ldr	r2, [pc, #176]	@ (8000c28 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8000b76:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b84:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b90:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b96:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000bae:	481c      	ldr	r0, [pc, #112]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000bb0:	f004 f85c 	bl	8004c6c <HAL_HalfDuplex_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000bc4:	f000 f920 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4815      	ldr	r0, [pc, #84]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000bcc:	f004 fe05 	bl	80057da <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8000be0:	f000 f912 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000be8:	f004 fe35 	bl	8005856 <HAL_UARTEx_SetRxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8000bfc:	f000 f904 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c02:	f004 fd76 	bl	80056f2 <HAL_UARTEx_EnableFifoMode>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf14      	ite	ne
 8000c0c:	2301      	movne	r3, #1
 8000c0e:	2300      	moveq	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8000c16:	f000 f8f7 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001f8 	.word	0x200001f8
 8000c24:	40013800 	.word	0x40013800
 8000c28:	000f4240 	.word	0x000f4240

08000c2c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c74:	481b      	ldr	r0, [pc, #108]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c76:	f003 ffa9 	bl	8004bcc <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000c8a:	f000 f8bd 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4814      	ldr	r0, [pc, #80]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c92:	f004 fda2 	bl	80057da <HAL_UARTEx_SetTxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bf14      	ite	ne
 8000c9c:	2301      	movne	r3, #1
 8000c9e:	2300      	moveq	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ca6:	f000 f8af 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cae:	f004 fdd2 	bl	8005856 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000cc2:	f000 f8a1 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cc8:	f004 fd4e 	bl	8005768 <HAL_UARTEx_DisableFifoMode>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000cdc:	f000 f894 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000028c 	.word	0x2000028c
 8000ce8:	40004400 	.word	0x40004400

08000cec <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf6:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <_ZL11MX_DMA_Initv+0x50>)
 8000d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	200b      	movs	r0, #11
 8000d28:	f001 fbdf 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d2c:	200b      	movs	r0, #11
 8000d2e:	f001 fbf6 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a29      	ldr	r2, [pc, #164]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a23      	ldr	r2, [pc, #140]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2192      	movs	r1, #146	@ 0x92
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f002 f8cd 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|STEP_LIFT_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f240 1141 	movw	r1, #321	@ 0x141
 8000d98:	481a      	ldr	r0, [pc, #104]	@ (8000e04 <_ZL12MX_GPIO_Initv+0xc4>)
 8000d9a:	f002 f8c7 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8000d9e:	2392      	movs	r3, #146	@ 0x92
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 ff36 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin STEP_LIFT_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|STEP_LIFT_Pin|LD2_Pin;
 8000dbc:	f240 1341 	movw	r3, #321	@ 0x141
 8000dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <_ZL12MX_GPIO_Initv+0xc4>)
 8000dd6:	f001 ff27 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df2:	f001 ff19 	bl	8002c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x44>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e4a:	f002 fa5d 	bl	8003308 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09a      	sub	sp, #104	@ 0x68
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2244      	movs	r2, #68	@ 0x44
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 fd77 	bl	8005970 <memset>
  if(hadc->Instance==ADC2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a33      	ldr	r2, [pc, #204]	@ (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d15f      	bne.n	8000f4c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 ff71 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ea8:	f7ff ffae 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000eb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000edc:	2301      	movs	r3, #1
 8000ede:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef2:	f001 fe99 	bl	8002c28 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000ef8:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <HAL_ADC_MspInit+0x104>)
 8000efa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000efe:	2224      	movs	r2, #36	@ 0x24
 8000f00:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f22:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f26:	2220      	movs	r2, #32
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f32:	f001 fb0f 	bl	8002554 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f3c:	f7ff ff64 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f44:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <HAL_ADC_MspInit+0x100>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3768      	adds	r7, #104	@ 0x68
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	50000100 	.word	0x50000100
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	40020008 	.word	0x40020008

08000f64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09a      	sub	sp, #104	@ 0x68
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2244      	movs	r2, #68	@ 0x44
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 fcf3 	bl	8005970 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a20      	ldr	r2, [pc, #128]	@ (8001010 <HAL_FDCAN_MspInit+0xac>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d139      	bne.n	8001008 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 feed 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000fb0:	f7ff ff2a 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb8:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_FDCAN_MspInit+0xb0>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fe4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fe8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f001 fe10 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3768      	adds	r7, #104	@ 0x68
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40006400 	.word	0x40006400
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09c      	sub	sp, #112	@ 0x70
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	2244      	movs	r2, #68	@ 0x44
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fc99 	bl	8005970 <memset>
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2d      	ldr	r2, [pc, #180]	@ (80010f8 <HAL_I2C_MspInit+0xe0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d153      	bne.n	80010f0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4618      	mov	r0, r3
 8001056:	f002 fe95 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001060:	f7ff fed2 	bl	8000e08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a24      	ldr	r2, [pc, #144]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	4a1e      	ldr	r2, [pc, #120]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f001 fdb8 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f001 fda8 	bl	8002c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 80010de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_I2C_MspInit+0xe4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3770      	adds	r7, #112	@ 0x70
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <HAL_TIM_Base_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201c      	movs	r0, #28
 8001134:	f001 f9d9 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f001 f9f0 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b09c      	sub	sp, #112	@ 0x70
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	2244      	movs	r2, #68	@ 0x44
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fbff 	bl	8005970 <memset>
  if(huart->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a3e      	ldr	r2, [pc, #248]	@ (8001270 <HAL_UART_MspInit+0x124>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d138      	bne.n	80011ee <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fdfb 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff fe38 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001198:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <HAL_UART_MspInit+0x128>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	4a35      	ldr	r2, [pc, #212]	@ (8001274 <HAL_UART_MspInit+0x128>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a4:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <HAL_UART_MspInit+0x128>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <HAL_UART_MspInit+0x128>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001274 <HAL_UART_MspInit+0x128>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <HAL_UART_MspInit+0x128>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011da:	2307      	movs	r3, #7
 80011dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e8:	f001 fd1e 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ec:	e03b      	b.n	8001266 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <HAL_UART_MspInit+0x12c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d136      	bne.n	8001266 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fdbd 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001210:	f7ff fdfa 	bl	8000e08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <HAL_UART_MspInit+0x128>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	4a16      	ldr	r2, [pc, #88]	@ (8001274 <HAL_UART_MspInit+0x128>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_UART_MspInit+0x128>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_UART_MspInit+0x128>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <HAL_UART_MspInit+0x128>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_UART_MspInit+0x128>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001254:	2307      	movs	r3, #7
 8001256:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001262:	f001 fce1 	bl	8002c28 <HAL_GPIO_Init>
}
 8001266:	bf00      	nop
 8001268:	3770      	adds	r7, #112	@ 0x70
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	40004400 	.word	0x40004400

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 f8a5 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA1_Channel1_IRQHandler+0x10>)
 80012e2:	f001 f9df 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000094 	.word	0x20000094

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f002 fff7 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001ac 	.word	0x200001ac

08001304 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 800132c:	f7ff ffea 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f004 fb13 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135a:	f7ff f9f5 	bl	8000748 <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   r0, =_estack
 8001360:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800136c:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8001370:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001374:	20000328 	.word	0x20000328

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>

0800137a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f001 f8a5 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f80e 	bl	80013ac <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e001      	b.n	80013a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139c:	f7ff fd3a 	bl	8000e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a0:	79fb      	ldrb	r3, [r7, #7]

}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_InitTick+0x68>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d022      	beq.n	8001406 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_InitTick+0x6c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_InitTick+0x68>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 f8b0 	bl	800253a <HAL_SYSTICK_Config>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d809      	bhi.n	80013fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e6:	2200      	movs	r2, #0
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013ee:	f001 f87c 	bl	80024ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <HAL_InitTick+0x70>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e007      	b.n	800140a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e004      	b.n	800140a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000008 	.word	0x20000008
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4413      	add	r3, r2
 800142e:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_IncTick+0x1c>)
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000324 	.word	0x20000324
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000324 	.word	0x20000324

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001474:	d004      	beq.n	8001480 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_Delay+0x40>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001480:	bf00      	nop
 8001482:	f7ff ffdf 	bl	8001444 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8f7      	bhi.n	8001482 <HAL_Delay+0x26>
  {
  }
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000008 	.word	0x20000008

080014a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3360      	adds	r3, #96	@ 0x60
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <LL_ADC_SetOffset+0x44>)
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	4313      	orrs	r3, r2
 8001538:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	03fff000 	.word	0x03fff000

08001550 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3360      	adds	r3, #96	@ 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3360      	adds	r3, #96	@ 0x60
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3360      	adds	r3, #96	@ 0x60
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3360      	adds	r3, #96	@ 0x60
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	615a      	str	r2, [r3, #20]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3330      	adds	r3, #48	@ 0x30
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	211f      	movs	r1, #31
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0e9b      	lsrs	r3, r3, #26
 800167c:	f003 011f 	and.w	r1, r3, #31
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3314      	adds	r3, #20
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0e5b      	lsrs	r3, r3, #25
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0d1b      	lsrs	r3, r3, #20
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2107      	movs	r1, #7
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	0d1b      	lsrs	r3, r3, #20
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	431a      	orrs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0318 	and.w	r3, r3, #24
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001718:	40d9      	lsrs	r1, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	400b      	ands	r3, r1
 800171e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	0007ffff 	.word	0x0007ffff

0800173c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800174c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6093      	str	r3, [r2, #8]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001798:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800179c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017c4:	d101      	bne.n	80017ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <LL_ADC_IsEnabled+0x18>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <LL_ADC_IsEnabled+0x1a>
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b04      	cmp	r3, #4
 8001810:	d101      	bne.n	8001816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b08      	cmp	r3, #8
 8001836:	d101      	bne.n	800183c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e167      	b.n	8001b36 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff faf1 	bl	8000e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff67 	bl	8001760 <LL_ADC_IsDeepPowerDownEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff4d 	bl	800173c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff82 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d115      	bne.n	80018de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff66 	bl	8001788 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001b40 <HAL_ADC_Init+0x2f4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	4aa0      	ldr	r2, [pc, #640]	@ (8001b44 <HAL_ADC_Init+0x2f8>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff64 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff75 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001914:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8100 	bne.w	8001b24 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80fc 	bne.w	8001b24 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001934:	f043 0202 	orr.w	r2, r3, #2
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff49 	bl	80017d8 <LL_ADC_IsEnabled>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800194c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001950:	f7ff ff42 	bl	80017d8 <LL_ADC_IsEnabled>
 8001954:	4604      	mov	r4, r0
 8001956:	487c      	ldr	r0, [pc, #496]	@ (8001b48 <HAL_ADC_Init+0x2fc>)
 8001958:	f7ff ff3e 	bl	80017d8 <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	4323      	orrs	r3, r4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4619      	mov	r1, r3
 800196a:	4878      	ldr	r0, [pc, #480]	@ (8001b4c <HAL_ADC_Init+0x300>)
 800196c:	f7ff fd98 	bl	80014a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7f5b      	ldrb	r3, [r3, #29]
 8001974:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001980:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001986:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800198e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800199a:	2b01      	cmp	r3, #1
 800199c:	d106      	bne.n	80019ac <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	3b01      	subs	r3, #1
 80019a4:	045b      	lsls	r3, r3, #17
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4b60      	ldr	r3, [pc, #384]	@ (8001b50 <HAL_ADC_Init+0x304>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	430b      	orrs	r3, r1
 80019da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff14 	bl	8001824 <LL_ADC_INJ_IsConversionOngoing>
 80019fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d16d      	bne.n	8001ae0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d16a      	bne.n	8001ae0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a0e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a26:	f023 0302 	bic.w	r3, r3, #2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6911      	ldr	r1, [r2, #16]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a6a:	e013      	b.n	8001a94 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a90:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d118      	bne.n	8001ad0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	e007      	b.n	8001ae0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d10c      	bne.n	8001b02 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f023 010f 	bic.w	r1, r3, #15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b00:	e007      	b.n	8001b12 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 020f 	bic.w	r2, r2, #15
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	@ 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000
 8001b44:	053e2d63 	.word	0x053e2d63
 8001b48:	50000100 	.word	0x50000100
 8001b4c:	50000300 	.word	0x50000300
 8001b50:	fff04007 	.word	0xfff04007

08001b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0b6      	sub	sp, #216	@ 0xd8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x22>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e3c8      	b.n	8002308 <HAL_ADC_ConfigChannel+0x7b4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe3b 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 83ad 	bne.w	80022ea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f7ff fd51 	bl	8001644 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe29 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001bac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe35 	bl	8001824 <LL_ADC_INJ_IsConversionOngoing>
 8001bba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 81d9 	bne.w	8001f7a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 81d4 	bne.w	8001f7a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bda:	d10f      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7ff fd58 	bl	800169c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fd12 	bl	800161e <LL_ADC_SetSamplingTimeCommonConfig>
 8001bfa:	e00e      	b.n	8001c1a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f7ff fd47 	bl	800169c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fd02 	bl	800161e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d022      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6919      	ldr	r1, [r3, #16]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c4c:	f7ff fc5c 	bl	8001508 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6919      	ldr	r1, [r3, #16]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f7ff fca8 	bl	80015b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x124>
 8001c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x126>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f7ff fcb4 	bl	80015e8 <LL_ADC_SetOffsetSaturation>
 8001c80:	e17b      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc61 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x15a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc56 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	e01e      	b.n	8001cec <HAL_ADC_ConfigChannel+0x198>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fc4b 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e004      	b.n	8001cea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1b0>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	e018      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1e2>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e004      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc1a 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fbfe 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x220>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fbf3 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 021f 	and.w	r2, r3, #31
 8001d72:	e01e      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x25e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fbe8 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e004      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x276>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	e018      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x2a8>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e004      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fbb7 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2102      	movs	r1, #2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fb9b 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x2e6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fb90 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	e01e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fb85 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x33c>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	e016      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x36a>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e004      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fb56 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fb3a 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x3a8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2103      	movs	r1, #3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb2f 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 021f 	and.w	r2, r3, #31
 8001efa:	e017      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x3d8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2103      	movs	r1, #3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fb24 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f16:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3f0>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	e011      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x414>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2103      	movs	r1, #3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb01 	bl	800157c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc2a 	bl	80017d8 <LL_ADC_IsEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8140 	bne.w	800220c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f7ff fbab 	bl	80016f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4a8f      	ldr	r2, [pc, #572]	@ (80021e0 <HAL_ADC_ConfigChannel+0x68c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	f040 8131 	bne.w	800220c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x47e>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	bf94      	ite	ls
 8001fca:	2301      	movls	r3, #1
 8001fcc:	2300      	movhi	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	e019      	b.n	8002006 <HAL_ADC_ConfigChannel+0x4b2>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001fea:	2320      	movs	r3, #32
 8001fec:	e003      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002006:	2b00      	cmp	r3, #0
 8002008:	d079      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x4d2>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0e9b      	lsrs	r3, r3, #26
 800201c:	3301      	adds	r3, #1
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002024:	e015      	b.n	8002052 <HAL_ADC_ConfigChannel+0x4fe>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002036:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e003      	b.n	800204a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	069b      	lsls	r3, r3, #26
 800204e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x51e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	3301      	adds	r3, #1
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	e017      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x54e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800208a:	2320      	movs	r3, #32
 800208c:	e003      	b.n	8002096 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800208e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	ea42 0103 	orr.w	r1, r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x574>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	051b      	lsls	r3, r3, #20
 80020c6:	e018      	b.n	80020fa <HAL_ADC_ConfigChannel+0x5a6>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80020da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80020e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 021f 	and.w	r2, r3, #31
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fa:	430b      	orrs	r3, r1
 80020fc:	e081      	b.n	8002202 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_ADC_ConfigChannel+0x5c6>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	3301      	adds	r3, #1
 8002112:	069b      	lsls	r3, r3, #26
 8002114:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002118:	e015      	b.n	8002146 <HAL_ADC_ConfigChannel+0x5f2>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e003      	b.n	800213e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	069b      	lsls	r3, r3, #26
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x612>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	3301      	adds	r3, #1
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	e017      	b.n	8002196 <HAL_ADC_ConfigChannel+0x642>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	61fb      	str	r3, [r7, #28]
  return result;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	ea42 0103 	orr.w	r1, r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x66e>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	3301      	adds	r3, #1
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	3b1e      	subs	r3, #30
 80021ba:	051b      	lsls	r3, r3, #20
 80021bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	e01e      	b.n	8002200 <HAL_ADC_ConfigChannel+0x6ac>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	613b      	str	r3, [r7, #16]
  return result;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d104      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e006      	b.n	80021ec <HAL_ADC_ConfigChannel+0x698>
 80021de:	bf00      	nop
 80021e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	3b1e      	subs	r3, #30
 80021fa:	051b      	lsls	r3, r3, #20
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002200:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	4619      	mov	r1, r3
 8002208:	f7ff fa48 	bl	800169c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <HAL_ADC_ConfigChannel+0x7bc>)
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d071      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002218:	483e      	ldr	r0, [pc, #248]	@ (8002314 <HAL_ADC_ConfigChannel+0x7c0>)
 800221a:	f7ff f967 	bl	80014ec <LL_ADC_GetCommonPathInternalCh>
 800221e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a3c      	ldr	r2, [pc, #240]	@ (8002318 <HAL_ADC_ConfigChannel+0x7c4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_ADC_ConfigChannel+0x6e2>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3a      	ldr	r2, [pc, #232]	@ (800231c <HAL_ADC_ConfigChannel+0x7c8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d127      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d121      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800224a:	d157      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800224c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002254:	4619      	mov	r1, r3
 8002256:	482f      	ldr	r0, [pc, #188]	@ (8002314 <HAL_ADC_ConfigChannel+0x7c0>)
 8002258:	f7ff f935 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_ADC_ConfigChannel+0x7cc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	4a30      	ldr	r2, [pc, #192]	@ (8002324 <HAL_ADC_ConfigChannel+0x7d0>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002276:	e002      	b.n	800227e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3b01      	subs	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002284:	e03a      	b.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_ADC_ConfigChannel+0x7d4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d113      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a22      	ldr	r2, [pc, #136]	@ (800232c <HAL_ADC_ConfigChannel+0x7d8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02a      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	4619      	mov	r1, r3
 80022b0:	4818      	ldr	r0, [pc, #96]	@ (8002314 <HAL_ADC_ConfigChannel+0x7c0>)
 80022b2:	f7ff f908 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022b6:	e021      	b.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_ADC_ConfigChannel+0x7dc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11c      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	@ (800232c <HAL_ADC_ConfigChannel+0x7d8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d011      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e0:	4619      	mov	r1, r3
 80022e2:	480c      	ldr	r0, [pc, #48]	@ (8002314 <HAL_ADC_ConfigChannel+0x7c0>)
 80022e4:	f7ff f8ef 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
 80022e8:	e008      	b.n	80022fc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002304:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002308:	4618      	mov	r0, r3
 800230a:	37d8      	adds	r7, #216	@ 0xd8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	80080000 	.word	0x80080000
 8002314:	50000300 	.word	0x50000300
 8002318:	c3210000 	.word	0xc3210000
 800231c:	90c00010 	.word	0x90c00010
 8002320:	20000000 	.word	0x20000000
 8002324:	053e2d63 	.word	0x053e2d63
 8002328:	c7520000 	.word	0xc7520000
 800232c:	50000100 	.word	0x50000100
 8002330:	cb840000 	.word	0xcb840000

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	@ (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	@ (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff29 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff40 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff33 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa4 	bl	8002490 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08d      	b.n	8002682 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b47      	ldr	r3, [pc, #284]	@ (800268c <HAL_DMA_Init+0x138>)
 800256e:	429a      	cmp	r2, r3
 8002570:	d80f      	bhi.n	8002592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_DMA_Init+0x13c>)
 800257a:	4413      	add	r3, r2
 800257c:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <HAL_DMA_Init+0x140>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a42      	ldr	r2, [pc, #264]	@ (8002698 <HAL_DMA_Init+0x144>)
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002590:	e00e      	b.n	80025b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b40      	ldr	r3, [pc, #256]	@ (800269c <HAL_DMA_Init+0x148>)
 800259a:	4413      	add	r3, r2
 800259c:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <HAL_DMA_Init+0x140>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a3c      	ldr	r2, [pc, #240]	@ (80026a0 <HAL_DMA_Init+0x14c>)
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8fe 	bl	8002804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002610:	d102      	bne.n	8002618 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800262c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d010      	beq.n	8002658 <HAL_DMA_Init+0x104>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d80c      	bhi.n	8002658 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f91e 	bl	8002880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	e008      	b.n	800266a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020407 	.word	0x40020407
 8002690:	bffdfff8 	.word	0xbffdfff8
 8002694:	cccccccd 	.word	0xcccccccd
 8002698:	40020000 	.word	0x40020000
 800269c:	bffdfbf8 	.word	0xbffdfbf8
 80026a0:	40020400 	.word	0x40020400

080026a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d026      	beq.n	800271e <HAL_DMA_IRQHandler+0x7a>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d021      	beq.n	800271e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2104      	movs	r1, #4
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	2b00      	cmp	r3, #0
 8002712:	d071      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800271c:	e06c      	b.n	80027f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2202      	movs	r2, #2
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d02e      	beq.n	8002790 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d029      	beq.n	8002790 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020a 	bic.w	r2, r2, #10
 8002758:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2102      	movs	r1, #2
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d038      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800278e:	e033      	b.n	80027f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2208      	movs	r2, #8
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02a      	beq.n	80027fa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d025      	beq.n	80027fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 020e 	bic.w	r2, r2, #14
 80027bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
}
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d802      	bhi.n	800281e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e001      	b.n	8002822 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002820:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3b08      	subs	r3, #8
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0b      	ldr	r2, [pc, #44]	@ (800287c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800284e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40020407 	.word	0x40020407
 8002870:	40020800 	.word	0x40020800
 8002874:	40020820 	.word	0x40020820
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	40020880 	.word	0x40020880

08002880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	1000823f 	.word	0x1000823f
 80028c4:	40020940 	.word	0x40020940

080028c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e147      	b.n	8002b6a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fb38 	bl	8000f64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0210 	bic.w	r2, r2, #16
 8002902:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002904:	f7fe fd9e 	bl	8001444 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800290a:	e012      	b.n	8002932 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800290c:	f7fe fd9a 	bl	8001444 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b0a      	cmp	r3, #10
 8002918:	d90b      	bls.n	8002932 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2203      	movs	r2, #3
 800292a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e11b      	b.n	8002b6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b08      	cmp	r3, #8
 800293e:	d0e5      	beq.n	800290c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7fe fd78 	bl	8001444 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002956:	e012      	b.n	800297e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002958:	f7fe fd74 	bl	8001444 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b0a      	cmp	r3, #10
 8002964:	d90b      	bls.n	800297e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0f5      	b.n	8002b6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0e5      	beq.n	8002958 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0202 	orr.w	r2, r2, #2
 800299a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a74      	ldr	r2, [pc, #464]	@ (8002b74 <HAL_FDCAN_Init+0x2ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d103      	bne.n	80029ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80029a6:	4a74      	ldr	r2, [pc, #464]	@ (8002b78 <HAL_FDCAN_Init+0x2b0>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7c1b      	ldrb	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029c4:	619a      	str	r2, [r3, #24]
 80029c6:	e007      	b.n	80029d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7c5b      	ldrb	r3, [r3, #17]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	e007      	b.n	8002a02 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a00:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7c9b      	ldrb	r3, [r3, #18]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e007      	b.n	8002a2c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a2a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002a50:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0204 	orr.w	r2, r2, #4
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e02c      	b.n	8002ad6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d028      	beq.n	8002ad6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a9a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0210 	orr.w	r2, r2, #16
 8002aaa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d110      	bne.n	8002ad6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0220 	orr.w	r2, r2, #32
 8002ac2:	619a      	str	r2, [r3, #24]
 8002ac4:	e007      	b.n	8002ad6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0220 	orr.w	r2, r2, #32
 8002ad4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ae6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002aee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002afe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b00:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b0a:	d115      	bne.n	8002b38 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	3b01      	subs	r3, #1
 8002b18:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b1a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	3b01      	subs	r3, #1
 8002b22:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b34:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b36:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f814 	bl	8002b7c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40006400 	.word	0x40006400
 8002b78:	40006500 	.word	0x40006500

08002b7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b86:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b96:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	041a      	lsls	r2, r3, #16
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc4:	061a      	lsls	r2, r3, #24
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e005      	b.n	8002c0a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d3f3      	bcc.n	8002bfe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	4000a400 	.word	0x4000a400

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c36:	e15a      	b.n	8002eee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 814c 	beq.w	8002ee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d005      	beq.n	8002c68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d017      	beq.n	8002d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d123      	bne.n	8002d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a6 	beq.w	8002ee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da8:	4b58      	ldr	r3, [pc, #352]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db4:	4a56      	ldr	r2, [pc, #344]	@ (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dde:	d01f      	beq.n	8002e20 <HAL_GPIO_Init+0x1f8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_GPIO_Init+0x2ec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d019      	beq.n	8002e1c <HAL_GPIO_Init+0x1f4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4b      	ldr	r2, [pc, #300]	@ (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_GPIO_Init+0x1f0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x2f4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00d      	beq.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a49      	ldr	r2, [pc, #292]	@ (8002f20 <HAL_GPIO_Init+0x2f8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_GPIO_Init+0x1e8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a48      	ldr	r2, [pc, #288]	@ (8002f24 <HAL_GPIO_Init+0x2fc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_GPIO_Init+0x1e4>
 8002e08:	2305      	movs	r3, #5
 8002e0a:	e00a      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	e008      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e006      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e14:	2303      	movs	r3, #3
 8002e16:	e004      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e002      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e20:	2300      	movs	r3, #0
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	f002 0203 	and.w	r2, r2, #3
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	4093      	lsls	r3, r2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e32:	4937      	ldr	r1, [pc, #220]	@ (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e40:	4b39      	ldr	r3, [pc, #228]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e64:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8e:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee2:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f ae9d 	bne.w	8002c38 <HAL_GPIO_Init+0x10>
  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	48000400 	.word	0x48000400
 8002f18:	48000800 	.word	0x48000800
 8002f1c:	48000c00 	.word	0x48000c00
 8002f20:	48001000 	.word	0x48001000
 8002f24:	48001400 	.word	0x48001400
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e08d      	b.n	800308a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe f848 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	@ 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e006      	b.n	8002fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d108      	bne.n	8002ffe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	e007      	b.n	800300e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800301c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d138      	bne.n	800311a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e032      	b.n	800311c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	@ 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	d139      	bne.n	80031b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003148:	2302      	movs	r3, #2
 800314a:	e033      	b.n	80031b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800317a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d141      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ce:	4b4b      	ldr	r3, [pc, #300]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	d131      	bne.n	8003240 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e2:	4a46      	ldr	r2, [pc, #280]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031f4:	4a41      	ldr	r2, [pc, #260]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fc:	4b40      	ldr	r3, [pc, #256]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2232      	movs	r2, #50	@ 0x32
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	4a3f      	ldr	r2, [pc, #252]	@ (8003304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	0c9b      	lsrs	r3, r3, #18
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	e002      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321a:	4b38      	ldr	r3, [pc, #224]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d102      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322e:	4b33      	ldr	r3, [pc, #204]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323a:	d158      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e057      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003240:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003246:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800324c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003250:	e04d      	b.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003258:	d141      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b28      	ldr	r3, [pc, #160]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003266:	d131      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326e:	4a23      	ldr	r2, [pc, #140]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003280:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2232      	movs	r2, #50	@ 0x32
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	e002      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d102      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d112      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e011      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032dc:	e007      	b.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e6:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40007000 	.word	0x40007000
 8003300:	20000000 	.word	0x20000000
 8003304:	431bde83 	.word	0x431bde83

08003308 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003316:	6093      	str	r3, [r2, #8]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e2fe      	b.n	8003938 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d075      	beq.n	8003432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4b97      	ldr	r3, [pc, #604]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4b94      	ldr	r3, [pc, #592]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0x3e>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d002      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b8d      	ldr	r3, [pc, #564]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x108>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e2d9      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x74>
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a84      	ldr	r2, [pc, #528]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b7c      	ldr	r3, [pc, #496]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7b      	ldr	r2, [pc, #492]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 80033c0:	4b78      	ldr	r3, [pc, #480]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a77      	ldr	r2, [pc, #476]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b75      	ldr	r3, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a74      	ldr	r2, [pc, #464]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe f830 	bl	8001444 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe f82c 	bl	8001444 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e29e      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fa:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xc0>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f81c 	bl	8001444 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe f818 	bl	8001444 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e28a      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003422:	4b60      	ldr	r3, [pc, #384]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0xe8>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d075      	beq.n	800352a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343e:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003448:	4b56      	ldr	r3, [pc, #344]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d102      	bne.n	800345e <HAL_RCC_OscConfig+0x136>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d002      	beq.n	8003464 <HAL_RCC_OscConfig+0x13c>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11f      	bne.n	80034a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003464:	4b4f      	ldr	r3, [pc, #316]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x154>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e25d      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	4946      	ldr	r1, [pc, #280]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003490:	4b45      	ldr	r3, [pc, #276]	@ (80035a8 <HAL_RCC_OscConfig+0x280>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd ff89 	bl	80013ac <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e249      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b3d      	ldr	r3, [pc, #244]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3c      	ldr	r2, [pc, #240]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd ffc4 	bl	8001444 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fd ffc0 	bl	8001444 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e232      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	061b      	lsls	r3, r3, #24
 80034ec:	492d      	ldr	r1, [pc, #180]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd ffa0 	bl	8001444 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fd ff9c 	bl	8001444 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e20e      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1e0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d041      	beq.n	80035ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01c      	beq.n	8003578 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b19      	ldr	r3, [pc, #100]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003544:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fd ff79 	bl	8001444 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fd ff75 	bl	8001444 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1e7      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <HAL_RCC_OscConfig+0x22e>
 8003576:	e020      	b.n	80035ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357e:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd ff5c 	bl	8001444 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358e:	e00d      	b.n	80035ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd ff58 	bl	8001444 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d906      	bls.n	80035ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1ca      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ac:	4b8c      	ldr	r3, [pc, #560]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ea      	bne.n	8003590 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035cc:	4b84      	ldr	r3, [pc, #528]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_OscConfig+0x2b4>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x2b6>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ee:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	4b79      	ldr	r3, [pc, #484]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360a:	4b76      	ldr	r3, [pc, #472]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fd ff15 	bl	8001444 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fd ff11 	bl	8001444 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e183      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003630:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <HAL_RCC_OscConfig+0x32e>
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003654:	e024      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d110      	bne.n	8003680 <HAL_RCC_OscConfig+0x358>
 800365e:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	4a5e      	ldr	r2, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800367e:	e00f      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fecc 	bl	8001444 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fd fec8 	bl	8001444 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e138      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	4b46      	ldr	r3, [pc, #280]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ed      	beq.n	80036b0 <HAL_RCC_OscConfig+0x388>
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd feb5 	bl	8001444 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd feb1 	bl	8001444 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e121      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ed      	bne.n	80036de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003728:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800372e:	4a2c      	ldr	r2, [pc, #176]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd fe84 	bl	8001444 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003740:	f7fd fe80 	bl	8001444 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0f2      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003752:	4b23      	ldr	r3, [pc, #140]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCC_OscConfig+0x418>
 8003760:	e01b      	b.n	800379a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003762:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003768:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fe67 	bl	8001444 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800377a:	f7fd fe63 	bl	8001444 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0d5      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ef      	bne.n	800377a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80c9 	beq.w	8003936 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a4:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	f000 8083 	beq.w	80038b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d15e      	bne.n	8003878 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fd fe3d 	bl	8001444 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e00c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fd fe39 	bl	8001444 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d905      	bls.n	80037e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0ab      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	4b55      	ldr	r3, [pc, #340]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ec      	bne.n	80037ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b52      	ldr	r3, [pc, #328]	@ (8003944 <HAL_RCC_OscConfig+0x61c>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6a11      	ldr	r1, [r2, #32]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003804:	3a01      	subs	r2, #1
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800380e:	0212      	lsls	r2, r2, #8
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0552      	lsls	r2, r2, #21
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003822:	0852      	lsrs	r2, r2, #1
 8003824:	3a01      	subs	r2, #1
 8003826:	0652      	lsls	r2, r2, #25
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800382e:	06d2      	lsls	r2, r2, #27
 8003830:	430a      	orrs	r2, r1
 8003832:	4943      	ldr	r1, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a40      	ldr	r2, [pc, #256]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003844:	4b3e      	ldr	r3, [pc, #248]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a3d      	ldr	r2, [pc, #244]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fdf8 	bl	8001444 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fdf4 	bl	8001444 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e066      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x530>
 8003876:	e05e      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003878:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a30      	ldr	r2, [pc, #192]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fdde 	bl	8001444 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fd fdda 	bl	8001444 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04c      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389e:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038aa:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	4924      	ldr	r1, [pc, #144]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCC_OscConfig+0x620>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
 80038b6:	e03e      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e039      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d12c      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	3b01      	subs	r3, #1
 80038e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d123      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11b      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d113      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d109      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	019f800c 	.word	0x019f800c
 8003948:	feeefffc 	.word	0xfeeefffc

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e11e      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b91      	ldr	r3, [pc, #580]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b8e      	ldr	r3, [pc, #568]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 020f 	bic.w	r2, r3, #15
 800397a:	498c      	ldr	r1, [pc, #560]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b8a      	ldr	r3, [pc, #552]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e106      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d073      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d129      	bne.n	80039fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a8:	4b81      	ldr	r3, [pc, #516]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0f4      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039b8:	f000 f99e 	bl	8003cf8 <RCC_GetSysClockFreqFromPLLSource>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb4 <HAL_RCC_ClockConfig+0x268>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d93f      	bls.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d033      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d12f      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039e6:	4b72      	ldr	r3, [pc, #456]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ee:	4a70      	ldr	r2, [pc, #448]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e024      	b.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a04:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0c6      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a14:	4b66      	ldr	r3, [pc, #408]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0be      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a24:	f000 f8ce 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4a61      	ldr	r2, [pc, #388]	@ (8003bb4 <HAL_RCC_ClockConfig+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d909      	bls.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a32:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4957      	ldr	r1, [pc, #348]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a58:	f7fd fcf4 	bl	8001444 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd fcf0 	bl	8001444 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e095      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aaa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4936      	ldr	r1, [pc, #216]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
 8003ada:	e008      	b.n	8003aee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ae2:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aee:	4b2f      	ldr	r3, [pc, #188]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d21d      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 020f 	bic.w	r2, r3, #15
 8003b04:	4929      	ldr	r1, [pc, #164]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fc9a 	bl	8001444 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fd fc96 	bl	8001444 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e03b      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1ed      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4917      	ldr	r1, [pc, #92]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490f      	ldr	r1, [pc, #60]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b76:	f000 f825 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <HAL_RCC_ClockConfig+0x26c>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <HAL_RCC_ClockConfig+0x270>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_ClockConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fc06 	bl	80013ac <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	04c4b400 	.word	0x04c4b400
 8003bb8:	080059e0 	.word	0x080059e0
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bca:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e047      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be8:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e03e      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d136      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c18:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	68d2      	ldr	r2, [r2, #12]
 8003c24:	0a12      	lsrs	r2, r2, #8
 8003c26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e00c      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4a10      	ldr	r2, [pc, #64]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	0a12      	lsrs	r2, r2, #8
 8003c40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
      break;
 8003c4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0e5b      	lsrs	r3, r3, #25
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e001      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c6c:	693b      	ldr	r3, [r7, #16]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000000 	.word	0x20000000

08003ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ca4:	f7ff fff0 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4904      	ldr	r1, [pc, #16]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	080059f0 	.word	0x080059f0

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cd0:	f7ff ffda 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0adb      	lsrs	r3, r3, #11
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	080059f0 	.word	0x080059f0

08003cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d10c      	bne.n	8003d36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1c:	4a17      	ldr	r2, [pc, #92]	@ (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d26:	68d2      	ldr	r2, [r2, #12]
 8003d28:	0a12      	lsrs	r2, r2, #8
 8003d2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
    break;
 8003d34:	e00c      	b.n	8003d50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	0a12      	lsrs	r2, r2, #8
 8003d44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]
    break;
 8003d4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0e5b      	lsrs	r3, r3, #25
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d6a:	687b      	ldr	r3, [r7, #4]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	007a1200 	.word	0x007a1200
 8003d80:	00f42400 	.word	0x00f42400

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d90:	2300      	movs	r3, #0
 8003d92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8098 	beq.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dce:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dda:	f7fd fb33 	bl	8001444 <HAL_GetTick>
 8003dde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de0:	e009      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fd fb2f 	bl	8001444 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d902      	bls.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	74fb      	strb	r3, [r7, #19]
        break;
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df6:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0ef      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d159      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d019      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e30:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e40:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fd faef 	bl	8001444 <HAL_GetTick>
 8003e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e68:	e00b      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fd faeb 	bl	8001444 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d902      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e80:	e006      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ec      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	4903      	ldr	r1, [pc, #12]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eac:	e008      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	74bb      	strb	r3, [r7, #18]
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec0:	7c7b      	ldrb	r3, [r7, #17]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4ba6      	ldr	r3, [pc, #664]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4aa5      	ldr	r2, [pc, #660]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ede:	4ba0      	ldr	r3, [pc, #640]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	499c      	ldr	r1, [pc, #624]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f00:	4b97      	ldr	r3, [pc, #604]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 020c 	bic.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4994      	ldr	r1, [pc, #592]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f22:	4b8f      	ldr	r3, [pc, #572]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	498b      	ldr	r1, [pc, #556]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f44:	4b86      	ldr	r3, [pc, #536]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4983      	ldr	r1, [pc, #524]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f66:	4b7e      	ldr	r3, [pc, #504]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	497a      	ldr	r1, [pc, #488]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f88:	4b75      	ldr	r3, [pc, #468]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	4972      	ldr	r1, [pc, #456]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003faa:	4b6d      	ldr	r3, [pc, #436]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4969      	ldr	r1, [pc, #420]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fcc:	4b64      	ldr	r3, [pc, #400]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4961      	ldr	r1, [pc, #388]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b5c      	ldr	r3, [pc, #368]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	4958      	ldr	r1, [pc, #352]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	4950      	ldr	r1, [pc, #320]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402e:	d105      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a4a      	ldr	r2, [pc, #296]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4942      	ldr	r1, [pc, #264]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a3c      	ldr	r2, [pc, #240]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004080:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	4934      	ldr	r1, [pc, #208]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409e:	d105      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b8:	4b29      	ldr	r3, [pc, #164]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c6:	4926      	ldr	r1, [pc, #152]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a20      	ldr	r2, [pc, #128]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	4918      	ldr	r1, [pc, #96]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b13      	ldr	r3, [pc, #76]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a12      	ldr	r2, [pc, #72]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	490a      	ldr	r1, [pc, #40]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004146:	d105      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004154:	7cbb      	ldrb	r3, [r7, #18]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000

08004164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e049      	b.n	800420a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc ffba 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f000 fb12 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e04a      	b.n	80042c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a21      	ldr	r2, [pc, #132]	@ (80042d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d018      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x6c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004256:	d013      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x6c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1d      	ldr	r2, [pc, #116]	@ (80042d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x6c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1c      	ldr	r2, [pc, #112]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x6c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <HAL_TIM_Base_Start_IT+0xc8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d115      	bne.n	80042ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b06      	cmp	r3, #6
 8004290:	d015      	beq.n	80042be <HAL_TIM_Base_Start_IT+0xaa>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d011      	beq.n	80042be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	e008      	b.n	80042be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0202 	mvn.w	r2, #2
 800431c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa2c 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa1e 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa2f 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa06 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9f8 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa09 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0208 	mvn.w	r2, #8
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2204      	movs	r2, #4
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9e0 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9d2 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f9e3 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2208      	movs	r2, #8
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9ba 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9ac 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f9bd 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc f85a 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00c      	beq.n	8004482 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800447a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb69 	bl	8004b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800449e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb61 	bl	8004b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f977 	bl	80047b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0220 	mvn.w	r2, #32
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb29 	bl	8004b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00c      	beq.n	8004512 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fb35 	bl	8004b7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00c      	beq.n	8004536 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800452e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb2d 	bl	8004b90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb25 	bl	8004ba4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb1d 	bl	8004bb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_ConfigClockSource+0x1c>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0de      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x1da>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80045c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a63      	ldr	r2, [pc, #396]	@ (800476c <HAL_TIM_ConfigClockSource+0x1e4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f000 80a9 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 80045e4:	4a61      	ldr	r2, [pc, #388]	@ (800476c <HAL_TIM_ConfigClockSource+0x1e4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f200 80ae 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 80045ec:	4a60      	ldr	r2, [pc, #384]	@ (8004770 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f000 80a1 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 80045f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004770 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f200 80a6 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 80045fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004774 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f000 8099 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 8004604:	4a5b      	ldr	r2, [pc, #364]	@ (8004774 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f200 809e 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 800460c:	4a5a      	ldr	r2, [pc, #360]	@ (8004778 <HAL_TIM_ConfigClockSource+0x1f0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f000 8091 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 8004614:	4a58      	ldr	r2, [pc, #352]	@ (8004778 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f200 8096 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 800461c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004620:	f000 8089 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 8004624:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004628:	f200 808e 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004630:	d03e      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x128>
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004636:	f200 8087 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463e:	f000 8086 	beq.w	800474e <HAL_TIM_ConfigClockSource+0x1c6>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004646:	d87f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004648:	2b70      	cmp	r3, #112	@ 0x70
 800464a:	d01a      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xfa>
 800464c:	2b70      	cmp	r3, #112	@ 0x70
 800464e:	d87b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004650:	2b60      	cmp	r3, #96	@ 0x60
 8004652:	d050      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x16e>
 8004654:	2b60      	cmp	r3, #96	@ 0x60
 8004656:	d877      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004658:	2b50      	cmp	r3, #80	@ 0x50
 800465a:	d03c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x14e>
 800465c:	2b50      	cmp	r3, #80	@ 0x50
 800465e:	d873      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	d058      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x18e>
 8004664:	2b40      	cmp	r3, #64	@ 0x40
 8004666:	d86f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004668:	2b30      	cmp	r3, #48	@ 0x30
 800466a:	d064      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 800466c:	2b30      	cmp	r3, #48	@ 0x30
 800466e:	d86b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004670:	2b20      	cmp	r3, #32
 8004672:	d060      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d867      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 800467c:	2b10      	cmp	r3, #16
 800467e:	d05a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1ae>
 8004680:	e062      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	f000 f9b3 	bl	80049fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	609a      	str	r2, [r3, #8]
      break;
 80046ae:	e04f      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	f000 f99c 	bl	80049fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e03c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f90e 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2150      	movs	r1, #80	@ 0x50
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f967 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 80046f4:	e02c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f92d 	bl	8004962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2160      	movs	r1, #96	@ 0x60
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f957 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004714:	e01c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8ee 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2140      	movs	r1, #64	@ 0x40
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f947 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004734:	e00c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f000 f93e 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004746:	e003      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      break;
 800474c:	e000      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800474e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	00100070 	.word	0x00100070
 8004770:	00100040 	.word	0x00100040
 8004774:	00100030 	.word	0x00100030
 8004778:	00100020 	.word	0x00100020

0800477c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a42      	ldr	r2, [pc, #264]	@ (80048e8 <TIM_Base_SetConfig+0x11c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3f      	ldr	r2, [pc, #252]	@ (80048ec <TIM_Base_SetConfig+0x120>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	@ (80048f0 <TIM_Base_SetConfig+0x124>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3d      	ldr	r2, [pc, #244]	@ (80048f4 <TIM_Base_SetConfig+0x128>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <TIM_Base_SetConfig+0x11c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01b      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d017      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a30      	ldr	r2, [pc, #192]	@ (80048ec <TIM_Base_SetConfig+0x120>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <TIM_Base_SetConfig+0x124>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <TIM_Base_SetConfig+0x128>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2d      	ldr	r2, [pc, #180]	@ (80048f8 <TIM_Base_SetConfig+0x12c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2c      	ldr	r2, [pc, #176]	@ (80048fc <TIM_Base_SetConfig+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2b      	ldr	r2, [pc, #172]	@ (8004900 <TIM_Base_SetConfig+0x134>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a16      	ldr	r2, [pc, #88]	@ (80048e8 <TIM_Base_SetConfig+0x11c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00f      	beq.n	80048b4 <TIM_Base_SetConfig+0xe8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <TIM_Base_SetConfig+0x128>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_Base_SetConfig+0xe8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_Base_SetConfig+0xe8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <TIM_Base_SetConfig+0x130>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0xe8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a14      	ldr	r2, [pc, #80]	@ (8004900 <TIM_Base_SetConfig+0x134>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40013400 	.word	0x40013400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f023 0210 	bic.w	r2, r3, #16
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800498c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	031b      	lsls	r3, r3, #12
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800499e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f043 0307 	orr.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e065      	b.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d013      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e042      	b.n	8004c64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc faab 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2224      	movs	r2, #36	@ 0x24
 8004bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb4c 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f87d 	bl	8004d1c <UART_SetConfig>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e01b      	b.n	8004c64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fbcb 	bl	80053f8 <UART_CheckIdleState>
 8004c62:	4603      	mov	r3, r0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e04a      	b.n	8004d14 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fa5b 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	@ 0x24
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fafc 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f82d 	bl	8004d1c <UART_SetConfig>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e023      	b.n	8004d14 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004cea:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb73 	bl	80053f8 <UART_CheckIdleState>
 8004d12:	4603      	mov	r3, r0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d20:	b08c      	sub	sp, #48	@ 0x30
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4bab      	ldr	r3, [pc, #684]	@ (8004ff8 <UART_SetConfig+0x2dc>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4aa0      	ldr	r2, [pc, #640]	@ (8004ffc <UART_SetConfig+0x2e0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d84:	4313      	orrs	r3, r2
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	f023 010f 	bic.w	r1, r3, #15
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a91      	ldr	r2, [pc, #580]	@ (8005000 <UART_SetConfig+0x2e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d125      	bne.n	8004e0c <UART_SetConfig+0xf0>
 8004dc0:	4b90      	ldr	r3, [pc, #576]	@ (8005004 <UART_SetConfig+0x2e8>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d81a      	bhi.n	8004e04 <UART_SetConfig+0xe8>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <UART_SetConfig+0xb8>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dea:	e0d6      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df2:	e0d2      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfa:	e0ce      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e02:	e0ca      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0a:	e0c6      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7d      	ldr	r2, [pc, #500]	@ (8005008 <UART_SetConfig+0x2ec>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d138      	bne.n	8004e88 <UART_SetConfig+0x16c>
 8004e16:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <UART_SetConfig+0x2e8>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d82d      	bhi.n	8004e80 <UART_SetConfig+0x164>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <UART_SetConfig+0x110>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e81 	.word	0x08004e81
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004e81 	.word	0x08004e81
 8004e48:	08004e81 	.word	0x08004e81
 8004e4c:	08004e69 	.word	0x08004e69
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	e098      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6e:	e094      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e70:	2304      	movs	r3, #4
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e76:	e090      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7e:	e08c      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e088      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800500c <UART_SetConfig+0x2f0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d125      	bne.n	8004ede <UART_SetConfig+0x1c2>
 8004e92:	4b5c      	ldr	r3, [pc, #368]	@ (8005004 <UART_SetConfig+0x2e8>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e9c:	2b30      	cmp	r3, #48	@ 0x30
 8004e9e:	d016      	beq.n	8004ece <UART_SetConfig+0x1b2>
 8004ea0:	2b30      	cmp	r3, #48	@ 0x30
 8004ea2:	d818      	bhi.n	8004ed6 <UART_SetConfig+0x1ba>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d00a      	beq.n	8004ebe <UART_SetConfig+0x1a2>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d814      	bhi.n	8004ed6 <UART_SetConfig+0x1ba>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <UART_SetConfig+0x19a>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d008      	beq.n	8004ec6 <UART_SetConfig+0x1aa>
 8004eb4:	e00f      	b.n	8004ed6 <UART_SetConfig+0x1ba>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ebc:	e06d      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec4:	e069      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ecc:	e065      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004ece:	2308      	movs	r3, #8
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed4:	e061      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004edc:	e05d      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8005010 <UART_SetConfig+0x2f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d125      	bne.n	8004f34 <UART_SetConfig+0x218>
 8004ee8:	4b46      	ldr	r3, [pc, #280]	@ (8005004 <UART_SetConfig+0x2e8>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef4:	d016      	beq.n	8004f24 <UART_SetConfig+0x208>
 8004ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef8:	d818      	bhi.n	8004f2c <UART_SetConfig+0x210>
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d00a      	beq.n	8004f14 <UART_SetConfig+0x1f8>
 8004efe:	2b80      	cmp	r3, #128	@ 0x80
 8004f00:	d814      	bhi.n	8004f2c <UART_SetConfig+0x210>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <UART_SetConfig+0x1f0>
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d008      	beq.n	8004f1c <UART_SetConfig+0x200>
 8004f0a:	e00f      	b.n	8004f2c <UART_SetConfig+0x210>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e042      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e03e      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e03a      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e036      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e032      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a30      	ldr	r2, [pc, #192]	@ (8004ffc <UART_SetConfig+0x2e0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d12a      	bne.n	8004f94 <UART_SetConfig+0x278>
 8004f3e:	4b31      	ldr	r3, [pc, #196]	@ (8005004 <UART_SetConfig+0x2e8>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f4c:	d01a      	beq.n	8004f84 <UART_SetConfig+0x268>
 8004f4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f52:	d81b      	bhi.n	8004f8c <UART_SetConfig+0x270>
 8004f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f58:	d00c      	beq.n	8004f74 <UART_SetConfig+0x258>
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f5e:	d815      	bhi.n	8004f8c <UART_SetConfig+0x270>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <UART_SetConfig+0x250>
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d008      	beq.n	8004f7c <UART_SetConfig+0x260>
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x270>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e012      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e00e      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e00a      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e006      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e002      	b.n	8004f9a <UART_SetConfig+0x27e>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <UART_SetConfig+0x2e0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	f040 80a8 	bne.w	80050f6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d834      	bhi.n	8005018 <UART_SetConfig+0x2fc>
 8004fae:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <UART_SetConfig+0x298>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08005019 	.word	0x08005019
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	08004fe7 	.word	0x08004fe7
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08004fef 	.word	0x08004fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7fe fe62 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8004fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fde:	e021      	b.n	8005024 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <UART_SetConfig+0x2f8>)
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe4:	e01e      	b.n	8005024 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7fe fded 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8004fea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fec:	e01a      	b.n	8005024 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ff4:	e016      	b.n	8005024 <UART_SetConfig+0x308>
 8004ff6:	bf00      	nop
 8004ff8:	cfff69f3 	.word	0xcfff69f3
 8004ffc:	40008000 	.word	0x40008000
 8005000:	40013800 	.word	0x40013800
 8005004:	40021000 	.word	0x40021000
 8005008:	40004400 	.word	0x40004400
 800500c:	40004800 	.word	0x40004800
 8005010:	40004c00 	.word	0x40004c00
 8005014:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005022:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 812a 	beq.w	8005280 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	4a9e      	ldr	r2, [pc, #632]	@ (80052ac <UART_SetConfig+0x590>)
 8005032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005036:	461a      	mov	r2, r3
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	fbb3 f3f2 	udiv	r3, r3, r2
 800503e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	d305      	bcc.n	800505c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d903      	bls.n	8005064 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005062:	e10d      	b.n	8005280 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	2200      	movs	r2, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	60fa      	str	r2, [r7, #12]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	4a8e      	ldr	r2, [pc, #568]	@ (80052ac <UART_SetConfig+0x590>)
 8005072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005076:	b29b      	uxth	r3, r3
 8005078:	2200      	movs	r2, #0
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005086:	f7fb f8c7 	bl	8000218 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	020b      	lsls	r3, r1, #8
 800509c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050a0:	0202      	lsls	r2, r0, #8
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	6849      	ldr	r1, [r1, #4]
 80050a6:	0849      	lsrs	r1, r1, #1
 80050a8:	2000      	movs	r0, #0
 80050aa:	460c      	mov	r4, r1
 80050ac:	4605      	mov	r5, r0
 80050ae:	eb12 0804 	adds.w	r8, r2, r4
 80050b2:	eb43 0905 	adc.w	r9, r3, r5
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	469a      	mov	sl, r3
 80050be:	4693      	mov	fp, r2
 80050c0:	4652      	mov	r2, sl
 80050c2:	465b      	mov	r3, fp
 80050c4:	4640      	mov	r0, r8
 80050c6:	4649      	mov	r1, r9
 80050c8:	f7fb f8a6 	bl	8000218 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050da:	d308      	bcc.n	80050ee <UART_SetConfig+0x3d2>
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e2:	d204      	bcs.n	80050ee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	60da      	str	r2, [r3, #12]
 80050ec:	e0c8      	b.n	8005280 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050f4:	e0c4      	b.n	8005280 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fe:	d167      	bne.n	80051d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005100:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005104:	2b08      	cmp	r3, #8
 8005106:	d828      	bhi.n	800515a <UART_SetConfig+0x43e>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0x3f4>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fdb4 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8005138:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800513a:	e014      	b.n	8005166 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fe fdc6 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8005140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005142:	e010      	b.n	8005166 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b5a      	ldr	r3, [pc, #360]	@ (80052b0 <UART_SetConfig+0x594>)
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005148:	e00d      	b.n	8005166 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fe fd3b 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 800514e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005150:	e009      	b.n	8005166 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005158:	e005      	b.n	8005166 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8089 	beq.w	8005280 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	4a4e      	ldr	r2, [pc, #312]	@ (80052ac <UART_SetConfig+0x590>)
 8005174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005178:	461a      	mov	r2, r3
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005180:	005a      	lsls	r2, r3, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	441a      	add	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d916      	bls.n	80051c8 <UART_SetConfig+0x4ac>
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d212      	bcs.n	80051c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f023 030f 	bic.w	r3, r3, #15
 80051aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	8bfa      	ldrh	r2, [r7, #30]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e05b      	b.n	8005280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051ce:	e057      	b.n	8005280 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d828      	bhi.n	800522a <UART_SetConfig+0x50e>
 80051d8:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x4c4>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe fd4c 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8005208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800520a:	e014      	b.n	8005236 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fd5e 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8005210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005212:	e010      	b.n	8005236 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <UART_SetConfig+0x594>)
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005218:	e00d      	b.n	8005236 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe fcd3 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 800521e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005220:	e009      	b.n	8005236 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005228:	e005      	b.n	8005236 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005234:	bf00      	nop
    }

    if (pclk != 0U)
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d021      	beq.n	8005280 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <UART_SetConfig+0x590>)
 8005242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005246:	461a      	mov	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	fbb3 f2f2 	udiv	r2, r3, r2
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	441a      	add	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d909      	bls.n	800527a <UART_SetConfig+0x55e>
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d205      	bcs.n	800527a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	b29a      	uxth	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e002      	b.n	8005280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2201      	movs	r2, #1
 8005284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2201      	movs	r2, #1
 800528c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800529c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3730      	adds	r7, #48	@ 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052aa:	bf00      	nop
 80052ac:	080059f8 	.word	0x080059f8
 80052b0:	00f42400 	.word	0x00f42400

080052b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b2:	d10a      	bne.n	80053ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b098      	sub	sp, #96	@ 0x60
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005408:	f7fc f81c 	bl	8001444 <HAL_GetTick>
 800540c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d12f      	bne.n	800547c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f88e 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e063      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d149      	bne.n	800551e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	2200      	movs	r2, #0
 8005494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f857 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d03c      	beq.n	800551e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	623b      	str	r3, [r7, #32]
   return(result);
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f6:	61fa      	str	r2, [r7, #28]
 80054f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	617b      	str	r3, [r7, #20]
   return(result);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e012      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3758      	adds	r7, #88	@ 0x58
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e04f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005564:	d04b      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fb ff6d 	bl	8001444 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e04e      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d037      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d034      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	d031      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d110      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2208      	movs	r2, #8
 80055ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f838 	bl	8005626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2208      	movs	r2, #8
 80055ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e029      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d111      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f81e 	bl	8005626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e00f      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d0a0      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b095      	sub	sp, #84	@ 0x54
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	643b      	str	r3, [r7, #64]	@ 0x40
 800564e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800568a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e3      	bne.n	8005660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d118      	bne.n	80056d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f023 0310 	bic.w	r3, r3, #16
 80056b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056e6:	bf00      	nop
 80056e8:	3754      	adds	r7, #84	@ 0x54
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_UARTEx_EnableFifoMode+0x16>
 8005704:	2302      	movs	r3, #2
 8005706:	e02b      	b.n	8005760 <HAL_UARTEx_EnableFifoMode+0x6e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2224      	movs	r2, #36	@ 0x24
 8005714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800573e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8c3 	bl	80058d4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_UARTEx_DisableFifoMode+0x16>
 800577a:	2302      	movs	r3, #2
 800577c:	e027      	b.n	80057ce <HAL_UARTEx_DisableFifoMode+0x66>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2224      	movs	r2, #36	@ 0x24
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e02d      	b.n	800584e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2224      	movs	r2, #36	@ 0x24
 80057fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f850 	bl	80058d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586a:	2302      	movs	r3, #2
 800586c:	e02d      	b.n	80058ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	@ 0x24
 800587a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f812 	bl	80058d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f4:	e031      	b.n	800595a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058f6:	2308      	movs	r3, #8
 80058f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fa:	2308      	movs	r3, #8
 80058fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	0e5b      	lsrs	r3, r3, #25
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0f5b      	lsrs	r3, r3, #29
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	7b3a      	ldrb	r2, [r7, #12]
 8005922:	4911      	ldr	r1, [pc, #68]	@ (8005968 <UARTEx_SetNbDataToProcess+0x94>)
 8005924:	5c8a      	ldrb	r2, [r1, r2]
 8005926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592a:	7b3a      	ldrb	r2, [r7, #12]
 800592c:	490f      	ldr	r1, [pc, #60]	@ (800596c <UARTEx_SetNbDataToProcess+0x98>)
 800592e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005930:	fb93 f3f2 	sdiv	r3, r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	7b7a      	ldrb	r2, [r7, #13]
 8005940:	4909      	ldr	r1, [pc, #36]	@ (8005968 <UARTEx_SetNbDataToProcess+0x94>)
 8005942:	5c8a      	ldrb	r2, [r1, r2]
 8005944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005948:	7b7a      	ldrb	r2, [r7, #13]
 800594a:	4908      	ldr	r1, [pc, #32]	@ (800596c <UARTEx_SetNbDataToProcess+0x98>)
 800594c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800594e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	08005a10 	.word	0x08005a10
 800596c:	08005a18 	.word	0x08005a18

08005970 <memset>:
 8005970:	4402      	add	r2, r0
 8005972:	4603      	mov	r3, r0
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <memset+0xa>
 8005978:	4770      	bx	lr
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	e7f9      	b.n	8005974 <memset+0x4>

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4d0d      	ldr	r5, [pc, #52]	@ (80059b8 <__libc_init_array+0x38>)
 8005984:	4c0d      	ldr	r4, [pc, #52]	@ (80059bc <__libc_init_array+0x3c>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	2600      	movs	r6, #0
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	4d0b      	ldr	r5, [pc, #44]	@ (80059c0 <__libc_init_array+0x40>)
 8005992:	4c0c      	ldr	r4, [pc, #48]	@ (80059c4 <__libc_init_array+0x44>)
 8005994:	f000 f818 	bl	80059c8 <_init>
 8005998:	1b64      	subs	r4, r4, r5
 800599a:	10a4      	asrs	r4, r4, #2
 800599c:	2600      	movs	r6, #0
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08005a28 	.word	0x08005a28
 80059bc:	08005a28 	.word	0x08005a28
 80059c0:	08005a28 	.word	0x08005a28
 80059c4:	08005a2c 	.word	0x08005a2c

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
