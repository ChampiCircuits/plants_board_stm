
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecdc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800eebc  0800eebc  0000febc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f890  0800f890  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800f890  0800f890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f898  0800f898  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f898  0800f898  00010898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f8a0  0800f8a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800f8a8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000068  0800f910  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800f910  00011810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000384ff  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ac  00000000  00000000  00049597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  0004eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab8  00000000  00000000  00050da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027641  00000000  00000000  00052860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237dd  00000000  00000000  00079ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2405  00000000  00000000  0009d67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fa83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4e8  00000000  00000000  0018fac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0019afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eea4 	.word	0x0800eea4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800eea4 	.word	0x0800eea4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3308      	adds	r3, #8
 8000be6:	2224      	movs	r2, #36	@ 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d fbfe 	bl	800e3ec <memset>

	handle_fdcan_ = handle_fdcan;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
	tx_header_.MessageMarker = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800f698 	.word	0x0800f698

08000c30 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <_ZN9ChampiCanC1Ev+0x2c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3308      	adds	r3, #8
 8000c48:	2224      	movs	r2, #36	@ 0x24
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00d fbcd 	bl	800e3ec <memset>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800f698 	.word	0x0800f698

08000c60 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 fd57 	bl	8009720 <HAL_FDCAN_Start>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e011      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fecc 	bl	8009a2c <HAL_FDCAN_ActivateNotification>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN9ChampiCan10send_frameEmPhm>:
    {
        ret = 1;
    }
    return ret;
}
int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	615a      	str	r2, [r3, #20]

    // D'abord, on attend que la FIFO ne soit plus pleine. J'ai eu des problèmes en essayant d'envoyer 5 frames d'un coup.
    // En regardant la doc, j'ai vu que la fifo est de 4 en effet. TODO à approfondir.
    // Je mets un timeout de 50ms. C'est petit exprès pour voir si on a encore des problèmes après.
    uint32_t ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fe99 	bl	8009a08 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cd6:	6178      	str	r0, [r7, #20]
    uint32_t start_waiting = HAL_GetTick();
 8000cd8:	f008 fa8a 	bl	80091f0 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000cde:	e005      	b.n	8000cec <_ZN9ChampiCan10send_frameEmPhm+0x3a>
        ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f008 fe8f 	bl	8009a08 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cea:	6178      	str	r0, [r7, #20]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000cf2:	f008 fa7d 	bl	80091f0 <HAL_GetTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d904      	bls.n	8000d06 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <_ZN9ChampiCan10send_frameEmPhm+0x56>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e9      	bne.n	8000ce0 <_ZN9ChampiCan10send_frameEmPhm+0x2e>
    }

    return HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3308      	adds	r3, #8
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f008 fd2a 	bl	8009770 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
	...

08000d28 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d3c:	d901      	bls.n	8000d42 <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e084      	b.n	8000e4c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4a41      	ldr	r2, [pc, #260]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	6839      	ldr	r1, [r7, #0]
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d60:	089a      	lsrs	r2, r3, #2
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000d74:	2300      	movs	r3, #0
 8000d76:	4403      	add	r3, r0
 8000d78:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d7e:	e053      	b.n	8000e28 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000d80:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	031b      	lsls	r3, r3, #12
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	8bfb      	ldrh	r3, [r7, #30]
 8000d8a:	019b      	lsls	r3, r3, #6
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	827b      	strh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000d9e:	8a7b      	ldrh	r3, [r7, #18]
 8000da0:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000da2:	2306      	movs	r3, #6
 8000da4:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000da6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000da8:	8bfb      	ldrh	r3, [r7, #30]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10a      	bne.n	8000dc6 <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000db4:	fba3 2301 	umull	r2, r3, r3, r1
 8000db8:	089a      	lsrs	r2, r3, #2
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000dc6:	f107 0014 	add.w	r0, r7, #20
 8000dca:	3002      	adds	r0, #2
 8000dcc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	6a3a      	ldr	r2, [r7, #32]
 8000dde:	4619      	mov	r1, r3
 8000de0:	f00d fbd3 	bl	800e58a <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	3302      	adds	r3, #2
 8000de8:	f107 0214 	add.w	r2, r7, #20
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff ff5f 	bl	8000cb2 <_ZN9ChampiCan10send_frameEmPhm>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00e      	beq.n	8000e22 <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	425a      	negs	r2, r3
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	bf58      	it	pl
 8000e16:	4253      	negpl	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e1c:	801a      	strh	r2, [r3, #0]
			return 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e014      	b.n	8000e4c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e2a:	8bfb      	ldrh	r3, [r7, #30]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3a7      	bcc.n	8000d80 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}
    msg_number = (msg_number + 1) % 4;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	425a      	negs	r2, r3
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	bf58      	it	pl
 8000e42:	4253      	negpl	r3, r2
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e48:	801a      	strh	r2, [r3, #0]
    return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3728      	adds	r7, #40	@ 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	aaaaaaab 	.word	0xaaaaaaab
 8000e58:	20000084 	.word	0x20000084

08000e5c <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() = default;
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <_ZN9ChampiCanD1Ev+0x1c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	0800f698 	.word	0x0800f698

08000e7c <_ZN9ChampiCanD0Ev>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ffe9 	bl	8000e5c <_ZN9ChampiCanD1Ev>
 8000e8a:	212c      	movs	r1, #44	@ 0x2c
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f00c fdf5 	bl	800da7c <_ZdlPvj>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN11ChampiStateC1Ev>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <_ZN11ChampiStateC1Ev+0x28>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3330      	adds	r3, #48	@ 0x30
 8000eae:	2278      	movs	r2, #120	@ 0x78
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00d fa9a 	bl	800e3ec <memset>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800f6a8 	.word	0x0800f6a8

08000ec8 <_ZN11ChampiStateC1EP9ChampiCanm>:
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <_ZN11ChampiStateC1EP9ChampiCanm+0x78>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3330      	adds	r3, #48	@ 0x30
 8000ede:	2278      	movs	r2, #120	@ 0x78
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00d fa82 	bl	800e3ec <memset>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3304      	adds	r3, #4
 8000eec:	2220      	movs	r2, #32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00d fa7b 	bl	800e3ec <memset>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	711a      	strb	r2, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	771a      	strb	r2, [r3, #28]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2201      	movs	r2, #1
 8000f06:	779a      	strb	r2, [r3, #30]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	741a      	strb	r2, [r3, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2201      	movs	r2, #1
 8000f12:	749a      	strb	r2, [r3, #18]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f1a:	621a      	str	r2, [r3, #32]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	775a      	strb	r2, [r3, #29]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0800f6a8 	.word	0x0800f6a8

08000f44 <_ZN11ChampiStateD1Ev>:
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <_ZN11ChampiStateD1Ev+0x1c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	0800f6a8 	.word	0x0800f6a8

08000f64 <_ZN11ChampiStateD0Ev>:
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe9 	bl	8000f44 <_ZN11ChampiStateD1Ev>
 8000f72:	21a8      	movs	r1, #168	@ 0xa8
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f00c fd81 	bl	800da7c <_ZdlPvj>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>:
 8000f84:	b084      	sub	sp, #16
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	f107 0014 	add.w	r0, r7, #20
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7c5a      	ldrb	r2, [r3, #17]
 8000f9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d110      	bne.n	8000fc4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7cda      	ldrb	r2, [r3, #19]
 8000fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d10a      	bne.n	8000fc4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d105      	bne.n	8000fc4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7f5a      	ldrb	r2, [r3, #29]
 8000fbc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d011      	beq.n	8000fe8 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x64>
 8000fc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	74da      	strb	r2, [r3, #19]
 8000fcc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	745a      	strb	r2, [r3, #17]
 8000fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	775a      	strb	r2, [r3, #29]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f808 	bl	8000ff8 <_ZN11ChampiState11send_statusEv>
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff2:	b004      	add	sp, #16
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_ZN11ChampiState11send_statusEv>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2278      	movs	r2, #120	@ 0x78
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fba5 	bl	800775c <pb_ostream_from_buffer>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	1d1a      	adds	r2, r3, #4
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4909      	ldr	r1, [pc, #36]	@ (8001040 <_ZN11ChampiState11send_statusEv+0x48>)
 800101c:	4618      	mov	r0, r3
 800101e:	f007 f80a 	bl	8008036 <pb_encode>
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2131      	movs	r1, #49	@ 0x31
 8001034:	f7ff fe78 	bl	8000d28 <_ZN9ChampiCan8send_msgEmPhm>
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	0800f794 	.word	0x0800f794

08001044 <_ZN11ChampiState9spin_onceEv>:
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <_ZN11ChampiState9spin_onceEv+0x1c>
 8001054:	f008 f8cc 	bl	80091f0 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800105e:	e010      	b.n	8001082 <_ZN11ChampiState9spin_onceEv+0x3e>
 8001060:	f008 f8c6 	bl	80091f0 <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	1ad2      	subs	r2, r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001072:	429a      	cmp	r2, r3
 8001074:	d905      	bls.n	8001082 <_ZN11ChampiState9spin_onceEv+0x3e>
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffbe 	bl	8000ff8 <_ZN11ChampiState11send_statusEv>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <_ZN17MessageRecomposerC1Ev+0x3c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3324      	adds	r3, #36	@ 0x24
 800109a:	2413      	movs	r4, #19
 800109c:	461d      	mov	r5, r3
 800109e:	e004      	b.n	80010aa <_ZN17MessageRecomposerC1Ev+0x22>
 80010a0:	4628      	mov	r0, r5
 80010a2:	f00c fd66 	bl	800db72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80010a6:	3c01      	subs	r4, #1
 80010a8:	3518      	adds	r5, #24
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	daf8      	bge.n	80010a0 <_ZN17MessageRecomposerC1Ev+0x18>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00c fd5c 	bl	800db72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	0800f6b8 	.word	0x0800f6b8

080010c8 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b09b      	sub	sp, #108	@ 0x6c
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 80010d6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80010da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	460b      	mov	r3, r1
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f910 	bl	800130e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d019      	beq.n	800112c <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 80010f8:	4856      	ldr	r0, [pc, #344]	@ (8001254 <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 80010fa:	f00d f87d 	bl	800e1f8 <puts>
        msg_number_ = msg_number;
 80010fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 8001104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800110e:	e008      	b.n	8001122 <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001114:	4413      	add	r3, r2
 8001116:	330d      	adds	r3, #13
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 800111c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800111e:	3301      	adds	r3, #1
 8001120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 800112c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	2201      	movs	r2, #1
 8001134:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 8001136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	3320      	adds	r3, #32
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	1d1c      	adds	r4, r3, #4
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c9d      	adds	r5, r3, #2
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	3b02      	subs	r3, #2
 8001150:	461e      	mov	r6, r3
 8001152:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001156:	4618      	mov	r0, r3
 8001158:	f00c fca3 	bl	800daa2 <_ZNSaIcEC1Ev>
 800115c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001160:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001164:	4632      	mov	r2, r6
 8001166:	4629      	mov	r1, r5
 8001168:	f00c fe30 	bl	800ddcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800116c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001170:	4619      	mov	r1, r3
 8001172:	4620      	mov	r0, r4
 8001174:	f00c fd0a 	bl	800db8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001178:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800117c:	4618      	mov	r0, r3
 800117e:	f00c fcff 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001182:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001186:	4618      	mov	r0, r3
 8001188:	f00c fc8c 	bl	800daa4 <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 800118c:	2300      	movs	r3, #0
 800118e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001190:	e00c      	b.n	80011ac <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001196:	4413      	add	r3, r2
 8001198:	330d      	adds	r3, #13
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80011a0:	482d      	ldr	r0, [pc, #180]	@ (8001258 <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 80011a2:	f00c ffb9 	bl	800e118 <iprintf>
    for(int i=0; i<n_frames_; i++) {
 80011a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a8:	3301      	adds	r3, #1
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbed      	blt.n	8001192 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f8d3 	bl	8001362 <_ZN17MessageRecomposer19all_frames_receivedEv>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d043      	beq.n	800124a <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 80011c2:	4826      	ldr	r0, [pc, #152]	@ (800125c <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 80011c4:	f00d f818 	bl	800e1f8 <puts>
        std::string full_msg;
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00c fcd0 	bl	800db72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80011d6:	e011      	b.n	80011fc <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 80011d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	3320      	adds	r3, #32
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	1d1a      	adds	r2, r3, #4
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00c fda1 	bl	800dd38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 80011f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f8:	3301      	adds	r3, #1
 80011fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001202:	429a      	cmp	r2, r3
 8001204:	dbe8      	blt.n	80011d8 <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f00c fd18 	bl	800dc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	653b      	str	r3, [r7, #80]	@ 0x50
 8001222:	e008      	b.n	8001236 <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001228:	4413      	add	r3, r2
 800122a:	330d      	adds	r3, #13
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001232:	3301      	adds	r3, #1
 8001234:	653b      	str	r3, [r7, #80]	@ 0x50
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf1      	blt.n	8001224 <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f00c fc9b 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800124a:	bf00      	nop
 800124c:	3764      	adds	r7, #100	@ 0x64
 800124e:	46bd      	mov	sp, r7
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	bf00      	nop
 8001254:	0800eebc 	.word	0x0800eebc
 8001258:	0800eec8 	.word	0x0800eec8
 800125c:	0800eee0 	.word	0x0800eee0

08001260 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f00c fd72 	bl	800dd7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <_ZN17MessageRecomposerD1Ev+0x48>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00c fc63 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MessageRecomposer::~MessageRecomposer() {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3324      	adds	r3, #36	@ 0x24
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <_ZN17MessageRecomposerD1Ev+0x3c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3324      	adds	r3, #36	@ 0x24
 80012c6:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3324      	adds	r3, #36	@ 0x24
}
 80012ce:	429c      	cmp	r4, r3
 80012d0:	d004      	beq.n	80012dc <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 80012d2:	3c18      	subs	r4, #24
 80012d4:	4620      	mov	r0, r4
 80012d6:	f00c fc53 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80012da:	e7f6      	b.n	80012ca <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 80012dc:	bf00      	nop
}
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	0800f6b8 	.word	0x0800f6b8

080012ec <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
}
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffd3 	bl	80012a0 <_ZN17MessageRecomposerD1Ev>
 80012fa:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f00c fbbc 	bl	800da7c <_ZdlPvj>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 800130e:	b480      	push	{r7}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	0b1b      	lsrs	r3, r3, #12
 8001336:	b29b      	uxth	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	b29b      	uxth	r3, r3
 8001344:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e00e      	b.n	800138e <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	330d      	adds	r3, #13
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8001384:	2300      	movs	r3, #0
 8001386:	e008      	b.n	800139a <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbeb      	blt.n	8001370 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>
#include <cstdio>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
{
}
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	1cf9      	adds	r1, r7, #3
 80013d6:	230a      	movs	r3, #10
 80013d8:	2201      	movs	r2, #1
 80013da:	f00b fbcf 	bl	800cb7c <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f107 010f 	add.w	r1, r7, #15
 80013e6:	230a      	movs	r3, #10
 80013e8:	2201      	movs	r2, #1
 80013ea:	f00b fc55 	bl	800cc98 <HAL_UART_Receive>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf()
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 80013fe:	bf00      	nop
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	f107 010f 	add.w	r1, r7, #15
 8001408:	2300      	movs	r3, #0
 800140a:	2201      	movs	r2, #1
 800140c:	f00b fc44 	bl	800cc98 <HAL_UART_Receive>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ef      	bne.n	8001400 <_ZN7SCServo12fflushRevBufEv+0xa>
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	460b      	mov	r3, r1
 8001438:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 800143a:	2307      	movs	r3, #7
 800143c:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	121b      	asrs	r3, r3, #8
 8001442:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	121b      	asrs	r3, r3, #8
 800144c:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff ffcf 	bl	80013f6 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8001458:	21ff      	movs	r1, #255	@ 0xff
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ffb2 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8001460:	21ff      	movs	r1, #255	@ 0xff
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ffae 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	4619      	mov	r1, r3
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff ffa9 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff ffa3 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 800147e:	2103      	movs	r1, #3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff ff9f 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 8001486:	212a      	movs	r1, #42	@ 0x2a
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff ff9b 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(posL);
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	4619      	mov	r1, r3
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff ff96 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(posH);
 8001498:	7cbb      	ldrb	r3, [r7, #18]
 800149a:	4619      	mov	r1, r3
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff ff91 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(velL);
 80014a2:	7c7b      	ldrb	r3, [r7, #17]
 80014a4:	4619      	mov	r1, r3
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff ff8c 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(velH);
 80014ac:	7c3b      	ldrb	r3, [r7, #16]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ff87 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	4413      	add	r3, r2
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	7cfb      	ldrb	r3, [r7, #19]
 80014c2:	4413      	add	r3, r2
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	7c7b      	ldrb	r3, [r7, #17]
 80014ce:	4413      	add	r3, r2
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	7c3b      	ldrb	r3, [r7, #16]
 80014d4:	4413      	add	r3, r2
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4619      	mov	r1, r3
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff ff6e 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d00a      	beq.n	8001504 <_ZN7SCServo8WritePosEhiih+0xda>
 80014ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d106      	bne.n	8001504 <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2106      	movs	r1, #6
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f807 	bl	800150e <_ZN7SCServo7ReadBufEtPh>
 8001500:	4603      	mov	r3, r0
 8001502:	e000      	b.n	8001506 <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	460b      	mov	r3, r1
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	897a      	ldrh	r2, [r7, #10]
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f00b fbb6 	bl	800cc98 <HAL_UART_Receive>
 800152c:	4603      	mov	r3, r0
 800152e:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 8001536:	897b      	ldrh	r3, [r7, #10]
 8001538:	e001      	b.n	800153e <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_ZN7SCServo7ReadPosEh>:

int SCServo::ReadPos(u8 ID)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
    u8 buf[8] = {0};
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
    int size;
    int pos=0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff49 	bl	80013f6 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8001564:	21ff      	movs	r1, #255	@ 0xff
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff2c 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 800156c:	21ff      	movs	r1, #255	@ 0xff
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff28 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff23 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(4);
 800157e:	2104      	movs	r1, #4
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff1f 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(INST_READ);
 8001586:	2102      	movs	r1, #2
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff1b 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(P_PRESENT_POSITION_L);
 800158e:	2138      	movs	r1, #56	@ 0x38
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff17 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf(2);
 8001596:	2102      	movs	r1, #2
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff13 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2))&0xFF);
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80015a4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80015a8:	33bf      	adds	r3, #191	@ 0xbf
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff08 	bl	80013c4 <_ZN7SCServo6PrintfEh>
    size = ReadBuf(8, buf);
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	461a      	mov	r2, r3
 80015ba:	2108      	movs	r1, #8
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffa6 	bl	800150e <_ZN7SCServo7ReadBufEtPh>
 80015c2:	6138      	str	r0, [r7, #16]
    if(size<8)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	dc02      	bgt.n	80015d0 <_ZN7SCServo7ReadPosEh+0x8a>
        return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ce:	e00a      	b.n	80015e6 <_ZN7SCServo7ReadPosEh+0xa0>
    pos = buf[5];
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	461a      	mov	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
    return pos;
 80015e4:	697b      	ldr	r3, [r7, #20]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	460a      	mov	r2, r1
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 8001602:	797b      	ldrb	r3, [r7, #5]
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f007 fa11 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	4313      	orrs	r3, r2
 800161a:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	6039      	str	r1, [r7, #0]
 8001630:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	f240 110f 	movw	r1, #271	@ 0x10f
 800163e:	4618      	mov	r0, r3
 8001640:	f007 f98c 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4313      	orrs	r3, r2
 800164c:	73fb      	strb	r3, [r7, #15]
	return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 800166e:	f107 0209 	add.w	r2, r7, #9
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	21e5      	movs	r1, #229	@ 0xe5
 8001676:	4618      	mov	r0, r3
 8001678:	f007 f9aa 	bl	80089d0 <_Z15VL53L4CD_RdBytettPh>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4313      	orrs	r3, r2
 8001684:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 8001686:	7a7b      	ldrb	r3, [r7, #9]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d102      	bne.n	8001692 <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 800168c:	2300      	movs	r3, #0
 800168e:	737b      	strb	r3, [r7, #13]
 8001690:	e00b      	b.n	80016aa <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001698:	d203      	bcs.n	80016a2 <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	3301      	adds	r3, #1
 800169e:	817b      	strh	r3, [r7, #10]
 80016a0:	e003      	b.n	80016aa <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 80016a6:	23ff      	movs	r3, #255	@ 0xff
 80016a8:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f007 fa4a 	bl	8008b48 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d0d9      	beq.n	800166e <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80016ba:	232d      	movs	r3, #45	@ 0x2d
 80016bc:	73bb      	strb	r3, [r7, #14]
 80016be:	e011      	b.n	80016e4 <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	3b2d      	subs	r3, #45	@ 0x2d
 80016c8:	4a44      	ldr	r2, [pc, #272]	@ (80017dc <_Z19VL53L4CD_SensorInitt+0x184>)
 80016ca:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f007 f9b0 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	4313      	orrs	r3, r2
 80016dc:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73bb      	strb	r3, [r7, #14]
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	2b87      	cmp	r3, #135	@ 0x87
 80016e8:	d9ea      	bls.n	80016c0 <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2240      	movs	r2, #64	@ 0x40
 80016ee:	2187      	movs	r1, #135	@ 0x87
 80016f0:	4618      	mov	r0, r3
 80016f2:	f007 f99f 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 8001700:	2300      	movs	r3, #0
 8001702:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8001704:	2301      	movs	r3, #1
 8001706:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8001708:	f107 0209 	add.w	r2, r7, #9
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f8c5 	bl	80018a0 <_Z26VL53L4CD_CheckForDataReadytPh>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	4313      	orrs	r3, r2
 800171e:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8001720:	7a7b      	ldrb	r3, [r7, #9]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 8001726:	2300      	movs	r3, #0
 8001728:	737b      	strb	r3, [r7, #13]
 800172a:	e00b      	b.n	8001744 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001732:	d203      	bcs.n	800173c <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 8001734:	897b      	ldrh	r3, [r7, #10]
 8001736:	3301      	adds	r3, #1
 8001738:	817b      	strh	r3, [r7, #10]
 800173a:	e003      	b.n	8001744 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 800173c:	2300      	movs	r3, #0
 800173e:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8001740:	23ff      	movs	r3, #255	@ 0xff
 8001742:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f007 f9fd 	bl	8008b48 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d0d9      	beq.n	8001708 <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f842 	bl	80017e0 <_Z23VL53L4CD_ClearInterruptt>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	4313      	orrs	r3, r2
 8001764:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f882 	bl	8001872 <_Z20VL53L4CD_StopRangingt>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4313      	orrs	r3, r2
 8001776:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	2209      	movs	r2, #9
 800177c:	2108      	movs	r1, #8
 800177e:	4618      	mov	r0, r3
 8001780:	f007 f958 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	4313      	orrs	r3, r2
 800178c:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	2200      	movs	r2, #0
 8001792:	210b      	movs	r1, #11
 8001794:	4618      	mov	r0, r3
 8001796:	f007 f94d 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80017aa:	2124      	movs	r1, #36	@ 0x24
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 f969 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	2200      	movs	r2, #0
 80017c0:	2132      	movs	r1, #50	@ 0x32
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f8b0 	bl	8001928 <_Z23VL53L4CD_SetRangeTimingtmm>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	73fb      	strb	r3, [r7, #15]

	return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	0800f6c0 	.word	0x0800f6c0

080017e0 <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2201      	movs	r2, #1
 80017f2:	2186      	movs	r1, #134	@ 0x86
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 f91d 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4313      	orrs	r3, r2
 8001802:	73fb      	strb	r3, [r7, #15]
	return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 800181c:	f107 0208 	add.w	r2, r7, #8
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	216c      	movs	r1, #108	@ 0x6c
 8001824:	4618      	mov	r0, r3
 8001826:	f007 f85d 	bl	80088e4 <_Z16VL53L4CD_RdDWordttPm>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	4313      	orrs	r3, r2
 8001832:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	2221      	movs	r2, #33	@ 0x21
 800183e:	2187      	movs	r1, #135	@ 0x87
 8001840:	4618      	mov	r0, r3
 8001842:	f007 f8f7 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4313      	orrs	r3, r2
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e00a      	b.n	8001868 <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2240      	movs	r2, #64	@ 0x40
 8001856:	2187      	movs	r1, #135	@ 0x87
 8001858:	4618      	mov	r0, r3
 800185a:	f007 f8eb 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	4313      	orrs	r3, r2
 8001866:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	2200      	movs	r2, #0
 8001884:	2187      	movs	r1, #135	@ 0x87
 8001886:	4618      	mov	r0, r3
 8001888:	f007 f8d4 	bl	8008a34 <_Z15VL53L4CD_WrBytetth>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	4313      	orrs	r3, r2
 8001894:	73fb      	strb	r3, [r7, #15]
	return status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80018b0:	f107 020d 	add.w	r2, r7, #13
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	2130      	movs	r1, #48	@ 0x30
 80018b8:	4618      	mov	r0, r3
 80018ba:	f007 f889 	bl	80089d0 <_Z15VL53L4CD_RdBytettPh>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 80018da:	7b7b      	ldrb	r3, [r7, #13]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d102      	bne.n	80018e6 <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e001      	b.n	80018ea <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80018ea:	f107 020d 	add.w	r2, r7, #13
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	2131      	movs	r1, #49	@ 0x31
 80018f2:	4618      	mov	r0, r3
 80018f4:	f007 f86c 	bl	80089d0 <_Z15VL53L4CD_RdBytettPh>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	4313      	orrs	r3, r2
 8001900:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 8001902:	7b7b      	ldrb	r3, [r7, #13]
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	429a      	cmp	r2, r3
 800190c:	d103      	bne.n	8001916 <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e002      	b.n	800191c <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8001944:	4b84      	ldr	r3, [pc, #528]	@ (8001b58 <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 8001946:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8001948:	f107 0214 	add.w	r2, r7, #20
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	2106      	movs	r1, #6
 8001950:	4618      	mov	r0, r3
 8001952:	f007 f803 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800195e:	4313      	orrs	r3, r2
 8001960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 8001964:	8abb      	ldrh	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d012      	beq.n	8001990 <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8001976:	8abb      	ldrh	r3, [r7, #20]
 8001978:	461a      	mov	r2, r3
 800197a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800197e:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198e:	e005      	b.n	800199c <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001994:	f063 0301 	orn	r3, r3, #1
 8001998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d906      	bls.n	80019b0 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80019a6:	d803      	bhi.n	80019b0 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 80019a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 80019b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b4:	f063 0301 	orn	r3, r3, #1
 80019b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80019bc:	e05e      	b.n	8001a7c <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	2200      	movs	r2, #0
 80019c8:	216c      	movs	r1, #108	@ 0x6c
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 f888 	bl	8008ae0 <_Z16VL53L4CD_WrDWordttm>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019d8:	4313      	orrs	r3, r2
 80019da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e6:	e049      	b.n	8001a7c <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d93f      	bls.n	8001a70 <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 80019f0:	f107 0216 	add.w	r2, r7, #22
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	21de      	movs	r1, #222	@ 0xde
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 ffaf 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a24:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8001a28:	8afb      	ldrh	r3, [r7, #22]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8001a3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	ee17 2a90 	vmov	r2, s15
 8001a48:	216c      	movs	r1, #108	@ 0x6c
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f007 f848 	bl	8008ae0 <_Z16VL53L4CD_WrDWordttm>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 8001a64:	3b0c      	subs	r3, #12
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e005      	b.n	8001a7c <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001a70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a74:	f063 0301 	orn	r3, r3, #1
 8001a78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8001a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a80:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a82:	d063      	beq.n	8001b4c <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	031b      	lsls	r3, r3, #12
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 8001a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	09da      	lsrs	r2, r3, #7
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	441a      	add	r2, r3
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001aa8:	e005      	b.n	8001ab6 <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001ab0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	2bff      	cmp	r3, #255	@ 0xff
 8001aba:	d8f6      	bhi.n	8001aaa <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001abc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001aca:	4413      	add	r3, r2
 8001acc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8001ace:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	215e      	movs	r1, #94	@ 0x5e
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f006 ffd5 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8001aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	09da      	lsrs	r2, r3, #7
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	441a      	add	r2, r3
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001b0c:	e005      	b.n	8001b1a <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001b14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b16:	3301      	adds	r3, #1
 8001b18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	2bff      	cmp	r3, #255	@ 0xff
 8001b1e:	d8f6      	bhi.n	8001b0e <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001b20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001b2e:	4413      	add	r3, r2
 8001b30:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8001b32:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	2161      	movs	r1, #97	@ 0x61
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f006 ffa3 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 8001b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3730      	adds	r7, #48	@ 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	3f870a3d 	.word	0x3f870a3d

08001b5c <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8001b6e:	4b52      	ldr	r3, [pc, #328]	@ (8001cb8 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 8001b70:	f107 0408 	add.w	r4, r7, #8
 8001b74:	461d      	mov	r5, r3
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b7e:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8001b82:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2189      	movs	r1, #137	@ 0x89
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f006 ff20 	bl	80089d0 <_Z15VL53L4CD_RdBytettPh>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8001b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 8001bac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bb0:	2b17      	cmp	r3, #23
 8001bb2:	d807      	bhi.n	8001bc4 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8001bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bb8:	3328      	adds	r3, #40	@ 0x28
 8001bba:	443b      	add	r3, r7
 8001bbc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 8001bc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8001bcc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	218c      	movs	r1, #140	@ 0x8c
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fec1 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8001be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8001bf2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	218e      	movs	r1, #142	@ 0x8e
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 feae 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8001c0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8001c18:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2190      	movs	r1, #144	@ 0x90
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 fe9b 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8001c34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8001c3e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2192      	movs	r1, #146	@ 0x92
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fe88 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8001c5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8001c64:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	2196      	movs	r1, #150	@ 0x96
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f006 fe75 	bl	800895c <_Z15VL53L4CD_RdWordttPt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8001c80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	899b      	ldrh	r3, [r3, #12]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	899b      	ldrh	r3, [r3, #12]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	80da      	strh	r2, [r3, #6]

	return status;
 8001caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800eef4 	.word	0x0800eef4

08001cbc <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	80fb      	strh	r3, [r7, #6]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 8001cd6:	89ba      	ldrh	r2, [r7, #12]
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	211e      	movs	r1, #30
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 fed1 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 fec6 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2122      	movs	r1, #34	@ 0x22
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 febb 	bl	8008a84 <_Z15VL53L4CD_WrWordttt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d28:	f3bf 8f4f 	dsb	sy
}
 8001d2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <__NVIC_SystemReset+0x24>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d36:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_SystemReset+0x28>)
 8001d3a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3e:	f3bf 8f4f 	dsb	sy
}
 8001d42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <__NVIC_SystemReset+0x20>
 8001d48:	e000ed00 	.word	0xe000ed00
 8001d4c:	05fa0004 	.word	0x05fa0004

08001d50 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	761a      	strb	r2, [r3, #24]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d7c:	621a      	str	r2, [r3, #32]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	220a      	movs	r2, #10
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
    this->gpio_port_step = gpio_port_step;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8bba      	ldrh	r2, [r7, #28]
 8001dba:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f008 fb0f 	bl	800a3ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8001dce:	8bbb      	ldrh	r3, [r7, #28]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	69b8      	ldr	r0, [r7, #24]
 8001dd6:	f008 fb09 	bl	800a3ec <HAL_GPIO_WritePin>

  }
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZN7Stepper9set_speedEm>:

  void set_speed(unsigned long speed) {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    this->speed = speed;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	621a      	str	r2, [r3, #32]
    time_step = 10000000 / speed;
 8001df4:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_ZN7Stepper9set_speedEm+0x28>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	00989680 	.word	0x00989680

08001e10 <_ZN7Stepper8set_goalEib>:

  void set_goal(int goal, bool keep_previous_speed = false) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	71fb      	strb	r3, [r7, #7]

    this->goal = goal;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dd01      	ble.n	8001e38 <_ZN7Stepper8set_goalEib+0x28>
 8001e34:	2201      	movs	r2, #1
 8001e36:	e001      	b.n	8001e3c <_ZN7Stepper8set_goalEib+0x2c>
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	4798      	blx	r3
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6898      	ldr	r0, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8999      	ldrh	r1, [r3, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f008 fabe 	bl	800a3ec <HAL_GPIO_WritePin>

    if (keep_previous_speed) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <_ZN7Stepper8set_goalEib+0x72>
      current_speed = speed;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
      current_speed = 0;
    }
  }
 8001e80:	e002      	b.n	8001e88 <_ZN7Stepper8set_goalEib+0x78>
      current_speed = 0;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34
  }
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	611a      	str	r2, [r3, #16]
  }
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e1b      	ldrb	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d065      	beq.n	8001f88 <_ZN7Stepper9spin_onceEv+0xdc>
      return;
    }

    compute_time_step();
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f87b 	bl	8001fb8 <_ZN7Stepper17compute_time_stepEv>

    if (state.state == State::HIGH) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7e1b      	ldrb	r3, [r3, #24]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11b      	bne.n	8001f02 <_ZN7Stepper9spin_onceEv+0x56>
      if (get_time_us() - time_start_high > time_high) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4798      	blx	r3
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	429a      	cmp	r2, r3
 8001ede:	bf8c      	ite	hi
 8001ee0:	2301      	movhi	r3, #1
 8001ee2:	2300      	movls	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03d      	beq.n	8001f66 <_ZN7Stepper9spin_onceEv+0xba>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f008 fa79 	bl	800a3ec <HAL_GPIO_WritePin>
        state.state = State::LOW;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	761a      	strb	r2, [r3, #24]
 8001f00:	e031      	b.n	8001f66 <_ZN7Stepper9spin_onceEv+0xba>
      }
    } else if (state.state == State::LOW) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e1b      	ldrb	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d12d      	bne.n	8001f66 <_ZN7Stepper9spin_onceEv+0xba>
      if (get_time_us() - time_start_step > time_step) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4798      	blx	r3
 8001f10:	4602      	mov	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	bf8c      	ite	hi
 8001f20:	2301      	movhi	r3, #1
 8001f22:	2300      	movls	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01d      	beq.n	8001f66 <_ZN7Stepper9spin_onceEv+0xba>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	889b      	ldrh	r3, [r3, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	f008 fa59 	bl	800a3ec <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4798      	blx	r3
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	4798      	blx	r3
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10b      	bne.n	8001f8a <_ZN7Stepper9spin_onceEv+0xde>
      state.state = State::STOPPED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	761a      	strb	r2, [r3, #24]
      speed_when_stopped = current_speed;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	639a      	str	r2, [r3, #56]	@ 0x38
      current_speed = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f86:	e000      	b.n	8001f8a <_ZN7Stepper9spin_onceEv+0xde>
      return;
 8001f88:	bf00      	nop
    }
  }
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
  }
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	0000      	movs	r0, r0
 8001fb4:	0000      	movs	r0, r0
	...

08001fb8 <_ZN7Stepper17compute_time_stepEv>:

  void compute_time_step() {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

    // We compute the new speed every 5ms (return if we are not there yet)
    static unsigned long last_time = 0;
    if (get_time_us() - last_time < 5000 && last_time != 0) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	4798      	blx	r3
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d805      	bhi.n	8001fe2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001fd6:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <_ZN7Stepper17compute_time_stepEv+0x2c>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d152      	bne.n	800208e <_ZN7Stepper17compute_time_stepEv+0xd6>
      return;
    }
    last_time = get_time_us();
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	4798      	blx	r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80020a8 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001ff2:	6013      	str	r3, [r2, #0]


    if (current_speed == speed) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d047      	beq.n	8002092 <_ZN7Stepper17compute_time_stepEv+0xda>
      return;
    }

    if (current_speed < speed) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d222      	bcs.n	8002056 <_ZN7Stepper17compute_time_stepEv+0x9e>
      current_speed += (long) (((double) max_acceleration) * 0.005); // 5ms (0.005s
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fbcd 	bl	80007b8 <__aeabi_i2d>
 800201e:	a320      	add	r3, pc, #128	@ (adr r3, 80020a0 <_ZN7Stepper17compute_time_stepEv+0xe8>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe f94c 	bl	80002c0 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_d2iz>
 8002034:	4603      	mov	r3, r0
 8002036:	18e2      	adds	r2, r4, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed > speed) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	429a      	cmp	r2, r3
 8002048:	d918      	bls.n	800207c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34
 8002054:	e012      	b.n	800207c <_ZN7Stepper17compute_time_stepEv+0xc4>
      }
    } else {
      current_speed -= max_acceleration;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205e:	1ad2      	subs	r2, r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed < speed) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	429a      	cmp	r2, r3
 8002070:	d204      	bcs.n	800207c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	635a      	str	r2, [r3, #52]	@ 0x34
      }
    }

    time_step = 10000000 / current_speed;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <_ZN7Stepper17compute_time_stepEv+0xf4>)
 8002082:	fb92 f3f3 	sdiv	r3, r2, r3
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24
 800208c:	e002      	b.n	8002094 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 8002092:	bf00      	nop
  }
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w
 80020a0:	47ae147b 	.word	0x47ae147b
 80020a4:	3f747ae1 	.word	0x3f747ae1
 80020a8:	20000088 	.word	0x20000088
 80020ac:	00989680 	.word	0x00989680

080020b0 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>:
#include "VL53L4CD_api.h"


class LaserSensor {
public:
	LaserSensor(GPIO_TypeDef *port, uint16_t pin, Dev_t address, int16_t offset) : pin(pin), port(port), address(address), offset(offset)
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	88ba      	ldrh	r2, [r7, #4]
 80020d6:	811a      	strh	r2, [r3, #8]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	330a      	adds	r3, #10
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8b3a      	ldrh	r2, [r7, #24]
 80020ea:	835a      	strh	r2, [r3, #26]
	{

	}
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_ZN11LaserSensorD1Ev>:

	// destructor
	~LaserSensor()
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_StopRanging(address);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	891b      	ldrh	r3, [r3, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fbb3 	bl	8001872 <_Z20VL53L4CD_StopRangingt>
	}
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <_ZN11LaserSensor5setupEv>:

	int setup()
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	{
		uint16_t sensor_id;
		uint8_t status;
		printf("SENSOR_PIN: %d\n", pin);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	4845      	ldr	r0, [pc, #276]	@ (800223c <_ZN11LaserSensor5setupEv+0x124>)
 8002128:	f00b fff6 	bl	800e118 <iprintf>

		HAL_Delay(5);
 800212c:	2005      	movs	r0, #5
 800212e:	f007 f86b 	bl	8009208 <HAL_Delay>
		// set the pin to high to enable the sensor
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6858      	ldr	r0, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	4619      	mov	r1, r3
 800213e:	f008 f955 	bl	800a3ec <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8002142:	2005      	movs	r0, #5
 8002144:	f007 f860 	bl	8009208 <HAL_Delay>

		// set I2C address (other unset addresses XSHUT have to be pull to low before)
		status = VL53L4CD_SetI2CAddress(0x52, address); // 0x52 is the default address
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	891b      	ldrh	r3, [r3, #8]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	2052      	movs	r0, #82	@ 0x52
 8002152:	f7ff fa4c 	bl	80015ee <_Z22VL53L4CD_SetI2CAddressth>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
		if (status)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <_ZN11LaserSensor5setupEv+0x56>
		{
			printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4619      	mov	r1, r3
 8002164:	4836      	ldr	r0, [pc, #216]	@ (8002240 <_ZN11LaserSensor5setupEv+0x128>)
 8002166:	f00b ffd7 	bl	800e118 <iprintf>
			return status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	e061      	b.n	8002232 <_ZN11LaserSensor5setupEv+0x11a>
		}

		/* (Optional) Check if there is a VL53L4CD sensor connected */
		printf("Checking for laser sensor at address %x\n", address);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	891b      	ldrh	r3, [r3, #8]
 8002172:	4619      	mov	r1, r3
 8002174:	4833      	ldr	r0, [pc, #204]	@ (8002244 <_ZN11LaserSensor5setupEv+0x12c>)
 8002176:	f00b ffcf 	bl	800e118 <iprintf>
		status = VL53L4CD_GetSensorId(address, &sensor_id);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	891b      	ldrh	r3, [r3, #8]
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fa4e 	bl	8001626 <_Z20VL53L4CD_GetSensorIdtPt>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

		if (status || (sensor_id != 0xEBAA))
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <_ZN11LaserSensor5setupEv+0x86>
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <_ZN11LaserSensor5setupEv+0x90>
		{
			printf("VL53L4CD not detected at requested address\n");
 800219e:	482a      	ldr	r0, [pc, #168]	@ (8002248 <_ZN11LaserSensor5setupEv+0x130>)
 80021a0:	f00c f82a 	bl	800e1f8 <puts>
			return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	e044      	b.n	8002232 <_ZN11LaserSensor5setupEv+0x11a>
		}
		printf("VL53L4CD detected at address %x\n", address);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	891b      	ldrh	r3, [r3, #8]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4827      	ldr	r0, [pc, #156]	@ (800224c <_ZN11LaserSensor5setupEv+0x134>)
 80021b0:	f00b ffb2 	bl	800e118 <iprintf>

		/* (Mandatory) Init VL53L4CD sensor */
		printf("Initializing laser sensor\n");
 80021b4:	4826      	ldr	r0, [pc, #152]	@ (8002250 <_ZN11LaserSensor5setupEv+0x138>)
 80021b6:	f00c f81f 	bl	800e1f8 <puts>
		status = VL53L4CD_SensorInit(address);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	891b      	ldrh	r3, [r3, #8]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa4a 	bl	8001658 <_Z19VL53L4CD_SensorInitt>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
		if (status)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <_ZN11LaserSensor5setupEv+0xc0>
		{
			printf("VL53L4CD ULD Loading failed\n");
 80021ce:	4821      	ldr	r0, [pc, #132]	@ (8002254 <_ZN11LaserSensor5setupEv+0x13c>)
 80021d0:	f00c f812 	bl	800e1f8 <puts>
			return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	e02c      	b.n	8002232 <_ZN11LaserSensor5setupEv+0x11a>
		}

		// set the offset
		status = VL53L4CD_SetOffset(address, offset);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	891a      	ldrh	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7ff fd69 	bl	8001cbc <_Z18VL53L4CD_SetOffsetts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	73fb      	strb	r3, [r7, #15]
		if (status)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <_ZN11LaserSensor5setupEv+0xea>
		{
			printf("VL53L4CD_SetOffset failed with status %u\n", status);
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4619      	mov	r1, r3
 80021f8:	4817      	ldr	r0, [pc, #92]	@ (8002258 <_ZN11LaserSensor5setupEv+0x140>)
 80021fa:	f00b ff8d 	bl	800e118 <iprintf>
			return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	e017      	b.n	8002232 <_ZN11LaserSensor5setupEv+0x11a>
		}

		status = VL53L4CD_StartRanging(address);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	891b      	ldrh	r3, [r3, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb01 	bl	800180e <_Z21VL53L4CD_StartRangingt>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
		if (status)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <_ZN11LaserSensor5setupEv+0x10c>
		{
			printf("VL53L4CD_StartRanging failed with status %u\n", status);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	4619      	mov	r1, r3
 800221a:	4810      	ldr	r0, [pc, #64]	@ (800225c <_ZN11LaserSensor5setupEv+0x144>)
 800221c:	f00b ff7c 	bl	800e118 <iprintf>
			return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	e006      	b.n	8002232 <_ZN11LaserSensor5setupEv+0x11a>
		}

		printf("VL53L4CD ULD ready at address %x ready\n", address);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	891b      	ldrh	r3, [r3, #8]
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <_ZN11LaserSensor5setupEv+0x148>)
 800222c:	f00b ff74 	bl	800e118 <iprintf>
		return 0;
 8002230:	2300      	movs	r3, #0
	}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	0800ef0c 	.word	0x0800ef0c
 8002240:	0800ef1c 	.word	0x0800ef1c
 8002244:	0800ef4c 	.word	0x0800ef4c
 8002248:	0800ef78 	.word	0x0800ef78
 800224c:	0800efa4 	.word	0x0800efa4
 8002250:	0800efc8 	.word	0x0800efc8
 8002254:	0800efe4 	.word	0x0800efe4
 8002258:	0800f000 	.word	0x0800f000
 800225c:	0800f02c 	.word	0x0800f02c
 8002260:	0800f05c 	.word	0x0800f05c

08002264 <_ZN11LaserSensor11get_dist_mmEv>:


	int get_dist_mm()
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	{
		int status = update_distance();
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f821 	bl	80022b4 <_ZN11LaserSensor15update_distanceEv>
 8002272:	60f8      	str	r0, [r7, #12]
		if (status)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <_ZN11LaserSensor11get_dist_mmEv+0x24>
		{
			printf("VL53L4CD_GetResult failed with status %u\n", status);
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4805      	ldr	r0, [pc, #20]	@ (8002294 <_ZN11LaserSensor11get_dist_mmEv+0x30>)
 800227e:	f00b ff4b 	bl	800e118 <iprintf>
			return -1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002286:	e001      	b.n	800228c <_ZN11LaserSensor11get_dist_mmEv+0x28>
		}
		return results.distance_mm;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	899b      	ldrh	r3, [r3, #12]
	}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	0800f084 	.word	0x0800f084

08002298 <_ZN11LaserSensor15clear_interruptEv>:


	void clear_interrupt()
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_ClearInterrupt(address);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	891b      	ldrh	r3, [r3, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fa9b 	bl	80017e0 <_Z23VL53L4CD_ClearInterruptt>
	}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <_ZN11LaserSensor15update_distanceEv>:
	VL53L4CD_ResultsData_t results = {};
	int16_t offset;



	int update_distance()
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	{
		// We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
		static uint32_t last_read_time = 0;
		if (HAL_GetTick() - last_read_time < 5)
 80022bc:	f006 ff98 	bl	80091f0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <_ZN11LaserSensor15update_distanceEv+0x64>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <_ZN11LaserSensor15update_distanceEv+0x26>
		{
			return 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e01a      	b.n	8002310 <_ZN11LaserSensor15update_distanceEv+0x5c>
		/* Use polling function to know when a new measurement is ready.
		 * Another way can be to wait for HW interrupt raised on PIN 7
		 * (GPIO 1) when a new measurement is ready */

		uint8_t isReady;
		uint8_t status = VL53L4CD_CheckForDataReady(address, &isReady);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	891b      	ldrh	r3, [r3, #8]
 80022de:	f107 020e 	add.w	r2, r7, #14
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fadb 	bl	80018a0 <_Z26VL53L4CD_CheckForDataReadytPh>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]

		if (isReady)
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00c      	beq.n	800230e <_ZN11LaserSensor15update_distanceEv+0x5a>
		{
			/* (Mandatory) Clear HW interrupt to restart measurements */
			VL53L4CD_ClearInterrupt(address);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	891b      	ldrh	r3, [r3, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fa71 	bl	80017e0 <_Z23VL53L4CD_ClearInterruptt>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(address, &results);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	891a      	ldrh	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	330a      	adds	r3, #10
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7ff fc27 	bl	8001b5c <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
		}

		return status;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000008c 	.word	0x2000008c

0800231c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_ZNKSt14_Bit_referencecvbEv>:
#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    operator bool() const _GLIBCXX_NOEXCEPT
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_ZNSt14_Bit_referenceaSEb>:

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e009      	b.n	80023be <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
      return *this;
 80023be:	687b      	ldr	r3, [r7, #4]
    }
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    _GLIBCXX20_CONSTEXPR
    void
    _M_bump_up()
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6051      	str	r1, [r2, #4]
 8002404:	2b1f      	cmp	r3, #31
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1d1a      	adds	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
	}
    }
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da00      	bge.n	800244e <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 800244c:	331f      	adds	r3, #31
 800244e:	115b      	asrs	r3, r3, #5
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	425a      	negs	r2, r3
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	bf58      	it	pl
 8002466:	4253      	negpl	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	da07      	bge.n	8002480 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3320      	adds	r3, #32
 8002474:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1f1a      	subs	r2, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]
    }
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_ZStmiRKSt18_Bit_iterator_baseS1_>:
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }
#endif // three-way comparison

    friend _GLIBCXX20_CONSTEXPR ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
    {
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	461a      	mov	r2, r3
	      + __x._M_offset - __y._M_offset);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	441a      	add	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
    }
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff7b 	bl	80023cc <_ZNSt18_Bit_iterator_baseC1EPmj>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff6a 	bl	80023cc <_ZNSt18_Bit_iterator_baseC1EPmj>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff09 	bl	8002334 <_ZNSt14_Bit_referenceC1EPmm>
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt13_Bit_iteratorppEv>:

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator++()
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5c 	bl	80023f2 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 800253a:	687b      	ldr	r3, [r7, #4]
    }
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff6b 	bl	800242e <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8002558:	687b      	ldr	r3, [r7, #4]
    }
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_ZNKSt13_Bit_iteratorixEi>:
      return *this;
    }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator[](difference_type __i) const
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f80b 	bl	8002592 <_ZStplRKSt13_Bit_iteratori>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f107 0210 	add.w	r2, r7, #16
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ffbc 	bl	8002502 <_ZNKSt13_Bit_iteratordeEv>
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZStplRKSt13_Bit_iteratori>:

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025a6:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff ffc9 	bl	8002544 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 80025b2:	bf00      	nop
    }
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZNSt19_Bit_const_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fefc 	bl	80023cc <_ZNSt18_Bit_iterator_baseC1EPmj>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(const _Bit_iterator& __x)
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7ff feea 	bl	80023cc <_ZNSt18_Bit_iterator_baseC1EPmj>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00b      	b.n	800262e <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	1c4b      	adds	r3, r1, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002620:	2201      	movs	r2, #1
 8002622:	4807      	ldr	r0, [pc, #28]	@ (8002640 <_write+0x3c>)
 8002624:	f00a faaa 	bl	800cb7c <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	dbef      	blt.n	8002616 <_write+0x12>
   return len;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000228 	.word	0x20000228

08002644 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002654:	d104      	bne.n	8002660 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	4a03      	ldr	r2, [pc, #12]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800265e:	6013      	str	r3, [r2, #0]
  }
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	200002bc 	.word	0x200002bc

08002670 <_Z11get_time_usv>:

unsigned long get_time_us() {
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <_Z11get_time_usv+0x28>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <_Z11get_time_usv+0x2c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <_Z11get_time_usv+0x30>)
 8002684:	fb03 f202 	mul.w	r2, r3, r2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4413      	add	r3, r2
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20000148 	.word	0x20000148
 800269c:	200002bc 	.word	0x200002bc
 80026a0:	000f4240 	.word	0x000f4240

080026a4 <_Z20Error_Handler_CAN_okv>:

/**
 * @brief Error handler we call when CAN might still work.
 * It blinks the built-in LED at 1Hz AND sends status on CAN bus.
 */
void Error_Handler_CAN_ok() {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0

  // Blink the built-in LED at 1Hz
  uint32_t last_time = HAL_GetTick();
 80026aa:	f006 fda1 	bl	80091f0 <HAL_GetTick>
 80026ae:	6078      	str	r0, [r7, #4]
  while (true) {
    champi_state.spin_once();
 80026b0:	480d      	ldr	r0, [pc, #52]	@ (80026e8 <_Z20Error_Handler_CAN_okv+0x44>)
 80026b2:	f7fe fcc7 	bl	8001044 <_ZN11ChampiState9spin_onceEv>
    HAL_Delay(10); // 10ms required to match the main loop frequency (for control)
 80026b6:	200a      	movs	r0, #10
 80026b8:	f006 fda6 	bl	8009208 <HAL_Delay>

    if (HAL_GetTick() - last_time > 500) {
 80026bc:	f006 fd98 	bl	80091f0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026ca:	bf8c      	ite	hi
 80026cc:	2301      	movhi	r3, #1
 80026ce:	2300      	movls	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ec      	beq.n	80026b0 <_Z20Error_Handler_CAN_okv+0xc>
      last_time = HAL_GetTick();
 80026d6:	f006 fd8b 	bl	80091f0 <HAL_GetTick>
 80026da:	6078      	str	r0, [r7, #4]
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80026dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <_Z20Error_Handler_CAN_okv+0x48>)
 80026e2:	f007 fe9b 	bl	800a41c <HAL_GPIO_TogglePin>
    champi_state.spin_once();
 80026e6:	e7e3      	b.n	80026b0 <_Z20Error_Handler_CAN_okv+0xc>
 80026e8:	20000508 	.word	0x20000508
 80026ec:	48000400 	.word	0x48000400

080026f0 <_Z14tx_ok_or_resetv>:
/**
 * @brief Fonction qui attend que le l'envoi de données sur le CAN fonctionne. Ca envoie un message de test
 * à répétition jusqu'à ce que ça fonctionne.
 * Also blinks the built-in LED at 5 Hz.
 */
void tx_ok_or_reset() {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
  uint8_t buff[20] = {0}; // We need a big message to fill the FIFO
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]

  // Send a message to test if the can bus works (at least 1 node up)
  uint32_t ret = champi_can.send_msg(CAN_ID_ACT_TEST, (uint8_t *) buff, 20);
 8002708:	1d3a      	adds	r2, r7, #4
 800270a:	2314      	movs	r3, #20
 800270c:	f240 2103 	movw	r1, #515	@ 0x203
 8002710:	480f      	ldr	r0, [pc, #60]	@ (8002750 <_Z14tx_ok_or_resetv+0x60>)
 8002712:	f7fe fb09 	bl	8000d28 <_ZN9ChampiCan8send_msgEmPhm>
 8002716:	4603      	mov	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]

  if(ret==0){
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <_Z14tx_ok_or_resetv+0x56>
  }

  // If we get an error, retry doesn't work sometimes. So we reset the stm to try again. Also blink the led 10Hz

  // blink the built-in LED for 1s
  for (int i = 0; i < 10; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e00a      	b.n	800273c <_Z14tx_ok_or_resetv+0x4c>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800272a:	480a      	ldr	r0, [pc, #40]	@ (8002754 <_Z14tx_ok_or_resetv+0x64>)
 800272c:	f007 fe76 	bl	800a41c <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8002730:	2064      	movs	r0, #100	@ 0x64
 8002732:	f006 fd69 	bl	8009208 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b09      	cmp	r3, #9
 8002740:	ddf1      	ble.n	8002726 <_Z14tx_ok_or_resetv+0x36>
  }

  // Then reset the stm
  NVIC_SystemReset();
 8002742:	f7ff faef 	bl	8001d24 <__NVIC_SystemReset>
    return;
 8002746:	bf00      	nop

}
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200002c0 	.word	0x200002c0
 8002754:	48000400 	.word	0x48000400

08002758 <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b09b      	sub	sp, #108	@ 0x6c
 800275c:	af06      	add	r7, sp, #24
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]

    // Attention !! Quand on met un breakpoint dans cette fonction, on ne reçoit plus que 2 messages au lieu du
    // bon nombre.

    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d04a      	beq.n	8002802 <HAL_FDCAN_RxFifo0Callback+0xaa>
        /* Retrieve Rx messages from RX FIFO0 */
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800276c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002770:	f107 0208 	add.w	r2, r7, #8
 8002774:	2140      	movs	r1, #64	@ 0x40
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f007 f83e 	bl	80097f8 <HAL_FDCAN_GetRxMessage>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d014      	beq.n	80027b6 <HAL_FDCAN_RxFifo0Callback+0x5e>
            status_msg.status.status = msgs_can_Status_StatusType_ERROR;
 800278c:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800278e:	2203      	movs	r2, #3
 8002790:	735a      	strb	r2, [r3, #13]
            status_msg.status.error = msgs_can_Status_ErrorType_CAN_RX;
 8002792:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8002794:	2207      	movs	r2, #7
 8002796:	73da      	strb	r2, [r3, #15]
            champi_state.report_status(status_msg);
 8002798:	4e1c      	ldr	r6, [pc, #112]	@ (800280c <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800279a:	466d      	mov	r5, sp
 800279c:	f106 040c 	add.w	r4, r6, #12
 80027a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	602b      	str	r3, [r5, #0]
 80027a8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027ac:	4818      	ldr	r0, [pc, #96]	@ (8002810 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80027ae:	f7fe fbe9 	bl	8000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>
            Error_Handler_CAN_ok();
 80027b2:	f7ff ff77 	bl	80026a4 <_Z20Error_Handler_CAN_okv>
         * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
         * à ne pas modifier trop de variables partagées, et de priviligier la modifcation de variables
         * de 32 bits ou moins (pour que leur modification soit une opération atomique)
         * */

        if (RxHeader.Identifier == CAN_ID_ACT_ACTION) {
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b32      	cmp	r3, #50	@ 0x32
 80027ba:	d11d      	bne.n	80027f8 <HAL_FDCAN_RxFifo0Callback+0xa0>
            msg_recomposer_action.add_frame(RxData, RxHeader.DataLength);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027c4:	4619      	mov	r1, r3
 80027c6:	4813      	ldr	r0, [pc, #76]	@ (8002814 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027c8:	f7fe fc7e 	bl	80010c8 <_ZN17MessageRecomposer9add_frameEPhh>

            if (msg_recomposer_action.check_if_new_full_msg()) {
 80027cc:	4811      	ldr	r0, [pc, #68]	@ (8002814 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027ce:	f7fe fd47 	bl	8001260 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <HAL_FDCAN_RxFifo0Callback+0xa0>
                std::string proto_msg = msg_recomposer_action.get_full_msg();
 80027d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027dc:	490d      	ldr	r1, [pc, #52]	@ (8002814 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fd4a 	bl	8001278 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
                on_receive_action(proto_msg);
 80027e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f815 	bl	8002818 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

            }
 80027ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00b f9c4 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }

      if (RxHeader.Identifier == CAN_ID_ACT_RESET) {
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d101      	bne.n	8002802 <HAL_FDCAN_RxFifo0Callback+0xaa>
        NVIC_SystemReset();
 80027fe:	f7ff fa91 	bl	8001d24 <__NVIC_SystemReset>
      }

    }
}
 8002802:	bf00      	nop
 8002804:	3754      	adds	r7, #84	@ 0x54
 8002806:	46bd      	mov	sp, r7
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280a:	bf00      	nop
 800280c:	200005b0 	.word	0x200005b0
 8002810:	20000508 	.word	0x20000508
 8002814:	200002ec 	.word	0x200002ec

08002818 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


// ------------------------------------------ ON RECEIVE FUNCTIONS -----------------------------------------------

void on_receive_action(const std::string& proto_msg)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b08f      	sub	sp, #60	@ 0x3c
 800281c:	af06      	add	r7, sp, #24
 800281e:	6078      	str	r0, [r7, #4]
  // Allocate space for the decoded message.
  msgs_can_ActCmd ret_action = msgs_can_ActCmd_init_zero;
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
  // Create a stream that reads from the buffer.
  pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char*)proto_msg.c_str(), proto_msg.size());
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f00b fa88 	bl	800dd40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002830:	4604      	mov	r4, r0
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f00b f9d8 	bl	800dbe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002838:	4602      	mov	r2, r0
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4621      	mov	r1, r4
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fa7f 	bl	8005d44 <pb_istream_from_buffer>
  // Now we are ready to decode the message.
  if (!pb_decode(&stream_ret, msgs_can_ActCmd_fields, &ret_action)) {
 8002846:	f107 0218 	add.w	r2, r7, #24
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	491b      	ldr	r1, [pc, #108]	@ (80028bc <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fbb1 	bl	8006fb8 <pb_decode>
 8002856:	4603      	mov	r3, r0
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d014      	beq.n	800288c <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>
    // Decoding failed
    status_msg.status.status = msgs_can_Status_StatusType_ERROR;
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8002864:	2203      	movs	r2, #3
 8002866:	735a      	strb	r2, [r3, #13]
    status_msg.status.error = msgs_can_Status_ErrorType_PROTO_DECODE;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 800286a:	2204      	movs	r2, #4
 800286c:	73da      	strb	r2, [r3, #15]
    champi_state.report_status(status_msg);
 800286e:	4e14      	ldr	r6, [pc, #80]	@ (80028c0 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8002870:	466d      	mov	r5, sp
 8002872:	f106 040c 	add.w	r4, r6, #12
 8002876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002882:	4810      	ldr	r0, [pc, #64]	@ (80028c4 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac>)
 8002884:	f7fe fb7e 	bl	8000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>
    Error_Handler_CAN_ok();
 8002888:	f7ff ff0c 	bl	80026a4 <_Z20Error_Handler_CAN_okv>
  }

  // Use message

  switch (ret_action.action)
 800288c:	7e7b      	ldrb	r3, [r7, #25]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d00c      	beq.n	80028ac <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 8002892:	2b02      	cmp	r3, #2
 8002894:	dc0d      	bgt.n	80028b2 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
 800289a:	2b01      	cmp	r3, #1
 800289c:	d003      	beq.n	80028a6 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e>
      break;
    case msgs_can_ActActions_RELEASE_PLANT:
      request_plant_out();
      break;
    default:
      break;
 800289e:	e008      	b.n	80028b2 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9a>
      request_store_plants();
 80028a0:	f000 f89a 	bl	80029d8 <_Z20request_store_plantsv>
      break;
 80028a4:	e006      	b.n	80028b4 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
      request_stop_storing();
 80028a6:	f000 f8b7 	bl	8002a18 <_Z20request_stop_storingv>
      break;
 80028aa:	e003      	b.n	80028b4 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
      request_plant_out();
 80028ac:	f000 f8ce 	bl	8002a4c <_Z17request_plant_outv>
      break;
 80028b0:	e000      	b.n	80028b4 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
      break;
 80028b2:	bf00      	nop
  }
}
 80028b4:	bf00      	nop
 80028b6:	3724      	adds	r7, #36	@ 0x24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028bc:	0800f760 	.word	0x0800f760
 80028c0:	200005b0 	.word	0x200005b0
 80028c4:	20000508 	.word	0x20000508

080028c8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f001 fa79 	bl	8003dc8 <_ZNSaI11LaserSensorED1Ev>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN14ReservoirStateC1Ev>:
  bool hopper_left_closed = false;
  bool hopper_right_closed = false;
  Action current_action = INITIALIZING;
} system_state;

struct ReservoirState
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b08b      	sub	sp, #44	@ 0x2c
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	687c      	ldr	r4, [r7, #4]
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	f8c3 200b 	str.w	r2, [r3, #11]
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	230f      	movs	r3, #15
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fad3 	bl	8003eb4 <_ZNSaIbEC1Ev>
 800290e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002912:	f107 020c 	add.w	r2, r7, #12
 8002916:	ca06      	ldmia	r2, {r1, r2}
 8002918:	4620      	mov	r0, r4
 800291a:	f001 fae3 	bl	8003ee4 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 800291e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fad2 	bl	8003ecc <_ZNSaIbED1Ev>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	615a      	str	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	372c      	adds	r7, #44	@ 0x2c
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
	...

08002940 <_Z15print_reservoirv>:
  int head = 0;
  int nb_stored = 0;
} reservoir_state;

void print_reservoir()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
  // print reservoir state
  printf("\n");
 8002946:	200a      	movs	r0, #10
 8002948:	f00b fbf8 	bl	800e13c <putchar>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e016      	b.n	8002980 <_Z15print_reservoirv+0x40>
  {
    printf("%s", reservoir_state.slots[i] ? "1" : "0");
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	491a      	ldr	r1, [pc, #104]	@ (80029c0 <_Z15print_reservoirv+0x80>)
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fb0e 	bl	8003f7a <_ZNSt6vectorIbSaIbEEixEj>
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fcfa 	bl	800235a <_ZNKSt14_Bit_referencecvbEv>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <_Z15print_reservoirv+0x30>
 800296c:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <_Z15print_reservoirv+0x84>)
 800296e:	e000      	b.n	8002972 <_Z15print_reservoirv+0x32>
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <_Z15print_reservoirv+0x88>)
 8002972:	4619      	mov	r1, r3
 8002974:	4815      	ldr	r0, [pc, #84]	@ (80029cc <_Z15print_reservoirv+0x8c>)
 8002976:	f00b fbcf 	bl	800e118 <iprintf>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3301      	adds	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	480f      	ldr	r0, [pc, #60]	@ (80029c0 <_Z15print_reservoirv+0x80>)
 8002982:	f001 fadd 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf8c      	ite	hi
 800298e:	2301      	movhi	r3, #1
 8002990:	2300      	movls	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1dc      	bne.n	8002952 <_Z15print_reservoirv+0x12>

  }
  printf("nb stored: %d\n", reservoir_state.nb_stored);
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <_Z15print_reservoirv+0x80>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4619      	mov	r1, r3
 800299e:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <_Z15print_reservoirv+0x90>)
 80029a0:	f00b fbba 	bl	800e118 <iprintf>
  printf("head: %d\n", reservoir_state.head);
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <_Z15print_reservoirv+0x80>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4619      	mov	r1, r3
 80029aa:	480a      	ldr	r0, [pc, #40]	@ (80029d4 <_Z15print_reservoirv+0x94>)
 80029ac:	f00b fbb4 	bl	800e118 <iprintf>
  printf("\n");
 80029b0:	200a      	movs	r0, #10
 80029b2:	f00b fbc3 	bl	800e13c <putchar>
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000069c 	.word	0x2000069c
 80029c4:	0800f0b0 	.word	0x0800f0b0
 80029c8:	0800f0b4 	.word	0x0800f0b4
 80029cc:	0800f0b8 	.word	0x0800f0b8
 80029d0:	0800f0bc 	.word	0x0800f0bc
 80029d4:	0800f0cc 	.word	0x0800f0cc

080029d8 <_Z20request_store_plantsv>:


void request_store_plants()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  printf("Storing requested\n");
 80029dc:	480b      	ldr	r0, [pc, #44]	@ (8002a0c <_Z20request_store_plantsv+0x34>)
 80029de:	f00b fc0b 	bl	800e1f8 <puts>
  system_state.current_action = STORING;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <_Z20request_store_plantsv+0x38>)
 80029e4:	2202      	movs	r2, #2
 80029e6:	709a      	strb	r2, [r3, #2]

  // Clear distance sensors buffers (?)
  sensors[LEFT].clear_interrupt();
 80029e8:	2100      	movs	r1, #0
 80029ea:	480a      	ldr	r0, [pc, #40]	@ (8002a14 <_Z20request_store_plantsv+0x3c>)
 80029ec:	f001 fadd 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc50 	bl	8002298 <_ZN11LaserSensor15clear_interruptEv>
  sensors[RIGHT].clear_interrupt();
 80029f8:	2101      	movs	r1, #1
 80029fa:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <_Z20request_store_plantsv+0x3c>)
 80029fc:	f001 fad5 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fc48 	bl	8002298 <_ZN11LaserSensor15clear_interruptEv>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0800f0d8 	.word	0x0800f0d8
 8002a10:	20000698 	.word	0x20000698
 8002a14:	200005f4 	.word	0x200005f4

08002a18 <_Z20request_stop_storingv>:


void request_stop_storing()
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  printf("Stop storing requested\n");
 8002a1c:	4808      	ldr	r0, [pc, #32]	@ (8002a40 <_Z20request_stop_storingv+0x28>)
 8002a1e:	f00b fbeb 	bl	800e1f8 <puts>
  if(system_state.current_action == FREE_CIRCLE_OUT)
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <_Z20request_stop_storingv+0x2c>)
 8002a24:	789b      	ldrb	r3, [r3, #2]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d104      	bne.n	8002a34 <_Z20request_stop_storingv+0x1c>
  {
    printf("Interpreted as circle close\n");
 8002a2a:	4807      	ldr	r0, [pc, #28]	@ (8002a48 <_Z20request_stop_storingv+0x30>)
 8002a2c:	f00b fbe4 	bl	800e1f8 <puts>
    close_circle_plant();
 8002a30:	f000 fb1c 	bl	800306c <_Z18close_circle_plantv>
  }

  system_state.current_action = FREE;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <_Z20request_stop_storingv+0x2c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	709a      	strb	r2, [r3, #2]
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800f0ec 	.word	0x0800f0ec
 8002a44:	20000698 	.word	0x20000698
 8002a48:	0800f104 	.word	0x0800f104

08002a4c <_Z17request_plant_outv>:

void request_plant_out()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  printf("Plant out requested\n");
 8002a50:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <_Z17request_plant_outv+0x14>)
 8002a52:	f00b fbd1 	bl	800e1f8 <puts>
  system_state.current_action = PUTTING_OUT;
 8002a56:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <_Z17request_plant_outv+0x18>)
 8002a58:	2203      	movs	r2, #3
 8002a5a:	709a      	strb	r2, [r3, #2]
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	0800f120 	.word	0x0800f120
 8002a64:	20000698 	.word	0x20000698

08002a68 <_Z11ping_servosv>:

// ================================================ DIAGNOSTIC FUNCTIONS ===============================================

int ping_servos()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
  int res = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	e021      	b.n	8002abc <_Z11ping_servosv+0x54>
  {
    int id = servo_ids_to_check[i];
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4818      	ldr	r0, [pc, #96]	@ (8002ae0 <_Z11ping_servosv+0x78>)
 8002a7e:	f001 fa09 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8002a82:	4603      	mov	r3, r0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	607b      	str	r3, [r7, #4]
    int pos = servos.ReadPos(id);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4815      	ldr	r0, [pc, #84]	@ (8002ae4 <_Z11ping_servosv+0x7c>)
 8002a90:	f7fe fd59 	bl	8001546 <_ZN7SCServo7ReadPosEh>
 8002a94:	6038      	str	r0, [r7, #0]

    if(pos == -1)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a9c:	d107      	bne.n	8002aae <_Z11ping_servosv+0x46>
    {
      printf("Error reading servo %d\n", id);
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4811      	ldr	r0, [pc, #68]	@ (8002ae8 <_Z11ping_servosv+0x80>)
 8002aa2:	f00b fb39 	bl	800e118 <iprintf>
      res = -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e003      	b.n	8002ab6 <_Z11ping_servosv+0x4e>
    }
    else
    {
      printf("Servo %d was ping successfully\n", id);
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	480e      	ldr	r0, [pc, #56]	@ (8002aec <_Z11ping_servosv+0x84>)
 8002ab2:	f00b fb31 	bl	800e118 <iprintf>
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	4808      	ldr	r0, [pc, #32]	@ (8002ae0 <_Z11ping_servosv+0x78>)
 8002abe:	f001 fa87 	bl	8003fd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	bf8c      	ite	hi
 8002aca:	2301      	movhi	r3, #1
 8002acc:	2300      	movls	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1d1      	bne.n	8002a78 <_Z11ping_servosv+0x10>
    }
  }
  return res;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000068c 	.word	0x2000068c
 8002ae4:	20000688 	.word	0x20000688
 8002ae8:	0800f134 	.word	0x0800f134
 8002aec:	0800f14c 	.word	0x0800f14c

08002af0 <_Z12setup_lasersv>:
 * @brief Setup the distance sensors
 *
 * @return int 0 if all sensors are setup correctly, otherwise the error code
 */
int setup_lasers()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2110      	movs	r1, #16
 8002afa:	4819      	ldr	r0, [pc, #100]	@ (8002b60 <_Z12setup_lasersv+0x70>)
 8002afc:	f007 fc76 	bl	800a3ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2120      	movs	r1, #32
 8002b04:	4816      	ldr	r0, [pc, #88]	@ (8002b60 <_Z12setup_lasersv+0x70>)
 8002b06:	f007 fc71 	bl	800a3ec <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  int status = sensors[LEFT].setup();
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4815      	ldr	r0, [pc, #84]	@ (8002b64 <_Z12setup_lasersv+0x74>)
 8002b0e:	f001 fa4c 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff faff 	bl	8002118 <_ZN11LaserSensor5setupEv>
 8002b1a:	6078      	str	r0, [r7, #4]

  if(status)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <_Z12setup_lasersv+0x36>
  {
    return status;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	e018      	b.n	8002b58 <_Z12setup_lasersv+0x68>
  }

  /* Setup the second laser sensor */
  status = sensors[RIGHT].setup();
 8002b26:	2101      	movs	r1, #1
 8002b28:	480e      	ldr	r0, [pc, #56]	@ (8002b64 <_Z12setup_lasersv+0x74>)
 8002b2a:	f001 fa3e 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff faf1 	bl	8002118 <_ZN11LaserSensor5setupEv>
 8002b36:	6078      	str	r0, [r7, #4]

  if(status)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <_Z12setup_lasersv+0x52>
  {
    return status;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	e00a      	b.n	8002b58 <_Z12setup_lasersv+0x68>
  }

  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	2110      	movs	r1, #16
 8002b46:	4806      	ldr	r0, [pc, #24]	@ (8002b60 <_Z12setup_lasersv+0x70>)
 8002b48:	f007 fc50 	bl	800a3ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2120      	movs	r1, #32
 8002b50:	4803      	ldr	r0, [pc, #12]	@ (8002b60 <_Z12setup_lasersv+0x70>)
 8002b52:	f007 fc4b 	bl	800a3ec <HAL_GPIO_WritePin>

  return 0;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	48000400 	.word	0x48000400
 8002b64:	200005f4 	.word	0x200005f4

08002b68 <_Z29reservoir_initialize_and_testv>:


void reservoir_initialize_and_test()
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  reservoir_rotate(2);
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f000 f9df 	bl	8002f30 <_Z16reservoir_rotatei>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <_Z24lift_initialize_and_testv>:

void lift_initialize_and_test()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  // Initialization steps:
  // 1. If button pressed, move up a little
  // 2. Move down until button is pressed

  stepper_lift.set_pos(0);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4817      	ldr	r0, [pc, #92]	@ (8002bdc <_Z24lift_initialize_and_testv+0x64>)
 8002b80:	f7ff f986 	bl	8001e90 <_ZN7Stepper7set_posEi>

  // 1
  if(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_RESET)
 8002b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b8c:	f007 fc16 	bl	800a3bc <HAL_GPIO_ReadPin>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <_Z24lift_initialize_and_testv+0x54>
  {
	printf("Lift Goes Up...\n");
 8002ba0:	480f      	ldr	r0, [pc, #60]	@ (8002be0 <_Z24lift_initialize_and_testv+0x68>)
 8002ba2:	f00b fb29 	bl	800e1f8 <puts>
    stepper_lift.set_goal(3200);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002bac:	480b      	ldr	r0, [pc, #44]	@ (8002bdc <_Z24lift_initialize_and_testv+0x64>)
 8002bae:	f7ff f92f 	bl	8001e10 <_ZN7Stepper8set_goalEib>
    while(!stepper_lift.is_stopped())
 8002bb2:	e002      	b.n	8002bba <_Z24lift_initialize_and_testv+0x42>
    {
      stepper_lift.spin_once();
 8002bb4:	4809      	ldr	r0, [pc, #36]	@ (8002bdc <_Z24lift_initialize_and_testv+0x64>)
 8002bb6:	f7ff f979 	bl	8001eac <_ZN7Stepper9spin_onceEv>
    while(!stepper_lift.is_stopped())
 8002bba:	4808      	ldr	r0, [pc, #32]	@ (8002bdc <_Z24lift_initialize_and_testv+0x64>)
 8002bbc:	f7ff f9e8 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f3      	bne.n	8002bb4 <_Z24lift_initialize_and_testv+0x3c>
    }
  }

  printf("Lift Goes Down...\n");
 8002bcc:	4805      	ldr	r0, [pc, #20]	@ (8002be4 <_Z24lift_initialize_and_testv+0x6c>)
 8002bce:	f00b fb13 	bl	800e1f8 <puts>

  // 2
  lift_go_down();
 8002bd2:	f000 f81d 	bl	8002c10 <_Z12lift_go_downv>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000600 	.word	0x20000600
 8002be0:	0800f16c 	.word	0x0800f16c
 8002be4:	0800f17c 	.word	0x0800f17c

08002be8 <_Z27hoppers_initialize_and_testv>:
/**
 * Close then open the hoppers
 *
 */
void hoppers_initialize_and_test()
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  hopper_close(LEFT);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f000 f8af 	bl	8002d50 <_Z12hopper_closei>
  hopper_close(RIGHT);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 f8ac 	bl	8002d50 <_Z12hopper_closei>

  HAL_Delay(1000); // Because hoppers functions are not blocking
 8002bf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bfc:	f006 fb04 	bl	8009208 <HAL_Delay>

  hopper_open(LEFT);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f000 f8cb 	bl	8002d9c <_Z11hopper_openi>
  hopper_open(RIGHT);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 f8c8 	bl	8002d9c <_Z11hopper_openi>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_Z12lift_go_downv>:


// ----------------------------------------- LIFT -----------------------------------------

void lift_go_down()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(-100000);
 8002c14:	2200      	movs	r2, #0
 8002c16:	4919      	ldr	r1, [pc, #100]	@ (8002c7c <_Z12lift_go_downv+0x6c>)
 8002c18:	4819      	ldr	r0, [pc, #100]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c1a:	f7ff f8f9 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 8002c1e:	e002      	b.n	8002c26 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 8002c20:	4817      	ldr	r0, [pc, #92]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c22:	f7ff f943 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 8002c26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2e:	f007 fbc5 	bl	800a3bc <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ee      	bne.n	8002c20 <_Z12lift_go_downv+0x10>
  }


  // Turn (offset)
  stepper_lift.set_pos(0);
 8002c42:	2100      	movs	r1, #0
 8002c44:	480e      	ldr	r0, [pc, #56]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c46:	f7ff f923 	bl	8001e90 <_ZN7Stepper7set_posEi>
  stepper_lift.set_goal(LIFT_OFFSET_FROM_BUTTON, true);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8002c50:	480b      	ldr	r0, [pc, #44]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c52:	f7ff f8dd 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002c56:	e002      	b.n	8002c5e <_Z12lift_go_downv+0x4e>
  {
    stepper_lift.spin_once();
 8002c58:	4809      	ldr	r0, [pc, #36]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c5a:	f7ff f927 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002c5e:	4808      	ldr	r0, [pc, #32]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c60:	f7ff f996 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f3      	bne.n	8002c58 <_Z12lift_go_downv+0x48>
  }

  stepper_lift.set_pos(0);
 8002c70:	2100      	movs	r1, #0
 8002c72:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <_Z12lift_go_downv+0x70>)
 8002c74:	f7ff f90c 	bl	8001e90 <_ZN7Stepper7set_posEi>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffe7960 	.word	0xfffe7960
 8002c80:	20000600 	.word	0x20000600

08002c84 <_Z10lift_go_upv>:


void lift_go_up()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 8002c8e:	4809      	ldr	r0, [pc, #36]	@ (8002cb4 <_Z10lift_go_upv+0x30>)
 8002c90:	f7ff f8be 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002c94:	e002      	b.n	8002c9c <_Z10lift_go_upv+0x18>
  {
    stepper_lift.spin_once();
 8002c96:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <_Z10lift_go_upv+0x30>)
 8002c98:	f7ff f908 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002c9c:	4805      	ldr	r0, [pc, #20]	@ (8002cb4 <_Z10lift_go_upv+0x30>)
 8002c9e:	f7ff f977 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f3      	bne.n	8002c96 <_Z10lift_go_upv+0x12>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000600 	.word	0x20000600

08002cb8 <_Z14lift_go_middlev>:


void lift_go_middle()
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002cc2:	4809      	ldr	r0, [pc, #36]	@ (8002ce8 <_Z14lift_go_middlev+0x30>)
 8002cc4:	f7ff f8a4 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002cc8:	e002      	b.n	8002cd0 <_Z14lift_go_middlev+0x18>
  {
    stepper_lift.spin_once();
 8002cca:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <_Z14lift_go_middlev+0x30>)
 8002ccc:	f7ff f8ee 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002cd0:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <_Z14lift_go_middlev+0x30>)
 8002cd2:	f7ff f95d 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f3      	bne.n	8002cca <_Z14lift_go_middlev+0x12>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000600 	.word	0x20000600

08002cec <_Z14grabber_extendv>:

// ----------------------------------------- GRABBER -----------------------------------------

void grabber_extend()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_EXTEND, 1000);
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <_Z14grabber_extendv+0x28>)
 8002d02:	f7fe fb92 	bl	800142a <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 8002d06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d0a:	f006 fa7d 	bl	8009208 <HAL_Delay>
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000688 	.word	0x20000688

08002d18 <_Z15grabber_retractb>:


void grabber_retract(bool block)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 500);
 8002d22:	2301      	movs	r3, #1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d2a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d2e:	2108      	movs	r1, #8
 8002d30:	4806      	ldr	r0, [pc, #24]	@ (8002d4c <_Z15grabber_retractb+0x34>)
 8002d32:	f7fe fb7a 	bl	800142a <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <_Z15grabber_retractb+0x2c>
 8002d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d40:	f006 fa62 	bl	8009208 <HAL_Delay>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000688 	.word	0x20000688

08002d50 <_Z12hopper_closei>:


// ----------------------------------------- HOPPERS -----------------------------------------

void hopper_close(int side)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_close[side], 1000);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480c      	ldr	r0, [pc, #48]	@ (8002d90 <_Z12hopper_closei+0x40>)
 8002d5e:	f001 f899 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8002d62:	4603      	mov	r3, r0
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b2dc      	uxtb	r4, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4809      	ldr	r0, [pc, #36]	@ (8002d94 <_Z12hopper_closei+0x44>)
 8002d6e:	f001 f891 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8002d72:	4603      	mov	r3, r0
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2301      	movs	r3, #1
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <_Z12hopper_closei+0x48>)
 8002d82:	f7fe fb52 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200005d0 	.word	0x200005d0
 8002d94:	200005e8 	.word	0x200005e8
 8002d98:	20000688 	.word	0x20000688

08002d9c <_Z11hopper_openi>:


void hopper_open(int side)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_open[side], 500);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <_Z11hopper_openi+0x40>)
 8002daa:	f001 f873 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8002dae:	4603      	mov	r3, r0
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b2dc      	uxtb	r4, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4809      	ldr	r0, [pc, #36]	@ (8002de0 <_Z11hopper_openi+0x44>)
 8002dba:	f001 f86b 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <_Z11hopper_openi+0x48>)
 8002dce:	f7fe fb2c 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200005d0 	.word	0x200005d0
 8002de0:	200005dc 	.word	0x200005dc
 8002de4:	20000688 	.word	0x20000688

08002de8 <_Z16reservoir_rotateb>:


// ---------------------------------------- RESERVOIR ----------------------------------------

void reservoir_rotate(bool keep_speed=false)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  // Set big goal. When button is pressed, reset current pos to 0 and stop the motor
  stepper_res.set_pos(0);
 8002df2:	2100      	movs	r1, #0
 8002df4:	482d      	ldr	r0, [pc, #180]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002df6:	f7ff f84b 	bl	8001e90 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(100000, keep_speed);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	492c      	ldr	r1, [pc, #176]	@ (8002eb0 <_Z16reservoir_rotateb+0xc8>)
 8002e00:	482a      	ldr	r0, [pc, #168]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e02:	f7ff f805 	bl	8001e10 <_ZN7Stepper8set_goalEib>

  // Turn untill the button is released
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8002e06:	e002      	b.n	8002e0e <_Z16reservoir_rotateb+0x26>
  {
    stepper_res.spin_once();
 8002e08:	4828      	ldr	r0, [pc, #160]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e0a:	f7ff f84f 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8002e0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e16:	f007 fad1 	bl	800a3bc <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <_Z16reservoir_rotateb+0x20>
  }

  // Debouncing: spin for 200ms
  unsigned long start = HAL_GetTick();
 8002e2a:	f006 f9e1 	bl	80091f0 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]
  while(HAL_GetTick() - start < 200)
 8002e30:	e002      	b.n	8002e38 <_Z16reservoir_rotateb+0x50>
  {
    stepper_res.spin_once();
 8002e32:	481e      	ldr	r0, [pc, #120]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e34:	f7ff f83a 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(HAL_GetTick() - start < 200)
 8002e38:	f006 f9da 	bl	80091f0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e44:	bf94      	ite	ls
 8002e46:	2301      	movls	r3, #1
 8002e48:	2300      	movhi	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <_Z16reservoir_rotateb+0x4a>
  }

  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002e50:	e002      	b.n	8002e58 <_Z16reservoir_rotateb+0x70>
  {
    stepper_res.spin_once();
 8002e52:	4816      	ldr	r0, [pc, #88]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e54:	f7ff f82a 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002e58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e60:	f007 faac 	bl	800a3bc <HAL_GPIO_ReadPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <_Z16reservoir_rotateb+0x6a>
  }

  // Turn (offset)
  stepper_res.set_pos(0);
 8002e74:	2100      	movs	r1, #0
 8002e76:	480d      	ldr	r0, [pc, #52]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e78:	f7ff f80a 	bl	8001e90 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FROM_BUTTON, true);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	480a      	ldr	r0, [pc, #40]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e82:	f7fe ffc5 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002e86:	e002      	b.n	8002e8e <_Z16reservoir_rotateb+0xa6>
  {
    stepper_res.spin_once();
 8002e88:	4808      	ldr	r0, [pc, #32]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e8a:	f7ff f80f 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002e8e:	4807      	ldr	r0, [pc, #28]	@ (8002eac <_Z16reservoir_rotateb+0xc4>)
 8002e90:	f7ff f87e 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f083 0301 	eor.w	r3, r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f3      	bne.n	8002e88 <_Z16reservoir_rotateb+0xa0>
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000644 	.word	0x20000644
 8002eb0:	000186a0 	.word	0x000186a0

08002eb4 <_Z27reservoir_align_with_outputv>:

void reservoir_align_with_output()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	480c      	ldr	r0, [pc, #48]	@ (8002eec <_Z27reservoir_align_with_outputv+0x38>)
 8002ebc:	f7fe ffe8 	bl	8001e90 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FOR_OUTPUT);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002ec6:	4809      	ldr	r0, [pc, #36]	@ (8002eec <_Z27reservoir_align_with_outputv+0x38>)
 8002ec8:	f7fe ffa2 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002ecc:	e002      	b.n	8002ed4 <_Z27reservoir_align_with_outputv+0x20>
  {
    stepper_res.spin_once();
 8002ece:	4807      	ldr	r0, [pc, #28]	@ (8002eec <_Z27reservoir_align_with_outputv+0x38>)
 8002ed0:	f7fe ffec 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002ed4:	4805      	ldr	r0, [pc, #20]	@ (8002eec <_Z27reservoir_align_with_outputv+0x38>)
 8002ed6:	f7ff f85b 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f083 0301 	eor.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f3      	bne.n	8002ece <_Z27reservoir_align_with_outputv+0x1a>
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000644 	.word	0x20000644

08002ef0 <_Z22reservoir_realign_backv>:

void reservoir_realign_back()
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	480c      	ldr	r0, [pc, #48]	@ (8002f28 <_Z22reservoir_realign_backv+0x38>)
 8002ef8:	f7fe ffca 	bl	8001e90 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(-RES_OFFSET_FOR_OUTPUT);
 8002efc:	2200      	movs	r2, #0
 8002efe:	490b      	ldr	r1, [pc, #44]	@ (8002f2c <_Z22reservoir_realign_backv+0x3c>)
 8002f00:	4809      	ldr	r0, [pc, #36]	@ (8002f28 <_Z22reservoir_realign_backv+0x38>)
 8002f02:	f7fe ff85 	bl	8001e10 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002f06:	e002      	b.n	8002f0e <_Z22reservoir_realign_backv+0x1e>
  {
    stepper_res.spin_once();
 8002f08:	4807      	ldr	r0, [pc, #28]	@ (8002f28 <_Z22reservoir_realign_backv+0x38>)
 8002f0a:	f7fe ffcf 	bl	8001eac <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002f0e:	4806      	ldr	r0, [pc, #24]	@ (8002f28 <_Z22reservoir_realign_backv+0x38>)
 8002f10:	f7ff f83e 	bl	8001f90 <_ZN7Stepper10is_stoppedEv>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f083 0301 	eor.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f3      	bne.n	8002f08 <_Z22reservoir_realign_backv+0x18>
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000644 	.word	0x20000644
 8002f2c:	fffffce0 	.word	0xfffffce0

08002f30 <_Z16reservoir_rotatei>:


void reservoir_rotate(int n_slots)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < n_slots; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e00b      	b.n	8002f56 <_Z16reservoir_rotatei+0x26>
  {
    reservoir_rotate(i>0);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfcc      	ite	gt
 8002f44:	2301      	movgt	r3, #1
 8002f46:	2300      	movle	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff4c 	bl	8002de8 <_Z16reservoir_rotateb>
  for(int i = 0; i < n_slots; i++)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	dbef      	blt.n	8002f3e <_Z16reservoir_rotatei+0xe>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_Z14close_fildeferv>:

void close_fildefer()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_CLOSED, 1000);
 8002f6e:	2301      	movs	r3, #1
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f76:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8002f7a:	2112      	movs	r1, #18
 8002f7c:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <_Z14close_fildeferv+0x20>)
 8002f7e:	f7fe fa54 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000688 	.word	0x20000688

08002f8c <_Z13hide_fildeferv>:

void hide_fildefer()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
 8002f92:	2301      	movs	r3, #1
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f9a:	22c8      	movs	r2, #200	@ 0xc8
 8002f9c:	2112      	movs	r1, #18
 8002f9e:	4803      	ldr	r0, [pc, #12]	@ (8002fac <_Z13hide_fildeferv+0x20>)
 8002fa0:	f7fe fa43 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000688 	.word	0x20000688

08002fb0 <_Z19fildefer_initializev>:

void fildefer_initialize()
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  // servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
  hide_fildefer();
 8002fb4:	f7ff ffea 	bl	8002f8c <_Z13hide_fildeferv>
  HAL_Delay(1000);
 8002fb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fbc:	f006 f924 	bl	8009208 <HAL_Delay>
  close_fildefer();
 8002fc0:	f7ff ffd2 	bl	8002f68 <_Z14close_fildeferv>
  HAL_Delay(1000);
 8002fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fc8:	f006 f91e 	bl	8009208 <HAL_Delay>
  hide_fildefer();
 8002fcc:	f7ff ffde 	bl	8002f8c <_Z13hide_fildeferv>
  HAL_Delay(1000);
 8002fd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fd4:	f006 f918 	bl	8009208 <HAL_Delay>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_Z10push_plantv>:

void push_plant()
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_PUSHED, 500);
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002fea:	22c8      	movs	r2, #200	@ 0xc8
 8002fec:	2109      	movs	r1, #9
 8002fee:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <_Z10push_plantv+0x20>)
 8002ff0:	f7fe fa1b 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000688 	.word	0x20000688

08003000 <_Z19retract_servo_plantv>:
void retract_servo_plant()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED, 200);
 8003006:	2301      	movs	r3, #1
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	23c8      	movs	r3, #200	@ 0xc8
 800300c:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8003010:	2109      	movs	r1, #9
 8003012:	4803      	ldr	r0, [pc, #12]	@ (8003020 <_Z19retract_servo_plantv+0x20>)
 8003014:	f7fe fa09 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000688 	.word	0x20000688

08003024 <_Z17open_circle_plantv>:

void open_circle_plant()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN, 200);
 800302a:	2301      	movs	r3, #1
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	23c8      	movs	r3, #200	@ 0xc8
 8003030:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8003034:	2110      	movs	r1, #16
 8003036:	4803      	ldr	r0, [pc, #12]	@ (8003044 <_Z17open_circle_plantv+0x20>)
 8003038:	f7fe f9f7 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000688 	.word	0x20000688

08003048 <_Z22open_circle_plant_morev>:
void open_circle_plant_more()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN_MORE, 200);
 800304e:	2301      	movs	r3, #1
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	23c8      	movs	r3, #200	@ 0xc8
 8003054:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003058:	2110      	movs	r1, #16
 800305a:	4803      	ldr	r0, [pc, #12]	@ (8003068 <_Z22open_circle_plant_morev+0x20>)
 800305c:	f7fe f9e5 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000688 	.word	0x20000688

0800306c <_Z18close_circle_plantv>:
void close_circle_plant()
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE, 200);
 8003072:	2301      	movs	r3, #1
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	23c8      	movs	r3, #200	@ 0xc8
 8003078:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800307c:	2110      	movs	r1, #16
 800307e:	4803      	ldr	r0, [pc, #12]	@ (800308c <_Z18close_circle_plantv+0x20>)
 8003080:	f7fe f9d3 	bl	800142a <_ZN7SCServo8WritePosEhiih>
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000688 	.word	0x20000688

08003090 <_Z28pusher_and_circle_initializev>:

void pusher_and_circle_initialize()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af02      	add	r7, sp, #8
  // init circle
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE+50, 200);
 8003096:	2301      	movs	r3, #1
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	23c8      	movs	r3, #200	@ 0xc8
 800309c:	f240 224e 	movw	r2, #590	@ 0x24e
 80030a0:	2110      	movs	r1, #16
 80030a2:	4811      	ldr	r0, [pc, #68]	@ (80030e8 <_Z28pusher_and_circle_initializev+0x58>)
 80030a4:	f7fe f9c1 	bl	800142a <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 80030a8:	20c8      	movs	r0, #200	@ 0xc8
 80030aa:	f006 f8ad 	bl	8009208 <HAL_Delay>
  close_circle_plant();
 80030ae:	f7ff ffdd 	bl	800306c <_Z18close_circle_plantv>

  //init pusher
  retract_servo_plant();
 80030b2:	f7ff ffa5 	bl	8003000 <_Z19retract_servo_plantv>
  HAL_Delay(500);
 80030b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030ba:	f006 f8a5 	bl	8009208 <HAL_Delay>
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED-50, 200);
 80030be:	2301      	movs	r3, #1
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	23c8      	movs	r3, #200	@ 0xc8
 80030c4:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 80030c8:	2109      	movs	r1, #9
 80030ca:	4807      	ldr	r0, [pc, #28]	@ (80030e8 <_Z28pusher_and_circle_initializev+0x58>)
 80030cc:	f7fe f9ad 	bl	800142a <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 80030d0:	20c8      	movs	r0, #200	@ 0xc8
 80030d2:	f006 f899 	bl	8009208 <HAL_Delay>
  retract_servo_plant();
 80030d6:	f7ff ff93 	bl	8003000 <_Z19retract_servo_plantv>
  HAL_Delay(500);
 80030da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030de:	f006 f893 	bl	8009208 <HAL_Delay>
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000688 	.word	0x20000688

080030ec <_Z25search_next_plant_to_pushv>:

int search_next_plant_to_push()
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
  // the output is aligned with the head + 5
  // we search in reverse order till we find a plant
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e02b      	b.n	8003150 <_Z25search_next_plant_to_pushv+0x64>
  {
    int index = (reservoir_state.head + 5 - i) % reservoir_state.slots.size();
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <_Z25search_next_plant_to_pushv+0x88>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	1d5a      	adds	r2, r3, #5
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	461c      	mov	r4, r3
 8003104:	481b      	ldr	r0, [pc, #108]	@ (8003174 <_Z25search_next_plant_to_pushv+0x88>)
 8003106:	f000 ff1b 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800310a:	4603      	mov	r3, r0
 800310c:	fbb4 f2f3 	udiv	r2, r4, r3
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	1ae3      	subs	r3, r4, r3
 8003116:	60bb      	str	r3, [r7, #8]
    if (index < 0)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	da06      	bge.n	800312c <_Z25search_next_plant_to_pushv+0x40>
    {
      index += reservoir_state.slots.size();
 800311e:	4815      	ldr	r0, [pc, #84]	@ (8003174 <_Z25search_next_plant_to_pushv+0x88>)
 8003120:	f000 ff0e 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
    }

    if (reservoir_state.slots[index])
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	463b      	mov	r3, r7
 8003130:	4910      	ldr	r1, [pc, #64]	@ (8003174 <_Z25search_next_plant_to_pushv+0x88>)
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff21 	bl	8003f7a <_ZNSt6vectorIbSaIbEEixEj>
 8003138:	463b      	mov	r3, r7
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f90d 	bl	800235a <_ZNKSt14_Bit_referencecvbEv>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <_Z25search_next_plant_to_pushv+0x5e>
    {
      return i;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	e010      	b.n	800316c <_Z25search_next_plant_to_pushv+0x80>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	4808      	ldr	r0, [pc, #32]	@ (8003174 <_Z25search_next_plant_to_pushv+0x88>)
 8003152:	f000 fef5 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	bf8c      	ite	hi
 800315e:	2301      	movhi	r3, #1
 8003160:	2300      	movls	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1c7      	bne.n	80030f8 <_Z25search_next_plant_to_pushv+0xc>
    }
  }
  return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	2000069c 	.word	0x2000069c

08003178 <_Z18push_one_plant_outv>:

void push_one_plant_out()
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
  // search for a plant to push
  int nb_slot_till_next_plant = search_next_plant_to_push();
 800317e:	f7ff ffb5 	bl	80030ec <_Z25search_next_plant_to_pushv>
 8003182:	60b8      	str	r0, [r7, #8]
  printf("\n\n");
 8003184:	4847      	ldr	r0, [pc, #284]	@ (80032a4 <_Z18push_one_plant_outv+0x12c>)
 8003186:	f00b f837 	bl	800e1f8 <puts>
  printf("next plant to push: %d\n", nb_slot_till_next_plant);
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4846      	ldr	r0, [pc, #280]	@ (80032a8 <_Z18push_one_plant_outv+0x130>)
 800318e:	f00a ffc3 	bl	800e118 <iprintf>
  if (nb_slot_till_next_plant == -1)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003198:	d103      	bne.n	80031a2 <_Z18push_one_plant_outv+0x2a>
  {
    system_state.current_action = FREE;
 800319a:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <_Z18push_one_plant_outv+0x134>)
 800319c:	2201      	movs	r2, #1
 800319e:	709a      	strb	r2, [r3, #2]
    return;
 80031a0:	e07d      	b.n	800329e <_Z18push_one_plant_outv+0x126>
  }
  // HAL_Delay(2000);
  // rotate the reservoir to the right position
  printf("rotate the reservoir to the right position\n");
 80031a2:	4843      	ldr	r0, [pc, #268]	@ (80032b0 <_Z18push_one_plant_outv+0x138>)
 80031a4:	f00b f828 	bl	800e1f8 <puts>
  reservoir_rotate(nb_slot_till_next_plant );
 80031a8:	68b8      	ldr	r0, [r7, #8]
 80031aa:	f7ff fec1 	bl	8002f30 <_Z16reservoir_rotatei>
  // HAL_Delay(2000);


  // rotate the reservoir by the right offset
  printf("align reservoir \n");
 80031ae:	4841      	ldr	r0, [pc, #260]	@ (80032b4 <_Z18push_one_plant_outv+0x13c>)
 80031b0:	f00b f822 	bl	800e1f8 <puts>
  reservoir_align_with_output();
 80031b4:	f7ff fe7e 	bl	8002eb4 <_Z27reservoir_align_with_outputv>
  // HAL_Delay(2000);
  printf("open circle \n");
 80031b8:	483f      	ldr	r0, [pc, #252]	@ (80032b8 <_Z18push_one_plant_outv+0x140>)
 80031ba:	f00b f81d 	bl	800e1f8 <puts>
  open_circle_plant();
 80031be:	f7ff ff31 	bl	8003024 <_Z17open_circle_plantv>
  printf("push plant \n");
 80031c2:	483e      	ldr	r0, [pc, #248]	@ (80032bc <_Z18push_one_plant_outv+0x144>)
 80031c4:	f00b f818 	bl	800e1f8 <puts>
  push_plant();
 80031c8:	f7ff ff08 	bl	8002fdc <_Z10push_plantv>
  HAL_Delay(500);
 80031cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031d0:	f006 f81a 	bl	8009208 <HAL_Delay>
  printf("retract servo plant \n");
 80031d4:	483a      	ldr	r0, [pc, #232]	@ (80032c0 <_Z18push_one_plant_outv+0x148>)
 80031d6:	f00b f80f 	bl	800e1f8 <puts>
  retract_servo_plant();
 80031da:	f7ff ff11 	bl	8003000 <_Z19retract_servo_plantv>
  printf("retract circle\n");
 80031de:	4839      	ldr	r0, [pc, #228]	@ (80032c4 <_Z18push_one_plant_outv+0x14c>)
 80031e0:	f00b f80a 	bl	800e1f8 <puts>
  open_circle_plant_more();
 80031e4:	f7ff ff30 	bl	8003048 <_Z22open_circle_plant_morev>
  HAL_Delay(200);
 80031e8:	20c8      	movs	r0, #200	@ 0xc8
 80031ea:	f006 f80d 	bl	8009208 <HAL_Delay>
  reservoir_realign_back();
 80031ee:	f7ff fe7f 	bl	8002ef0 <_Z22reservoir_realign_backv>

  // update reservoir state at the head + 5
  int slot = reservoir_state.head+5-nb_slot_till_next_plant;
 80031f2:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	1d5a      	adds	r2, r3, #5
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	60fb      	str	r3, [r7, #12]
  if (slot <0) {
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da07      	bge.n	8003214 <_Z18push_one_plant_outv+0x9c>
    slot += reservoir_state.slots.size();
 8003204:	4830      	ldr	r0, [pc, #192]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003206:	f000 fe9b 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e00a      	b.n	800322a <_Z18push_one_plant_outv+0xb2>
  } else {
    slot = slot % reservoir_state.slots.size();
 8003214:	68fc      	ldr	r4, [r7, #12]
 8003216:	482c      	ldr	r0, [pc, #176]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003218:	f000 fe92 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800321c:	4603      	mov	r3, r0
 800321e:	fbb4 f2f3 	udiv	r2, r4, r3
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	1ae3      	subs	r3, r4, r3
 8003228:	60fb      	str	r3, [r7, #12]
  }
  printf("on veut enlever à %d \n",slot);
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4827      	ldr	r0, [pc, #156]	@ (80032cc <_Z18push_one_plant_outv+0x154>)
 800322e:	f00a ff73 	bl	800e118 <iprintf>
  reservoir_state.slots[(slot)] = false;
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	463b      	mov	r3, r7
 8003236:	4924      	ldr	r1, [pc, #144]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fe9e 	bl	8003f7a <_ZNSt6vectorIbSaIbEEixEj>
 800323e:	463b      	mov	r3, r7
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f89e 	bl	8002384 <_ZNSt14_Bit_referenceaSEb>
  reservoir_state.nb_stored--;
 8003248:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	3b01      	subs	r3, #1
 800324e:	4a1e      	ldr	r2, [pc, #120]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003250:	6193      	str	r3, [r2, #24]
  reservoir_state.head = reservoir_state.head - nb_slot_till_next_plant;
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4a1b      	ldr	r2, [pc, #108]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 800325c:	6153      	str	r3, [r2, #20]
  if (reservoir_state.head < 0)
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	da0a      	bge.n	800327c <_Z18push_one_plant_outv+0x104>
  {
    reservoir_state.head += reservoir_state.slots.size();
 8003266:	4818      	ldr	r0, [pc, #96]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003268:	f000 fe6a 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800326c:	4603      	mov	r3, r0
 800326e:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003270:	6952      	ldr	r2, [r2, #20]
 8003272:	4413      	add	r3, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	e00e      	b.n	800329a <_Z18push_one_plant_outv+0x122>
  }
  else
  {
    reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	461c      	mov	r4, r3
 8003282:	4811      	ldr	r0, [pc, #68]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003284:	f000 fe5c 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003288:	4603      	mov	r3, r0
 800328a:	fbb4 f2f3 	udiv	r2, r4, r3
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1ae3      	subs	r3, r4, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <_Z18push_one_plant_outv+0x150>)
 8003298:	615a      	str	r2, [r3, #20]
  }
  print_reservoir();
 800329a:	f7ff fb51 	bl	8002940 <_Z15print_reservoirv>
}
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	0800f190 	.word	0x0800f190
 80032a8:	0800f194 	.word	0x0800f194
 80032ac:	20000698 	.word	0x20000698
 80032b0:	0800f1ac 	.word	0x0800f1ac
 80032b4:	0800f1d8 	.word	0x0800f1d8
 80032b8:	0800f1ec 	.word	0x0800f1ec
 80032bc:	0800f1fc 	.word	0x0800f1fc
 80032c0:	0800f208 	.word	0x0800f208
 80032c4:	0800f220 	.word	0x0800f220
 80032c8:	2000069c 	.word	0x2000069c
 80032cc:	0800f230 	.word	0x0800f230

080032d0 <_Z31hopper_wait_and_close_spin_oncei>:

// =============================================== HIGH LEVEL ACTIONS =================================================


bool hopper_wait_and_close_spin_once(int side)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  // Check if distance < 50mm for left plant
  int dist = sensors[side].get_dist_mm();
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4619      	mov	r1, r3
 80032dc:	480a      	ldr	r0, [pc, #40]	@ (8003308 <_Z31hopper_wait_and_close_spin_oncei+0x38>)
 80032de:	f000 fe64 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe ffbd 	bl	8002264 <_ZN11LaserSensor11get_dist_mmEv>
 80032ea:	60f8      	str	r0, [r7, #12]
  if(dist < 70)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b45      	cmp	r3, #69	@ 0x45
 80032f0:	dc04      	bgt.n	80032fc <_Z31hopper_wait_and_close_spin_oncei+0x2c>
  {
    // Close the hopper
    hopper_close(side);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fd2c 	bl	8002d50 <_Z12hopper_closei>
    return true;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <_Z31hopper_wait_and_close_spin_oncei+0x2e>
  }
  return false;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200005f4 	.word	0x200005f4

0800330c <_Z22store_plants_spin_oncev>:



// /!\ DELAY IN THIS FUNCTION
void store_plants_spin_once()
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0

  if(system_state.current_action != STORING)
 8003312:	4b65      	ldr	r3, [pc, #404]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 8003314:	789b      	ldrb	r3, [r3, #2]
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 80c2 	bne.w	80034a0 <_Z22store_plants_spin_oncev+0x194>
  {
    return;
  }

  if(!system_state.hopper_left_closed)
 800331c:	4b62      	ldr	r3, [pc, #392]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <_Z22store_plants_spin_oncev+0x2c>
  {
    system_state.hopper_left_closed = hopper_wait_and_close_spin_once(LEFT);
 800332a:	2000      	movs	r0, #0
 800332c:	f7ff ffd0 	bl	80032d0 <_Z31hopper_wait_and_close_spin_oncei>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	4b5c      	ldr	r3, [pc, #368]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 8003336:	701a      	strb	r2, [r3, #0]
  }

  if(!system_state.hopper_right_closed)
 8003338:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <_Z22store_plants_spin_oncev+0x48>
  {
    system_state.hopper_right_closed = hopper_wait_and_close_spin_once(RIGHT);
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff ffc2 	bl	80032d0 <_Z31hopper_wait_and_close_spin_oncei>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b55      	ldr	r3, [pc, #340]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 8003352:	705a      	strb	r2, [r3, #1]
  }

  if(system_state.hopper_left_closed && system_state.hopper_right_closed)
 8003354:	4b54      	ldr	r3, [pc, #336]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a2 	beq.w	80034a2 <_Z22store_plants_spin_oncev+0x196>
 800335e:	4b52      	ldr	r3, [pc, #328]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 809d 	beq.w	80034a2 <_Z22store_plants_spin_oncev+0x196>
  {
    HAL_Delay(1500); // Because hoppers functions are not blocking // TODO ADD NON BLOCKING DELAY
 8003368:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800336c:	f005 ff4c 	bl	8009208 <HAL_Delay>
    hide_fildefer();
 8003370:	f7ff fe0c 	bl	8002f8c <_Z13hide_fildeferv>
    lift_go_up();
 8003374:	f7ff fc86 	bl	8002c84 <_Z10lift_go_upv>
    grabber_extend();
 8003378:	f7ff fcb8 	bl	8002cec <_Z14grabber_extendv>
    HAL_Delay(500);
 800337c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003380:	f005 ff42 	bl	8009208 <HAL_Delay>
    lift_go_middle();
 8003384:	f7ff fc98 	bl	8002cb8 <_Z14lift_go_middlev>
    close_fildefer();
 8003388:	f7ff fdee 	bl	8002f68 <_Z14close_fildeferv>
    grabber_retract(false);
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff fcc3 	bl	8002d18 <_Z15grabber_retractb>
    lift_go_down();
 8003392:	f7ff fc3d 	bl	8002c10 <_Z12lift_go_downv>
    // HAL_Delay(2000);
    hopper_open(LEFT);
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff fd00 	bl	8002d9c <_Z11hopper_openi>
    hopper_open(RIGHT);
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff fcfd 	bl	8002d9c <_Z11hopper_openi>
    // HAL_Delay(1000);
    hide_fildefer();
 80033a2:	f7ff fdf3 	bl	8002f8c <_Z13hide_fildeferv>
    system_state.hopper_left_closed = false;
 80033a6:	4b40      	ldr	r3, [pc, #256]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    system_state.hopper_right_closed = false;
 80033ac:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <_Z22store_plants_spin_oncev+0x19c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]

    // Clear distance sensors buffers (?)
    sensors[LEFT].clear_interrupt();
 80033b2:	2100      	movs	r1, #0
 80033b4:	483d      	ldr	r0, [pc, #244]	@ (80034ac <_Z22store_plants_spin_oncev+0x1a0>)
 80033b6:	f000 fdf8 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe ff6b 	bl	8002298 <_ZN11LaserSensor15clear_interruptEv>
    sensors[RIGHT].clear_interrupt();
 80033c2:	2101      	movs	r1, #1
 80033c4:	4839      	ldr	r0, [pc, #228]	@ (80034ac <_Z22store_plants_spin_oncev+0x1a0>)
 80033c6:	f000 fdf0 	bl	8003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe ff63 	bl	8002298 <_ZN11LaserSensor15clear_interruptEv>

    int nb_to_turn = 3;
 80033d2:	2303      	movs	r3, #3
 80033d4:	617b      	str	r3, [r7, #20]
    reservoir_rotate(nb_to_turn);
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff fdaa 	bl	8002f30 <_Z16reservoir_rotatei>
    print_reservoir();
 80033dc:	f7ff fab0 	bl	8002940 <_Z15print_reservoirv>

    // fill the reservoir state. 2 have to be set to true, and one skipped
    reservoir_state.slots[reservoir_state.head] = true;
 80033e0:	4b33      	ldr	r3, [pc, #204]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	461a      	mov	r2, r3
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	4931      	ldr	r1, [pc, #196]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fdc5 	bl	8003f7a <_ZNSt6vectorIbSaIbEEixEj>
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ffc5 	bl	8002384 <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.slots[(reservoir_state.head + 1) % reservoir_state.slots.size()] = true;
 80033fa:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	461c      	mov	r4, r3
 8003402:	482b      	ldr	r0, [pc, #172]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003404:	f000 fd9c 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003408:	4603      	mov	r3, r0
 800340a:	fbb4 f2f3 	udiv	r2, r4, r3
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	1ae2      	subs	r2, r4, r3
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	4925      	ldr	r1, [pc, #148]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fdad 	bl	8003f7a <_ZNSt6vectorIbSaIbEEixEj>
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe ffac 	bl	8002384 <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.nb_stored += 2;
 800342c:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	3302      	adds	r3, #2
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003434:	6193      	str	r3, [r2, #24]

    reservoir_state.head = reservoir_state.head - nb_to_turn;
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003440:	6153      	str	r3, [r2, #20]
    printf("head:%d \n", reservoir_state.head);
 8003442:	4b1b      	ldr	r3, [pc, #108]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4619      	mov	r1, r3
 8003448:	481a      	ldr	r0, [pc, #104]	@ (80034b4 <_Z22store_plants_spin_oncev+0x1a8>)
 800344a:	f00a fe65 	bl	800e118 <iprintf>
    if (reservoir_state.head < 0)
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da12      	bge.n	800347c <_Z22store_plants_spin_oncev+0x170>
    {
      printf("head += %d \n", reservoir_state.slots.size());
 8003456:	4816      	ldr	r0, [pc, #88]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003458:	f000 fd72 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800345c:	4603      	mov	r3, r0
 800345e:	4619      	mov	r1, r3
 8003460:	4815      	ldr	r0, [pc, #84]	@ (80034b8 <_Z22store_plants_spin_oncev+0x1ac>)
 8003462:	f00a fe59 	bl	800e118 <iprintf>
      reservoir_state.head += reservoir_state.slots.size();
 8003466:	4812      	ldr	r0, [pc, #72]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003468:	f000 fd6a 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800346c:	4603      	mov	r3, r0
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003470:	6952      	ldr	r2, [r2, #20]
 8003472:	4413      	add	r3, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003478:	615a      	str	r2, [r3, #20]
 800347a:	e00e      	b.n	800349a <_Z22store_plants_spin_oncev+0x18e>
    }
    else
    {
      reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	461c      	mov	r4, r3
 8003482:	480b      	ldr	r0, [pc, #44]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003484:	f000 fd5c 	bl	8003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003488:	4603      	mov	r3, r0
 800348a:	fbb4 f2f3 	udiv	r2, r4, r3
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	1ae3      	subs	r3, r4, r3
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <_Z22store_plants_spin_oncev+0x1a4>)
 8003498:	615a      	str	r2, [r3, #20]
    }
    print_reservoir();
 800349a:	f7ff fa51 	bl	8002940 <_Z15print_reservoirv>
 800349e:	e000      	b.n	80034a2 <_Z22store_plants_spin_oncev+0x196>
    return;
 80034a0:	bf00      	nop
  }
}
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	20000698 	.word	0x20000698
 80034ac:	200005f4 	.word	0x200005f4
 80034b0:	2000069c 	.word	0x2000069c
 80034b4:	0800f248 	.word	0x0800f248
 80034b8:	0800f254 	.word	0x0800f254

080034bc <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 80034bc:	b4b0      	push	{r4, r5, r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f102 0408 	add.w	r4, r2, #8
 80034d6:	f103 0508 	add.w	r5, r3, #8
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e2:	682b      	ldr	r3, [r5, #0]
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bcb0      	pop	{r4, r5, r7}
 80034f0:	4770      	bx	lr

080034f2 <_ZN11ChampiStateaSERKS_>:
#include "can_ids.hpp"

#define LIMIT_LENGTH_MSG 20 // max nb of frames per message. TODO uniformize and document ChampiCAN protocol


class ChampiState {
 80034f2:	b4b0      	push	{r4, r5, r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	1d14      	adds	r4, r2, #4
 8003502:	1d1d      	adds	r5, r3, #4
 8003504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800350c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800352e:	2277      	movs	r2, #119	@ 0x77
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	e004      	b.n	8003540 <_ZN11ChampiStateaSERKS_+0x4e>
 8003536:	7818      	ldrb	r0, [r3, #0]
 8003538:	7008      	strb	r0, [r1, #0]
 800353a:	3a01      	subs	r2, #1
 800353c:	3101      	adds	r1, #1
 800353e:	3301      	adds	r3, #1
 8003540:	2a00      	cmp	r2, #0
 8003542:	daf8      	bge.n	8003536 <_ZN11ChampiStateaSERKS_+0x44>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bcb0      	pop	{r4, r5, r7}
 800354e:	4770      	bx	lr

08003550 <_Z5setupv>:




void setup()
{
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003552:	b0bd      	sub	sp, #244	@ 0xf4
 8003554:	af06      	add	r7, sp, #24

  printf("Setup Begins...\n");
 8003556:	486c      	ldr	r0, [pc, #432]	@ (8003708 <_Z5setupv+0x1b8>)
 8003558:	f00a fe4e 	bl	800e1f8 <puts>

  // Initialize the status message / set has_... fields to true
  status_msg = msgs_can_ActStatus_init_zero;
 800355c:	4b6b      	ldr	r3, [pc, #428]	@ (800370c <_Z5setupv+0x1bc>)
 800355e:	4618      	mov	r0, r3
 8003560:	2320      	movs	r3, #32
 8003562:	461a      	mov	r2, r3
 8003564:	2100      	movs	r1, #0
 8003566:	f00a ff41 	bl	800e3ec <memset>
  status_msg.has_status = true;
 800356a:	4b68      	ldr	r3, [pc, #416]	@ (800370c <_Z5setupv+0x1bc>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
  status_msg.status.has_status = true;
 8003570:	4b66      	ldr	r3, [pc, #408]	@ (800370c <_Z5setupv+0x1bc>)
 8003572:	2201      	movs	r2, #1
 8003574:	731a      	strb	r2, [r3, #12]
  status_msg.status.has_error = true;
 8003576:	4b65      	ldr	r3, [pc, #404]	@ (800370c <_Z5setupv+0x1bc>)
 8003578:	2201      	movs	r2, #1
 800357a:	739a      	strb	r2, [r3, #14]
  status_msg.has_plant_count = true;
 800357c:	4b63      	ldr	r3, [pc, #396]	@ (800370c <_Z5setupv+0x1bc>)
 800357e:	2201      	movs	r2, #1
 8003580:	769a      	strb	r2, [r3, #26]
  status_msg.has_action = true;
 8003582:	4b62      	ldr	r3, [pc, #392]	@ (800370c <_Z5setupv+0x1bc>)
 8003584:	2201      	movs	r2, #1
 8003586:	761a      	strb	r2, [r3, #24]

  status_msg.status.status = msgs_can_Status_StatusType_INIT;
 8003588:	4b60      	ldr	r3, [pc, #384]	@ (800370c <_Z5setupv+0x1bc>)
 800358a:	2201      	movs	r2, #1
 800358c:	735a      	strb	r2, [r3, #13]
  status_msg.status.error = msgs_can_Status_ErrorType_NONE;
 800358e:	4b5f      	ldr	r3, [pc, #380]	@ (800370c <_Z5setupv+0x1bc>)
 8003590:	2200      	movs	r2, #0
 8003592:	73da      	strb	r2, [r3, #15]
  status_msg.action = msgs_can_ActActions_INITIALIZING;
 8003594:	4b5d      	ldr	r3, [pc, #372]	@ (800370c <_Z5setupv+0x1bc>)
 8003596:	2204      	movs	r2, #4
 8003598:	765a      	strb	r2, [r3, #25]
  status_msg.plant_count = 0;
 800359a:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <_Z5setupv+0x1bc>)
 800359c:	2200      	movs	r2, #0
 800359e:	61da      	str	r2, [r3, #28]



  // Init Steppers (and start the timer for the time_us function)
  HAL_TIM_Base_Start_IT(&htim2);
 80035a0:	485b      	ldr	r0, [pc, #364]	@ (8003710 <_Z5setupv+0x1c0>)
 80035a2:	f008 fd67 	bl	800c074 <HAL_TIM_Base_Start_IT>
  stepper_lift.set_speed(5000);
 80035a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80035aa:	485a      	ldr	r0, [pc, #360]	@ (8003714 <_Z5setupv+0x1c4>)
 80035ac:	f7fe fc1a 	bl	8001de4 <_ZN7Stepper9set_speedEm>

  printf("Setup lasers...\n");
 80035b0:	4859      	ldr	r0, [pc, #356]	@ (8003718 <_Z5setupv+0x1c8>)
 80035b2:	f00a fe21 	bl	800e1f8 <puts>

  // Initialize the sensors
  if(setup_lasers() != 0)
 80035b6:	f7ff fa9b 	bl	8002af0 <_Z12setup_lasersv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <_Z5setupv+0x84>
  {
    printf("Error setting up the sensors\n");
 80035ca:	4854      	ldr	r0, [pc, #336]	@ (800371c <_Z5setupv+0x1cc>)
 80035cc:	f00a fe14 	bl	800e1f8 <puts>
    Error_Handler();
 80035d0:	f000 fb94 	bl	8003cfc <Error_Handler>
  }

  printf("Setup servos...\n");
 80035d4:	4852      	ldr	r0, [pc, #328]	@ (8003720 <_Z5setupv+0x1d0>)
 80035d6:	f00a fe0f 	bl	800e1f8 <puts>

  if(ping_servos() != 0)
 80035da:	f7ff fa45 	bl	8002a68 <_Z11ping_servosv>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <_Z5setupv+0xa8>
  {
    printf("Error pinging servos\n");
 80035ee:	484d      	ldr	r0, [pc, #308]	@ (8003724 <_Z5setupv+0x1d4>)
 80035f0:	f00a fe02 	bl	800e1f8 <puts>
    Error_Handler();
 80035f4:	f000 fb82 	bl	8003cfc <Error_Handler>
  }

  champi_can = ChampiCan(&hfdcan1);
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	494b      	ldr	r1, [pc, #300]	@ (8003728 <_Z5setupv+0x1d8>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fae5 	bl	8000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4849      	ldr	r0, [pc, #292]	@ (800372c <_Z5setupv+0x1dc>)
 8003608:	f7ff ff58 	bl	80034bc <_ZN9ChampiCanaSERKS_>
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fc24 	bl	8000e5c <_ZN9ChampiCanD1Ev>


  if (champi_can.start() != 0) {
 8003614:	4845      	ldr	r0, [pc, #276]	@ (800372c <_Z5setupv+0x1dc>)
 8003616:	f7fd fb23 	bl	8000c60 <_ZN9ChampiCan5startEv>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <_Z5setupv+0xde>
    // TODO: On n'a jamais rencontré cette erreur.
    Error_Handler();
 800362a:	f000 fb67 	bl	8003cfc <Error_Handler>
  }

  // This is required: when the Raspberry Pi starts up, transmit CAN frames returns error.

  tx_ok_or_reset();
 800362e:	f7ff f85f 	bl	80026f0 <_Z14tx_ok_or_resetv>

  printf("Setup CAN Done.\n");
 8003632:	483f      	ldr	r0, [pc, #252]	@ (8003730 <_Z5setupv+0x1e0>)
 8003634:	f00a fde0 	bl	800e1f8 <puts>

  champi_state = ChampiState(&champi_can, 500);
 8003638:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800363c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003640:	493a      	ldr	r1, [pc, #232]	@ (800372c <_Z5setupv+0x1dc>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fc40 	bl	8000ec8 <_ZN11ChampiStateC1EP9ChampiCanm>
 8003648:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800364c:	4619      	mov	r1, r3
 800364e:	4839      	ldr	r0, [pc, #228]	@ (8003734 <_Z5setupv+0x1e4>)
 8003650:	f7ff ff4f 	bl	80034f2 <_ZN11ChampiStateaSERKS_>
 8003654:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fc73 	bl	8000f44 <_ZN11ChampiStateD1Ev>

  status_msg.status.status = msgs_can_Status_StatusType_OK;
 800365e:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <_Z5setupv+0x1bc>)
 8003660:	2200      	movs	r2, #0
 8003662:	735a      	strb	r2, [r3, #13]
  champi_state.report_status(status_msg);
 8003664:	4e29      	ldr	r6, [pc, #164]	@ (800370c <_Z5setupv+0x1bc>)
 8003666:	466d      	mov	r5, sp
 8003668:	f106 040c 	add.w	r4, r6, #12
 800366c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003678:	482e      	ldr	r0, [pc, #184]	@ (8003734 <_Z5setupv+0x1e4>)
 800367a:	f7fd fc83 	bl	8000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>


  printf("Begin actuators initialization...\n");
 800367e:	482e      	ldr	r0, [pc, #184]	@ (8003738 <_Z5setupv+0x1e8>)
 8003680:	f00a fdba 	bl	800e1f8 <puts>

  // Initialize / move actuators
  printf("Test pusher and circle...\n");
 8003684:	482d      	ldr	r0, [pc, #180]	@ (800373c <_Z5setupv+0x1ec>)
 8003686:	f00a fdb7 	bl	800e1f8 <puts>
  pusher_and_circle_initialize();
 800368a:	f7ff fd01 	bl	8003090 <_Z28pusher_and_circle_initializev>
  printf("Test fildefer...\n");
 800368e:	482c      	ldr	r0, [pc, #176]	@ (8003740 <_Z5setupv+0x1f0>)
 8003690:	f00a fdb2 	bl	800e1f8 <puts>
  fildefer_initialize();
 8003694:	f7ff fc8c 	bl	8002fb0 <_Z19fildefer_initializev>
  printf("Test reservoir...\n");
 8003698:	482a      	ldr	r0, [pc, #168]	@ (8003744 <_Z5setupv+0x1f4>)
 800369a:	f00a fdad 	bl	800e1f8 <puts>
  reservoir_initialize_and_test();
 800369e:	f7ff fa63 	bl	8002b68 <_Z29reservoir_initialize_and_testv>
  printf("Test hoppers...\n");
 80036a2:	4829      	ldr	r0, [pc, #164]	@ (8003748 <_Z5setupv+0x1f8>)
 80036a4:	f00a fda8 	bl	800e1f8 <puts>
  hoppers_initialize_and_test();
 80036a8:	f7ff fa9e 	bl	8002be8 <_Z27hoppers_initialize_and_testv>
  HAL_Delay(200);
 80036ac:	20c8      	movs	r0, #200	@ 0xc8
 80036ae:	f005 fdab 	bl	8009208 <HAL_Delay>
  printf("Test grabber...\n");
 80036b2:	4826      	ldr	r0, [pc, #152]	@ (800374c <_Z5setupv+0x1fc>)
 80036b4:	f00a fda0 	bl	800e1f8 <puts>
  grabber_retract();
 80036b8:	2001      	movs	r0, #1
 80036ba:	f7ff fb2d 	bl	8002d18 <_Z15grabber_retractb>
  printf("Test lift...\n");
 80036be:	4824      	ldr	r0, [pc, #144]	@ (8003750 <_Z5setupv+0x200>)
 80036c0:	f00a fd9a 	bl	800e1f8 <puts>
  lift_initialize_and_test();
 80036c4:	f7ff fa58 	bl	8002b78 <_Z24lift_initialize_and_testv>

  printf("Initialization Done\n");
 80036c8:	4822      	ldr	r0, [pc, #136]	@ (8003754 <_Z5setupv+0x204>)
 80036ca:	f00a fd95 	bl	800e1f8 <puts>


  // Switch led ON to indicate that we're running
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80036ce:	2201      	movs	r2, #1
 80036d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036d4:	4820      	ldr	r0, [pc, #128]	@ (8003758 <_Z5setupv+0x208>)
 80036d6:	f006 fe89 	bl	800a3ec <HAL_GPIO_WritePin>

  status_msg.action = msgs_can_ActActions_FREE;
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <_Z5setupv+0x1bc>)
 80036dc:	2205      	movs	r2, #5
 80036de:	765a      	strb	r2, [r3, #25]
  champi_state.report_status(status_msg);
 80036e0:	4e0a      	ldr	r6, [pc, #40]	@ (800370c <_Z5setupv+0x1bc>)
 80036e2:	466d      	mov	r5, sp
 80036e4:	f106 040c 	add.w	r4, r6, #12
 80036e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80036f4:	480f      	ldr	r0, [pc, #60]	@ (8003734 <_Z5setupv+0x1e4>)
 80036f6:	f7fd fc45 	bl	8000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>

  print_reservoir();
 80036fa:	f7ff f921 	bl	8002940 <_Z15print_reservoirv>
}
 80036fe:	bf00      	nop
 8003700:	37dc      	adds	r7, #220	@ 0xdc
 8003702:	46bd      	mov	sp, r7
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003706:	bf00      	nop
 8003708:	0800f264 	.word	0x0800f264
 800370c:	200005b0 	.word	0x200005b0
 8003710:	20000148 	.word	0x20000148
 8003714:	20000600 	.word	0x20000600
 8003718:	0800f274 	.word	0x0800f274
 800371c:	0800f284 	.word	0x0800f284
 8003720:	0800f2a4 	.word	0x0800f2a4
 8003724:	0800f2b4 	.word	0x0800f2b4
 8003728:	20000090 	.word	0x20000090
 800372c:	200002c0 	.word	0x200002c0
 8003730:	0800f2cc 	.word	0x0800f2cc
 8003734:	20000508 	.word	0x20000508
 8003738:	0800f2dc 	.word	0x0800f2dc
 800373c:	0800f300 	.word	0x0800f300
 8003740:	0800f31c 	.word	0x0800f31c
 8003744:	0800f330 	.word	0x0800f330
 8003748:	0800f344 	.word	0x0800f344
 800374c:	0800f354 	.word	0x0800f354
 8003750:	0800f364 	.word	0x0800f364
 8003754:	0800f374 	.word	0x0800f374
 8003758:	48000400 	.word	0x48000400

0800375c <_Z4loopv>:



void loop()
{
 800375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375e:	b087      	sub	sp, #28
 8003760:	af06      	add	r7, sp, #24



  // Update champi_state

  if(system_state.current_action==FREE)
 8003762:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <_Z4loopv+0x7c>)
 8003764:	789b      	ldrb	r3, [r3, #2]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d103      	bne.n	8003772 <_Z4loopv+0x16>
  {
    status_msg.action = msgs_can_ActActions_FREE;
 800376a:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <_Z4loopv+0x80>)
 800376c:	2205      	movs	r2, #5
 800376e:	765a      	strb	r2, [r3, #25]
 8003770:	e00e      	b.n	8003790 <_Z4loopv+0x34>
  }
  else if(system_state.current_action==STORING)
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <_Z4loopv+0x7c>)
 8003774:	789b      	ldrb	r3, [r3, #2]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d103      	bne.n	8003782 <_Z4loopv+0x26>
  {
    status_msg.action = msgs_can_ActActions_START_GRAB_PLANTS;
 800377a:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <_Z4loopv+0x80>)
 800377c:	2200      	movs	r2, #0
 800377e:	765a      	strb	r2, [r3, #25]
 8003780:	e006      	b.n	8003790 <_Z4loopv+0x34>
  }
  else if(system_state.current_action==PUTTING_OUT)
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <_Z4loopv+0x7c>)
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d102      	bne.n	8003790 <_Z4loopv+0x34>
  {
    status_msg.action = msgs_can_ActActions_RELEASE_PLANT;
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <_Z4loopv+0x80>)
 800378c:	2202      	movs	r2, #2
 800378e:	765a      	strb	r2, [r3, #25]
  }

  status_msg.plant_count = reservoir_state.nb_stored;
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <_Z4loopv+0x84>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a11      	ldr	r2, [pc, #68]	@ (80037dc <_Z4loopv+0x80>)
 8003796:	61d3      	str	r3, [r2, #28]

  champi_state.report_status(status_msg);
 8003798:	4e10      	ldr	r6, [pc, #64]	@ (80037dc <_Z4loopv+0x80>)
 800379a:	466d      	mov	r5, sp
 800379c:	f106 040c 	add.w	r4, r6, #12
 80037a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80037ac:	480d      	ldr	r0, [pc, #52]	@ (80037e4 <_Z4loopv+0x88>)
 80037ae:	f7fd fbe9 	bl	8000f84 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>

  champi_state.spin_once(); // Send status on CAN bus
 80037b2:	480c      	ldr	r0, [pc, #48]	@ (80037e4 <_Z4loopv+0x88>)
 80037b4:	f7fd fc46 	bl	8001044 <_ZN11ChampiState9spin_onceEv>




  store_plants_spin_once();
 80037b8:	f7ff fda8 	bl	800330c <_Z22store_plants_spin_oncev>

  if (system_state.current_action==PUTTING_OUT)
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <_Z4loopv+0x7c>)
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d104      	bne.n	80037ce <_Z4loopv+0x72>
  {

    push_one_plant_out();
 80037c4:	f7ff fcd8 	bl	8003178 <_Z18push_one_plant_outv>
    system_state.current_action = FREE_CIRCLE_OUT;
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <_Z4loopv+0x7c>)
 80037ca:	2204      	movs	r2, #4
 80037cc:	709a      	strb	r2, [r3, #2]
  }


}
 80037ce:	bf00      	nop
 80037d0:	3704      	adds	r7, #4
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000698 	.word	0x20000698
 80037dc:	200005b0 	.word	0x200005b0
 80037e0:	2000069c 	.word	0x2000069c
 80037e4:	20000508 	.word	0x20000508

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ec:	f005 fc9b 	bl	8009126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f0:	f000 f811 	bl	8003816 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f4:	f000 fa1e 	bl	8003c34 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80037f8:	f000 f9bc 	bl	8003b74 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80037fc:	f000 f958 	bl	8003ab0 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 8003800:	f000 f85e 	bl	80038c0 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8003804:	f000 f8a8 	bl	8003958 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8003808:	f000 f8f4 	bl	80039f4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 800380c:	f7ff fea0 	bl	8003550 <_Z5setupv>


    while (1)
    {

      loop();
 8003810:	f7ff ffa4 	bl	800375c <_Z4loopv>
 8003814:	e7fc      	b.n	8003810 <main+0x28>

08003816 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b094      	sub	sp, #80	@ 0x50
 800381a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	2238      	movs	r2, #56	@ 0x38
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f00a fde1 	bl	800e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003838:	2000      	movs	r0, #0
 800383a:	f007 fbf1 	bl	800b020 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800383e:	2302      	movs	r3, #2
 8003840:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003848:	2340      	movs	r3, #64	@ 0x40
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800384c:	2302      	movs	r3, #2
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003850:	2302      	movs	r3, #2
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003854:	2304      	movs	r3, #4
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003858:	2355      	movs	r3, #85	@ 0x55
 800385a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800385c:	2302      	movs	r3, #2
 800385e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003860:	2302      	movs	r3, #2
 8003862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003864:	2302      	movs	r3, #2
 8003866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f007 fc8b 	bl	800b188 <HAL_RCC_OscConfig>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003882:	f000 fa3b 	bl	8003cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003886:	230f      	movs	r3, #15
 8003888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388a:	2303      	movs	r3, #3
 800388c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2104      	movs	r1, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f007 ff84 	bl	800b7ac <HAL_RCC_ClockConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80038b4:	f000 fa22 	bl	8003cfc <Error_Handler>
  }
}
 80038b8:	bf00      	nop
 80038ba:	3750      	adds	r7, #80	@ 0x50
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80038c4:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038c6:	4a23      	ldr	r2, [pc, #140]	@ (8003954 <_ZL14MX_FDCAN1_Initv+0x94>)
 80038c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80038ca:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038d8:	2200      	movs	r2, #0
 80038da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80038dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038de:	2201      	movs	r2, #1
 80038e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80038e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038f0:	220a      	movs	r2, #10
 80038f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80038f4:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038fc:	220e      	movs	r2, #14
 80038fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003900:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003902:	2202      	movs	r2, #2
 8003904:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003908:	220a      	movs	r2, #10
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800390c:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 800390e:	2201      	movs	r2, #1
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003914:	220e      	movs	r2, #14
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 800391a:	2202      	movs	r2, #2
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003920:	2200      	movs	r2, #0
 8003922:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003926:	2200      	movs	r2, #0
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 800392c:	2200      	movs	r2, #0
 800392e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003930:	4807      	ldr	r0, [pc, #28]	@ (8003950 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003932:	f005 fd9b 	bl	800946c <HAL_FDCAN_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8003946:	f000 f9d9 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000090 	.word	0x20000090
 8003954:	40006400 	.word	0x40006400

08003958 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 800395e:	4a23      	ldr	r2, [pc, #140]	@ (80039ec <_ZL12MX_I2C1_Initv+0x94>)
 8003960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003962:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003964:	4a22      	ldr	r2, [pc, #136]	@ (80039f0 <_ZL12MX_I2C1_Initv+0x98>)
 8003966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003970:	2201      	movs	r2, #1
 8003972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003974:	4b1c      	ldr	r3, [pc, #112]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003980:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003986:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 800398e:	2200      	movs	r2, #0
 8003990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003992:	4815      	ldr	r0, [pc, #84]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 8003994:	f006 fd5c 	bl	800a450 <HAL_I2C_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80039a8:	f000 f9a8 	bl	8003cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039ac:	2100      	movs	r1, #0
 80039ae:	480e      	ldr	r0, [pc, #56]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 80039b0:	f007 fa9e 	bl	800aef0 <HAL_I2CEx_ConfigAnalogFilter>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80039c4:	f000 f99a 	bl	8003cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039c8:	2100      	movs	r1, #0
 80039ca:	4807      	ldr	r0, [pc, #28]	@ (80039e8 <_ZL12MX_I2C1_Initv+0x90>)
 80039cc:	f007 fadb 	bl	800af86 <HAL_I2CEx_ConfigDigitalFilter>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80039e0:	f000 f98c 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200000f4 	.word	0x200000f4
 80039ec:	40005400 	.word	0x40005400
 80039f0:	30a0a7fb 	.word	0x30a0a7fb

080039f4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fa:	f107 0310 	add.w	r3, r7, #16
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a12:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8003a1a:	4b23      	ldr	r3, [pc, #140]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8003a26:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a28:	4a20      	ldr	r2, [pc, #128]	@ (8003aac <_ZL12MX_TIM2_Initv+0xb8>)
 8003a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a32:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a38:	481b      	ldr	r0, [pc, #108]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a3a:	f008 fac3 	bl	800bfc4 <HAL_TIM_Base_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8003a4e:	f000 f955 	bl	8003cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4812      	ldr	r0, [pc, #72]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a60:	f008 fcc2 	bl	800c3e8 <HAL_TIM_ConfigClockSource>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8003a74:	f000 f942 	bl	8003cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4808      	ldr	r0, [pc, #32]	@ (8003aa8 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a86:	f008 ff09 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8003a9a:	f000 f92f 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a9e:	bf00      	nop
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000148 	.word	0x20000148
 8003aac:	000f4240 	.word	0x000f4240

08003ab0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b6c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003aba:	4b2b      	ldr	r3, [pc, #172]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003abc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b70 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8003abe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac0:	4b29      	ldr	r3, [pc, #164]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ac6:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003acc:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ad2:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ade:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ae4:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003af6:	481c      	ldr	r0, [pc, #112]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003af8:	f008 ffe8 	bl	800cacc <HAL_HalfDuplex_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8003b0c:	f000 f8f6 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b10:	2100      	movs	r1, #0
 8003b12:	4815      	ldr	r0, [pc, #84]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b14:	f009 fee7 	bl	800d8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8003b28:	f000 f8e8 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	480e      	ldr	r0, [pc, #56]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b30:	f009 ff17 	bl	800d962 <HAL_UARTEx_SetRxFifoThreshold>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8003b44:	f000 f8da 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003b48:	4807      	ldr	r0, [pc, #28]	@ (8003b68 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b4a:	f009 fe58 	bl	800d7fe <HAL_UARTEx_EnableFifoMode>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8003b5e:	f000 f8cd 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000194 	.word	0x20000194
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	000f4240 	.word	0x000f4240

08003b74 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b78:	4b2c      	ldr	r3, [pc, #176]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c30 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8003b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b8c:	4b27      	ldr	r3, [pc, #156]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b92:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b98:	4b24      	ldr	r3, [pc, #144]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba4:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bbc:	481b      	ldr	r0, [pc, #108]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bbe:	f008 ff35 	bl	800ca2c <HAL_UART_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8003bd2:	f000 f893 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4814      	ldr	r0, [pc, #80]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bda:	f009 fe84 	bl	800d8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8003bee:	f000 f885 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bf6:	f009 feb4 	bl	800d962 <HAL_UARTEx_SetRxFifoThreshold>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8003c0a:	f000 f877 	bl	8003cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c0e:	4807      	ldr	r0, [pc, #28]	@ (8003c2c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003c10:	f009 fe30 	bl	800d874 <HAL_UARTEx_DisableFifoMode>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8003c24:	f000 f86a 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000228 	.word	0x20000228
 8003c30:	40004400 	.word	0x40004400

08003c34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	4a29      	ldr	r2, [pc, #164]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c56:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c62:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6e:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <_ZL12MX_GPIO_Initv+0xc0>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2192      	movs	r1, #146	@ 0x92
 8003c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c82:	f006 fbb3 	bl	800a3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8003c86:	2200      	movs	r2, #0
 8003c88:	f240 1171 	movw	r1, #369	@ 0x171
 8003c8c:	481a      	ldr	r0, [pc, #104]	@ (8003cf8 <_ZL12MX_GPIO_Initv+0xc4>)
 8003c8e:	f006 fbad 	bl	800a3ec <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8003c92:	2392      	movs	r3, #146	@ 0x92
 8003c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cac:	f006 fa04 	bl	800a0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8003cb0:	f240 1371 	movw	r3, #369	@ 0x171
 8003cb4:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	480b      	ldr	r0, [pc, #44]	@ (8003cf8 <_ZL12MX_GPIO_Initv+0xc4>)
 8003cca:	f006 f9f5 	bl	800a0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_COURSE_LIFT_Pin FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = F_COURSE_LIFT_Pin|FIN_COURSE_RES_Pin;
 8003cce:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8003cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce6:	f006 f9e7 	bl	800a0b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	48000400 	.word	0x48000400

08003cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d00:	b672      	cpsid	i
}
 8003d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <Error_Handler+0x8>

08003d08 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f96d 	bl	8003ff0 <_ZNSt15__new_allocatorIiEC1Ev>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f96c 	bl	8004006 <_ZNSt15__new_allocatorIiED1Ev>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	1d38      	adds	r0, r7, #4
 8003d42:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d46:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f971 	bl	8004034 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f995 	bl	8004084 <_ZNKSt16initializer_listIiE5beginEv>
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f99c 	bl	800409c <_ZNKSt16initializer_listIiE3endEv>
 8003d64:	4602      	mov	r2, r0
 8003d66:	462b      	mov	r3, r5
 8003d68:	4621      	mov	r1, r4
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f9a8 	bl	80040c0 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdb0      	pop	{r4, r5, r7, pc}

08003d7a <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8003d7a:	b5b0      	push	{r4, r5, r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681c      	ldr	r4, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f9d0 	bl	8004132 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003d92:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d94:	461a      	mov	r2, r3
 8003d96:	4629      	mov	r1, r5
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 f9d5 	bl	8004148 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f956 	bl	8004052 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bdb0      	pop	{r4, r5, r7, pc}

08003db0 <_ZNSaI11LaserSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f9d3 	bl	8004164 <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZNSaI11LaserSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f9d2 	bl	800417a <_ZNSt15__new_allocatorI11LaserSensorED1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	1d38      	adds	r0, r7, #4
 8003dea:	e880 0006 	stmia.w	r0, {r1, r2}
 8003dee:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f9cb 	bl	8004190 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f9d6 	bl	80041ae <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 8003e02:	4604      	mov	r4, r0
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f9dd 	bl	80041c6 <_ZNKSt16initializer_listI11LaserSensorE3endEv>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	462b      	mov	r3, r5
 8003e10:	4621      	mov	r1, r4
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f9ec 	bl	80041f0 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bdb0      	pop	{r4, r5, r7, pc}

08003e22 <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003e22:	b5b0      	push	{r4, r5, r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681c      	ldr	r4, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fa17 	bl	8004268 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e3a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fa1c 	bl	800427e <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>
      }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f805 	bl	8003e58 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}

08003e58 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	109b      	asrs	r3, r3, #2
 8003e70:	4a07      	ldr	r2, [pc, #28]	@ (8003e90 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev+0x38>)
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8003e76:	461a      	mov	r2, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa1c 	bl	80042b6 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fd21 	bl	80028c8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	b6db6db7 	.word	0xb6db6db7

08003e94 <_ZNSt6vectorIiSaIiEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
      }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZNSaIbEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa0d 	bl	80042dc <_ZNSt15__new_allocatorIbEC1Ev>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZNSaIbED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa0c 	bl	80042f2 <_ZNSt15__new_allocatorIbED1Ev>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>:
	_M_initialize(__x.size());
	_M_copy_aligned(__x.begin(), __x.end(), begin());
      }

      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<bool> __l,
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	1d38      	adds	r0, r7, #4
 8003eee:	e880 0006 	stmia.w	r0, {r1, r2}
 8003ef2:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa11 	bl	8004320 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>
      {
	_M_initialize_range(__l.begin(), __l.end(),
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fa39 	bl	8004378 <_ZNKSt16initializer_listIbE5beginEv>
 8003f06:	4604      	mov	r4, r0
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fa40 	bl	8004390 <_ZNKSt16initializer_listIbE3endEv>
 8003f10:	4602      	mov	r2, r0
 8003f12:	462b      	mov	r3, r5
 8003f14:	4621      	mov	r1, r4
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fa4b 	bl	80043b2 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bdb0      	pop	{r4, r5, r7, pc}

08003f26 <_ZNSt6vectorIbSaIbEED1Ev>:
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT { }
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fa11 	bl	8004358 <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZNKSt6vectorIbSaIbEE4sizeEv>:
      { return const_reverse_iterator(begin()); }
#endif

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
      { return size_type(end() - begin()); }
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fa53 	bl	80043fa <_ZNKSt6vectorIbSaIbEE3endEv>
 8003f54:	f107 0310 	add.w	r3, r7, #16
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fa5c 	bl	8004418 <_ZNKSt6vectorIbSaIbEE5beginEv>
 8003f60:	f107 0210 	add.w	r2, r7, #16
 8003f64:	f107 0308 	add.w	r3, r7, #8
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fa91 	bl	8002492 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZNSt6vectorIbSaIbEEixEj>:
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n)
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa53 	bl	8004438 <_ZNSt6vectorIbSaIbEE5beginEv>
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f107 0110 	add.w	r1, r7, #16
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fae1 	bl	8002562 <_ZNKSt13_Bit_iteratorixEi>
 8003fa0:	bf00      	nop
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
      }
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	109b      	asrs	r3, r3, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe7b 	bl	8003d20 <_ZNSaIiED1Ev>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fa08 	bl	8004458 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800406a:	461a      	mov	r2, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa05 	bl	800447c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ffd1 	bl	800401c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ffed 	bl	8004084 <_ZNKSt16initializer_listIiE5beginEv>
 80040aa:	4604      	mov	r4, r0
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f9f8 	bl	80044a2 <_ZNKSt16initializer_listIiE4sizeEv>
 80040b2:	4603      	mov	r3, r0
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4423      	add	r3, r4
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}

080040c0 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f000 f9f2 	bl	80044ba <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80040d6:	4603      	mov	r3, r0
 80040d8:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80040da:	68fc      	ldr	r4, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f827 	bl	8004132 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f000 f9fb 	bl	80044e4 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4619      	mov	r1, r3
 80040f2:	4620      	mov	r0, r4
 80040f4:	f000 fa1e 	bl	8004534 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f80d 	bl	8004132 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004118:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800411a:	4622      	mov	r2, r4
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f000 fa1c 	bl	800455c <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 8004124:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]
	}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}

08004132 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fa11 	bl	800457e <_ZSt8_DestroyIPiEvT_S1_>
    }
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_ZNSt15__new_allocatorI11LaserSensorED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f9fa 	bl	8004598 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZNKSt16initializer_listI11LaserSensorE5beginEv>:
      begin() const noexcept { return _M_array; }
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZNKSt16initializer_listI11LaserSensorE3endEv>:
      end() const noexcept { return begin() + size(); }
 80041c6:	b590      	push	{r4, r7, lr}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ffed 	bl	80041ae <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 80041d4:	4604      	mov	r4, r0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f9f0 	bl	80045bc <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>
 80041dc:	4602      	mov	r2, r0
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4423      	add	r3, r4
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	68b8      	ldr	r0, [r7, #8]
 8004202:	f000 f9e7 	bl	80045d4 <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8004206:	4603      	mov	r3, r0
 8004208:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800420a:	68fc      	ldr	r4, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f82a 	bl	8004268 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8004214:	4603      	mov	r3, r0
 8004216:	4619      	mov	r1, r3
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f000 f9ef 	bl	80045fc <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>
 800421e:	4603      	mov	r3, r0
 8004220:	4619      	mov	r1, r3
 8004222:	4620      	mov	r0, r4
 8004224:	f000 fa12 	bl	800464c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	18ca      	adds	r2, r1, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f80d 	bl	8004268 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 800424e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8004250:	4622      	mov	r2, r4
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f000 fa0d 	bl	8004674 <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 800425a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
	}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fa02 	bl	8004696 <_ZSt8_DestroyIP11LaserSensorEvT_S2_>
    }
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_ZNSaI11LaserSensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fa02 	bl	80046b0 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
	if (__p)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f9fa 	bl	80046c8 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>
      }
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_ZNSt15__new_allocatorIbEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_ZNSt15__new_allocatorIbED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f9f5 	bl	8004700 <_ZNSaImED1Ev>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>:
      _Bvector_base(const allocator_type& __a)
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800432a:	687c      	ldr	r4, [r7, #4]
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f9d7 	bl	80046e6 <_ZNSaImEC1IbEERKSaIT_E>
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	4619      	mov	r1, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f9ea 	bl	8004718 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f9d9 	bl	8004700 <_ZNSaImED1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}

08004358 <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9eb 	bl	800473c <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ffcd 	bl	8004308 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZNKSt16initializer_listIbE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_ZNKSt16initializer_listIbE3endEv>:
      end() const noexcept { return begin() + size(); }
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ffed 	bl	8004378 <_ZNKSt16initializer_listIbE5beginEv>
 800439e:	4604      	mov	r4, r0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9f0 	bl	8004786 <_ZNKSt16initializer_listIbE4sizeEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4423      	add	r3, r4
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>:
	}

      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08c      	sub	sp, #48	@ 0x30
 80043b6:	af02      	add	r7, sp, #8
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f000 f9eb 	bl	800479e <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80043c8:	4603      	mov	r3, r0
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
	  _M_initialize(__n);
 80043cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f9f9 	bl	80047c6 <_ZNSt6vectorIbSaIbEE13_M_initializeEj>
	  std::copy(__first, __last, begin());
 80043d4:	f107 031c 	add.w	r3, r7, #28
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f82c 	bl	8004438 <_ZNSt6vectorIbSaIbEE5beginEv>
 80043e0:	f107 0014 	add.w	r0, r7, #20
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	f000 fa26 	bl	800483e <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>
	}
 80043f2:	bf00      	nop
 80043f4:	3728      	adds	r7, #40	@ 0x28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZNKSt6vectorIbSaIbEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fe f8e7 	bl	80025de <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZNKSt6vectorIbSaIbEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fe f8c6 	bl	80025bc <_ZNSt19_Bit_const_iteratorC1EPmj>
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZNSt6vectorIbSaIbEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe f848 	bl	80024e0 <_ZNSt13_Bit_iteratorC1EPmj>
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa09 	bl	800487c <_ZNSaIiEC1ERKS_>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa13 	bl	8004898 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
	if (__p)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa13 	bl	80048c0 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80044ba:	b5b0      	push	{r4, r5, r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80044c4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa08 	bl	80048de <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80044ce:	462a      	mov	r2, r5
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fa0e 	bl	80048f4 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80044d8:	4603      	mov	r3, r0
    }
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080044e4 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 f9c1 	bl	800487c <_ZNSaIiEC1ERKS_>
 80044fa:	f107 030c 	add.w	r3, r7, #12
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fa08 	bl	8004914 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4293      	cmp	r3, r2
 800450a:	bf8c      	ite	hi
 800450c:	2301      	movhi	r3, #1
 800450e:	2300      	movls	r3, #0
 8004510:	b2dc      	uxtb	r4, r3
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fc02 	bl	8003d20 <_ZNSaIiED1Ev>
 800451c:	2c00      	cmp	r4, #0
 800451e:	d002      	beq.n	8004526 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8004520:	4803      	ldr	r0, [pc, #12]	@ (8004530 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 8004522:	f009 fac9 	bl	800dab8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8004526:	687b      	ldr	r3, [r7, #4]
      }
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}
 8004530:	0800f388 	.word	0x0800f388

08004534 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d006      	beq.n	8004552 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f9fd 	bl	8004948 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 800454e:	4603      	mov	r3, r0
 8004550:	e000      	b.n	8004554 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8004552:	2300      	movs	r3, #0
      }
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f9f9 	bl	8004966 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 8004574:	4603      	mov	r3, r0
    }
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9ff 	bl	800498e <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80045a2:	6839      	ldr	r1, [r7, #0]
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff fe78 	bl	800429a <_ZNSaI11LaserSensorEC1ERKS0_>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f9f9 	bl	80049a4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>:
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80045de:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f9f2 	bl	80049cc <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80045e8:	462a      	mov	r2, r5
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	4620      	mov	r0, r4
 80045ee:	f000 f9f9 	bl	80049e4 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80045f2:	4603      	mov	r3, r0
    }
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bdb0      	pop	{r4, r5, r7, pc}

080045fc <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fe44 	bl	800429a <_ZNSaI11LaserSensorEC1ERKS0_>
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f9fa 	bl	8004a10 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4293      	cmp	r3, r2
 8004622:	bf8c      	ite	hi
 8004624:	2301      	movhi	r3, #1
 8004626:	2300      	movls	r3, #0
 8004628:	b2dc      	uxtb	r4, r3
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fbca 	bl	8003dc8 <_ZNSaI11LaserSensorED1Ev>
 8004634:	2c00      	cmp	r4, #0
 8004636:	d002      	beq.n	800463e <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8004638:	4803      	ldr	r0, [pc, #12]	@ (8004648 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 800463a:	f009 fa3d 	bl	800dab8 <_ZSt20__throw_length_errorPKc>
	return __n;
 800463e:	687b      	ldr	r3, [r7, #4]
      }
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}
 8004648:	0800f388 	.word	0x0800f388

0800464c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x1e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f9f1 	bl	8004a48 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>
 8004666:	4603      	mov	r3, r0
 8004668:	e000      	b.n	800466c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x20>
 800466a:	2300      	movs	r3, #0
      }
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f9ed 	bl	8004a66 <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 800468c:	4603      	mov	r3, r0
    }
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZSt8_DestroyIP11LaserSensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9f3 	bl	8004a8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>
    }
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9f1 	bl	8004ac0 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_ZNSaImEC1IbEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9f8 	bl	8004ae6 <_ZNSt15__new_allocatorImEC1Ev>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f9f7 	bl	8004afc <_ZNSt15__new_allocatorImED1Ev>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9f4 	bl	8004b12 <_ZNSaImEC1ERKS_>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f9fe 	bl	8004b2e <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
	{ }
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa02 	bl	8004b58 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 8004754:	4602      	mov	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	109b      	asrs	r3, r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8004760:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800476c:	4413      	add	r3, r2
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4619      	mov	r1, r3
 8004772:	f000 fa07 	bl	8004b84 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_reset();
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fa12 	bl	8004ba2 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>
      }
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <_ZNKSt16initializer_listIbE4sizeEv>:
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800479e:	b5b0      	push	{r4, r5, r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80047a8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa0d 	bl	8004bcc <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80047b2:	462a      	mov	r2, r5
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 fa13 	bl	8004be2 <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80047bc:	4603      	mov	r3, r0
    }
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdb0      	pop	{r4, r5, r7, pc}

080047c6 <_ZNSt6vectorIbSaIbEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 80047c6:	b590      	push	{r4, r7, lr}
 80047c8:	b089      	sub	sp, #36	@ 0x24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
	if (__n)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d02f      	beq.n	8004836 <_ZNSt6vectorIbSaIbEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fa10 	bl	8004c00 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 80047e0:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f000 fa20 	bl	8004c28 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 80047e8:	4603      	mov	r3, r0
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	441a      	add	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 80047f4:	69f8      	ldr	r0, [r7, #28]
 80047f6:	f000 fa24 	bl	8004c42 <_ZSt11__addressofImEPT_RS0_>
 80047fa:	4601      	mov	r1, r0
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	2200      	movs	r2, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fe6c 	bl	80024e0 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	461a      	mov	r2, r3
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004814:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	68fc      	ldr	r4, [r7, #12]
 800481c:	463b      	mov	r3, r7
 800481e:	f107 0114 	add.w	r1, r7, #20
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd feb5 	bl	8002592 <_ZStplRKSt13_Bit_iteratori>
 8004828:	f104 0308 	add.w	r3, r4, #8
 800482c:	463a      	mov	r2, r7
 800482e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004832:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 8004836:	bf00      	nop
 8004838:	3724      	adds	r7, #36	@ 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}

0800483e <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800483e:	b082      	sub	sp, #8
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b087      	sub	sp, #28
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800484e:	68b8      	ldr	r0, [r7, #8]
 8004850:	f000 fa02 	bl	8004c58 <_ZSt12__miter_baseIPKbET_S2_>
 8004854:	4604      	mov	r4, r0
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9fe 	bl	8004c58 <_ZSt12__miter_baseIPKbET_S2_>
 800485c:	4602      	mov	r2, r0
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	4621      	mov	r1, r4
 8004868:	f000 fa01 	bl	8004c6e <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 800486c:	bf00      	nop
    }
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004878:	b002      	add	sp, #8
 800487a:	4770      	bx	lr

0800487c <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa21 	bl	8004cd0 <_ZNSt15__new_allocatorIiEC1ERKS0_>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
	{ }
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fa09 	bl	8004ce8 <_ZNSt15__new_allocatorIiE10deallocateEPij>
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80048e6:	bf00      	nop
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	109b      	asrs	r3, r3, #2
    }
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800491c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004920:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9f0 	bl	8004d08 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8004928:	4603      	mov	r3, r0
 800492a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800492c:	f107 0208 	add.w	r2, r7, #8
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f9f2 	bl	8004d20 <_ZSt3minIjERKT_S2_S2_>
 800493c:	4603      	mov	r3, r0
 800493e:	681b      	ldr	r3, [r3, #0]
      }
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004952:	2200      	movs	r2, #0
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9f6 	bl	8004d48 <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 800495c:	4603      	mov	r3, r0
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8004976:	2301      	movs	r3, #1
 8004978:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa0b 	bl	8004d9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8004984:	4603      	mov	r3, r0
    }
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
	{ }
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80049d4:	bf00      	nop
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	109b      	asrs	r3, r3, #2
 80049f8:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
    }
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	b6db6db7 	.word	0xb6db6db7

08004a10 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004a18:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8004a1a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f9cc 	bl	8004dba <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>
 8004a22:	4603      	mov	r3, r0
 8004a24:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004a26:	f107 0208 	add.w	r2, r7, #8
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f975 	bl	8004d20 <_ZSt3minIjERKT_S2_S2_>
 8004a36:	4603      	mov	r3, r0
 8004a38:	681b      	ldr	r3, [r3, #0]
      }
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	04924924 	.word	0x04924924

08004a48 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a52:	2200      	movs	r2, #0
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9bc 	bl	8004dd4 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8004a76:	2300      	movs	r3, #0
 8004a78:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f9d6 	bl	8004e30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>
 8004a84:	4603      	mov	r3, r0
    }
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004a98:	e009      	b.n	8004aae <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9d8 	bl	8004e50 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f9df 	bl	8004e66 <_ZSt8_DestroyI11LaserSensorEvPT_>
	  for (; __first != __last; ++__first)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	331c      	adds	r3, #28
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d1f1      	bne.n	8004a9a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0xc>
	}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68b8      	ldr	r0, [r7, #8]
 8004ada:	f008 ffcf 	bl	800da7c <_ZdlPvj>
      }
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <_ZNSt15__new_allocatorImEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9ac 	bl	8004e7c <_ZNSt15__new_allocatorImEC1ERKS0_>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fd fcc2 	bl	80024c2 <_ZNSt13_Bit_iteratorC1Ev>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3308      	adds	r3, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fcbd 	bl	80024c2 <_ZNSt13_Bit_iteratorC1Ev>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
	{ }
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	3b04      	subs	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f867 	bl	8004c42 <_ZSt11__addressofImEPT_RS0_>
 8004b74:	4603      	mov	r3, r0
 8004b76:	3304      	adds	r3, #4
 8004b78:	e000      	b.n	8004b7c <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8004b7a:	2300      	movs	r3, #0
	}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f97d 	bl	8004e94 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 8004ba2:	b5b0      	push	{r4, r5, r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ffbd 	bl	8004b2e <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	f107 040c 	add.w	r4, r7, #12
 8004bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}

08004bcc <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004bd4:	bf00      	nop
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1ad3      	subs	r3, r2, r3
    }
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 8004c0a:	687c      	ldr	r4, [r7, #4]
 8004c0c:	6838      	ldr	r0, [r7, #0]
 8004c0e:	f000 f80b 	bl	8004c28 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8004c12:	4603      	mov	r3, r0
 8004c14:	4619      	mov	r1, r3
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 f94c 	bl	8004eb4 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8004c1c:	60f8      	str	r0, [r7, #12]
	return __p;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
      }
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}

08004c28 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	331f      	adds	r3, #31
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_ZSt11__addressofImEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_ZSt12__miter_baseIPKbET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c6e:	b082      	sub	sp, #8
 8004c70:	b5b0      	push	{r4, r5, r7, lr}
 8004c72:	b08a      	sub	sp, #40	@ 0x28
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
      return std::__niter_wrap(__result,
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f000 f927 	bl	8004ed2 <_ZSt12__niter_baseIPKbET_S2_>
 8004c84:	4604      	mov	r4, r0
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f923 	bl	8004ed2 <_ZSt12__niter_baseIPKbET_S2_>
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	f107 0010 	add.w	r0, r7, #16
 8004c92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c9a:	f000 f925 	bl	8004ee8 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004c9e:	f107 0018 	add.w	r0, r7, #24
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4621      	mov	r1, r4
 8004cac:	f000 f930 	bl	8004f10 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	cb0c      	ldmia	r3, {r2, r3}
 8004cbc:	f000 f940 	bl	8004f40 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>
					     std::__niter_base(__result)));
 8004cc0:	bf00      	nop
    }
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004ccc:	b002      	add	sp, #8
 8004cce:	4770      	bx	lr

08004cd0 <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f008 febe 	bl	800da7c <_ZdlPvj>
      }
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f92a 	bl	8004f6a <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 8004d16:	4603      	mov	r3, r0
      }
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d201      	bcs.n	8004d3a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	e000      	b.n	8004d3c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004d3a:	687b      	ldr	r3, [r7, #4]
    }
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f914 	bl	8004f82 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bf8c      	ite	hi
 8004d62:	2301      	movhi	r3, #1
 8004d64:	2300      	movls	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7c:	d301      	bcc.n	8004d82 <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004d7e:	f008 fe95 	bl	800daac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004d82:	f008 fe90 	bl	800daa6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f008 fe78 	bl	800da80 <_Znwj>
 8004d90:	4603      	mov	r3, r0
      }
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8f5 	bl	8004f9a <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f901 	bl	8004fca <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>
 8004dc8:	4603      	mov	r3, r0
      }
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f8ff 	bl	8004fe4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bf8c      	ite	hi
 8004dee:	2301      	movhi	r3, #1
 8004df0:	2300      	movls	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x58>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004e0a:	f008 fe4f 	bl	800daac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004e0e:	f008 fe4a 	bl	800daa6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f008 fe2f 	bl	800da80 <_Znwj>
 8004e22:	4603      	mov	r3, r0
      }
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	09249249 	.word	0x09249249

08004e30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f8dd 	bl	8005000 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_ZSt11__addressofI11LaserSensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <_ZSt8_DestroyI11LaserSensorEvPT_>:
    _Destroy(_Tp* __pointer)
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd f943 	bl	80020fa <_ZN11LaserSensorD1Ev>
    }
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_ZNSt15__new_allocatorImEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	f008 fde8 	bl	800da7c <_ZdlPvj>
      }
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8bc 	bl	8005040 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZSt12__niter_baseIPKbET_S2_>:
    __niter_base(_Iterator __it)
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	1d3b      	adds	r3, r7, #4
 8004ef2:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f00:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004f10:	b082      	sub	sp, #8
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	61fb      	str	r3, [r7, #28]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	f000 f8b1 	bl	8005092 <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004f30:	bf00      	nop
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f3c:	b002      	add	sp, #8
 8004f3e:	4770      	bx	lr

08004f40 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __res; }
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	461a      	mov	r2, r3
 8004f54:	463b      	mov	r3, r7
 8004f56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f805 	bl	8004f82 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004f8a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004f9a:	b590      	push	{r4, r7, lr}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f88b 	bl	80050c2 <_ZSt12__miter_baseIPKiET_S2_>
 8004fac:	4604      	mov	r4, r0
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f000 f887 	bl	80050c2 <_ZSt12__miter_baseIPKiET_S2_>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f88c 	bl	80050d8 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8004fc0:	4603      	mov	r3, r0
    }
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}

08004fca <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f806 	bl	8004fe4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv+0x18>)
      }
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	04924924 	.word	0x04924924

08005000 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8005010:	e00d      	b.n	800502e <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f7ff ff1c 	bl	8004e50 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8005018:	4603      	mov	r3, r0
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f87e 	bl	800511e <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	331c      	adds	r3, #28
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	331c      	adds	r3, #28
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d1ed      	bne.n	8005012 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x12>
	  return __cur;
 8005036:	697b      	ldr	r3, [r7, #20]
    }
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f880 	bl	8005152 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 8005052:	4602      	mov	r2, r0
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4293      	cmp	r3, r2
 8005058:	bf8c      	ite	hi
 800505a:	2301      	movhi	r3, #1
 800505c:	2300      	movls	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005074:	d301      	bcc.n	800507a <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8005076:	f008 fd19 	bl	800daac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800507a:	f008 fd14 	bl	800daa6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f008 fcfc 	bl	800da80 <_Znwj>
 8005088:	4603      	mov	r3, r0
      }
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005092:	b082      	sub	sp, #8
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	61fb      	str	r3, [r7, #28]
			      _Category>::__copy_m(__first, __last, __result);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	f000 f85c 	bl	800516a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>
 80050b2:	bf00      	nop
    }
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050be:	b002      	add	sp, #8
 80050c0:	4770      	bx	lr

080050c2 <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80050d8:	b5b0      	push	{r4, r5, r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f87a 	bl	80051de <_ZSt12__niter_baseIPKiET_S2_>
 80050ea:	4604      	mov	r4, r0
 80050ec:	68b8      	ldr	r0, [r7, #8]
 80050ee:	f000 f876 	bl	80051de <_ZSt12__niter_baseIPKiET_S2_>
 80050f2:	4605      	mov	r5, r0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f87c 	bl	80051f4 <_ZSt12__niter_baseIPiET_S1_>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	4629      	mov	r1, r5
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f881 	bl	800520a <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 8005108:	4602      	mov	r2, r0
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	4611      	mov	r1, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f88b 	bl	800522a <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8005114:	4603      	mov	r3, r0
    }
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}

0800511e <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800511e:	b5b0      	push	{r4, r5, r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4619      	mov	r1, r3
 800512c:	201c      	movs	r0, #28
 800512e:	f7fd f8f5 	bl	800231c <_ZnwjPv>
 8005132:	4604      	mov	r4, r0
 8005134:	6838      	ldr	r0, [r7, #0]
 8005136:	f000 f884 	bl	8005242 <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>
 800513a:	4603      	mov	r3, r0
 800513c:	461d      	mov	r5, r3
 800513e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bdb0      	pop	{r4, r5, r7, pc}

08005152 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800515a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800516a:	b082      	sub	sp, #8
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e01a      	b.n	80051ba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x50>
	      *__result = *__first;
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd f9b7 	bl	8002502 <_ZNKSt13_Bit_iteratordeEv>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781a      	ldrb	r2, [r3, #0]
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd f8f0 	bl	8002384 <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
	      ++__result;
 80051aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd f9bb 	bl	800252a <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dce1      	bgt.n	8005184 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x1a>
	  return __result;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051cc:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051da:	b002      	add	sp, #8
 80051dc:	4770      	bx	lr

080051de <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
    { return __it; }
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f81c 	bl	8005258 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8005220:	4603      	mov	r3, r0
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f805 	bl	8005278 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 800526e:	4603      	mov	r3, r0
    }
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	109b      	asrs	r3, r3, #2
 800528c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	461a      	mov	r2, r3
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f009 f88b 	bl	800e3b8 <memmove>
	  return __result + _Num;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
	}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZN14ReservoirStateD1Ev>:
struct ReservoirState
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fe32 	bl	8003f26 <_ZNSt6vectorIbSaIbEED1Ev>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b0af      	sub	sp, #188	@ 0xbc
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 80f2 	bne.w	80054c2 <_Z41__static_initialization_and_destruction_0ii+0x1f6>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052e4:	4293      	cmp	r3, r2
 80052e6:	f040 80ec 	bne.w	80054c2 <_Z41__static_initialization_and_destruction_0ii+0x1f6>
ChampiCan champi_can;
 80052ea:	4889      	ldr	r0, [pc, #548]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80052ec:	f7fb fca0 	bl	8000c30 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_action;
 80052f0:	4888      	ldr	r0, [pc, #544]	@ (8005514 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80052f2:	f7fb fec9 	bl	8001088 <_ZN17MessageRecomposerC1Ev>
ChampiState champi_state;
 80052f6:	4888      	ldr	r0, [pc, #544]	@ (8005518 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80052f8:	f7fb fdd0 	bl	8000e9c <_ZN11ChampiStateC1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80052fc:	4a87      	ldr	r2, [pc, #540]	@ (800551c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005306:	e883 0003 	stmia.w	r3, {r0, r1}
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	2302      	movs	r3, #2
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fcf5 	bl	8003d08 <_ZNSaIiEC1Ev>
 800531e:	f107 031c 	add.w	r3, r7, #28
 8005322:	f107 020c 	add.w	r2, r7, #12
 8005326:	ca06      	ldmia	r2, {r1, r2}
 8005328:	487d      	ldr	r0, [pc, #500]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800532a:	f7fe fd05 	bl	8003d38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 800532e:	f107 031c 	add.w	r3, r7, #28
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fcf4 	bl	8003d20 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 8005338:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800533c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800533e:	2300      	movs	r3, #0
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005342:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	2302      	movs	r3, #2
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
 800534c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe fcd9 	bl	8003d08 <_ZNSaIiEC1Ev>
 8005356:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800535a:	f107 0220 	add.w	r2, r7, #32
 800535e:	ca06      	ldmia	r2, {r1, r2}
 8005360:	4870      	ldr	r0, [pc, #448]	@ (8005524 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005362:	f7fe fce9 	bl	8003d38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8005366:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fcd8 	bl	8003d20 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 8005370:	4a6d      	ldr	r2, [pc, #436]	@ (8005528 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005372:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800537a:	e883 0003 	stmia.w	r3, {r0, r1}
 800537e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
 8005384:	2302      	movs	r3, #2
 8005386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005388:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fcbb 	bl	8003d08 <_ZNSaIiEC1Ev>
 8005392:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005396:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800539a:	ca06      	ldmia	r2, {r1, r2}
 800539c:	4863      	ldr	r0, [pc, #396]	@ (800552c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800539e:	f7fe fccb 	bl	8003d38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 80053a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fcba 	bl	8003d20 <_ZNSaIiED1Ev>
auto sensors = std::vector<LaserSensor>({
 80053ac:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80053b0:	f06f 0309 	mvn.w	r3, #9
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2301      	movs	r3, #1
 80053b8:	2210      	movs	r2, #16
 80053ba:	495d      	ldr	r1, [pc, #372]	@ (8005530 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80053bc:	f7fc fe78 	bl	80020b0 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 80053c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053c4:	f103 001c 	add.w	r0, r3, #28
 80053c8:	f06f 0307 	mvn.w	r3, #7
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	2305      	movs	r3, #5
 80053d0:	2220      	movs	r2, #32
 80053d2:	4957      	ldr	r1, [pc, #348]	@ (8005530 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80053d4:	f7fc fe6c 	bl	80020b0 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 80053d8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053de:	2302      	movs	r3, #2
 80053e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fce2 	bl	8003db0 <_ZNSaI11LaserSensorEC1Ev>
 80053ec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80053f0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80053f4:	ca06      	ldmia	r2, {r1, r2}
 80053f6:	484f      	ldr	r0, [pc, #316]	@ (8005534 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80053f8:	f7fe fcf2 	bl	8003de0 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 80053fc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fce1 	bl	8003dc8 <_ZNSaI11LaserSensorED1Ev>
});
 8005406:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800540a:	3438      	adds	r4, #56	@ 0x38
auto sensors = std::vector<LaserSensor>({
 800540c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005410:	429c      	cmp	r4, r3
 8005412:	d004      	beq.n	800541e <_Z41__static_initialization_and_destruction_0ii+0x152>
});
 8005414:	3c1c      	subs	r4, #28
 8005416:	4620      	mov	r0, r4
 8005418:	f7fc fe6f 	bl	80020fa <_ZN11LaserSensorD1Ev>
auto sensors = std::vector<LaserSensor>({
 800541c:	e7f6      	b.n	800540c <_Z41__static_initialization_and_destruction_0ii+0x140>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2340      	movs	r3, #64	@ 0x40
 800542a:	4a41      	ldr	r2, [pc, #260]	@ (8005530 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800542c:	4942      	ldr	r1, [pc, #264]	@ (8005538 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800542e:	4843      	ldr	r0, [pc, #268]	@ (800553c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005430:	f7fc fc8e 	bl	8001d50 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 8005434:	2301      	movs	r3, #1
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	4b3d      	ldr	r3, [pc, #244]	@ (8005530 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2302      	movs	r3, #2
 800543e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8005442:	493d      	ldr	r1, [pc, #244]	@ (8005538 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005444:	483e      	ldr	r0, [pc, #248]	@ (8005540 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005446:	f7fc fc83 	bl	8001d50 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 800544a:	493e      	ldr	r1, [pc, #248]	@ (8005544 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800544c:	483e      	ldr	r0, [pc, #248]	@ (8005548 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800544e:	f7fb ffaa 	bl	80013a6 <_ZN7SCServoC1EP20__UART_HandleTypeDef>
std::vector<int> servo_ids_to_check = {
 8005452:	2308      	movs	r3, #8
 8005454:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  hoppers_ids[LEFT],
 8005458:	2100      	movs	r1, #0
 800545a:	4831      	ldr	r0, [pc, #196]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800545c:	f7fe fd1a 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8005460:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  hoppers_ids[RIGHT],
 8005468:	2101      	movs	r1, #1
 800546a:	482d      	ldr	r0, [pc, #180]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800546c:	f7fe fd12 	bl	8003e94 <_ZNSt6vectorIiSaIiEEixEj>
 8005470:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005478:	2312      	movs	r3, #18
 800547a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800547e:	2310      	movs	r3, #16
 8005480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005484:	2309      	movs	r3, #9
 8005486:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800548a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005492:	2306      	movs	r3, #6
 8005494:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005498:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800549c:	4618      	mov	r0, r3
 800549e:	f7fe fc33 	bl	8003d08 <_ZNSaIiEC1Ev>
 80054a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80054a6:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80054aa:	ca06      	ldmia	r2, {r1, r2}
 80054ac:	4827      	ldr	r0, [pc, #156]	@ (800554c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80054ae:	f7fe fc43 	bl	8003d38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 80054b2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fc32 	bl	8003d20 <_ZNSaIiED1Ev>
} reservoir_state;
 80054bc:	4824      	ldr	r0, [pc, #144]	@ (8005550 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80054be:	f7fd fa0f 	bl	80028e0 <_ZN14ReservoirStateC1Ev>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11f      	bne.n	8005508 <_Z41__static_initialization_and_destruction_0ii+0x23c>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d11a      	bne.n	8005508 <_Z41__static_initialization_and_destruction_0ii+0x23c>
 80054d2:	481f      	ldr	r0, [pc, #124]	@ (8005550 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80054d4:	f7ff feed 	bl	80052b2 <_ZN14ReservoirStateD1Ev>
std::vector<int> servo_ids_to_check = {
 80054d8:	481c      	ldr	r0, [pc, #112]	@ (800554c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80054da:	f7fe fc4e 	bl	8003d7a <_ZNSt6vectorIiSaIiEED1Ev>
auto sensors = std::vector<LaserSensor>({
 80054de:	4815      	ldr	r0, [pc, #84]	@ (8005534 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80054e0:	f7fe fc9f 	bl	8003e22 <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 80054e4:	4811      	ldr	r0, [pc, #68]	@ (800552c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80054e6:	f7fe fc48 	bl	8003d7a <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 80054ea:	480e      	ldr	r0, [pc, #56]	@ (8005524 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80054ec:	f7fe fc45 	bl	8003d7a <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80054f0:	480b      	ldr	r0, [pc, #44]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80054f2:	f7fe fc42 	bl	8003d7a <_ZNSt6vectorIiSaIiEED1Ev>
ChampiState champi_state;
 80054f6:	4808      	ldr	r0, [pc, #32]	@ (8005518 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80054f8:	f7fb fd24 	bl	8000f44 <_ZN11ChampiStateD1Ev>
MessageRecomposer msg_recomposer_action;
 80054fc:	4805      	ldr	r0, [pc, #20]	@ (8005514 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80054fe:	f7fb fecf 	bl	80012a0 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 8005502:	4803      	ldr	r0, [pc, #12]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005504:	f7fb fcaa 	bl	8000e5c <_ZN9ChampiCanD1Ev>
}
 8005508:	bf00      	nop
 800550a:	37b4      	adds	r7, #180	@ 0xb4
 800550c:	46bd      	mov	sp, r7
 800550e:	bd90      	pop	{r4, r7, pc}
 8005510:	200002c0 	.word	0x200002c0
 8005514:	200002ec 	.word	0x200002ec
 8005518:	20000508 	.word	0x20000508
 800551c:	0800f3bc 	.word	0x0800f3bc
 8005520:	200005d0 	.word	0x200005d0
 8005524:	200005dc 	.word	0x200005dc
 8005528:	0800f3c4 	.word	0x0800f3c4
 800552c:	200005e8 	.word	0x200005e8
 8005530:	48000400 	.word	0x48000400
 8005534:	200005f4 	.word	0x200005f4
 8005538:	08002671 	.word	0x08002671
 800553c:	20000600 	.word	0x20000600
 8005540:	20000644 	.word	0x20000644
 8005544:	20000194 	.word	0x20000194
 8005548:	20000688 	.word	0x20000688
 800554c:	2000068c 	.word	0x2000068c
 8005550:	2000069c 	.word	0x2000069c

08005554 <_GLOBAL__sub_I_hfdcan1>:
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
 8005558:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800555c:	2001      	movs	r0, #1
 800555e:	f7ff feb5 	bl	80052cc <_Z41__static_initialization_and_destruction_0ii>
 8005562:	bd80      	pop	{r7, pc}

08005564 <_GLOBAL__sub_D_hfdcan1>:
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
 8005568:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800556c:	2000      	movs	r0, #0
 800556e:	f7ff fead 	bl	80052cc <_Z41__static_initialization_and_destruction_0ii>
 8005572:	bd80      	pop	{r7, pc}

08005574 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8005574:	b480      	push	{r7}
 8005576:	b08f      	sub	sp, #60	@ 0x3c
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	891a      	ldrh	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	8a1b      	ldrh	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d301      	bcc.n	800558e <load_descriptor_values+0x1a>
        return false;
 800558a:	2300      	movs	r3, #0
 800558c:	e156      	b.n	800583c <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	895b      	ldrh	r3, [r3, #10]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80055aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d05a      	beq.n	800566a <load_descriptor_values+0xf6>
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	f200 8094 	bhi.w	80056e2 <load_descriptor_values+0x16e>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <load_descriptor_values+0x50>
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d01f      	beq.n	8005602 <load_descriptor_values+0x8e>
 80055c2:	e08e      	b.n	80056e2 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	0e1b      	lsrs	r3, r3, #24
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	0f1b      	lsrs	r3, r3, #28
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	825a      	strh	r2, [r3, #18]
            break;
 8005600:	e0b4      	b.n	800576c <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	895b      	ldrh	r3, [r3, #10]
 800560c:	3301      	adds	r3, #1
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b29b      	uxth	r3, r3
 800561c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	b29b      	uxth	r3, r3
 800562c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005630:	b29a      	uxth	r2, r3
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	0f1b      	lsrs	r3, r3, #28
 8005636:	b29b      	uxth	r3, r3
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	b29b      	uxth	r3, r3
 800563c:	4313      	orrs	r3, r2
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005646:	0f1b      	lsrs	r3, r3, #28
 8005648:	b25b      	sxtb	r3, r3
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	b29b      	uxth	r3, r3
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	b29b      	uxth	r3, r3
 800565e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	825a      	strh	r2, [r3, #18]
            break;
 8005668:	e080      	b.n	800576c <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	895b      	ldrh	r3, [r3, #10]
 8005674:	3301      	adds	r3, #1
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	3302      	adds	r3, #2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	895b      	ldrh	r3, [r3, #10]
 800569c:	3303      	adds	r3, #3
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80056b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b2:	089b      	lsrs	r3, r3, #2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	825a      	strh	r2, [r3, #18]
            break;
 80056e0:	e044      	b.n	800576c <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	895b      	ldrh	r3, [r3, #10]
 80056ec:	3301      	adds	r3, #1
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	895b      	ldrh	r3, [r3, #10]
 8005700:	3302      	adds	r3, #2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	895b      	ldrh	r3, [r3, #10]
 8005714:	3303      	adds	r3, #3
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	895b      	ldrh	r3, [r3, #10]
 8005728:	3304      	adds	r3, #4
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	b29b      	uxth	r3, r3
 8005740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005744:	b29a      	uxth	r2, r3
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	b29b      	uxth	r3, r3
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	b29b      	uxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	825a      	strh	r2, [r3, #18]
            break;
 800576a:	bf00      	nop
        }
    }

    if (!iter->message)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	621a      	str	r2, [r3, #32]
 8005780:	e041      	b.n	8005806 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	441a      	add	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800578e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800579e:	425b      	negs	r3, r3
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	621a      	str	r2, [r3, #32]
 80057a6:	e01a      	b.n	80057de <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7d9b      	ldrb	r3, [r3, #22]
 80057ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d111      	bne.n	80057d8 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7d9b      	ldrb	r3, [r3, #22]
 80057b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7d9b      	ldrb	r3, [r3, #22]
 80057c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d105      	bne.n	80057d8 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0214 	add.w	r2, r3, #20
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]
 80057d6:	e002      	b.n	80057de <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7d9b      	ldrb	r3, [r3, #22]
 80057e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d109      	bne.n	80057fe <load_descriptor_values+0x28a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	61da      	str	r2, [r3, #28]
 80057fc:	e003      	b.n	8005806 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7d9b      	ldrb	r3, [r3, #22]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	2b08      	cmp	r3, #8
 8005810:	d005      	beq.n	800581e <load_descriptor_values+0x2aa>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7d9b      	ldrb	r3, [r3, #22]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	2b09      	cmp	r3, #9
 800581c:	d10a      	bne.n	8005834 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	89db      	ldrh	r3, [r3, #14]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24
 8005832:	e002      	b.n	800583a <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 800583a:	2301      	movs	r3, #1
}
 800583c:	4618      	mov	r0, r3
 800583e:	373c      	adds	r7, #60	@ 0x3c
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    iter->index++;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	891b      	ldrh	r3, [r3, #8]
 8005854:	3301      	adds	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	891a      	ldrh	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	8a1b      	ldrh	r3, [r3, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	d30c      	bcc.n	8005884 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8005882:	e03b      	b.n	80058fc <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	895b      	ldrh	r3, [r3, #10]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2201      	movs	r2, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	895a      	ldrh	r2, [r3, #10]
 80058ae:	893b      	ldrh	r3, [r7, #8]
 80058b0:	4413      	add	r3, r2
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	899b      	ldrh	r3, [r3, #12]
 80058bc:	7afa      	ldrb	r2, [r7, #11]
 80058be:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	bf0c      	ite	eq
 80058c6:	2201      	moveq	r2, #1
 80058c8:	2200      	movne	r2, #0
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	4413      	add	r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	89da      	ldrh	r2, [r3, #14]
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d004      	beq.n	80058ec <advance_iterator+0xa4>
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	d101      	bne.n	80058f0 <advance_iterator+0xa8>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <advance_iterator+0xaa>
 80058f0:	2300      	movs	r3, #0
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	81da      	strh	r2, [r3, #14]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8005914:	2228      	movs	r2, #40	@ 0x28
 8005916:	2100      	movs	r1, #0
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f008 fd67 	bl	800e3ec <memset>

    iter->descriptor = desc;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fe22 	bl	8005574 <load_descriptor_values>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800595c:	2b80      	cmp	r3, #128	@ 0x80
 800595e:	d109      	bne.n	8005974 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	3304      	adds	r3, #4
 8005964:	461a      	mov	r2, r3
 8005966:	6939      	ldr	r1, [r7, #16]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ffcd 	bl	8005908 <pb_field_iter_begin>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
 8005972:	e008      	b.n	8005986 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	461a      	mov	r2, r3
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffc3 	bl	8005908 <pb_field_iter_begin>
 8005982:	4603      	mov	r3, r0
 8005984:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f103 020c 	add.w	r2, r3, #12
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	621a      	str	r2, [r3, #32]
    return status;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ff50 	bl	8005848 <advance_iterator>
    (void)load_descriptor_values(iter);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fde3 	bl	8005574 <load_descriptor_values>
    return iter->index != 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	891b      	ldrh	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8a1b      	ldrh	r3, [r3, #16]
 80059d2:	461a      	mov	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80059da:	2301      	movs	r3, #1
 80059dc:	e044      	b.n	8005a68 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	8a9b      	ldrh	r3, [r3, #20]
 80059e4:	461a      	mov	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <pb_field_iter_find+0x2c>
    {
        return false;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e03b      	b.n	8005a68 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	891b      	ldrh	r3, [r3, #8]
 80059f4:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8a1b      	ldrh	r3, [r3, #16]
 80059fa:	461a      	mov	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d204      	bcs.n	8005a0c <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	8a1a      	ldrh	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff1b 	bl	8005848 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	895b      	ldrh	r3, [r3, #10]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	089a      	lsrs	r2, r3, #2
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4053      	eors	r3, r2
 8005a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d110      	bne.n	8005a56 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fd9d 	bl	8005574 <load_descriptor_values>

                if (iter->tag == tag &&
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8a1b      	ldrh	r3, [r3, #16]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d107      	bne.n	8005a56 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7d9b      	ldrb	r3, [r3, #22]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d001      	beq.n	8005a56 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e008      	b.n	8005a68 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	891b      	ldrh	r3, [r3, #8]
 8005a5a:	89fa      	ldrh	r2, [r7, #14]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1d5      	bne.n	8005a0c <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fd87 	bl	8005574 <load_descriptor_values>
        return false;
 8005a66:	2300      	movs	r3, #0
    }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	7d9b      	ldrb	r3, [r3, #22]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	2b0a      	cmp	r3, #10
 8005a82:	d101      	bne.n	8005a88 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e022      	b.n	8005ace <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	891b      	ldrh	r3, [r3, #8]
 8005a8c:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff feda 	bl	8005848 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	895b      	ldrh	r3, [r3, #10]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	2b0a      	cmp	r3, #10
 8005ab0:	d104      	bne.n	8005abc <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fd5e 	bl	8005574 <load_descriptor_values>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	e008      	b.n	8005ace <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	891b      	ldrh	r3, [r3, #8]
 8005ac0:	89fa      	ldrh	r2, [r7, #14]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d1e3      	bne.n	8005a8e <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fd54 	bl	8005574 <load_descriptor_values>
        return false;
 8005acc:	2300      	movs	r3, #0
    }
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff ffea 	bl	8005ad6 <pb_const_cast>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fefd 	bl	8005908 <pb_field_iter_begin>
 8005b0e:	4603      	mov	r3, r0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8005b22:	6838      	ldr	r0, [r7, #0]
 8005b24:	f7ff ffd7 	bl	8005ad6 <pb_const_cast>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff04 	bl	800593a <pb_field_iter_begin_extension>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8a5b      	ldrh	r3, [r3, #18]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d125      	bne.n	8005b9c <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01f      	beq.n	8005b9c <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <pb_default_field_callback+0x40>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	3204      	adds	r2, #4
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	4798      	blx	r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e010      	b.n	8005b9e <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <pb_default_field_callback+0x60>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	3204      	adds	r2, #4
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	68b8      	ldr	r0, [r7, #8]
 8005b96:	4798      	blx	r3
 8005b98:	4603      	mov	r3, r0
 8005b9a:	e000      	b.n	8005b9e <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8005b9c:	2301      	movs	r3, #1

}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	68b8      	ldr	r0, [r7, #8]
 8005bd0:	f008 fcdb 	bl	800e58a <memcpy>
    }
    
    return true;
 8005bd4:	2301      	movs	r3, #1
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <pb_read+0x16>
        return true;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e05f      	b.n	8005cb6 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d123      	bne.n	8005c44 <pb_read+0x64>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <pb_read+0xe0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01e      	beq.n	8005c44 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8005c06:	e011      	b.n	8005c2c <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ffe5 	bl	8005be0 <pb_read>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f083 0301 	eor.w	r3, r3, #1
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <pb_read+0x46>
				return false;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e047      	b.n	8005cb6 <pb_read+0xd6>
			
			count -= 16;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b10      	subs	r3, #16
 8005c2a:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d8ea      	bhi.n	8005c08 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8005c32:	f107 0310 	add.w	r3, r7, #16
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ffd0 	bl	8005be0 <pb_read>
 8005c40:	4603      	mov	r3, r0
 8005c42:	e038      	b.n	8005cb6 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d90b      	bls.n	8005c66 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <pb_read+0x7c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	e000      	b.n	8005c5e <pb_read+0x7e>
 8005c5c:	4b19      	ldr	r3, [pc, #100]	@ (8005cc4 <pb_read+0xe4>)
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	60d3      	str	r3, [r2, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	e027      	b.n	8005cb6 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	4798      	blx	r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	f083 0301 	eor.w	r3, r3, #1
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <pb_read+0xac>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	e000      	b.n	8005c8e <pb_read+0xae>
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc8 <pb_read+0xe8>)
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	60d3      	str	r3, [r2, #12]
 8005c92:	2300      	movs	r3, #0
 8005c94:	e00f      	b.n	8005cb6 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d903      	bls.n	8005ca8 <pb_read+0xc8>
        stream->bytes_left = 0;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	e005      	b.n	8005cb4 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]

    return true;
 8005cb4:	2301      	movs	r3, #1
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08005ba7 	.word	0x08005ba7
 8005cc4:	0800f3cc 	.word	0x0800f3cc
 8005cc8:	0800f3dc 	.word	0x0800f3dc

08005ccc <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <pb_readbyte+0x20>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	e000      	b.n	8005cee <pb_readbyte+0x22>
 8005cec:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <pb_readbyte+0x70>)
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	60d3      	str	r3, [r2, #12]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e01d      	b.n	8005d32 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	f083 0301 	eor.w	r3, r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <pb_readbyte+0x50>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	e000      	b.n	8005d1e <pb_readbyte+0x52>
 8005d1c:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <pb_readbyte+0x74>)
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	60d3      	str	r3, [r2, #12]
 8005d22:	2300      	movs	r3, #0
 8005d24:	e005      	b.n	8005d32 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	1e5a      	subs	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	609a      	str	r2, [r3, #8]
    
    return true;    
 8005d30:	2301      	movs	r3, #1
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	0800f3cc 	.word	0x0800f3cc
 8005d40:	0800f3dc 	.word	0x0800f3dc

08005d44 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8005d44:	b490      	push	{r4, r7}
 8005d46:	b08a      	sub	sp, #40	@ 0x28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8005d50:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <pb_istream_from_buffer+0x38>)
 8005d52:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	461c      	mov	r4, r3
 8005d68:	f107 0318 	add.w	r3, r7, #24
 8005d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	3728      	adds	r7, #40	@ 0x28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc90      	pop	{r4, r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	08005ba7 	.word	0x08005ba7

08005d80 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8005d8c:	f107 0315 	add.w	r3, r7, #21
 8005d90:	4619      	mov	r1, r3
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff ff9a 	bl	8005ccc <pb_readbyte>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f083 0301 	eor.w	r3, r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e084      	b.n	8005ec6 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8005dbc:	7d7b      	ldrb	r3, [r7, #21]
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db02      	blt.n	8005dca <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8005dc4:	7d7b      	ldrb	r3, [r7, #21]
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e079      	b.n	8005ebe <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8005dca:	2307      	movs	r3, #7
 8005dcc:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8005dce:	7d7b      	ldrb	r3, [r7, #21]
 8005dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd4:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8005dd6:	f107 0315 	add.w	r3, r7, #21
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff ff75 	bl	8005ccc <pb_readbyte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f083 0301 	eor.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <pb_decode_varint32_eof+0x72>
                return false;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e069      	b.n	8005ec6 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b1f      	cmp	r3, #31
 8005df6:	d92f      	bls.n	8005e58 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dfc:	d801      	bhi.n	8005e02 <pb_decode_varint32_eof+0x82>
 8005dfe:	23ff      	movs	r3, #255	@ 0xff
 8005e00:	e000      	b.n	8005e04 <pb_decode_varint32_eof+0x84>
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005e06:	7d7b      	ldrb	r3, [r7, #21]
 8005e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d006      	beq.n	8005e1e <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005e10:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da05      	bge.n	8005e22 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005e16:	7d7b      	ldrb	r3, [r7, #21]
 8005e18:	7dfa      	ldrb	r2, [r7, #23]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d101      	bne.n	8005e22 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <pb_decode_varint32_eof+0xa4>
 8005e22:	2300      	movs	r3, #0
 8005e24:	75bb      	strb	r3, [r7, #22]
 8005e26:	7dbb      	ldrb	r3, [r7, #22]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e32:	d805      	bhi.n	8005e40 <pb_decode_varint32_eof+0xc0>
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	f083 0301 	eor.w	r3, r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d037      	beq.n	8005eb0 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <pb_decode_varint32_eof+0xce>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	e000      	b.n	8005e50 <pb_decode_varint32_eof+0xd0>
 8005e4e:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <pb_decode_varint32_eof+0x150>)
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	60d3      	str	r3, [r2, #12]
 8005e54:	2300      	movs	r3, #0
 8005e56:	e036      	b.n	8005ec6 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b1c      	cmp	r3, #28
 8005e5c:	d11f      	bne.n	8005e9e <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8005e5e:	7d7b      	ldrb	r3, [r7, #21]
 8005e60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <pb_decode_varint32_eof+0x10a>
 8005e68:	7d7b      	ldrb	r3, [r7, #21]
 8005e6a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8005e6e:	2b78      	cmp	r3, #120	@ 0x78
 8005e70:	d00b      	beq.n	8005e8a <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <pb_decode_varint32_eof+0x100>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	e000      	b.n	8005e82 <pb_decode_varint32_eof+0x102>
 8005e80:	4b13      	ldr	r3, [pc, #76]	@ (8005ed0 <pb_decode_varint32_eof+0x150>)
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	60d3      	str	r3, [r2, #12]
 8005e86:	2300      	movs	r3, #0
 8005e88:	e01d      	b.n	8005ec6 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8005e8a:	7d7b      	ldrb	r3, [r7, #21]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e008      	b.n	8005eb0 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8005e9e:	7d7b      	ldrb	r3, [r7, #21]
 8005ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8005eb6:	7d7b      	ldrb	r3, [r7, #21]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db8b      	blt.n	8005dd6 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	601a      	str	r2, [r3, #0]
   return true;
 8005ec4:	2301      	movs	r3, #1
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	0800f3e8 	.word	0x0800f3e8

08005ed4 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005ede:	2200      	movs	r2, #0
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff4c 	bl	8005d80 <pb_decode_varint32_eof>
 8005ee8:	4603      	mov	r3, r0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b08a      	sub	sp, #40	@ 0x28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8005f10:	f107 0317 	add.w	r3, r7, #23
 8005f14:	4619      	mov	r1, r3
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fed8 	bl	8005ccc <pb_readbyte>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f083 0301 	eor.w	r3, r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <pb_decode_varint+0x38>
            return false;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e041      	b.n	8005fb0 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f30:	d910      	bls.n	8005f54 <pb_decode_varint+0x60>
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <pb_decode_varint+0x56>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	e000      	b.n	8005f4c <pb_decode_varint+0x58>
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <pb_decode_varint+0xc8>)
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	60d3      	str	r3, [r2, #12]
 8005f50:	2300      	movs	r3, #0
 8005f52:	e02d      	b.n	8005fb0 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8005f64:	f04f 0900 	mov.w	r9, #0
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	f1a3 0120 	sub.w	r1, r3, #32
 8005f6e:	f1c3 0220 	rsb	r2, r3, #32
 8005f72:	fa09 f503 	lsl.w	r5, r9, r3
 8005f76:	fa08 f101 	lsl.w	r1, r8, r1
 8005f7a:	430d      	orrs	r5, r1
 8005f7c:	fa28 f202 	lsr.w	r2, r8, r2
 8005f80:	4315      	orrs	r5, r2
 8005f82:	fa08 f403 	lsl.w	r4, r8, r3
 8005f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f8a:	ea42 0a04 	orr.w	sl, r2, r4
 8005f8e:	ea43 0b05 	orr.w	fp, r3, r5
 8005f92:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	3307      	adds	r3, #7
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dbb5      	blt.n	8005f10 <pb_decode_varint+0x1c>
    
    *dest = result;
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005faa:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8005fae:	2301      	movs	r3, #1
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3728      	adds	r7, #40	@ 0x28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800f3e8 	.word	0x0800f3e8

08005fc0 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8005fc8:	f107 030f 	add.w	r3, r7, #15
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fe05 	bl	8005be0 <pb_read>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <pb_skip_varint+0x26>
            return false;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e004      	b.n	8005ff0 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dbec      	blt.n	8005fc8 <pb_skip_varint+0x8>
    return true;
 8005fee:	2301      	movs	r3, #1
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff64 	bl	8005ed4 <pb_decode_varint32>
 800600c:	4603      	mov	r3, r0
 800600e:	f083 0301 	eor.w	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <pb_skip_string+0x24>
        return false;
 8006018:	2300      	movs	r3, #0
 800601a:	e006      	b.n	800602a <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	461a      	mov	r2, r3
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fddc 	bl	8005be0 <pb_read>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8006052:	f107 0314 	add.w	r3, r7, #20
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	4619      	mov	r1, r3
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fe90 	bl	8005d80 <pb_decode_varint32_eof>
 8006060:	4603      	mov	r3, r0
 8006062:	f083 0301 	eor.w	r3, r3, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <pb_decode_tag+0x3e>
    {
        return false;
 800606c:	2300      	movs	r3, #0
 800606e:	e00b      	b.n	8006088 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	08da      	lsrs	r2, r3, #3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	701a      	strb	r2, [r3, #0]
    return true;
 8006086:	2301      	movs	r3, #1
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d826      	bhi.n	80060f0 <pb_skip_field+0x60>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <pb_skip_field+0x18>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060c1 	.word	0x080060c1
 80060ac:	080060cb 	.word	0x080060cb
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060f1 	.word	0x080060f1
 80060b8:	080060f1 	.word	0x080060f1
 80060bc:	080060e3 	.word	0x080060e3
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff7d 	bl	8005fc0 <pb_skip_varint>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e01d      	b.n	8006106 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80060ca:	2208      	movs	r2, #8
 80060cc:	2100      	movs	r1, #0
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fd86 	bl	8005be0 <pb_read>
 80060d4:	4603      	mov	r3, r0
 80060d6:	e016      	b.n	8006106 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ff8d 	bl	8005ff8 <pb_skip_string>
 80060de:	4603      	mov	r3, r0
 80060e0:	e011      	b.n	8006106 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80060e2:	2204      	movs	r2, #4
 80060e4:	2100      	movs	r1, #0
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fd7a 	bl	8005be0 <pb_read>
 80060ec:	4603      	mov	r3, r0
 80060ee:	e00a      	b.n	8006106 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <pb_skip_field+0x6e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	e000      	b.n	8006100 <pb_skip_field+0x70>
 80060fe:	4b04      	ldr	r3, [pc, #16]	@ (8006110 <pb_skip_field+0x80>)
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	60d3      	str	r3, [r2, #12]
 8006104:	2300      	movs	r3, #0
    }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	0800f3f8 	.word	0x0800f3f8

08006114 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	460b      	mov	r3, r1
 8006122:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	2b05      	cmp	r3, #5
 800612e:	d03f      	beq.n	80061b0 <read_raw_value+0x9c>
 8006130:	2b05      	cmp	r3, #5
 8006132:	dc47      	bgt.n	80061c4 <read_raw_value+0xb0>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <read_raw_value+0x2a>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d02f      	beq.n	800619c <read_raw_value+0x88>
 800613c:	e042      	b.n	80061c4 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	429a      	cmp	r2, r3
 8006156:	d20b      	bcs.n	8006170 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <read_raw_value+0x52>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	e000      	b.n	8006168 <read_raw_value+0x54>
 8006166:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <read_raw_value+0xd0>)
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	60d3      	str	r3, [r2, #12]
 800616c:	2300      	movs	r3, #0
 800616e:	e034      	b.n	80061da <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8006170:	2201      	movs	r2, #1
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff fd33 	bl	8005be0 <pb_read>
 800617a:	4603      	mov	r3, r0
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <read_raw_value+0x76>
                    return false;
 8006186:	2300      	movs	r3, #0
 8006188:	e027      	b.n	80061da <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b25b      	sxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	dbd5      	blt.n	8006144 <read_raw_value+0x30>
            return true;
 8006198:	2301      	movs	r3, #1
 800619a:	e01e      	b.n	80061da <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2208      	movs	r2, #8
 80061a0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80061a2:	2208      	movs	r2, #8
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff fd1a 	bl	8005be0 <pb_read>
 80061ac:	4603      	mov	r3, r0
 80061ae:	e014      	b.n	80061da <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2204      	movs	r2, #4
 80061b4:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80061b6:	2204      	movs	r2, #4
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fd10 	bl	8005be0 <pb_read>
 80061c0:	4603      	mov	r3, r0
 80061c2:	e00a      	b.n	80061da <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <read_raw_value+0xbe>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	e000      	b.n	80061d4 <read_raw_value+0xc0>
 80061d2:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <read_raw_value+0xd4>)
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	60d3      	str	r3, [r2, #12]
 80061d8:	2300      	movs	r3, #0
    }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	0800f3e8 	.word	0x0800f3e8
 80061e8:	0800f3f8 	.word	0x0800f3f8

080061ec <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80061f6:	f107 030c 	add.w	r3, r7, #12
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fe69 	bl	8005ed4 <pb_decode_varint32>
 8006202:	4603      	mov	r3, r0
 8006204:	f083 0301 	eor.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <pb_make_string_substream+0x26>
        return false;
 800620e:	2300      	movs	r3, #0
 8006210:	e020      	b.n	8006254 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4614      	mov	r4, r2
 8006218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800621a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d20b      	bcs.n	8006240 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <pb_make_string_substream+0x4a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	e000      	b.n	8006238 <pb_make_string_substream+0x4c>
 8006236:	4b09      	ldr	r3, [pc, #36]	@ (800625c <pb_make_string_substream+0x70>)
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	60d3      	str	r3, [r2, #12]
 800623c:	2300      	movs	r3, #0
 800623e:	e009      	b.n	8006254 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	609a      	str	r2, [r3, #8]
    return true;
 8006252:	2301      	movs	r3, #1
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	bd90      	pop	{r4, r7, pc}
 800625c:	0800f40c 	.word	0x0800f40c

08006260 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	461a      	mov	r2, r3
 8006278:	2100      	movs	r1, #0
 800627a:	6838      	ldr	r0, [r7, #0]
 800627c:	f7ff fcb0 	bl	8005be0 <pb_read>
 8006280:	4603      	mov	r3, r0
 8006282:	f083 0301 	eor.w	r3, r3, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <pb_close_string_substream+0x30>
            return false;
 800628c:	2300      	movs	r3, #0
 800628e:	e008      	b.n	80062a2 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80062a0:	2301      	movs	r3, #1
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	460b      	mov	r3, r1
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7d9b      	ldrb	r3, [r3, #22]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	2b0b      	cmp	r3, #11
 80062c4:	f200 80d4 	bhi.w	8006470 <decode_basic_field+0x1c4>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <decode_basic_field+0x24>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006301 	.word	0x08006301
 80062d4:	08006331 	.word	0x08006331
 80062d8:	08006331 	.word	0x08006331
 80062dc:	08006331 	.word	0x08006331
 80062e0:	08006361 	.word	0x08006361
 80062e4:	08006395 	.word	0x08006395
 80062e8:	080063c9 	.word	0x080063c9
 80062ec:	080063f3 	.word	0x080063f3
 80062f0:	0800641d 	.word	0x0800641d
 80062f4:	0800641d 	.word	0x0800641d
 80062f8:	08006471 	.word	0x08006471
 80062fc:	08006447 	.word	0x08006447
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <decode_basic_field+0x78>
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2bff      	cmp	r3, #255	@ 0xff
 800630a:	d00b      	beq.n	8006324 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <decode_basic_field+0x6e>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	e000      	b.n	800631c <decode_basic_field+0x70>
 800631a:	4b5d      	ldr	r3, [pc, #372]	@ (8006490 <decode_basic_field+0x1e4>)
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	60d3      	str	r3, [r2, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	e0b0      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fef6 	bl	8007118 <pb_dec_bool>
 800632c:	4603      	mov	r3, r0
 800632e:	e0aa      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <decode_basic_field+0xa8>
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	2bff      	cmp	r3, #255	@ 0xff
 800633a:	d00b      	beq.n	8006354 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <decode_basic_field+0x9e>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	e000      	b.n	800634c <decode_basic_field+0xa0>
 800634a:	4b51      	ldr	r3, [pc, #324]	@ (8006490 <decode_basic_field+0x1e4>)
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	60d3      	str	r3, [r2, #12]
 8006350:	2300      	movs	r3, #0
 8006352:	e098      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 feee 	bl	8007138 <pb_dec_varint>
 800635c:	4603      	mov	r3, r0
 800635e:	e092      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	2b05      	cmp	r3, #5
 8006364:	d00e      	beq.n	8006384 <decode_basic_field+0xd8>
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	2bff      	cmp	r3, #255	@ 0xff
 800636a:	d00b      	beq.n	8006384 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <decode_basic_field+0xce>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	e000      	b.n	800637c <decode_basic_field+0xd0>
 800637a:	4b45      	ldr	r3, [pc, #276]	@ (8006490 <decode_basic_field+0x1e4>)
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	60d3      	str	r3, [r2, #12]
 8006380:	2300      	movs	r3, #0
 8006382:	e080      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fe8a 	bl	80070a4 <pb_decode_fixed32>
 8006390:	4603      	mov	r3, r0
 8006392:	e078      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d00e      	beq.n	80063b8 <decode_basic_field+0x10c>
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	2bff      	cmp	r3, #255	@ 0xff
 800639e:	d00b      	beq.n	80063b8 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <decode_basic_field+0x102>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	e000      	b.n	80063b0 <decode_basic_field+0x104>
 80063ae:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <decode_basic_field+0x1e4>)
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	60d3      	str	r3, [r2, #12]
 80063b4:	2300      	movs	r3, #0
 80063b6:	e066      	b.n	8006486 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fe8c 	bl	80070dc <pb_decode_fixed64>
 80063c4:	4603      	mov	r3, r0
 80063c6:	e05e      	b.n	8006486 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d00b      	beq.n	80063e6 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <decode_basic_field+0x130>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	e000      	b.n	80063de <decode_basic_field+0x132>
 80063dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006490 <decode_basic_field+0x1e4>)
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	60d3      	str	r3, [r2, #12]
 80063e2:	2300      	movs	r3, #0
 80063e4:	e04f      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 ffd1 	bl	8007390 <pb_dec_bytes>
 80063ee:	4603      	mov	r3, r0
 80063f0:	e049      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d00b      	beq.n	8006410 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <decode_basic_field+0x15a>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	e000      	b.n	8006408 <decode_basic_field+0x15c>
 8006406:	4b22      	ldr	r3, [pc, #136]	@ (8006490 <decode_basic_field+0x1e4>)
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	60d3      	str	r3, [r2, #12]
 800640c:	2300      	movs	r3, #0
 800640e:	e03a      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 f830 	bl	8007478 <pb_dec_string>
 8006418:	4603      	mov	r3, r0
 800641a:	e034      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d00b      	beq.n	800643a <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <decode_basic_field+0x184>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	e000      	b.n	8006432 <decode_basic_field+0x186>
 8006430:	4b17      	ldr	r3, [pc, #92]	@ (8006490 <decode_basic_field+0x1e4>)
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	60d3      	str	r3, [r2, #12]
 8006436:	2300      	movs	r3, #0
 8006438:	e025      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 f897 	bl	8007570 <pb_dec_submessage>
 8006442:	4603      	mov	r3, r0
 8006444:	e01f      	b.n	8006486 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8006446:	7afb      	ldrb	r3, [r7, #11]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d00b      	beq.n	8006464 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <decode_basic_field+0x1ae>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	e000      	b.n	800645c <decode_basic_field+0x1b0>
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <decode_basic_field+0x1e4>)
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	60d3      	str	r3, [r2, #12]
 8006460:	2300      	movs	r3, #0
 8006462:	e010      	b.n	8006486 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f001 f90c 	bl	8007684 <pb_dec_fixed_length_bytes>
 800646c:	4603      	mov	r3, r0
 800646e:	e00a      	b.n	8006486 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <decode_basic_field+0x1d2>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	e000      	b.n	8006480 <decode_basic_field+0x1d4>
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <decode_basic_field+0x1e8>)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	60d3      	str	r3, [r2, #12]
 8006484:	2300      	movs	r3, #0
    }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	0800f424 	.word	0x0800f424
 8006494:	0800f434 	.word	0x0800f434

08006498 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b096      	sub	sp, #88	@ 0x58
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	460b      	mov	r3, r1
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7d9b      	ldrb	r3, [r3, #22]
 80064aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064ae:	2b30      	cmp	r3, #48	@ 0x30
 80064b0:	f000 80c2 	beq.w	8006638 <decode_static_field+0x1a0>
 80064b4:	2b30      	cmp	r3, #48	@ 0x30
 80064b6:	f200 811a 	bhi.w	80066ee <decode_static_field+0x256>
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d01f      	beq.n	80064fe <decode_static_field+0x66>
 80064be:	2b20      	cmp	r3, #32
 80064c0:	f200 8115 	bhi.w	80066ee <decode_static_field+0x256>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <decode_static_field+0x36>
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d008      	beq.n	80064de <decode_static_field+0x46>
 80064cc:	e10f      	b.n	80066ee <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fee9 	bl	80062ac <decode_basic_field>
 80064da:	4603      	mov	r3, r0
 80064dc:	e112      	b.n	8006704 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff fed9 	bl	80062ac <decode_basic_field>
 80064fa:	4603      	mov	r3, r0
 80064fc:	e102      	b.n	8006704 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d16c      	bne.n	80065de <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7d9b      	ldrb	r3, [r3, #22]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	2b05      	cmp	r3, #5
 800650e:	d866      	bhi.n	80065de <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	8a52      	ldrh	r2, [r2, #18]
 8006524:	4611      	mov	r1, r2
 8006526:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006528:	8812      	ldrh	r2, [r2, #0]
 800652a:	fb01 f202 	mul.w	r2, r1, r2
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8006534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fe56 	bl	80061ec <pb_make_string_substream>
 8006540:	4603      	mov	r3, r0
 8006542:	f083 0301 	eor.w	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01f      	beq.n	800658c <decode_static_field+0xf4>
                    return false;
 800654c:	2300      	movs	r3, #0
 800654e:	e0d9      	b.n	8006704 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8006550:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	21ff      	movs	r1, #255	@ 0xff
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fea7 	bl	80062ac <decode_basic_field>
 800655e:	4603      	mov	r3, r0
 8006560:	f083 0301 	eor.w	r3, r3, #1
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <decode_static_field+0xda>
                    {
                        status = false;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8006570:	e015      	b.n	800659e <decode_static_field+0x106>
                    }
                    (*size)++;
 8006572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657c:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	8a52      	ldrh	r2, [r2, #18]
 8006586:	441a      	add	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 800658c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <decode_static_field+0x106>
 8006592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8a9b      	ldrh	r3, [r3, #20]
 800659a:	429a      	cmp	r2, r3
 800659c:	d3d8      	bcc.n	8006550 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 800659e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <decode_static_field+0x11a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	e000      	b.n	80065b4 <decode_static_field+0x11c>
 80065b2:	4b56      	ldr	r3, [pc, #344]	@ (800670c <decode_static_field+0x274>)
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	60d3      	str	r3, [r2, #12]
 80065b8:	2300      	movs	r3, #0
 80065ba:	e0a3      	b.n	8006704 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80065bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7ff fe4c 	bl	8006260 <pb_close_string_substream>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f083 0301 	eor.w	r3, r3, #1
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <decode_static_field+0x140>
                    return false;
 80065d4:	2300      	movs	r3, #0
 80065d6:	e095      	b.n	8006704 <decode_static_field+0x26c>

                return status;
 80065d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065dc:	e092      	b.n	8006704 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	8a52      	ldrh	r2, [r2, #18]
 80065ec:	4611      	mov	r1, r2
 80065ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	fb01 f202 	mul.w	r2, r1, r2
 80065f6:	441a      	add	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80065fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	b291      	uxth	r1, r2
 8006604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006606:	8011      	strh	r1, [r2, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	8a92      	ldrh	r2, [r2, #20]
 800660c:	4293      	cmp	r3, r2
 800660e:	d30b      	bcc.n	8006628 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <decode_static_field+0x186>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	e000      	b.n	8006620 <decode_static_field+0x188>
 800661e:	4b3b      	ldr	r3, [pc, #236]	@ (800670c <decode_static_field+0x274>)
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	60d3      	str	r3, [r2, #12]
 8006624:	2300      	movs	r3, #0
 8006626:	e06d      	b.n	8006704 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4619      	mov	r1, r3
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fe3c 	bl	80062ac <decode_basic_field>
 8006634:	4603      	mov	r3, r0
 8006636:	e065      	b.n	8006704 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	7d9b      	ldrb	r3, [r3, #22]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2b08      	cmp	r3, #8
 8006642:	d005      	beq.n	8006650 <decode_static_field+0x1b8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7d9b      	ldrb	r3, [r3, #22]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2b09      	cmp	r3, #9
 800664e:	d141      	bne.n	80066d4 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	881a      	ldrh	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800665a:	429a      	cmp	r2, r3
 800665c:	d03a      	beq.n	80066d4 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69d8      	ldr	r0, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8a5b      	ldrh	r3, [r3, #18]
 8006666:	461a      	mov	r2, r3
 8006668:	2100      	movs	r1, #0
 800666a:	f007 febf 	bl	800e3ec <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d105      	bne.n	800668e <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800668a:	2b00      	cmp	r3, #0
 800668c:	d022      	beq.n	80066d4 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f934 	bl	8005908 <pb_field_iter_begin>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d016      	beq.n	80066d4 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa4d 	bl	8006b4a <pb_message_set_to_defaults>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f083 0301 	eor.w	r3, r3, #1
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <decode_static_field+0x232>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	e000      	b.n	80066cc <decode_static_field+0x234>
 80066ca:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <decode_static_field+0x278>)
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	60d3      	str	r3, [r2, #12]
 80066d0:	2300      	movs	r3, #0
 80066d2:	e017      	b.n	8006704 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	8a12      	ldrh	r2, [r2, #16]
 80066dc:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff fde1 	bl	80062ac <decode_basic_field>
 80066ea:	4603      	mov	r3, r0
 80066ec:	e00a      	b.n	8006704 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <decode_static_field+0x264>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	e000      	b.n	80066fe <decode_static_field+0x266>
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <decode_static_field+0x27c>)
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	60d3      	str	r3, [r2, #12]
 8006702:	2300      	movs	r3, #0
    }
}
 8006704:	4618      	mov	r0, r3
 8006706:	3758      	adds	r7, #88	@ 0x58
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	0800f448 	.word	0x0800f448
 8006710:	0800f458 	.word	0x0800f458
 8006714:	0800f434 	.word	0x0800f434

08006718 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	460b      	mov	r3, r1
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <decode_pointer_field+0x1c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	e000      	b.n	8006736 <decode_pointer_field+0x1e>
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <decode_pointer_field+0x30>)
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	60d3      	str	r3, [r2, #12]
 800673a:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	0800f470 	.word	0x0800f470

0800674c <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b097      	sub	sp, #92	@ 0x5c
 8006750:	af00      	add	r7, sp, #0
 8006752:	61f8      	str	r0, [r7, #28]
 8006754:	460b      	mov	r3, r1
 8006756:	617a      	str	r2, [r7, #20]
 8006758:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8006764:	7efb      	ldrb	r3, [r7, #27]
 8006766:	4619      	mov	r1, r3
 8006768:	69f8      	ldr	r0, [r7, #28]
 800676a:	f7ff fc91 	bl	8006090 <pb_skip_field>
 800676e:	4603      	mov	r3, r0
 8006770:	e070      	b.n	8006854 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8006772:	7efb      	ldrb	r3, [r7, #27]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d145      	bne.n	8006804 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8006778:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800677c:	4619      	mov	r1, r3
 800677e:	69f8      	ldr	r0, [r7, #28]
 8006780:	f7ff fd34 	bl	80061ec <pb_make_string_substream>
 8006784:	4603      	mov	r3, r0
 8006786:	f083 0301 	eor.w	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <decode_callback_field+0x48>
            return false;
 8006790:	2300      	movs	r3, #0
 8006792:	e05f      	b.n	8006854 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8006794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006796:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	2100      	movs	r1, #0
 80067a6:	4798      	blx	r3
 80067a8:	4603      	mov	r3, r0
 80067aa:	f083 0301 	eor.w	r3, r3, #1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <decode_callback_field+0x76>
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	e005      	b.n	80067ce <decode_callback_field+0x82>
 80067c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <decode_callback_field+0x80>
 80067c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ca:	e000      	b.n	80067ce <decode_callback_field+0x82>
 80067cc:	4b23      	ldr	r3, [pc, #140]	@ (800685c <decode_callback_field+0x110>)
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	60d3      	str	r3, [r2, #12]
                return false;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e03e      	b.n	8006854 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80067d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <decode_callback_field+0x98>
 80067dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d8d7      	bhi.n	8006794 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 80067e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80067e8:	4619      	mov	r1, r3
 80067ea:	69f8      	ldr	r0, [r7, #28]
 80067ec:	f7ff fd38 	bl	8006260 <pb_close_string_substream>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f083 0301 	eor.w	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <decode_callback_field+0xb4>
            return false;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e029      	b.n	8006854 <decode_callback_field+0x108>

        return true;
 8006800:	2301      	movs	r3, #1
 8006802:	e027      	b.n	8006854 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8006804:	230a      	movs	r3, #10
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8006808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800680c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006810:	7ef9      	ldrb	r1, [r7, #27]
 8006812:	69f8      	ldr	r0, [r7, #28]
 8006814:	f7ff fc7e 	bl	8006114 <read_raw_value>
 8006818:	4603      	mov	r3, r0
 800681a:	f083 0301 	eor.w	r3, r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <decode_callback_field+0xdc>
            return false;
 8006824:	2300      	movs	r3, #0
 8006826:	e015      	b.n	8006854 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8006828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682a:	463b      	mov	r3, r7
 800682c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fa87 	bl	8005d44 <pb_istream_from_buffer>
 8006836:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800683a:	463b      	mov	r3, r7
 800683c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800683e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	2100      	movs	r1, #0
 8006850:	4798      	blx	r3
 8006852:	4603      	mov	r3, r0
    }
}
 8006854:	4618      	mov	r0, r3
 8006856:	375c      	adds	r7, #92	@ 0x5c
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}
 800685c:	0800f484 	.word	0x0800f484

08006860 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	460b      	mov	r3, r1
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7d9b      	ldrb	r3, [r3, #22]
 8006872:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006876:	2b80      	cmp	r3, #128	@ 0x80
 8006878:	d00e      	beq.n	8006898 <decode_field+0x38>
 800687a:	2b80      	cmp	r3, #128	@ 0x80
 800687c:	d81c      	bhi.n	80068b8 <decode_field+0x58>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <decode_field+0x28>
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d010      	beq.n	80068a8 <decode_field+0x48>
 8006886:	e017      	b.n	80068b8 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4619      	mov	r1, r3
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fe02 	bl	8006498 <decode_static_field>
 8006894:	4603      	mov	r3, r0
 8006896:	e01a      	b.n	80068ce <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff3a 	bl	8006718 <decode_pointer_field>
 80068a4:	4603      	mov	r3, r0
 80068a6:	e012      	b.n	80068ce <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ff4c 	bl	800674c <decode_callback_field>
 80068b4:	4603      	mov	r3, r0
 80068b6:	e00a      	b.n	80068ce <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <decode_field+0x66>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	e000      	b.n	80068c8 <decode_field+0x68>
 80068c6:	4b04      	ldr	r3, [pc, #16]	@ (80068d8 <decode_field+0x78>)
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	60d3      	str	r3, [r2, #12]
 80068cc:	2300      	movs	r3, #0
    }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	0800f434 	.word	0x0800f434

080068dc <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	@ 0x38
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 80068ea:	f107 0310 	add.w	r3, r7, #16
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff f822 	bl	800593a <pb_field_iter_begin_extension>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f083 0301 	eor.w	r3, r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <default_extension_decoder+0x34>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	e000      	b.n	8006912 <default_extension_decoder+0x36>
 8006910:	4b0e      	ldr	r3, [pc, #56]	@ (800694c <default_extension_decoder+0x70>)
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	60d3      	str	r3, [r2, #12]
 8006916:	2300      	movs	r3, #0
 8006918:	e014      	b.n	8006944 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 800691a:	8c3b      	ldrh	r3, [r7, #32]
 800691c:	461a      	mov	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4293      	cmp	r3, r2
 8006922:	d102      	bne.n	800692a <default_extension_decoder+0x4e>
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <default_extension_decoder+0x52>
        return true;
 800692a:	2301      	movs	r3, #1
 800692c:	e00a      	b.n	8006944 <default_extension_decoder+0x68>

    extension->found = true;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2201      	movs	r2, #1
 8006932:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8006934:	f107 0210 	add.w	r2, r7, #16
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff ff8f 	bl	8006860 <decode_field>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3738      	adds	r7, #56	@ 0x38
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	0800f494 	.word	0x0800f494

08006950 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4613      	mov	r3, r2
 800695e:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8006966:	e022      	b.n	80069ae <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681c      	ldr	r4, [r3, #0]
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	47a0      	blx	r4
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
 8006986:	e007      	b.n	8006998 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff ffa4 	bl	80068dc <default_extension_decoder>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	f083 0301 	eor.w	r3, r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <decode_extension+0x58>
            return false;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e00b      	b.n	80069c0 <decode_extension+0x70>
        
        extension = extension->next;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <decode_extension+0x6e>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d0d4      	beq.n	8006968 <decode_extension+0x18>
    }
    
    return true;
 80069be:	2301      	movs	r3, #1
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}

080069c8 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08e      	sub	sp, #56	@ 0x38
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7d9b      	ldrb	r3, [r3, #22]
 80069d4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80069d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	2b0a      	cmp	r3, #10
 80069e2:	d124      	bne.n	8006a2e <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80069ec:	e01b      	b.n	8006a26 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80069ee:	f107 0308 	add.w	r3, r7, #8
 80069f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ffa0 	bl	800593a <pb_field_iter_begin_extension>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00f      	beq.n	8006a20 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	2200      	movs	r2, #0
 8006a04:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f89d 	bl	8006b4a <pb_message_set_to_defaults>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f083 0301 	eor.w	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <pb_field_set_to_default+0x58>
                    return false;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e090      	b.n	8006b42 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e0      	bne.n	80069ee <pb_field_set_to_default+0x26>
 8006a2c:	e088      	b.n	8006b40 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006a2e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d166      	bne.n	8006b08 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8006a40:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d108      	bne.n	8006a5e <pb_field_set_to_default+0x96>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	e012      	b.n	8006a84 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006a5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d005      	beq.n	8006a76 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006a6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006a72:	2b30      	cmp	r3, #48	@ 0x30
 8006a74:	d106      	bne.n	8006a84 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8006a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d059      	beq.n	8006b40 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7d9b      	ldrb	r3, [r3, #22]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d005      	beq.n	8006aa4 <pb_field_set_to_default+0xdc>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7d9b      	ldrb	r3, [r3, #22]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d128      	bne.n	8006af6 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d018      	beq.n	8006af6 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe ff19 	bl	8005908 <pb_field_iter_begin>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d030      	beq.n	8006b3e <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 f832 	bl	8006b4a <pb_message_set_to_defaults>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f083 0301 	eor.w	r3, r3, #1
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d025      	beq.n	8006b3e <pb_field_set_to_default+0x176>
                        return false;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e025      	b.n	8006b42 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69d8      	ldr	r0, [r3, #28]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8a5b      	ldrh	r3, [r3, #18]
 8006afe:	461a      	mov	r2, r3
 8006b00:	2100      	movs	r1, #0
 8006b02:	f007 fc73 	bl	800e3ec <memset>
 8006b06:	e01b      	b.n	8006b40 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8006b08:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b0c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b10:	2b80      	cmp	r3, #128	@ 0x80
 8006b12:	d115      	bne.n	8006b40 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d005      	beq.n	8006b34 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006b28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006b30:	2b30      	cmp	r3, #48	@ 0x30
 8006b32:	d105      	bne.n	8006b40 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e000      	b.n	8006b40 <pb_field_set_to_default+0x178>
            {
 8006b3e:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8006b40:	2301      	movs	r3, #1
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3738      	adds	r7, #56	@ 0x38
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8006b4a:	b590      	push	{r4, r7, lr}
 8006b4c:	b08d      	sub	sp, #52	@ 0x34
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8006b52:	f107 0320 	add.w	r3, r7, #32
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	609a      	str	r2, [r3, #8]
 8006b5e:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8006b64:	2300      	movs	r3, #0
 8006b66:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6899      	ldr	r1, [r3, #8]
 8006b78:	463b      	mov	r3, r7
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f8e0 	bl	8005d44 <pb_istream_from_buffer>
 8006b84:	f107 0420 	add.w	r4, r7, #32
 8006b88:	463b      	mov	r3, r7
 8006b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006b90:	f107 031a 	add.w	r3, r7, #26
 8006b94:	f107 021c 	add.w	r2, r7, #28
 8006b98:	f107 011b 	add.w	r1, r7, #27
 8006b9c:	f107 0020 	add.w	r0, r7, #32
 8006ba0:	f7ff fa47 	bl	8006032 <pb_decode_tag>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f083 0301 	eor.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <pb_message_set_to_defaults+0x6a>
            return false;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e043      	b.n	8006c3c <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8006bb4:	6978      	ldr	r0, [r7, #20]
 8006bb6:	f7ff ff07 	bl	80069c8 <pb_field_set_to_default>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f083 0301 	eor.w	r3, r3, #1
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <pb_message_set_to_defaults+0x80>
            return false;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e038      	b.n	8006c3c <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d02e      	beq.n	8006c2e <pb_message_set_to_defaults+0xe4>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	8a1b      	ldrh	r3, [r3, #16]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d128      	bne.n	8006c2e <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8006bdc:	7ef9      	ldrb	r1, [r7, #27]
 8006bde:	f107 0320 	add.w	r3, r7, #32
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fe3b 	bl	8006860 <decode_field>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f083 0301 	eor.w	r3, r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <pb_message_set_to_defaults+0xb0>
                return false;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e020      	b.n	8006c3c <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006bfa:	f107 031a 	add.w	r3, r7, #26
 8006bfe:	f107 021c 	add.w	r2, r7, #28
 8006c02:	f107 011b 	add.w	r1, r7, #27
 8006c06:	f107 0020 	add.w	r0, r7, #32
 8006c0a:	f7ff fa12 	bl	8006032 <pb_decode_tag>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f083 0301 	eor.w	r3, r3, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <pb_message_set_to_defaults+0xd4>
                return false;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e00e      	b.n	8006c3c <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f7fe feb3 	bl	800599a <pb_field_iter_next>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1bc      	bne.n	8006bb4 <pb_message_set_to_defaults+0x6a>

    return true;
 8006c3a:	2301      	movs	r3, #1
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3734      	adds	r7, #52	@ 0x34
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd90      	pop	{r4, r7, pc}

08006c44 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b09a      	sub	sp, #104	@ 0x68
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8006c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c5e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8006c6e:	2300      	movs	r3, #0
 8006c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c72:	2300      	movs	r3, #0
 8006c74:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c7a:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8006c7c:	f107 0318 	add.w	r3, r7, #24
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fe3f 	bl	8005908 <pb_field_iter_begin>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8102 	beq.w	8006e96 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 80fc 	bne.w	8006e96 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8006c9e:	f107 0318 	add.w	r3, r7, #24
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ff51 	bl	8006b4a <pb_message_set_to_defaults>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f083 0301 	eor.w	r3, r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80f0 	beq.w	8006e96 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <pb_decode_inner+0x80>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	e000      	b.n	8006cc6 <pb_decode_inner+0x82>
 8006cc4:	4b99      	ldr	r3, [pc, #612]	@ (8006f2c <pb_decode_inner+0x2e8>)
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	60d3      	str	r3, [r2, #12]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e16d      	b.n	8006faa <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006cce:	f107 0312 	add.w	r3, r7, #18
 8006cd2:	f107 0214 	add.w	r2, r7, #20
 8006cd6:	f107 0113 	add.w	r1, r7, #19
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff f9a9 	bl	8006032 <pb_decode_tag>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <pb_decode_inner+0xb4>
        {
            if (eof)
 8006cec:	7cbb      	ldrb	r3, [r7, #18]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 80d7 	bne.w	8006ea2 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e158      	b.n	8006faa <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d111      	bne.n	8006d22 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 80ce 	bne.w	8006ea6 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <pb_decode_inner+0xd4>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	e000      	b.n	8006d1a <pb_decode_inner+0xd6>
 8006d18:	4b85      	ldr	r3, [pc, #532]	@ (8006f30 <pb_decode_inner+0x2ec>)
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	60d3      	str	r3, [r2, #12]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e143      	b.n	8006faa <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	f107 0318 	add.w	r3, r7, #24
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fe4a 	bl	80059c4 <pb_field_iter_find>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f083 0301 	eor.w	r3, r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <pb_decode_inner+0x104>
 8006d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	2b0a      	cmp	r3, #10
 8006d46:	d13c      	bne.n	8006dc2 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8006d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d112      	bne.n	8006d74 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8006d4e:	f107 0318 	add.w	r3, r7, #24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fe8c 	bl	8005a70 <pb_field_iter_find_extension>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8006d64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d66:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8006d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d72:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d815      	bhi.n	8006da8 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	7cfa      	ldrb	r2, [r7, #19]
 8006d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fde1 	bl	8006950 <decode_extension>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f083 0301 	eor.w	r3, r3, #1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <pb_decode_inner+0x15a>
                    return false;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e105      	b.n	8006faa <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d173      	bne.n	8006e90 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff f96f 	bl	8006090 <pb_skip_field>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f083 0301 	eor.w	r3, r3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d06a      	beq.n	8006e94 <pb_decode_inner+0x250>
                return false;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e0f3      	b.n	8006faa <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8006dc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d12e      	bne.n	8006e2c <pb_decode_inner+0x1e8>
 8006dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dd0:	f107 0318 	add.w	r3, r7, #24
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d128      	bne.n	8006e2c <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8006dda:	8c3b      	ldrh	r3, [r7, #32]
 8006ddc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d020      	beq.n	8006e26 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8006de4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d011      	beq.n	8006e14 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8006df0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8006df4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d00b      	beq.n	8006e14 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <pb_decode_inner+0x1c6>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	e000      	b.n	8006e0c <pb_decode_inner+0x1c8>
 8006e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f34 <pb_decode_inner+0x2f0>)
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	60d3      	str	r3, [r2, #12]
 8006e10:	2300      	movs	r3, #0
 8006e12:	e0ca      	b.n	8006faa <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8006e14:	8c3b      	ldrh	r3, [r7, #32]
 8006e16:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8006e20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e22:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8006e26:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8006e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8006e2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11c      	bne.n	8006e72 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8006e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e3c:	d819      	bhi.n	8006e72 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006e3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2201      	movs	r2, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8006e4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	3368      	adds	r3, #104	@ 0x68
 8006e56:	443b      	add	r3, r7
 8006e58:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8006e5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4619      	mov	r1, r3
 8006e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e66:	431a      	orrs	r2, r3
 8006e68:	008b      	lsls	r3, r1, #2
 8006e6a:	3368      	adds	r3, #104	@ 0x68
 8006e6c:	443b      	add	r3, r7
 8006e6e:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8006e72:	7cfb      	ldrb	r3, [r7, #19]
 8006e74:	f107 0218 	add.w	r2, r7, #24
 8006e78:	4619      	mov	r1, r3
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fcf0 	bl	8006860 <decode_field>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f083 0301 	eor.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <pb_decode_inner+0x252>
            return false;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e08c      	b.n	8006faa <pb_decode_inner+0x366>
                    continue;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <pb_decode_inner+0x252>
            continue;
 8006e94:	bf00      	nop
    while (stream->bytes_left)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f47f af17 	bne.w	8006cce <pb_decode_inner+0x8a>
 8006ea0:	e002      	b.n	8006ea8 <pb_decode_inner+0x264>
                break;
 8006ea2:	bf00      	nop
 8006ea4:	e000      	b.n	8006ea8 <pb_decode_inner+0x264>
            break;
 8006ea6:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8006ea8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d011      	beq.n	8006ed8 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8006eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8006eb8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d00b      	beq.n	8006ed8 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <pb_decode_inner+0x28a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	e000      	b.n	8006ed0 <pb_decode_inner+0x28c>
 8006ece:	4b19      	ldr	r3, [pc, #100]	@ (8006f34 <pb_decode_inner+0x2f0>)
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	60d3      	str	r3, [r2, #12]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e068      	b.n	8006faa <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	8a5b      	ldrh	r3, [r3, #18]
 8006edc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8006ee0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d05f      	beq.n	8006fa8 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8006ee8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006eec:	2b40      	cmp	r3, #64	@ 0x40
 8006eee:	d902      	bls.n	8006ef6 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8006ef0:	2340      	movs	r3, #64	@ 0x40
 8006ef2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006efc:	e023      	b.n	8006f46 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8006efe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	3368      	adds	r3, #104	@ 0x68
 8006f06:	443b      	add	r3, r7
 8006f08:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d014      	beq.n	8006f3c <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <pb_decode_inner+0x2dc>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	e000      	b.n	8006f22 <pb_decode_inner+0x2de>
 8006f20:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <pb_decode_inner+0x2f4>)
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	60d3      	str	r3, [r2, #12]
 8006f26:	2300      	movs	r3, #0
 8006f28:	e03f      	b.n	8006faa <pb_decode_inner+0x366>
 8006f2a:	bf00      	nop
 8006f2c:	0800f458 	.word	0x0800f458
 8006f30:	0800f4a8 	.word	0x0800f4a8
 8006f34:	0800f4b4 	.word	0x0800f4b4
 8006f38:	0800f4d8 	.word	0x0800f4d8
            for (i = 0; i < (req_field_count >> 5); i++)
 8006f3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006f40:	3301      	adds	r3, #1
 8006f42:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006f46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d3d3      	bcc.n	8006efe <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8006f56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d022      	beq.n	8006fa8 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006f62:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	3368      	adds	r3, #104	@ 0x68
 8006f6e:	443b      	add	r3, r7
 8006f70:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8006f74:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f1c3 0320 	rsb	r3, r3, #32
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8a:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d00b      	beq.n	8006fa8 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <pb_decode_inner+0x35a>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	e000      	b.n	8006fa0 <pb_decode_inner+0x35c>
 8006f9e:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <pb_decode_inner+0x370>)
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	60d3      	str	r3, [r2, #12]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8006fa8:	2301      	movs	r3, #1
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3768      	adds	r7, #104	@ 0x68
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800f4d8 	.word	0x0800f4d8

08006fb8 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fe3a 	bl	8006c44 <pb_decode_inner>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fe ff70 	bl	8005ed4 <pb_decode_varint32>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f083 0301 	eor.w	r3, r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <pb_decode_bool+0x26>
        return false;
 8007000:	2300      	movs	r3, #0
 8007002:	e008      	b.n	8007016 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	701a      	strb	r2, [r3, #0]
    return true;
 8007014:	2301      	movs	r3, #1
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800701e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800702a:	f107 0308 	add.w	r3, r7, #8
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe ff5f 	bl	8005ef4 <pb_decode_varint>
 8007036:	4603      	mov	r3, r0
 8007038:	f083 0301 	eor.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <pb_decode_svarint+0x28>
        return false;
 8007042:	2300      	movs	r3, #0
 8007044:	e029      	b.n	800709a <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8007046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800704a:	f002 0401 	and.w	r4, r2, #1
 800704e:	2500      	movs	r5, #0
 8007050:	ea54 0305 	orrs.w	r3, r4, r5
 8007054:	d013      	beq.n	800707e <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8007056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	0842      	lsrs	r2, r0, #1
 8007064:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007068:	084b      	lsrs	r3, r1, #1
 800706a:	ea6f 0802 	mvn.w	r8, r2
 800706e:	ea6f 0903 	mvn.w	r9, r3
 8007072:	4642      	mov	r2, r8
 8007074:	464b      	mov	r3, r9
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	e9c1 2300 	strd	r2, r3, [r1]
 800707c:	e00c      	b.n	8007098 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800707e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	0842      	lsrs	r2, r0, #1
 800708c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007090:	084b      	lsrs	r3, r1, #1
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8007098:	2301      	movs	r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080070a4 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80070ae:	f107 030c 	add.w	r3, r7, #12
 80070b2:	2204      	movs	r2, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fe fd92 	bl	8005be0 <pb_read>
 80070bc:	4603      	mov	r3, r0
 80070be:	f083 0301 	eor.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <pb_decode_fixed32+0x28>
        return false;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e003      	b.n	80070d4 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80070d2:	2301      	movs	r3, #1
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80070e6:	f107 0308 	add.w	r3, r7, #8
 80070ea:	2208      	movs	r2, #8
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fe fd76 	bl	8005be0 <pb_read>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f083 0301 	eor.w	r3, r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <pb_decode_fixed64+0x28>
        return false;
 8007100:	2300      	movs	r3, #0
 8007102:	e005      	b.n	8007110 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8007104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800710e:	2301      	movs	r3, #1
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff58 	bl	8006fde <pb_decode_bool>
 800712e:	4603      	mov	r3, r0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b094      	sub	sp, #80	@ 0x50
 800713e:	af00      	add	r7, sp, #0
 8007140:	6278      	str	r0, [r7, #36]	@ 0x24
 8007142:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	7d9b      	ldrb	r3, [r3, #22]
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	2b02      	cmp	r3, #2
 800714e:	d179      	bne.n	8007244 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8007150:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007154:	4619      	mov	r1, r3
 8007156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007158:	f7fe fecc 	bl	8005ef4 <pb_decode_varint>
 800715c:	4603      	mov	r3, r0
 800715e:	f083 0301 	eor.w	r3, r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <pb_dec_varint+0x34>
            return false;
 8007168:	2300      	movs	r3, #0
 800716a:	e107      	b.n	800737c <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	8a5b      	ldrh	r3, [r3, #18]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d10a      	bne.n	800718a <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	69d9      	ldr	r1, [r3, #28]
 8007178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800717c:	e9c1 2300 	strd	r2, r3, [r1]
 8007180:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007184:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8007188:	e046      	b.n	8007218 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	8a5b      	ldrh	r3, [r3, #18]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d10e      	bne.n	80071b0 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8007192:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4602      	mov	r2, r0
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	617a      	str	r2, [r7, #20]
 80071a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071aa:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071ae:	e033      	b.n	8007218 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	8a5b      	ldrh	r3, [r3, #18]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d10f      	bne.n	80071d8 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80071b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	b282      	uxth	r2, r0
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2200      	movs	r2, #0
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	60fa      	str	r2, [r7, #12]
 80071ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80071d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071d6:	e01f      	b.n	8007218 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	8a5b      	ldrh	r3, [r3, #18]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10f      	bne.n	8007200 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80071e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	b2c2      	uxtb	r2, r0
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2200      	movs	r2, #0
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071fa:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071fe:	e00b      	b.n	8007218 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <pb_dec_varint+0xd6>
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	e000      	b.n	8007210 <pb_dec_varint+0xd8>
 800720e:	4b5e      	ldr	r3, [pc, #376]	@ (8007388 <pb_dec_varint+0x250>)
 8007210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007212:	60d3      	str	r3, [r2, #12]
 8007214:	2300      	movs	r3, #0
 8007216:	e0b1      	b.n	800737c <pb_dec_varint+0x244>

        if (clamped != value)
 8007218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800721c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007220:	4299      	cmp	r1, r3
 8007222:	bf08      	it	eq
 8007224:	4290      	cmpeq	r0, r2
 8007226:	d00b      	beq.n	8007240 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <pb_dec_varint+0xfe>
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	e000      	b.n	8007238 <pb_dec_varint+0x100>
 8007236:	4b55      	ldr	r3, [pc, #340]	@ (800738c <pb_dec_varint+0x254>)
 8007238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800723a:	60d3      	str	r3, [r2, #12]
 800723c:	2300      	movs	r3, #0
 800723e:	e09d      	b.n	800737c <pb_dec_varint+0x244>

        return true;
 8007240:	2301      	movs	r3, #1
 8007242:	e09b      	b.n	800737c <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	7d9b      	ldrb	r3, [r3, #22]
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	2b03      	cmp	r3, #3
 800724e:	d10d      	bne.n	800726c <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8007250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007254:	4619      	mov	r1, r3
 8007256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007258:	f7ff fee1 	bl	800701e <pb_decode_svarint>
 800725c:	4603      	mov	r3, r0
 800725e:	f083 0301 	eor.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d022      	beq.n	80072ae <pb_dec_varint+0x176>
                return false;
 8007268:	2300      	movs	r3, #0
 800726a:	e087      	b.n	800737c <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800726c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007270:	4619      	mov	r1, r3
 8007272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007274:	f7fe fe3e 	bl	8005ef4 <pb_decode_varint>
 8007278:	4603      	mov	r3, r0
 800727a:	f083 0301 	eor.w	r3, r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <pb_dec_varint+0x150>
                return false;
 8007284:	2300      	movs	r3, #0
 8007286:	e079      	b.n	800737c <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	8a5b      	ldrh	r3, [r3, #18]
 800728c:	2b08      	cmp	r3, #8
 800728e:	d104      	bne.n	800729a <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8007290:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007294:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8007298:	e009      	b.n	80072ae <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800729a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800729e:	4613      	mov	r3, r2
 80072a0:	17da      	asrs	r2, r3, #31
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	61fa      	str	r2, [r7, #28]
 80072a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	8a5b      	ldrh	r3, [r3, #18]
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d10a      	bne.n	80072cc <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	69d9      	ldr	r1, [r3, #28]
 80072ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072be:	e9c1 2300 	strd	r2, r3, [r1]
 80072c2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80072c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80072ca:	e042      	b.n	8007352 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	8a5b      	ldrh	r3, [r3, #18]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d10c      	bne.n	80072ee <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80072d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	4602      	mov	r2, r0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	17da      	asrs	r2, r3, #31
 80072e4:	469a      	mov	sl, r3
 80072e6:	4693      	mov	fp, r2
 80072e8:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80072ec:	e031      	b.n	8007352 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	8a5b      	ldrh	r3, [r3, #18]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d10e      	bne.n	8007314 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80072f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	b202      	sxth	r2, r0
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007306:	b21b      	sxth	r3, r3
 8007308:	17da      	asrs	r2, r3, #31
 800730a:	4698      	mov	r8, r3
 800730c:	4691      	mov	r9, r2
 800730e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8007312:	e01e      	b.n	8007352 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	8a5b      	ldrh	r3, [r3, #18]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10e      	bne.n	800733a <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 800731c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	b242      	sxtb	r2, r0
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	f993 3000 	ldrsb.w	r3, [r3]
 800732c:	b25b      	sxtb	r3, r3
 800732e:	17da      	asrs	r2, r3, #31
 8007330:	461c      	mov	r4, r3
 8007332:	4615      	mov	r5, r2
 8007334:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8007338:	e00b      	b.n	8007352 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <pb_dec_varint+0x210>
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	e000      	b.n	800734a <pb_dec_varint+0x212>
 8007348:	4b0f      	ldr	r3, [pc, #60]	@ (8007388 <pb_dec_varint+0x250>)
 800734a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734c:	60d3      	str	r3, [r2, #12]
 800734e:	2300      	movs	r3, #0
 8007350:	e014      	b.n	800737c <pb_dec_varint+0x244>

        if (clamped != svalue)
 8007352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007356:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800735a:	4299      	cmp	r1, r3
 800735c:	bf08      	it	eq
 800735e:	4290      	cmpeq	r0, r2
 8007360:	d00b      	beq.n	800737a <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <pb_dec_varint+0x238>
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	e000      	b.n	8007372 <pb_dec_varint+0x23a>
 8007370:	4b06      	ldr	r3, [pc, #24]	@ (800738c <pb_dec_varint+0x254>)
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	60d3      	str	r3, [r2, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	e000      	b.n	800737c <pb_dec_varint+0x244>

        return true;
 800737a:	2301      	movs	r3, #1
    }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3750      	adds	r7, #80	@ 0x50
 8007380:	46bd      	mov	sp, r7
 8007382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007386:	bf00      	nop
 8007388:	0800f4f0 	.word	0x0800f4f0
 800738c:	0800f504 	.word	0x0800f504

08007390 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fe fd97 	bl	8005ed4 <pb_decode_varint32>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f083 0301 	eor.w	r3, r3, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <pb_dec_bytes+0x26>
        return false;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e055      	b.n	8007462 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073bc:	d30b      	bcc.n	80073d6 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <pb_dec_bytes+0x3c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	e000      	b.n	80073ce <pb_dec_bytes+0x3e>
 80073cc:	4b27      	ldr	r3, [pc, #156]	@ (800746c <pb_dec_bytes+0xdc>)
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	60d3      	str	r3, [r2, #12]
 80073d2:	2300      	movs	r3, #0
 80073d4:	e045      	b.n	8007462 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3302      	adds	r3, #2
 80073da:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d20b      	bcs.n	80073fc <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <pb_dec_bytes+0x62>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	e000      	b.n	80073f4 <pb_dec_bytes+0x64>
 80073f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007470 <pb_dec_bytes+0xe0>)
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60d3      	str	r3, [r2, #12]
 80073f8:	2300      	movs	r3, #0
 80073fa:	e032      	b.n	8007462 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	7d9b      	ldrb	r3, [r3, #22]
 8007400:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007404:	2b80      	cmp	r3, #128	@ 0x80
 8007406:	d10b      	bne.n	8007420 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <pb_dec_bytes+0x86>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	e000      	b.n	8007418 <pb_dec_bytes+0x88>
 8007416:	4b17      	ldr	r3, [pc, #92]	@ (8007474 <pb_dec_bytes+0xe4>)
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	60d3      	str	r3, [r2, #12]
 800741c:	2300      	movs	r3, #0
 800741e:	e020      	b.n	8007462 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	8a5b      	ldrh	r3, [r3, #18]
 8007424:	461a      	mov	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	4293      	cmp	r3, r2
 800742a:	d90b      	bls.n	8007444 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <pb_dec_bytes+0xaa>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	e000      	b.n	800743c <pb_dec_bytes+0xac>
 800743a:	4b0c      	ldr	r3, [pc, #48]	@ (800746c <pb_dec_bytes+0xdc>)
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	60d3      	str	r3, [r2, #12]
 8007440:	2300      	movs	r3, #0
 8007442:	e00e      	b.n	8007462 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	b29a      	uxth	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3302      	adds	r3, #2
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fe fbc0 	bl	8005be0 <pb_read>
 8007460:	4603      	mov	r3, r0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	0800f518 	.word	0x0800f518
 8007470:	0800f528 	.word	0x0800f528
 8007474:	0800f470 	.word	0x0800f470

08007478 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe fd20 	bl	8005ed4 <pb_decode_varint32>
 8007494:	4603      	mov	r3, r0
 8007496:	f083 0301 	eor.w	r3, r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <pb_dec_string+0x2c>
        return false;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e05a      	b.n	800755a <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074aa:	d10b      	bne.n	80074c4 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <pb_dec_string+0x42>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	e000      	b.n	80074bc <pb_dec_string+0x44>
 80074ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <pb_dec_string+0xec>)
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	60d3      	str	r3, [r2, #12]
 80074c0:	2300      	movs	r3, #0
 80074c2:	e04a      	b.n	800755a <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d20b      	bcs.n	80074ea <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <pb_dec_string+0x68>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	e000      	b.n	80074e2 <pb_dec_string+0x6a>
 80074e0:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <pb_dec_string+0xec>)
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	60d3      	str	r3, [r2, #12]
 80074e6:	2300      	movs	r3, #0
 80074e8:	e037      	b.n	800755a <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	7d9b      	ldrb	r3, [r3, #22]
 80074ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074f2:	2b80      	cmp	r3, #128	@ 0x80
 80074f4:	d10b      	bne.n	800750e <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <pb_dec_string+0x8c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	e000      	b.n	8007506 <pb_dec_string+0x8e>
 8007504:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <pb_dec_string+0xf0>)
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	60d3      	str	r3, [r2, #12]
 800750a:	2300      	movs	r3, #0
 800750c:	e025      	b.n	800755a <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	8a5b      	ldrh	r3, [r3, #18]
 8007512:	461a      	mov	r2, r3
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4293      	cmp	r3, r2
 8007518:	d90b      	bls.n	8007532 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <pb_dec_string+0xb0>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	e000      	b.n	800752a <pb_dec_string+0xb2>
 8007528:	4b10      	ldr	r3, [pc, #64]	@ (800756c <pb_dec_string+0xf4>)
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	60d3      	str	r3, [r2, #12]
 800752e:	2300      	movs	r3, #0
 8007530:	e013      	b.n	800755a <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	2200      	movs	r2, #0
 800753a:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	461a      	mov	r2, r3
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe fb4c 	bl	8005be0 <pb_read>
 8007548:	4603      	mov	r3, r0
 800754a:	f083 0301 	eor.w	r3, r3, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <pb_dec_string+0xe0>
        return false;
 8007554:	2300      	movs	r3, #0
 8007556:	e000      	b.n	800755a <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8007558:	2301      	movs	r3, #1
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	0800f528 	.word	0x0800f528
 8007568:	0800f470 	.word	0x0800f470
 800756c:	0800f538 	.word	0x0800f538

08007570 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	@ 0x28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
    bool status = true;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8007586:	f107 030c 	add.w	r3, r7, #12
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fe fe2d 	bl	80061ec <pb_make_string_substream>
 8007592:	4603      	mov	r3, r0
 8007594:	f083 0301 	eor.w	r3, r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <pb_dec_submessage+0x32>
        return false;
 800759e:	2300      	movs	r3, #0
 80075a0:	e069      	b.n	8007676 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <pb_dec_submessage+0x48>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	e000      	b.n	80075ba <pb_dec_submessage+0x4a>
 80075b8:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <pb_dec_submessage+0x110>)
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	60d3      	str	r3, [r2, #12]
 80075be:	2300      	movs	r3, #0
 80075c0:	e059      	b.n	8007676 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	7d9b      	ldrb	r3, [r3, #22]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	2b09      	cmp	r3, #9
 80075cc:	d11c      	bne.n	8007608 <pb_dec_submessage+0x98>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	3b08      	subs	r3, #8
 80075dc:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d010      	beq.n	8007608 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	3204      	adds	r2, #4
 80075ee:	f107 000c 	add.w	r0, r7, #12
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	4798      	blx	r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8007608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800760c:	2b00      	cmp	r3, #0
 800760e:	d022      	beq.n	8007656 <pb_dec_submessage+0xe6>
 8007610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007614:	f083 0301 	eor.w	r3, r3, #1
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01b      	beq.n	8007656 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	7d9b      	ldrb	r3, [r3, #22]
 8007626:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	7d9b      	ldrb	r3, [r3, #22]
 8007632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007636:	2b20      	cmp	r3, #32
 8007638:	d001      	beq.n	800763e <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 800763a:	2301      	movs	r3, #1
 800763c:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	f107 000c 	add.w	r0, r7, #12
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f7ff fafa 	bl	8006c44 <pb_decode_inner>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8007656:	f107 030c 	add.w	r3, r7, #12
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fe fdff 	bl	8006260 <pb_close_string_substream>
 8007662:	4603      	mov	r3, r0
 8007664:	f083 0301 	eor.w	r3, r3, #1
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <pb_dec_submessage+0x102>
        return false;
 800766e:	2300      	movs	r3, #0
 8007670:	e001      	b.n	8007676 <pb_dec_submessage+0x106>

    return status;
 8007672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	@ 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	0800f548 	.word	0x0800f548

08007684 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fe fc1d 	bl	8005ed4 <pb_decode_varint32>
 800769a:	4603      	mov	r3, r0
 800769c:	f083 0301 	eor.w	r3, r3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <pb_dec_fixed_length_bytes+0x26>
        return false;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e037      	b.n	800771a <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b0:	d30b      	bcc.n	80076ca <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <pb_dec_fixed_length_bytes+0x3c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	e000      	b.n	80076c2 <pb_dec_fixed_length_bytes+0x3e>
 80076c0:	4b18      	ldr	r3, [pc, #96]	@ (8007724 <pb_dec_fixed_length_bytes+0xa0>)
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	60d3      	str	r3, [r2, #12]
 80076c6:	2300      	movs	r3, #0
 80076c8:	e027      	b.n	800771a <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	69d8      	ldr	r0, [r3, #28]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	8a5b      	ldrh	r3, [r3, #18]
 80076d8:	461a      	mov	r2, r3
 80076da:	2100      	movs	r1, #0
 80076dc:	f006 fe86 	bl	800e3ec <memset>
        return true;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e01a      	b.n	800771a <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	8a5b      	ldrh	r3, [r3, #18]
 80076e8:	461a      	mov	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00b      	beq.n	8007708 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <pb_dec_fixed_length_bytes+0x7a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	e000      	b.n	8007700 <pb_dec_fixed_length_bytes+0x7c>
 80076fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <pb_dec_fixed_length_bytes+0xa4>)
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	60d3      	str	r3, [r2, #12]
 8007704:	2300      	movs	r3, #0
 8007706:	e008      	b.n	800771a <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	69d9      	ldr	r1, [r3, #28]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	8a5b      	ldrh	r3, [r3, #18]
 8007710:	461a      	mov	r2, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fe fa64 	bl	8005be0 <pb_read>
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	0800f518 	.word	0x0800f518
 8007728:	0800f564 	.word	0x0800f564

0800772c <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	6978      	ldr	r0, [r7, #20]
 800774e:	f006 ff1c 	bl	800e58a <memcpy>
    
    return true;
 8007752:	2301      	movs	r3, #1
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800775c:	b4b0      	push	{r4, r5, r7}
 800775e:	b08b      	sub	sp, #44	@ 0x2c
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8007768:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <pb_ostream_from_buffer+0x3c>)
 800776a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	461d      	mov	r5, r3
 8007780:	f107 0414 	add.w	r4, r7, #20
 8007784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	602b      	str	r3, [r5, #0]
}
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	372c      	adds	r7, #44	@ 0x2c
 8007790:	46bd      	mov	sp, r7
 8007792:	bcb0      	pop	{r4, r5, r7}
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	0800772d 	.word	0x0800772d

0800779c <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d037      	beq.n	800781e <pb_write+0x82>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d033      	beq.n	800781e <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d307      	bcc.n	80077d6 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	441a      	add	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d90b      	bls.n	80077ee <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <pb_write+0x48>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	e000      	b.n	80077e6 <pb_write+0x4a>
 80077e4:	4b13      	ldr	r3, [pc, #76]	@ (8007834 <pb_write+0x98>)
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	6113      	str	r3, [r2, #16]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e01e      	b.n	800782c <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	4798      	blx	r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	f083 0301 	eor.w	r3, r3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <pb_write+0x78>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	e000      	b.n	8007816 <pb_write+0x7a>
 8007814:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <pb_write+0x9c>)
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	6113      	str	r3, [r2, #16]
 800781a:	2300      	movs	r3, #0
 800781c:	e006      	b.n	800782c <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	441a      	add	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	60da      	str	r2, [r3, #12]
    return true;
 800782a:	2301      	movs	r3, #1
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	0800f588 	.word	0x0800f588
 8007838:	0800f594 	.word	0x0800f594

0800783c <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e00a      	b.n	8007864 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <safe_read_bool+0x22>
            return true;
 800785a:	2301      	movs	r3, #1
 800785c:	e006      	b.n	800786c <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f1      	beq.n	800784e <safe_read_bool+0x12>
    }
    return false;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b08c      	sub	sp, #48	@ 0x30
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 800788a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <encode_array+0x1c>
        return true;
 8007890:	2301      	movs	r3, #1
 8007892:	e13d      	b.n	8007b10 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	7d9b      	ldrb	r3, [r3, #22]
 8007898:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800789c:	2b80      	cmp	r3, #128	@ 0x80
 800789e:	d010      	beq.n	80078c2 <encode_array+0x4a>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	8a9b      	ldrh	r3, [r3, #20]
 80078a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d90b      	bls.n	80078c2 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <encode_array+0x40>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	e000      	b.n	80078ba <encode_array+0x42>
 80078b8:	4b97      	ldr	r3, [pc, #604]	@ (8007b18 <encode_array+0x2a0>)
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6113      	str	r3, [r2, #16]
 80078be:	2300      	movs	r3, #0
 80078c0:	e126      	b.n	8007b10 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	7d9b      	ldrb	r3, [r3, #22]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	f200 80b3 	bhi.w	8007a36 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	8a1b      	ldrh	r3, [r3, #16]
 80078d4:	461a      	mov	r2, r3
 80078d6:	2102      	movs	r1, #2
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fcdd 	bl	8008298 <pb_encode_tag>
 80078de:	4603      	mov	r3, r0
 80078e0:	f083 0301 	eor.w	r3, r3, #1
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <encode_array+0x76>
            return false;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e110      	b.n	8007b10 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7d9b      	ldrb	r3, [r3, #22]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d103      	bne.n	8007902 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 80078fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007900:	e047      	b.n	8007992 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	7d9b      	ldrb	r3, [r3, #22]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	2b05      	cmp	r3, #5
 800790c:	d103      	bne.n	8007916 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800790e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007914:	e03d      	b.n	8007992 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	605a      	str	r2, [r3, #4]
 8007920:	609a      	str	r2, [r3, #8]
 8007922:	60da      	str	r2, [r3, #12]
 8007924:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 800792c:	2300      	movs	r3, #0
 800792e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007930:	e026      	b.n	8007980 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fdef 	bl	800851c <pb_enc_varint>
 800793e:	4603      	mov	r3, r0
 8007940:	f083 0301 	eor.w	r3, r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d010      	beq.n	800796c <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <encode_array+0xe0>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	e005      	b.n	8007964 <encode_array+0xec>
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <encode_array+0xea>
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	e000      	b.n	8007964 <encode_array+0xec>
 8007962:	4b6e      	ldr	r3, [pc, #440]	@ (8007b1c <encode_array+0x2a4>)
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6113      	str	r3, [r2, #16]
 8007968:	2300      	movs	r3, #0
 800796a:	e0d1      	b.n	8007b10 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	8a52      	ldrh	r2, [r2, #18]
 8007974:	441a      	add	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800797a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800797c:	3301      	adds	r3, #1
 800797e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007980:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007982:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007984:	429a      	cmp	r2, r3
 8007986:	d3d4      	bcc.n	8007932 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	2200      	movs	r2, #0
 8007996:	461c      	mov	r4, r3
 8007998:	4615      	mov	r5, r2
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbf7 	bl	8008192 <pb_encode_varint>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f083 0301 	eor.w	r3, r3, #1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <encode_array+0x13c>
            return false;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e0ad      	b.n	8007b10 <encode_array+0x298>
        
        if (stream->callback == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80079bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079be:	2100      	movs	r1, #0
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff feeb 	bl	800779c <pb_write>
 80079c6:	4603      	mov	r3, r0
 80079c8:	e0a2      	b.n	8007b10 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 80079ca:	2300      	movs	r3, #0
 80079cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80079ce:	e02d      	b.n	8007a2c <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	7d9b      	ldrb	r3, [r3, #22]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d005      	beq.n	80079e8 <encode_array+0x170>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	7d9b      	ldrb	r3, [r3, #22]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d10b      	bne.n	8007a00 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fe58 	bl	80086a0 <pb_enc_fixed>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f083 0301 	eor.w	r3, r3, #1
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00d      	beq.n	8007a18 <encode_array+0x1a0>
                    return false;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e087      	b.n	8007b10 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fd8a 	bl	800851c <pb_enc_varint>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f083 0301 	eor.w	r3, r3, #1
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <encode_array+0x1a0>
                    return false;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e07b      	b.n	8007b10 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	8a52      	ldrh	r2, [r2, #18]
 8007a20:	441a      	add	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8007a26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a28:	3301      	adds	r3, #1
 8007a2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007a2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d3cd      	bcc.n	80079d0 <encode_array+0x158>
 8007a34:	e06b      	b.n	8007b0e <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007a3a:	e064      	b.n	8007b06 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	7d9b      	ldrb	r3, [r3, #22]
 8007a40:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a44:	2b80      	cmp	r3, #128	@ 0x80
 8007a46:	d147      	bne.n	8007ad8 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	7d9b      	ldrb	r3, [r3, #22]
 8007a4c:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007a50:	2b07      	cmp	r3, #7
 8007a52:	d005      	beq.n	8007a60 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	7d9b      	ldrb	r3, [r3, #22]
 8007a58:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007a5c:	2b06      	cmp	r3, #6
 8007a5e:	d13b      	bne.n	8007ad8 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11c      	bne.n	8007ab2 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc36 	bl	80082ec <pb_encode_tag_for_field>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fb7f 	bl	8008192 <pb_encode_varint>
 8007a94:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <encode_array+0x226>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <encode_array+0x228>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ab0:	e006      	b.n	8007ac0 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f951 	bl	8007d5c <encode_basic_field>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	61da      	str	r2, [r3, #28]

                if (!status)
 8007ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aca:	f083 0301 	eor.w	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <encode_array+0x278>
                    return false;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e01b      	b.n	8007b10 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f93e 	bl	8007d5c <encode_basic_field>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f083 0301 	eor.w	r3, r3, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <encode_array+0x27a>
                    return false;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e00f      	b.n	8007b10 <encode_array+0x298>
            {
 8007af0:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	8a52      	ldrh	r2, [r2, #18]
 8007afa:	441a      	add	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8007b00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007b02:	3301      	adds	r3, #1
 8007b04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007b06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007b08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d396      	bcc.n	8007a3c <encode_array+0x1c4>
        }
    }
    
    return true;
 8007b0e:	2301      	movs	r3, #1
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3730      	adds	r7, #48	@ 0x30
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bdb0      	pop	{r4, r5, r7, pc}
 8007b18:	0800f5a0 	.word	0x0800f5a0
 8007b1c:	0800f5b8 	.word	0x0800f5b8

08007b20 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b092      	sub	sp, #72	@ 0x48
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7d9b      	ldrb	r3, [r3, #22]
 8007b2c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007b30:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b34:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 80c9 	bne.w	8007cd0 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8007b3e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b42:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e100      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007b4e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	d108      	bne.n	8007b6c <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e0f1      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8007b6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b74:	2b30      	cmp	r3, #48	@ 0x30
 8007b76:	d108      	bne.n	8007b8a <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bf0c      	ite	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	2300      	movne	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	e0e2      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8007b8a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d115      	bne.n	8007bc2 <pb_check_proto3_default_value+0xa2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fe4a 	bl	800783c <safe_read_bool>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f083 0301 	eor.w	r3, r3, #1
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	e0c6      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	e0bf      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8007bd0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d81c      	bhi.n	8007c16 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8007be2:	2300      	movs	r3, #0
 8007be4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007be8:	e00d      	b.n	8007c06 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8007bea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e0a9      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8007bfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c00:	3301      	adds	r3, #1
 8007c02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8a5b      	ldrh	r3, [r3, #18]
 8007c0a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3eb      	bcc.n	8007bea <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e09c      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8007c16:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d10a      	bne.n	8007c38 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bf0c      	ite	eq
 8007c30:	2301      	moveq	r3, #1
 8007c32:	2300      	movne	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	e08b      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8007c38:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	2b07      	cmp	r3, #7
 8007c42:	d108      	bne.n	8007c56 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf0c      	ite	eq
 8007c4e:	2301      	moveq	r3, #1
 8007c50:	2300      	movne	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	e07c      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8007c56:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	2b0b      	cmp	r3, #11
 8007c60:	d107      	bne.n	8007c72 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8a5b      	ldrh	r3, [r3, #18]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf0c      	ite	eq
 8007c6a:	2301      	moveq	r3, #1
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	e06e      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8007c72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	d005      	beq.n	8007c8a <pb_check_proto3_default_value+0x16a>
 8007c7e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d161      	bne.n	8007d4e <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	f107 030c 	add.w	r3, r7, #12
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd fe36 	bl	8005908 <pb_field_iter_begin>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d014      	beq.n	8007ccc <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff ff3a 	bl	8007b20 <pb_check_proto3_default_value>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f083 0301 	eor.w	r3, r3, #1
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e049      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fd fe6a 	bl	800599a <pb_field_iter_next>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ea      	bne.n	8007ca2 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e03f      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8007cd0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007cd4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cd8:	2b80      	cmp	r3, #128	@ 0x80
 8007cda:	d107      	bne.n	8007cec <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2301      	moveq	r3, #1
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e031      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8007cec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007cf0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cf4:	2b40      	cmp	r3, #64	@ 0x40
 8007cf6:	d12a      	bne.n	8007d4e <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8007cf8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	2b0a      	cmp	r3, #10
 8007d02:	d10a      	bne.n	8007d1a <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e01a      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	4a0d      	ldr	r2, [pc, #52]	@ (8007d58 <pb_check_proto3_default_value+0x238>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d10a      	bne.n	8007d3c <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bf0c      	ite	eq
 8007d34:	2301      	moveq	r3, #1
 8007d36:	2300      	movne	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	e009      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	e000      	b.n	8007d50 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3748      	adds	r7, #72	@ 0x48
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08005b3d 	.word	0x08005b3d

08007d5c <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e061      	b.n	8007e36 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fab9 	bl	80082ec <pb_encode_tag_for_field>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f083 0301 	eor.w	r3, r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <encode_basic_field+0x2e>
        return false;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e055      	b.n	8007e36 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	7d9b      	ldrb	r3, [r3, #22]
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	2b0b      	cmp	r3, #11
 8007d94:	d844      	bhi.n	8007e20 <encode_basic_field+0xc4>
 8007d96:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <encode_basic_field+0x40>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007dd9 	.word	0x08007dd9
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007de5 	.word	0x08007de5
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007df1 	.word	0x08007df1
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007e09 	.word	0x08007e09
 8007dc0:	08007e09 	.word	0x08007e09
 8007dc4:	08007e21 	.word	0x08007e21
 8007dc8:	08007e15 	.word	0x08007e15
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fb8a 	bl	80084e8 <pb_enc_bool>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	e02e      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fb9e 	bl	800851c <pb_enc_varint>
 8007de0:	4603      	mov	r3, r0
 8007de2:	e028      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fc5a 	bl	80086a0 <pb_enc_fixed>
 8007dec:	4603      	mov	r3, r0
 8007dee:	e022      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fc82 	bl	80086fc <pb_enc_bytes>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	e01c      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fcba 	bl	8008778 <pb_enc_string>
 8007e04:	4603      	mov	r3, r0
 8007e06:	e016      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fd12 	bl	8008834 <pb_enc_submessage>
 8007e10:	4603      	mov	r3, r0
 8007e12:	e010      	b.n	8007e36 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fd52 	bl	80088c0 <pb_enc_fixed_length_bytes>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	e00a      	b.n	8007e36 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <encode_basic_field+0xd2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	e000      	b.n	8007e30 <encode_basic_field+0xd4>
 8007e2e:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <encode_basic_field+0xe4>)
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6113      	str	r3, [r2, #16]
 8007e34:	2300      	movs	r3, #0
    }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	0800f5c0 	.word	0x0800f5c0

08007e44 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d018      	beq.n	8007e8a <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	2000      	movs	r0, #0
 8007e64:	4798      	blx	r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	f083 0301 	eor.w	r3, r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <encode_callback_field+0x3c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	e000      	b.n	8007e82 <encode_callback_field+0x3e>
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <encode_callback_field+0x50>)
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6113      	str	r3, [r2, #16]
 8007e86:	2300      	movs	r3, #0
 8007e88:	e000      	b.n	8007e8c <encode_callback_field+0x48>
    }
    return true;
 8007e8a:	2301      	movs	r3, #1
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	0800f5d4 	.word	0x0800f5d4

08007e98 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	7d9b      	ldrb	r3, [r3, #22]
 8007ea6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007eaa:	2b30      	cmp	r3, #48	@ 0x30
 8007eac:	d108      	bne.n	8007ec0 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	881a      	ldrh	r2, [r3, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	8a1b      	ldrh	r3, [r3, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d026      	beq.n	8007f0a <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e059      	b.n	8007f74 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	7d9b      	ldrb	r3, [r3, #22]
 8007ec4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	d11e      	bne.n	8007f0a <encode_field+0x72>
    {
        if (field->pSize)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff fcaf 	bl	800783c <safe_read_bool>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f083 0301 	eor.w	r3, r3, #1
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00f      	beq.n	8007f0a <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e042      	b.n	8007f74 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	7d9b      	ldrb	r3, [r3, #22]
 8007ef2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8007efa:	6838      	ldr	r0, [r7, #0]
 8007efc:	f7ff fe10 	bl	8007b20 <pb_check_proto3_default_value>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <encode_field+0x72>
                return true;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e034      	b.n	8007f74 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d113      	bne.n	8007f3a <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	7d9b      	ldrb	r3, [r3, #22]
 8007f16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <encode_field+0x94>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	e000      	b.n	8007f2e <encode_field+0x96>
 8007f2c:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <encode_field+0xe4>)
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6113      	str	r3, [r2, #16]
 8007f32:	2300      	movs	r3, #0
 8007f34:	e01e      	b.n	8007f74 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e01c      	b.n	8007f74 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	7d9b      	ldrb	r3, [r3, #22]
 8007f3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f42:	2b40      	cmp	r3, #64	@ 0x40
 8007f44:	d105      	bne.n	8007f52 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ff7b 	bl	8007e44 <encode_callback_field>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e010      	b.n	8007f74 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	7d9b      	ldrb	r3, [r3, #22]
 8007f56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d105      	bne.n	8007f6a <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fc89 	bl	8007878 <encode_array>
 8007f66:	4603      	mov	r3, r0
 8007f68:	e004      	b.n	8007f74 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fef5 	bl	8007d5c <encode_basic_field>
 8007f72:	4603      	mov	r3, r0
    }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	0800f5e4 	.word	0x0800f5e4

08007f80 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08c      	sub	sp, #48	@ 0x30
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fd fdc1 	bl	8005b18 <pb_field_iter_begin_extension_const>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f083 0301 	eor.w	r3, r3, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <default_extension_encoder+0x30>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	e000      	b.n	8007fb2 <default_extension_encoder+0x32>
 8007fb0:	4b07      	ldr	r3, [pc, #28]	@ (8007fd0 <default_extension_encoder+0x50>)
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6113      	str	r3, [r2, #16]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e006      	b.n	8007fc8 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8007fba:	f107 0308 	add.w	r3, r7, #8
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff69 	bl	8007e98 <encode_field>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3730      	adds	r7, #48	@ 0x30
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	0800f5fc 	.word	0x0800f5fc

08007fd4 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]

    while (extension)
 8007fe6:	e01e      	b.n	8008026 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	72fb      	strb	r3, [r7, #11]
 8008002:	e005      	b.n	8008010 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8008004:	68f9      	ldr	r1, [r7, #12]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ffba 	bl	8007f80 <default_extension_encoder>
 800800c:	4603      	mov	r3, r0
 800800e:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	f083 0301 	eor.w	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <encode_extension_field+0x4c>
            return false;
 800801c:	2300      	movs	r3, #0
 800801e:	e006      	b.n	800802e <encode_extension_field+0x5a>
        
        extension = extension->next;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	60fb      	str	r3, [r7, #12]
    while (extension)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1dd      	bne.n	8007fe8 <encode_extension_field+0x14>
    }
    
    return true;
 800802c:	2301      	movs	r3, #1
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b08e      	sub	sp, #56	@ 0x38
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd fd50 	bl	8005af0 <pb_field_iter_begin_const>
 8008050:	4603      	mov	r3, r0
 8008052:	f083 0301 	eor.w	r3, r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <pb_encode+0x2a>
        return true; /* Empty message type */
 800805c:	2301      	movs	r3, #1
 800805e:	e02a      	b.n	80080b6 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8008060:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2b0a      	cmp	r3, #10
 800806a:	d10d      	bne.n	8008088 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800806c:	f107 0310 	add.w	r3, r7, #16
 8008070:	4619      	mov	r1, r3
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff ffae 	bl	8007fd4 <encode_extension_field>
 8008078:	4603      	mov	r3, r0
 800807a:	f083 0301 	eor.w	r3, r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00f      	beq.n	80080a4 <pb_encode+0x6e>
                return false;
 8008084:	2300      	movs	r3, #0
 8008086:	e016      	b.n	80080b6 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8008088:	f107 0310 	add.w	r3, r7, #16
 800808c:	4619      	mov	r1, r3
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff ff02 	bl	8007e98 <encode_field>
 8008094:	4603      	mov	r3, r0
 8008096:	f083 0301 	eor.w	r3, r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <pb_encode+0x6e>
                return false;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e008      	b.n	80080b6 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 80080a4:	f107 0310 	add.w	r3, r7, #16
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd fc76 	bl	800599a <pb_field_iter_next>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1d5      	bne.n	8008060 <pb_encode+0x2a>
    
    return true;
 80080b4:	2301      	movs	r3, #1
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3738      	adds	r7, #56	@ 0x38
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b088      	sub	sp, #32
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d6:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	09db      	lsrs	r3, r3, #7
 80080dc:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 80080de:	e013      	b.n	8008108 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 80080e0:	7efb      	ldrb	r3, [r7, #27]
 80080e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080e6:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	61fa      	str	r2, [r7, #28]
 80080ee:	3320      	adds	r3, #32
 80080f0:	443b      	add	r3, r7
 80080f2:	7efa      	ldrb	r2, [r7, #27]
 80080f4:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008100:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	09db      	lsrs	r3, r3, #7
 8008106:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d805      	bhi.n	800811a <pb_encode_varint_32+0x5c>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e5      	bne.n	80080e0 <pb_encode_varint_32+0x22>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e2      	bne.n	80080e0 <pb_encode_varint_32+0x22>
    }

    if (high)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d024      	beq.n	800816a <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800812c:	b2da      	uxtb	r2, r3
 800812e:	7efb      	ldrb	r3, [r7, #27]
 8008130:	4313      	orrs	r3, r2
 8008132:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	08db      	lsrs	r3, r3, #3
 8008138:	607b      	str	r3, [r7, #4]

        while (high)
 800813a:	e013      	b.n	8008164 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 800813c:	7efb      	ldrb	r3, [r7, #27]
 800813e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008142:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	61fa      	str	r2, [r7, #28]
 800814a:	3320      	adds	r3, #32
 800814c:	443b      	add	r3, r7
 800814e:	7efa      	ldrb	r2, [r7, #27]
 8008150:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815c:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	09db      	lsrs	r3, r3, #7
 8008162:	607b      	str	r3, [r7, #4]
        while (high)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e8      	bne.n	800813c <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	61fa      	str	r2, [r7, #28]
 8008170:	3320      	adds	r3, #32
 8008172:	443b      	add	r3, r7
 8008174:	7efa      	ldrb	r2, [r7, #27]
 8008176:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	4619      	mov	r1, r3
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fb0a 	bl	800779c <pb_write>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b087      	sub	sp, #28
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800819e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a2:	2a80      	cmp	r2, #128	@ 0x80
 80081a4:	f173 0300 	sbcs.w	r3, r3, #0
 80081a8:	d20a      	bcs.n	80081c0 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 80081aa:	783b      	ldrb	r3, [r7, #0]
 80081ac:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 80081ae:	f107 0317 	add.w	r3, r7, #23
 80081b2:	2201      	movs	r2, #1
 80081b4:	4619      	mov	r1, r3
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff faf0 	bl	800779c <pb_write>
 80081bc:	4603      	mov	r3, r0
 80081be:	e00f      	b.n	80081e0 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 80081c0:	683c      	ldr	r4, [r7, #0]
 80081c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	000a      	movs	r2, r1
 80081d0:	2300      	movs	r3, #0
 80081d2:	4613      	mov	r3, r2
 80081d4:	461a      	mov	r2, r3
 80081d6:	4621      	mov	r1, r4
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff ff70 	bl	80080be <pb_encode_varint_32>
 80081de:	4603      	mov	r3, r0
#endif
    }
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}

080081e8 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 80081e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081ec:	b08a      	sub	sp, #40	@ 0x28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6178      	str	r0, [r7, #20]
 80081f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80081fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 8008202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	da15      	bge.n	8008236 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800820a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800820e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008212:	ea00 0402 	and.w	r4, r0, r2
 8008216:	ea01 0503 	and.w	r5, r1, r3
 800821a:	1923      	adds	r3, r4, r4
 800821c:	603b      	str	r3, [r7, #0]
 800821e:	eb45 0305 	adc.w	r3, r5, r5
 8008222:	607b      	str	r3, [r7, #4]
 8008224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008228:	ea6f 0a02 	mvn.w	sl, r2
 800822c:	ea6f 0b03 	mvn.w	fp, r3
 8008230:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8008234:	e007      	b.n	8008246 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8008236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823a:	eb12 0802 	adds.w	r8, r2, r2
 800823e:	eb43 0903 	adc.w	r9, r3, r3
 8008242:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8008246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800824a:	6978      	ldr	r0, [r7, #20]
 800824c:	f7ff ffa1 	bl	8008192 <pb_encode_varint>
 8008250:	4603      	mov	r3, r0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	@ 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800825c <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8008266:	2204      	movs	r2, #4
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fa96 	bl	800779c <pb_write>
 8008270:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8008284:	2208      	movs	r2, #8
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fa87 	bl	800779c <pb_write>
 800828e:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8008298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800829c:	b088      	sub	sp, #32
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6178      	str	r0, [r7, #20]
 80082a2:	460b      	mov	r3, r1
 80082a4:	60fa      	str	r2, [r7, #12]
 80082a6:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	469a      	mov	sl, r3
 80082ae:	4693      	mov	fp, r2
 80082b0:	ea4f 755a 	mov.w	r5, sl, lsr #29
 80082b4:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	2200      	movs	r2, #0
 80082bc:	4698      	mov	r8, r3
 80082be:	4691      	mov	r9, r2
 80082c0:	ea44 0308 	orr.w	r3, r4, r8
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	ea45 0309 	orr.w	r3, r5, r9
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80082d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 80082d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d8:	6978      	ldr	r0, [r7, #20]
 80082da:	f7ff ff5a 	bl	8008192 <pb_encode_varint>
 80082de:	4603      	mov	r3, r0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080082ec <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	7d9b      	ldrb	r3, [r3, #22]
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	2b0b      	cmp	r3, #11
 8008300:	d826      	bhi.n	8008350 <pb_encode_tag_for_field+0x64>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <pb_encode_tag_for_field+0x1c>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008339 	.word	0x08008339
 800830c:	08008339 	.word	0x08008339
 8008310:	08008339 	.word	0x08008339
 8008314:	08008339 	.word	0x08008339
 8008318:	0800833f 	.word	0x0800833f
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834b 	.word	0x0800834b
 8008324:	0800834b 	.word	0x0800834b
 8008328:	0800834b 	.word	0x0800834b
 800832c:	0800834b 	.word	0x0800834b
 8008330:	08008351 	.word	0x08008351
 8008334:	0800834b 	.word	0x0800834b
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
            break;
 800833c:	e014      	b.n	8008368 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800833e:	2305      	movs	r3, #5
 8008340:	73fb      	strb	r3, [r7, #15]
            break;
 8008342:	e011      	b.n	8008368 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
            break;
 8008348:	e00e      	b.n	8008368 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800834a:	2302      	movs	r3, #2
 800834c:	73fb      	strb	r3, [r7, #15]
            break;
 800834e:	e00b      	b.n	8008368 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <pb_encode_tag_for_field+0x72>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	e000      	b.n	8008360 <pb_encode_tag_for_field+0x74>
 800835e:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <pb_encode_tag_for_field+0x98>)
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6113      	str	r3, [r2, #16]
 8008364:	2300      	movs	r3, #0
 8008366:	e008      	b.n	800837a <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	8a1b      	ldrh	r3, [r3, #16]
 800836c:	461a      	mov	r2, r3
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff ff90 	bl	8008298 <pb_encode_tag>
 8008378:	4603      	mov	r3, r0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	0800f5c0 	.word	0x0800f5c0

08008388 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8008388:	b5b0      	push	{r4, r5, r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	461c      	mov	r4, r3
 800839a:	4615      	mov	r5, r2
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff fef6 	bl	8008192 <pb_encode_varint>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f083 0301 	eor.w	r3, r3, #1
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <pb_encode_string+0x2e>
        return false;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e005      	b.n	80083c2 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff f9ee 	bl	800779c <pb_write>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080083cc <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b08c      	sub	sp, #48	@ 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fe20 	bl	8008036 <pb_encode>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f083 0301 	eor.w	r3, r3, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8008402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8008408:	2300      	movs	r3, #0
 800840a:	e065      	b.n	80084d8 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	2200      	movs	r2, #0
 8008414:	461c      	mov	r4, r3
 8008416:	4615      	mov	r5, r2
 8008418:	4622      	mov	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff feb8 	bl	8008192 <pb_encode_varint>
 8008422:	4603      	mov	r3, r0
 8008424:	f083 0301 	eor.w	r3, r3, #1
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <pb_encode_submessage+0x66>
        return false;
 800842e:	2300      	movs	r3, #0
 8008430:	e052      	b.n	80084d8 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800843a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800843c:	2100      	movs	r1, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff f9ac 	bl	800779c <pb_write>
 8008444:	4603      	mov	r3, r0
 8008446:	e047      	b.n	80084d8 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844e:	441a      	add	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	d90b      	bls.n	8008470 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <pb_encode_submessage+0x9a>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	e000      	b.n	8008468 <pb_encode_submessage+0x9c>
 8008466:	4b1e      	ldr	r3, [pc, #120]	@ (80084e0 <pb_encode_submessage+0x114>)
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	6113      	str	r3, [r2, #16]
 800846c:	2300      	movs	r3, #0
 800846e:	e033      	b.n	80084d8 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fdd0 	bl	8008036 <pb_encode>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80084ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d00b      	beq.n	80084d4 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <pb_encode_submessage+0xfe>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	e000      	b.n	80084cc <pb_encode_submessage+0x100>
 80084ca:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <pb_encode_submessage+0x118>)
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6113      	str	r3, [r2, #16]
 80084d0:	2300      	movs	r3, #0
 80084d2:	e001      	b.n	80084d8 <pb_encode_submessage+0x10c>
    
    return status;
 80084d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3730      	adds	r7, #48	@ 0x30
 80084dc:	46bd      	mov	sp, r7
 80084de:	bdb0      	pop	{r4, r5, r7, pc}
 80084e0:	0800f588 	.word	0x0800f588
 80084e4:	0800f610 	.word	0x0800f610

080084e8 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff f9a0 	bl	800783c <safe_read_bool>
 80084fc:	4603      	mov	r3, r0
 80084fe:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	461c      	mov	r4, r3
 8008506:	4615      	mov	r5, r2
 8008508:	4622      	mov	r2, r4
 800850a:	462b      	mov	r3, r5
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fe40 	bl	8008192 <pb_encode_varint>
 8008512:	4603      	mov	r3, r0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bdb0      	pop	{r4, r5, r7, pc}

0800851c <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800851c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008520:	b08c      	sub	sp, #48	@ 0x30
 8008522:	af00      	add	r7, sp, #0
 8008524:	61f8      	str	r0, [r7, #28]
 8008526:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	7d9b      	ldrb	r3, [r3, #22]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	2b02      	cmp	r3, #2
 8008532:	d152      	bne.n	80085da <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	8a5b      	ldrh	r3, [r3, #18]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d10b      	bne.n	8008560 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2200      	movs	r2, #0
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	617a      	str	r2, [r7, #20]
 8008556:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800855a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800855e:	e035      	b.n	80085cc <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	8a5b      	ldrh	r3, [r3, #18]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d10b      	bne.n	8008580 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	2200      	movs	r2, #0
 8008572:	60bb      	str	r3, [r7, #8]
 8008574:	60fa      	str	r2, [r7, #12]
 8008576:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800857a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800857e:	e025      	b.n	80085cc <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	8a5b      	ldrh	r3, [r3, #18]
 8008584:	2b04      	cmp	r3, #4
 8008586:	d10a      	bne.n	800859e <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	603b      	str	r3, [r7, #0]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008598:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800859c:	e016      	b.n	80085cc <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	8a5b      	ldrh	r3, [r3, #18]
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d106      	bne.n	80085b4 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80085b2:	e00b      	b.n	80085cc <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <pb_enc_varint+0xa6>
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	e000      	b.n	80085c4 <pb_enc_varint+0xa8>
 80085c2:	4b36      	ldr	r3, [pc, #216]	@ (800869c <pb_enc_varint+0x180>)
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	6113      	str	r3, [r2, #16]
 80085c8:	2300      	movs	r3, #0
 80085ca:	e061      	b.n	8008690 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 80085cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085d0:	69f8      	ldr	r0, [r7, #28]
 80085d2:	f7ff fdde 	bl	8008192 <pb_encode_varint>
 80085d6:	4603      	mov	r3, r0
 80085d8:	e05a      	b.n	8008690 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	8a5b      	ldrh	r3, [r3, #18]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10a      	bne.n	8008604 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f993 3000 	ldrsb.w	r3, [r3]
 80085f6:	b25b      	sxtb	r3, r3
 80085f8:	17da      	asrs	r2, r3, #31
 80085fa:	469a      	mov	sl, r3
 80085fc:	4693      	mov	fp, r2
 80085fe:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8008602:	e032      	b.n	800866a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	8a5b      	ldrh	r3, [r3, #18]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d10a      	bne.n	8008622 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008614:	b21b      	sxth	r3, r3
 8008616:	17da      	asrs	r2, r3, #31
 8008618:	4698      	mov	r8, r3
 800861a:	4691      	mov	r9, r2
 800861c:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8008620:	e023      	b.n	800866a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	8a5b      	ldrh	r3, [r3, #18]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d108      	bne.n	800863c <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	17da      	asrs	r2, r3, #31
 8008632:	461c      	mov	r4, r3
 8008634:	4615      	mov	r5, r2
 8008636:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800863a:	e016      	b.n	800866a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	8a5b      	ldrh	r3, [r3, #18]
 8008640:	2b08      	cmp	r3, #8
 8008642:	d106      	bne.n	8008652 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008650:	e00b      	b.n	800866a <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <pb_enc_varint+0x144>
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	e000      	b.n	8008662 <pb_enc_varint+0x146>
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <pb_enc_varint+0x180>)
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	6113      	str	r3, [r2, #16]
 8008666:	2300      	movs	r3, #0
 8008668:	e012      	b.n	8008690 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	7d9b      	ldrb	r3, [r3, #22]
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	2b03      	cmp	r3, #3
 8008674:	d106      	bne.n	8008684 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8008676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800867a:	69f8      	ldr	r0, [r7, #28]
 800867c:	f7ff fdb4 	bl	80081e8 <pb_encode_svarint>
 8008680:	4603      	mov	r3, r0
 8008682:	e005      	b.n	8008690 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8008684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008688:	69f8      	ldr	r0, [r7, #28]
 800868a:	f7ff fd82 	bl	8008192 <pb_encode_varint>
 800868e:	4603      	mov	r3, r0

    }
}
 8008690:	4618      	mov	r0, r3
 8008692:	3730      	adds	r7, #48	@ 0x30
 8008694:	46bd      	mov	sp, r7
 8008696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800869a:	bf00      	nop
 800869c:	0800f624 	.word	0x0800f624

080086a0 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	8a5b      	ldrh	r3, [r3, #18]
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d107      	bne.n	80086c2 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff fdcf 	bl	800825c <pb_encode_fixed32>
 80086be:	4603      	mov	r3, r0
 80086c0:	e016      	b.n	80086f0 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	8a5b      	ldrh	r3, [r3, #18]
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d107      	bne.n	80086da <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fdd2 	bl	800827a <pb_encode_fixed64>
 80086d6:	4603      	mov	r3, r0
 80086d8:	e00a      	b.n	80086f0 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <pb_enc_fixed+0x48>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	e000      	b.n	80086ea <pb_enc_fixed+0x4a>
 80086e8:	4b03      	ldr	r3, [pc, #12]	@ (80086f8 <pb_enc_fixed+0x58>)
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6113      	str	r3, [r2, #16]
 80086ee:	2300      	movs	r3, #0
    }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	0800f624 	.word	0x0800f624

080086fc <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fe34 	bl	8008388 <pb_encode_string>
 8008720:	4603      	mov	r3, r0
 8008722:	e022      	b.n	800876a <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	7d9b      	ldrb	r3, [r3, #22]
 8008728:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d113      	bne.n	8008758 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	8a5b      	ldrh	r3, [r3, #18]
 800873a:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800873c:	429a      	cmp	r2, r3
 800873e:	d90b      	bls.n	8008758 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <pb_enc_bytes+0x52>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	e000      	b.n	8008750 <pb_enc_bytes+0x54>
 800874e:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <pb_enc_bytes+0x78>)
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6113      	str	r3, [r2, #16]
 8008754:	2300      	movs	r3, #0
 8008756:	e008      	b.n	800876a <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	1c99      	adds	r1, r3, #2
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fe10 	bl	8008388 <pb_encode_string>
 8008768:	4603      	mov	r3, r0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	0800f638 	.word	0x0800f638

08008778 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	8a5b      	ldrh	r3, [r3, #18]
 800878a:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	7d9b      	ldrb	r3, [r3, #22]
 8008796:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800879a:	2b80      	cmp	r3, #128	@ 0x80
 800879c:	d103      	bne.n	80087a6 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800879e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	e011      	b.n	80087ca <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <pb_enc_string+0x42>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	e000      	b.n	80087bc <pb_enc_string+0x44>
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <pb_enc_string+0xb4>)
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6113      	str	r3, [r2, #16]
 80087c0:	2300      	movs	r3, #0
 80087c2:	e02f      	b.n	8008824 <pb_enc_string+0xac>

        max_size -= 1;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	e020      	b.n	8008818 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 80087da:	e005      	b.n	80087e8 <pb_enc_string+0x70>
        {
            size++;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	3301      	adds	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]
            p++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d203      	bcs.n	80087f8 <pb_enc_string+0x80>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f1      	bne.n	80087dc <pb_enc_string+0x64>
        }

        if (*p != '\0')
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <pb_enc_string+0x96>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	e000      	b.n	8008810 <pb_enc_string+0x98>
 800880e:	4b08      	ldr	r3, [pc, #32]	@ (8008830 <pb_enc_string+0xb8>)
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6113      	str	r3, [r2, #16]
 8008814:	2300      	movs	r3, #0
 8008816:	e005      	b.n	8008824 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fdb3 	bl	8008388 <pb_encode_string>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	0800f64c 	.word	0x0800f64c
 8008830:	0800f660 	.word	0x0800f660

08008834 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <pb_enc_submessage+0x20>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	e000      	b.n	8008856 <pb_enc_submessage+0x22>
 8008854:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <pb_enc_submessage+0x88>)
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6113      	str	r3, [r2, #16]
 800885a:	2300      	movs	r3, #0
 800885c:	e029      	b.n	80088b2 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	7d9b      	ldrb	r3, [r3, #22]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	2b09      	cmp	r3, #9
 8008868:	d11a      	bne.n	80088a0 <pb_enc_submessage+0x6c>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	3b08      	subs	r3, #8
 8008878:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00e      	beq.n	80088a0 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	3204      	adds	r2, #4
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	4798      	blx	r3
 8008890:	4603      	mov	r3, r0
 8008892:	f083 0301 	eor.w	r3, r3, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <pb_enc_submessage+0x6c>
                return false;
 800889c:	2300      	movs	r3, #0
 800889e:	e008      	b.n	80088b2 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fd8e 	bl	80083cc <pb_encode_submessage>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	0800f674 	.word	0x0800f674

080088c0 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	69d9      	ldr	r1, [r3, #28]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	8a5b      	ldrh	r3, [r3, #18]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fd57 	bl	8008388 <pb_encode_string>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	4603      	mov	r3, r0
 80088ec:	603a      	str	r2, [r7, #0]
 80088ee:	80fb      	strh	r3, [r7, #6]
 80088f0:	460b      	mov	r3, r1
 80088f2:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80088f8:	88bb      	ldrh	r3, [r7, #4]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8008902:	88bb      	ldrh	r3, [r7, #4]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8008908:	f107 020c 	add.w	r2, r7, #12
 800890c:	88f9      	ldrh	r1, [r7, #6]
 800890e:	2364      	movs	r3, #100	@ 0x64
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	2302      	movs	r3, #2
 8008914:	4810      	ldr	r0, [pc, #64]	@ (8008958 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8008916:	f001 fe37 	bl	800a588 <HAL_I2C_Master_Transmit>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 800891e:	f107 0208 	add.w	r2, r7, #8
 8008922:	88f9      	ldrh	r1, [r7, #6]
 8008924:	2364      	movs	r3, #100	@ 0x64
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2304      	movs	r3, #4
 800892a:	480b      	ldr	r0, [pc, #44]	@ (8008958 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 800892c:	f001 ff44 	bl	800a7b8 <HAL_I2C_Master_Receive>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8008934:	7a3b      	ldrb	r3, [r7, #8]
 8008936:	061a      	lsls	r2, r3, #24
 8008938:	7a7b      	ldrb	r3, [r7, #9]
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 800893e:	7abb      	ldrb	r3, [r7, #10]
 8008940:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8008942:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8008944:	7afa      	ldrb	r2, [r7, #11]
 8008946:	4313      	orrs	r3, r2
 8008948:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	601a      	str	r2, [r3, #0]
	return status;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	200000f4 	.word	0x200000f4

0800895c <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af02      	add	r7, sp, #8
 8008962:	4603      	mov	r3, r0
 8008964:	603a      	str	r2, [r7, #0]
 8008966:	80fb      	strh	r3, [r7, #6]
 8008968:	460b      	mov	r3, r1
 800896a:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008970:	88bb      	ldrh	r3, [r7, #4]
 8008972:	0a1b      	lsrs	r3, r3, #8
 8008974:	b29b      	uxth	r3, r3
 8008976:	b2db      	uxtb	r3, r3
 8008978:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800897a:	88bb      	ldrh	r3, [r7, #4]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8008980:	f107 020c 	add.w	r2, r7, #12
 8008984:	88f9      	ldrh	r1, [r7, #6]
 8008986:	2364      	movs	r3, #100	@ 0x64
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	2302      	movs	r3, #2
 800898c:	480f      	ldr	r0, [pc, #60]	@ (80089cc <_Z15VL53L4CD_RdWordttPt+0x70>)
 800898e:	f001 fdfb 	bl	800a588 <HAL_I2C_Master_Transmit>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8008996:	f107 0208 	add.w	r2, r7, #8
 800899a:	88f9      	ldrh	r1, [r7, #6]
 800899c:	2364      	movs	r3, #100	@ 0x64
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2302      	movs	r3, #2
 80089a2:	480a      	ldr	r0, [pc, #40]	@ (80089cc <_Z15VL53L4CD_RdWordttPt+0x70>)
 80089a4:	f001 ff08 	bl	800a7b8 <HAL_I2C_Master_Receive>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 80089ac:	7a3b      	ldrb	r3, [r7, #8]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	7a7b      	ldrb	r3, [r7, #9]
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	801a      	strh	r2, [r3, #0]
	return status;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200000f4 	.word	0x200000f4

080089d0 <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	4603      	mov	r3, r0
 80089d8:	603a      	str	r2, [r7, #0]
 80089da:	80fb      	strh	r3, [r7, #6]
 80089dc:	460b      	mov	r3, r1
 80089de:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80089e4:	88bb      	ldrh	r3, [r7, #4]
 80089e6:	0a1b      	lsrs	r3, r3, #8
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80089ee:	88bb      	ldrh	r3, [r7, #4]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	88f9      	ldrh	r1, [r7, #6]
 80089fa:	2364      	movs	r3, #100	@ 0x64
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	2302      	movs	r3, #2
 8008a00:	480b      	ldr	r0, [pc, #44]	@ (8008a30 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8008a02:	f001 fdc1 	bl	800a588 <HAL_I2C_Master_Transmit>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	88f9      	ldrh	r1, [r7, #6]
 8008a10:	2364      	movs	r3, #100	@ 0x64
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2301      	movs	r3, #1
 8008a16:	4806      	ldr	r0, [pc, #24]	@ (8008a30 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8008a18:	f001 fece 	bl	800a7b8 <HAL_I2C_Master_Receive>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8008a20:	7a3a      	ldrb	r2, [r7, #8]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	701a      	strb	r2, [r3, #0]
	return status;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200000f4 	.word	0x200000f4

08008a34 <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	80fb      	strh	r3, [r7, #6]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	80bb      	strh	r3, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008a4a:	88bb      	ldrh	r3, [r7, #4]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8008a54:	88bb      	ldrh	r3, [r7, #4]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8008a5e:	f107 020c 	add.w	r2, r7, #12
 8008a62:	88f9      	ldrh	r1, [r7, #6]
 8008a64:	2364      	movs	r3, #100	@ 0x64
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2303      	movs	r3, #3
 8008a6a:	4805      	ldr	r0, [pc, #20]	@ (8008a80 <_Z15VL53L4CD_WrBytetth+0x4c>)
 8008a6c:	f001 fd8c 	bl	800a588 <HAL_I2C_Master_Transmit>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
	return status;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200000f4 	.word	0x200000f4

08008a84 <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	80fb      	strh	r3, [r7, #6]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	80bb      	strh	r3, [r7, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008a9a:	88bb      	ldrh	r3, [r7, #4]
 8008a9c:	0a1b      	lsrs	r3, r3, #8
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8008aa4:	88bb      	ldrh	r3, [r7, #4]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8008aaa:	887b      	ldrh	r3, [r7, #2]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8008ab4:	887b      	ldrh	r3, [r7, #2]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8008aba:	f107 0208 	add.w	r2, r7, #8
 8008abe:	88f9      	ldrh	r1, [r7, #6]
 8008ac0:	2364      	movs	r3, #100	@ 0x64
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	4805      	ldr	r0, [pc, #20]	@ (8008adc <_Z15VL53L4CD_WrWordttt+0x58>)
 8008ac8:	f001 fd5e 	bl	800a588 <HAL_I2C_Master_Transmit>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
	return status;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200000f4 	.word	0x200000f4

08008ae0 <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	603a      	str	r2, [r7, #0]
 8008aea:	80fb      	strh	r3, [r7, #6]
 8008aec:	460b      	mov	r3, r1
 8008aee:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008af4:	88bb      	ldrh	r3, [r7, #4]
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8008afe:	88bb      	ldrh	r3, [r7, #4]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	0e1b      	lsrs	r3, r3, #24
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	0c1b      	lsrs	r3, r3, #16
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8008b22:	f107 0208 	add.w	r2, r7, #8
 8008b26:	88f9      	ldrh	r1, [r7, #6]
 8008b28:	2364      	movs	r3, #100	@ 0x64
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2306      	movs	r3, #6
 8008b2e:	4805      	ldr	r0, [pc, #20]	@ (8008b44 <_Z16VL53L4CD_WrDWordttm+0x64>)
 8008b30:	f001 fd2a 	bl	800a588 <HAL_I2C_Master_Transmit>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
	return status;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200000f4 	.word	0x200000f4

08008b48 <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	f000 fb57 	bl	8009208 <HAL_Delay>
	return 0;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_MspInit>:
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b70:	f043 0301 	orr.w	r3, r3, #1
 8008b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	607b      	str	r3, [r7, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4b09      	ldr	r3, [pc, #36]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b86:	4a08      	ldr	r2, [pc, #32]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ba8 <HAL_MspInit+0x44>)
 8008b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f002 fae5 	bl	800b168 <HAL_PWREx_DisableUCPDDeadBattery>
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40021000 	.word	0x40021000

08008bac <HAL_FDCAN_MspInit>:
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b09a      	sub	sp, #104	@ 0x68
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	611a      	str	r2, [r3, #16]
 8008bc4:	f107 0310 	add.w	r3, r7, #16
 8008bc8:	2244      	movs	r2, #68	@ 0x44
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f005 fc0d 	bl	800e3ec <memset>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a24      	ldr	r2, [pc, #144]	@ (8008c68 <HAL_FDCAN_MspInit+0xbc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d141      	bne.n	8008c60 <HAL_FDCAN_MspInit+0xb4>
 8008bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be8:	f107 0310 	add.w	r3, r7, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f002 fff9 	bl	800bbe4 <HAL_RCCEx_PeriphCLKConfig>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <HAL_FDCAN_MspInit+0x50>
 8008bf8:	f7fb f880 	bl	8003cfc <Error_Handler>
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c00:	4a1a      	ldr	r2, [pc, #104]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008c02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c08:	4b18      	ldr	r3, [pc, #96]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c18:	4a14      	ldr	r2, [pc, #80]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c20:	4b12      	ldr	r3, [pc, #72]	@ (8008c6c <HAL_FDCAN_MspInit+0xc0>)
 8008c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c30:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c32:	2302      	movs	r3, #2
 8008c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c36:	2300      	movs	r3, #0
 8008c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c3e:	2309      	movs	r3, #9
 8008c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c46:	4619      	mov	r1, r3
 8008c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c4c:	f001 fa34 	bl	800a0b8 <HAL_GPIO_Init>
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	2015      	movs	r0, #21
 8008c56:	f000 fbd4 	bl	8009402 <HAL_NVIC_SetPriority>
 8008c5a:	2015      	movs	r0, #21
 8008c5c:	f000 fbeb 	bl	8009436 <HAL_NVIC_EnableIRQ>
 8008c60:	bf00      	nop
 8008c62:	3768      	adds	r7, #104	@ 0x68
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40006400 	.word	0x40006400
 8008c6c:	40021000 	.word	0x40021000

08008c70 <HAL_I2C_MspInit>:
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b09c      	sub	sp, #112	@ 0x70
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	609a      	str	r2, [r3, #8]
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	611a      	str	r2, [r3, #16]
 8008c88:	f107 0318 	add.w	r3, r7, #24
 8008c8c:	2244      	movs	r2, #68	@ 0x44
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f005 fbab 	bl	800e3ec <memset>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8008d50 <HAL_I2C_MspInit+0xe0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d153      	bne.n	8008d48 <HAL_I2C_MspInit+0xd8>
 8008ca0:	2340      	movs	r3, #64	@ 0x40
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ca8:	f107 0318 	add.w	r3, r7, #24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 ff99 	bl	800bbe4 <HAL_RCCEx_PeriphCLKConfig>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <HAL_I2C_MspInit+0x4c>
 8008cb8:	f7fb f820 	bl	8003cfc <Error_Handler>
 8008cbc:	4b25      	ldr	r3, [pc, #148]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc0:	4a24      	ldr	r2, [pc, #144]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008cc2:	f043 0301 	orr.w	r3, r3, #1
 8008cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cc8:	4b22      	ldr	r3, [pc, #136]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008cda:	f043 0302 	orr.w	r3, r3, #2
 8008cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	613b      	str	r3, [r7, #16]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cf2:	2312      	movs	r3, #18
 8008cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cfe:	2304      	movs	r3, #4
 8008d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008d06:	4619      	mov	r1, r3
 8008d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d0c:	f001 f9d4 	bl	800a0b8 <HAL_GPIO_Init>
 8008d10:	2380      	movs	r3, #128	@ 0x80
 8008d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d14:	2312      	movs	r3, #18
 8008d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d18:	2300      	movs	r3, #0
 8008d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d20:	2304      	movs	r3, #4
 8008d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008d28:	4619      	mov	r1, r3
 8008d2a:	480b      	ldr	r0, [pc, #44]	@ (8008d58 <HAL_I2C_MspInit+0xe8>)
 8008d2c:	f001 f9c4 	bl	800a0b8 <HAL_GPIO_Init>
 8008d30:	4b08      	ldr	r3, [pc, #32]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d34:	4a07      	ldr	r2, [pc, #28]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <HAL_I2C_MspInit+0xe4>)
 8008d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	bf00      	nop
 8008d4a:	3770      	adds	r7, #112	@ 0x70
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40005400 	.word	0x40005400
 8008d54:	40021000 	.word	0x40021000
 8008d58:	48000400 	.word	0x48000400

08008d5c <HAL_TIM_Base_MspInit>:
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6c:	d113      	bne.n	8008d96 <HAL_TIM_Base_MspInit+0x3a>
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <HAL_TIM_Base_MspInit+0x44>)
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	4a0b      	ldr	r2, [pc, #44]	@ (8008da0 <HAL_TIM_Base_MspInit+0x44>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <HAL_TIM_Base_MspInit+0x44>)
 8008d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	201c      	movs	r0, #28
 8008d8c:	f000 fb39 	bl	8009402 <HAL_NVIC_SetPriority>
 8008d90:	201c      	movs	r0, #28
 8008d92:	f000 fb50 	bl	8009436 <HAL_NVIC_EnableIRQ>
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40021000 	.word	0x40021000

08008da4 <HAL_UART_MspInit>:
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b09c      	sub	sp, #112	@ 0x70
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	611a      	str	r2, [r3, #16]
 8008dbc:	f107 0318 	add.w	r3, r7, #24
 8008dc0:	2244      	movs	r2, #68	@ 0x44
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f005 fb11 	bl	800e3ec <memset>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a3e      	ldr	r2, [pc, #248]	@ (8008ec8 <HAL_UART_MspInit+0x124>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d138      	bne.n	8008e46 <HAL_UART_MspInit+0xa2>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	61bb      	str	r3, [r7, #24]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	f107 0318 	add.w	r3, r7, #24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 feff 	bl	800bbe4 <HAL_RCCEx_PeriphCLKConfig>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <HAL_UART_MspInit+0x4c>
 8008dec:	f7fa ff86 	bl	8003cfc <Error_Handler>
 8008df0:	4b36      	ldr	r3, [pc, #216]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df4:	4a35      	ldr	r2, [pc, #212]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dfa:	6613      	str	r3, [r2, #96]	@ 0x60
 8008dfc:	4b33      	ldr	r3, [pc, #204]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	4b30      	ldr	r3, [pc, #192]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e14:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e26:	2312      	movs	r3, #18
 8008e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e2e:	2303      	movs	r3, #3
 8008e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e32:	2307      	movs	r3, #7
 8008e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e40:	f001 f93a 	bl	800a0b8 <HAL_GPIO_Init>
 8008e44:	e03b      	b.n	8008ebe <HAL_UART_MspInit+0x11a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a21      	ldr	r2, [pc, #132]	@ (8008ed0 <HAL_UART_MspInit+0x12c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d136      	bne.n	8008ebe <HAL_UART_MspInit+0x11a>
 8008e50:	2302      	movs	r3, #2
 8008e52:	61bb      	str	r3, [r7, #24]
 8008e54:	2300      	movs	r3, #0
 8008e56:	623b      	str	r3, [r7, #32]
 8008e58:	f107 0318 	add.w	r3, r7, #24
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 fec1 	bl	800bbe4 <HAL_RCCEx_PeriphCLKConfig>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_UART_MspInit+0xc8>
 8008e68:	f7fa ff48 	bl	8003cfc <Error_Handler>
 8008e6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e70:	4a16      	ldr	r2, [pc, #88]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e78:	4b14      	ldr	r3, [pc, #80]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e88:	4a10      	ldr	r2, [pc, #64]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ecc <HAL_UART_MspInit+0x128>)
 8008e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eac:	2307      	movs	r3, #7
 8008eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008eba:	f001 f8fd 	bl	800a0b8 <HAL_GPIO_Init>
 8008ebe:	bf00      	nop
 8008ec0:	3770      	adds	r7, #112	@ 0x70
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40013800 	.word	0x40013800
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	40004400 	.word	0x40004400

08008ed4 <NMI_Handler>:
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <NMI_Handler+0x4>

08008edc <HardFault_Handler>:
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <HardFault_Handler+0x4>

08008ee4 <MemManage_Handler>:
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <MemManage_Handler+0x4>

08008eec <BusFault_Handler>:
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <BusFault_Handler+0x4>

08008ef4 <UsageFault_Handler>:
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <UsageFault_Handler+0x4>

08008efc <SVC_Handler>:
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	bf00      	nop
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <DebugMon_Handler>:
 8008f0a:	b480      	push	{r7}
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	bf00      	nop
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <PendSV_Handler>:
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	bf00      	nop
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <SysTick_Handler>:
 8008f26:	b580      	push	{r7, lr}
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	f000 f94f 	bl	80091cc <HAL_IncTick>
 8008f2e:	bf00      	nop
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <FDCAN1_IT0_IRQHandler>:
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	4802      	ldr	r0, [pc, #8]	@ (8008f44 <FDCAN1_IT0_IRQHandler+0x10>)
 8008f3a:	f000 fe5d 	bl	8009bf8 <HAL_FDCAN_IRQHandler>
 8008f3e:	bf00      	nop
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000090 	.word	0x20000090

08008f48 <TIM2_IRQHandler>:
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	4802      	ldr	r0, [pc, #8]	@ (8008f58 <TIM2_IRQHandler+0x10>)
 8008f4e:	f003 f8fb 	bl	800c148 <HAL_TIM_IRQHandler>
 8008f52:	bf00      	nop
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000148 	.word	0x20000148

08008f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return 1;
 8008f60:	2301      	movs	r3, #1
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <_kill>:

int _kill(int pid, int sig)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f76:	f005 fadb 	bl	800e530 <__errno>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2216      	movs	r2, #22
 8008f7e:	601a      	str	r2, [r3, #0]
  return -1;
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <_exit>:

void _exit (int status)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008f94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ffe7 	bl	8008f6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <_exit+0x12>

08008fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	e00a      	b.n	8008fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	4601      	mov	r1, r0
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	60ba      	str	r2, [r7, #8]
 8008fc0:	b2ca      	uxtb	r2, r1
 8008fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	dbf0      	blt.n	8008fb4 <_read+0x12>
  }

  return len;
 8008fd2:	687b      	ldr	r3, [r7, #4]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009004:	605a      	str	r2, [r3, #4]
  return 0;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <_isatty>:

int _isatty(int file)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800901c:	2301      	movs	r3, #1
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800904c:	4a14      	ldr	r2, [pc, #80]	@ (80090a0 <_sbrk+0x5c>)
 800904e:	4b15      	ldr	r3, [pc, #84]	@ (80090a4 <_sbrk+0x60>)
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009058:	4b13      	ldr	r3, [pc, #76]	@ (80090a8 <_sbrk+0x64>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009060:	4b11      	ldr	r3, [pc, #68]	@ (80090a8 <_sbrk+0x64>)
 8009062:	4a12      	ldr	r2, [pc, #72]	@ (80090ac <_sbrk+0x68>)
 8009064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009066:	4b10      	ldr	r3, [pc, #64]	@ (80090a8 <_sbrk+0x64>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	429a      	cmp	r2, r3
 8009072:	d207      	bcs.n	8009084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009074:	f005 fa5c 	bl	800e530 <__errno>
 8009078:	4603      	mov	r3, r0
 800907a:	220c      	movs	r2, #12
 800907c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800907e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009082:	e009      	b.n	8009098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009084:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <_sbrk+0x64>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800908a:	4b07      	ldr	r3, [pc, #28]	@ (80090a8 <_sbrk+0x64>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	4a05      	ldr	r2, [pc, #20]	@ (80090a8 <_sbrk+0x64>)
 8009094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009096:	68fb      	ldr	r3, [r7, #12]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20008000 	.word	0x20008000
 80090a4:	00000400 	.word	0x00000400
 80090a8:	200006b8 	.word	0x200006b8
 80090ac:	20000810 	.word	0x20000810

080090b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80090b4:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <SystemInit+0x20>)
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ba:	4a05      	ldr	r2, [pc, #20]	@ (80090d0 <SystemInit+0x20>)
 80090bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80090c4:	bf00      	nop
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	e000ed00 	.word	0xe000ed00

080090d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090d4:	480d      	ldr	r0, [pc, #52]	@ (800910c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 80090d8:	f7ff ffea 	bl	80090b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090dc:	480c      	ldr	r0, [pc, #48]	@ (8009110 <LoopForever+0x6>)
  ldr r1, =_edata
 80090de:	490d      	ldr	r1, [pc, #52]	@ (8009114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009118 <LoopForever+0xe>)
  movs r3, #0
 80090e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80090e4:	e002      	b.n	80090ec <LoopCopyDataInit>

080090e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090ea:	3304      	adds	r3, #4

080090ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090f0:	d3f9      	bcc.n	80090e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090f2:	4a0a      	ldr	r2, [pc, #40]	@ (800911c <LoopForever+0x12>)
  ldr r4, =_ebss
 80090f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009120 <LoopForever+0x16>)
  movs r3, #0
 80090f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090f8:	e001      	b.n	80090fe <LoopFillZerobss>

080090fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090fc:	3204      	adds	r2, #4

080090fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009100:	d3fb      	bcc.n	80090fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8009102:	f005 fa1b 	bl	800e53c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009106:	f7fa fb6f 	bl	80037e8 <main>

0800910a <LoopForever>:

LoopForever:
    b LoopForever
 800910a:	e7fe      	b.n	800910a <LoopForever>
  ldr   r0, =_estack
 800910c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009114:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8009118:	0800f8a8 	.word	0x0800f8a8
  ldr r2, =_sbss
 800911c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8009120:	20000810 	.word	0x20000810

08009124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009124:	e7fe      	b.n	8009124 <ADC1_2_IRQHandler>

08009126 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009130:	2003      	movs	r0, #3
 8009132:	f000 f95b 	bl	80093ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009136:	2000      	movs	r0, #0
 8009138:	f000 f80e 	bl	8009158 <HAL_InitTick>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	71fb      	strb	r3, [r7, #7]
 8009146:	e001      	b.n	800914c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009148:	f7ff fd0c 	bl	8008b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800914c:	79fb      	ldrb	r3, [r7, #7]

}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009164:	4b16      	ldr	r3, [pc, #88]	@ (80091c0 <HAL_InitTick+0x68>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d022      	beq.n	80091b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800916c:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <HAL_InitTick+0x6c>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	4b13      	ldr	r3, [pc, #76]	@ (80091c0 <HAL_InitTick+0x68>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009178:	fbb1 f3f3 	udiv	r3, r1, r3
 800917c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009180:	4618      	mov	r0, r3
 8009182:	f000 f966 	bl	8009452 <HAL_SYSTICK_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10f      	bne.n	80091ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d809      	bhi.n	80091a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009192:	2200      	movs	r2, #0
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800919a:	f000 f932 	bl	8009402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800919e:	4a0a      	ldr	r2, [pc, #40]	@ (80091c8 <HAL_InitTick+0x70>)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	e007      	b.n	80091b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
 80091aa:	e004      	b.n	80091b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e001      	b.n	80091b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000008 	.word	0x20000008
 80091c4:	20000000 	.word	0x20000000
 80091c8:	20000004 	.word	0x20000004

080091cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091d0:	4b05      	ldr	r3, [pc, #20]	@ (80091e8 <HAL_IncTick+0x1c>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4b05      	ldr	r3, [pc, #20]	@ (80091ec <HAL_IncTick+0x20>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4413      	add	r3, r2
 80091da:	4a03      	ldr	r2, [pc, #12]	@ (80091e8 <HAL_IncTick+0x1c>)
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	200006bc 	.word	0x200006bc
 80091ec:	20000008 	.word	0x20000008

080091f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
  return uwTick;
 80091f4:	4b03      	ldr	r3, [pc, #12]	@ (8009204 <HAL_GetTick+0x14>)
 80091f6:	681b      	ldr	r3, [r3, #0]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	200006bc 	.word	0x200006bc

08009208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009210:	f7ff ffee 	bl	80091f0 <HAL_GetTick>
 8009214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009220:	d004      	beq.n	800922c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009222:	4b09      	ldr	r3, [pc, #36]	@ (8009248 <HAL_Delay+0x40>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800922c:	bf00      	nop
 800922e:	f7ff ffdf 	bl	80091f0 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	429a      	cmp	r2, r3
 800923c:	d8f7      	bhi.n	800922e <HAL_Delay+0x26>
  {
  }
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20000008 	.word	0x20000008

0800924c <__NVIC_SetPriorityGrouping>:
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800925c:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <__NVIC_SetPriorityGrouping+0x44>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009268:	4013      	ands	r3, r2
 800926a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800927c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800927e:	4a04      	ldr	r2, [pc, #16]	@ (8009290 <__NVIC_SetPriorityGrouping+0x44>)
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	60d3      	str	r3, [r2, #12]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	e000ed00 	.word	0xe000ed00

08009294 <__NVIC_GetPriorityGrouping>:
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009298:	4b04      	ldr	r3, [pc, #16]	@ (80092ac <__NVIC_GetPriorityGrouping+0x18>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	f003 0307 	and.w	r3, r3, #7
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	e000ed00 	.word	0xe000ed00

080092b0 <__NVIC_EnableIRQ>:
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	db0b      	blt.n	80092da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	f003 021f 	and.w	r2, r3, #31
 80092c8:	4907      	ldr	r1, [pc, #28]	@ (80092e8 <__NVIC_EnableIRQ+0x38>)
 80092ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ce:	095b      	lsrs	r3, r3, #5
 80092d0:	2001      	movs	r0, #1
 80092d2:	fa00 f202 	lsl.w	r2, r0, r2
 80092d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	e000e100 	.word	0xe000e100

080092ec <__NVIC_SetPriority>:
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	db0a      	blt.n	8009316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	b2da      	uxtb	r2, r3
 8009304:	490c      	ldr	r1, [pc, #48]	@ (8009338 <__NVIC_SetPriority+0x4c>)
 8009306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800930a:	0112      	lsls	r2, r2, #4
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	440b      	add	r3, r1
 8009310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009314:	e00a      	b.n	800932c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	b2da      	uxtb	r2, r3
 800931a:	4908      	ldr	r1, [pc, #32]	@ (800933c <__NVIC_SetPriority+0x50>)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	3b04      	subs	r3, #4
 8009324:	0112      	lsls	r2, r2, #4
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	440b      	add	r3, r1
 800932a:	761a      	strb	r2, [r3, #24]
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	e000e100 	.word	0xe000e100
 800933c:	e000ed00 	.word	0xe000ed00

08009340 <NVIC_EncodePriority>:
{
 8009340:	b480      	push	{r7}
 8009342:	b089      	sub	sp, #36	@ 0x24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f1c3 0307 	rsb	r3, r3, #7
 800935a:	2b04      	cmp	r3, #4
 800935c:	bf28      	it	cs
 800935e:	2304      	movcs	r3, #4
 8009360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3304      	adds	r3, #4
 8009366:	2b06      	cmp	r3, #6
 8009368:	d902      	bls.n	8009370 <NVIC_EncodePriority+0x30>
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	3b03      	subs	r3, #3
 800936e:	e000      	b.n	8009372 <NVIC_EncodePriority+0x32>
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	fa02 f303 	lsl.w	r3, r2, r3
 800937e:	43da      	mvns	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	401a      	ands	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009388:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	43d9      	mvns	r1, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009398:	4313      	orrs	r3, r2
}
 800939a:	4618      	mov	r0, r3
 800939c:	3724      	adds	r7, #36	@ 0x24
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093b8:	d301      	bcc.n	80093be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093ba:	2301      	movs	r3, #1
 80093bc:	e00f      	b.n	80093de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093be:	4a0a      	ldr	r2, [pc, #40]	@ (80093e8 <SysTick_Config+0x40>)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093c6:	210f      	movs	r1, #15
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093cc:	f7ff ff8e 	bl	80092ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093d0:	4b05      	ldr	r3, [pc, #20]	@ (80093e8 <SysTick_Config+0x40>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093d6:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <SysTick_Config+0x40>)
 80093d8:	2207      	movs	r2, #7
 80093da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000e010 	.word	0xe000e010

080093ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ff29 	bl	800924c <__NVIC_SetPriorityGrouping>
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	4603      	mov	r3, r0
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
 800940e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009410:	f7ff ff40 	bl	8009294 <__NVIC_GetPriorityGrouping>
 8009414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	6978      	ldr	r0, [r7, #20]
 800941c:	f7ff ff90 	bl	8009340 <NVIC_EncodePriority>
 8009420:	4602      	mov	r2, r0
 8009422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff ff5f 	bl	80092ec <__NVIC_SetPriority>
}
 800942e:	bf00      	nop
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	4603      	mov	r3, r0
 800943e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff ff33 	bl	80092b0 <__NVIC_EnableIRQ>
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff ffa4 	bl	80093a8 <SysTick_Config>
 8009460:	4603      	mov	r3, r0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e147      	b.n	800970e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d106      	bne.n	8009498 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fb8a 	bl	8008bac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0210 	bic.w	r2, r2, #16
 80094a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094a8:	f7ff fea2 	bl	80091f0 <HAL_GetTick>
 80094ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80094ae:	e012      	b.n	80094d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80094b0:	f7ff fe9e 	bl	80091f0 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b0a      	cmp	r3, #10
 80094bc:	d90b      	bls.n	80094d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c2:	f043 0201 	orr.w	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2203      	movs	r2, #3
 80094ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e11b      	b.n	800970e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d0e5      	beq.n	80094b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	699a      	ldr	r2, [r3, #24]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094f4:	f7ff fe7c 	bl	80091f0 <HAL_GetTick>
 80094f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80094fa:	e012      	b.n	8009522 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80094fc:	f7ff fe78 	bl	80091f0 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	2b0a      	cmp	r3, #10
 8009508:	d90b      	bls.n	8009522 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950e:	f043 0201 	orr.w	r2, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2203      	movs	r2, #3
 800951a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e0f5      	b.n	800970e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0e5      	beq.n	80094fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0202 	orr.w	r2, r2, #2
 800953e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a74      	ldr	r2, [pc, #464]	@ (8009718 <HAL_FDCAN_Init+0x2ac>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d103      	bne.n	8009552 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800954a:	4a74      	ldr	r2, [pc, #464]	@ (800971c <HAL_FDCAN_Init+0x2b0>)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	7c1b      	ldrb	r3, [r3, #16]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d108      	bne.n	800956c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009568:	619a      	str	r2, [r3, #24]
 800956a:	e007      	b.n	800957c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800957a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7c5b      	ldrb	r3, [r3, #17]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d108      	bne.n	8009596 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009592:	619a      	str	r2, [r3, #24]
 8009594:	e007      	b.n	80095a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80095a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	7c9b      	ldrb	r3, [r3, #18]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d108      	bne.n	80095c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095bc:	619a      	str	r2, [r3, #24]
 80095be:	e007      	b.n	80095d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80095f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0210 	bic.w	r2, r2, #16
 8009604:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d108      	bne.n	8009620 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699a      	ldr	r2, [r3, #24]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f042 0204 	orr.w	r2, r2, #4
 800961c:	619a      	str	r2, [r3, #24]
 800961e:	e02c      	b.n	800967a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d028      	beq.n	800967a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d01c      	beq.n	800966a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800963e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0210 	orr.w	r2, r2, #16
 800964e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	2b03      	cmp	r3, #3
 8009656:	d110      	bne.n	800967a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0220 	orr.w	r2, r2, #32
 8009666:	619a      	str	r2, [r3, #24]
 8009668:	e007      	b.n	800967a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0220 	orr.w	r2, r2, #32
 8009678:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	3b01      	subs	r3, #1
 8009680:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	3b01      	subs	r3, #1
 8009688:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800968a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009692:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	3b01      	subs	r3, #1
 800969c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80096a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80096a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ae:	d115      	bne.n	80096dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	3b01      	subs	r3, #1
 80096bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c4:	3b01      	subs	r3, #1
 80096c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80096c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	3b01      	subs	r3, #1
 80096d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80096d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fc0e 	bl	8009f14 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	40006400 	.word	0x40006400
 800971c:	40006500 	.word	0x40006500

08009720 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b01      	cmp	r3, #1
 8009732:	d110      	bne.n	8009756 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0201 	bic.w	r2, r2, #1
 800974a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e006      	b.n	8009764 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800975a:	f043 0204 	orr.w	r2, r3, #4
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
  }
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b02      	cmp	r3, #2
 8009786:	d12c      	bne.n	80097e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800979c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e023      	b.n	80097f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80097b0:	0c1b      	lsrs	r3, r3, #16
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fbfe 	bl	8009fc0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2101      	movs	r1, #1
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	fa01 f202 	lsl.w	r2, r1, r2
 80097d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80097d4:	2201      	movs	r2, #1
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	409a      	lsls	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	e006      	b.n	80097f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e6:	f043 0208 	orr.w	r2, r3, #8
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
  }
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b08b      	sub	sp, #44	@ 0x2c
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009810:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8009812:	7efb      	ldrb	r3, [r7, #27]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f040 80e8 	bne.w	80099ea <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b40      	cmp	r3, #64	@ 0x40
 800981e:	d137      	bne.n	8009890 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009828:	f003 030f 	and.w	r3, r3, #15
 800982c:	2b00      	cmp	r3, #0
 800982e:	d107      	bne.n	8009840 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009834:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e0db      	b.n	80099f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009848:	0e1b      	lsrs	r3, r3, #24
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b01      	cmp	r3, #1
 8009850:	d10a      	bne.n	8009868 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985a:	0a5b      	lsrs	r3, r3, #9
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009864:	2301      	movs	r3, #1
 8009866:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	440b      	add	r3, r1
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
 800988e:	e036      	b.n	80098fe <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0a3      	b.n	80099f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098b8:	0e1b      	lsrs	r3, r3, #24
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d10a      	bne.n	80098d8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80098d4:	2301      	movs	r3, #1
 80098d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	4613      	mov	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4413      	add	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	0c9b      	lsrs	r3, r3, #18
 8009918:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e005      	b.n	800992e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009948:	3304      	adds	r3, #4
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	b29a      	uxth	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	0c1b      	lsrs	r3, r3, #16
 800995c:	f003 020f 	and.w	r2, r3, #15
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800997c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	0e1b      	lsrs	r3, r3, #24
 8009982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	0fda      	lsrs	r2, r3, #31
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	3304      	adds	r3, #4
 8009998:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800999e:	2300      	movs	r3, #0
 80099a0:	623b      	str	r3, [r7, #32]
 80099a2:	e00a      	b.n	80099ba <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	441a      	add	r2, r3
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	440b      	add	r3, r1
 80099b0:	7812      	ldrb	r2, [r2, #0]
 80099b2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	3301      	adds	r3, #1
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4a11      	ldr	r2, [pc, #68]	@ (8009a04 <HAL_FDCAN_GetRxMessage+0x20c>)
 80099c0:	5cd3      	ldrb	r3, [r2, r3]
 80099c2:	461a      	mov	r2, r3
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d3ec      	bcc.n	80099a4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b40      	cmp	r3, #64	@ 0x40
 80099ce:	d105      	bne.n	80099dc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80099da:	e004      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e006      	b.n	80099f8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ee:	f043 0208 	orr.w	r2, r3, #8
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
  }
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	372c      	adds	r7, #44	@ 0x2c
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	0800f7c4 	.word	0x0800f7c4

08009a08 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009a3e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d003      	beq.n	8009a4e <HAL_FDCAN_ActivateNotification+0x22>
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	f040 80c8 	bne.w	8009bde <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a54:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f003 0307 	and.w	r3, r3, #7
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d03b      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d004      	beq.n	8009a7e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d031      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d027      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f003 0308 	and.w	r3, r3, #8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01d      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00c      	beq.n	8009af2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d107      	bne.n	8009af2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0201 	orr.w	r2, r2, #1
 8009af0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f003 0307 	and.w	r3, r3, #7
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d13b      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d131      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d127      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d11d      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f003 0310 	and.w	r3, r3, #16
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d113      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f003 0320 	and.w	r3, r3, #32
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0202 	orr.w	r2, r2, #2
 8009b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e006      	b.n	8009bec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009be2:	f043 0202 	orr.w	r2, r3, #2
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
  }
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	@ 0x30
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c06:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c14:	4013      	ands	r3, r2
 8009c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c44:	4013      	ands	r3, r2
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8009c52:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5a:	6a3a      	ldr	r2, [r7, #32]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8009c6a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c72:	69fa      	ldr	r2, [r7, #28]
 8009c74:	4013      	ands	r3, r2
 8009c76:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c86:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d006      	beq.n	8009caa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2240      	movs	r2, #64	@ 0x40
 8009ca2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f916 	bl	8009ed6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d019      	beq.n	8009ce8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d014      	beq.n	8009ce8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009cc6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009ce0:	6939      	ldr	r1, [r7, #16]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8d8 	bl	8009e98 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8a2 	bl	8009e42 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d0a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7f8 fd22 	bl	8002758 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d007      	beq.n	8009d2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d20:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f897 	bl	8009e58 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00c      	beq.n	8009d4e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d007      	beq.n	8009d4e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f890 	bl	8009e6e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d018      	beq.n	8009d8a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d013      	beq.n	8009d8a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009d6a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4013      	ands	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2280      	movs	r2, #128	@ 0x80
 8009d80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f87c 	bl	8009e82 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00c      	beq.n	8009dae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009da6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f880 	bl	8009eae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00c      	beq.n	8009dd2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d007      	beq.n	8009dd2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009dca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f878 	bl	8009ec2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00f      	beq.n	8009dfc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009dee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009e0a:	69f9      	ldr	r1, [r7, #28]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f876 	bl	8009efe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6a3a      	ldr	r2, [r7, #32]
 8009e1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f858 	bl	8009eea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3730      	adds	r7, #48	@ 0x30
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009f1c:	4b27      	ldr	r3, [pc, #156]	@ (8009fbc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8009f1e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f36:	041a      	lsls	r2, r3, #16
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f54:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5c:	061a      	lsls	r2, r3, #24
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e005      	b.n	8009fa2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d3f3      	bcc.n	8009f96 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	4000a400 	.word	0x4000a400

08009fc0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b089      	sub	sp, #36	@ 0x24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009fde:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	61fb      	str	r3, [r7, #28]
 8009fea:	e00a      	b.n	800a002 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009ff4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009ffa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a000:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a00c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a012:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a018:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	4613      	mov	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4413      	add	r3, r2
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	440b      	add	r3, r1
 800a034:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	3304      	adds	r3, #4
 800a040:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	3304      	adds	r3, #4
 800a04c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	e020      	b.n	800a096 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	3303      	adds	r3, #3
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	4413      	add	r3, r2
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	3302      	adds	r3, #2
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	440b      	add	r3, r1
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a06c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	3301      	adds	r3, #1
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	440b      	add	r3, r1
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a07a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	440a      	add	r2, r1
 800a082:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a084:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	3304      	adds	r3, #4
 800a08e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	3304      	adds	r3, #4
 800a094:	617b      	str	r3, [r7, #20]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	4a06      	ldr	r2, [pc, #24]	@ (800a0b4 <FDCAN_CopyMessageToRAM+0xf4>)
 800a09c:	5cd3      	ldrb	r3, [r2, r3]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d3d6      	bcc.n	800a054 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	3724      	adds	r7, #36	@ 0x24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	0800f7c4 	.word	0x0800f7c4

0800a0b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a0c6:	e15a      	b.n	800a37e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 814c 	beq.w	800a378 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d005      	beq.n	800a0f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d130      	bne.n	800a15a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	2203      	movs	r2, #3
 800a104:	fa02 f303 	lsl.w	r3, r2, r3
 800a108:	43db      	mvns	r3, r3
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4013      	ands	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a12e:	2201      	movs	r2, #1
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	fa02 f303 	lsl.w	r3, r2, r3
 800a136:	43db      	mvns	r3, r3
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4013      	ands	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	091b      	lsrs	r3, r3, #4
 800a144:	f003 0201 	and.w	r2, r3, #1
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	4313      	orrs	r3, r2
 800a152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	2b03      	cmp	r3, #3
 800a164:	d017      	beq.n	800a196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	2203      	movs	r2, #3
 800a172:	fa02 f303 	lsl.w	r3, r2, r3
 800a176:	43db      	mvns	r3, r3
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4013      	ands	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	fa02 f303 	lsl.w	r3, r2, r3
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d123      	bne.n	800a1ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	08da      	lsrs	r2, r3, #3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3208      	adds	r2, #8
 800a1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	220f      	movs	r2, #15
 800a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a1be:	43db      	mvns	r3, r3
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	691a      	ldr	r2, [r3, #16]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f003 0307 	and.w	r3, r3, #7
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	08da      	lsrs	r2, r3, #3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3208      	adds	r2, #8
 800a1e4:	6939      	ldr	r1, [r7, #16]
 800a1e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	43db      	mvns	r3, r3
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4013      	ands	r3, r2
 800a200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f003 0203 	and.w	r2, r3, #3
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	fa02 f303 	lsl.w	r3, r2, r3
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80a6 	beq.w	800a378 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a22c:	4b5b      	ldr	r3, [pc, #364]	@ (800a39c <HAL_GPIO_Init+0x2e4>)
 800a22e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a230:	4a5a      	ldr	r2, [pc, #360]	@ (800a39c <HAL_GPIO_Init+0x2e4>)
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	6613      	str	r3, [r2, #96]	@ 0x60
 800a238:	4b58      	ldr	r3, [pc, #352]	@ (800a39c <HAL_GPIO_Init+0x2e4>)
 800a23a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	60bb      	str	r3, [r7, #8]
 800a242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a244:	4a56      	ldr	r2, [pc, #344]	@ (800a3a0 <HAL_GPIO_Init+0x2e8>)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	089b      	lsrs	r3, r3, #2
 800a24a:	3302      	adds	r3, #2
 800a24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f003 0303 	and.w	r3, r3, #3
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	220f      	movs	r2, #15
 800a25c:	fa02 f303 	lsl.w	r3, r2, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	4013      	ands	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a26e:	d01f      	beq.n	800a2b0 <HAL_GPIO_Init+0x1f8>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a4c      	ldr	r2, [pc, #304]	@ (800a3a4 <HAL_GPIO_Init+0x2ec>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d019      	beq.n	800a2ac <HAL_GPIO_Init+0x1f4>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a4b      	ldr	r2, [pc, #300]	@ (800a3a8 <HAL_GPIO_Init+0x2f0>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d013      	beq.n	800a2a8 <HAL_GPIO_Init+0x1f0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a4a      	ldr	r2, [pc, #296]	@ (800a3ac <HAL_GPIO_Init+0x2f4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d00d      	beq.n	800a2a4 <HAL_GPIO_Init+0x1ec>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a49      	ldr	r2, [pc, #292]	@ (800a3b0 <HAL_GPIO_Init+0x2f8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d007      	beq.n	800a2a0 <HAL_GPIO_Init+0x1e8>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a48      	ldr	r2, [pc, #288]	@ (800a3b4 <HAL_GPIO_Init+0x2fc>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d101      	bne.n	800a29c <HAL_GPIO_Init+0x1e4>
 800a298:	2305      	movs	r3, #5
 800a29a:	e00a      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a29c:	2306      	movs	r3, #6
 800a29e:	e008      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	e006      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e004      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e002      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <HAL_GPIO_Init+0x1fa>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	f002 0203 	and.w	r2, r2, #3
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	4093      	lsls	r3, r2
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2c2:	4937      	ldr	r1, [pc, #220]	@ (800a3a0 <HAL_GPIO_Init+0x2e8>)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a2d0:	4b39      	ldr	r3, [pc, #228]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a2f4:	4a30      	ldr	r2, [pc, #192]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	43db      	mvns	r3, r3
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4013      	ands	r3, r2
 800a308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a31e:	4a26      	ldr	r2, [pc, #152]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a324:	4b24      	ldr	r3, [pc, #144]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	43db      	mvns	r3, r3
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4013      	ands	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a348:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a34e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	43db      	mvns	r3, r3
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	4013      	ands	r3, r2
 800a35c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a372:	4a11      	ldr	r2, [pc, #68]	@ (800a3b8 <HAL_GPIO_Init+0x300>)
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	3301      	adds	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f47f ae9d 	bne.w	800a0c8 <HAL_GPIO_Init+0x10>
  }
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	40021000 	.word	0x40021000
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	48000400 	.word	0x48000400
 800a3a8:	48000800 	.word	0x48000800
 800a3ac:	48000c00 	.word	0x48000c00
 800a3b0:	48001000 	.word	0x48001000
 800a3b4:	48001400 	.word	0x48001400
 800a3b8:	40010400 	.word	0x40010400

0800a3bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	887b      	ldrh	r3, [r7, #2]
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	73fb      	strb	r3, [r7, #15]
 800a3d8:	e001      	b.n	800a3de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	807b      	strh	r3, [r7, #2]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3fc:	787b      	ldrb	r3, [r7, #1]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a402:	887a      	ldrh	r2, [r7, #2]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a408:	e002      	b.n	800a410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a40a:	887a      	ldrh	r2, [r7, #2]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4013      	ands	r3, r2
 800a434:	041a      	lsls	r2, r3, #16
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	43d9      	mvns	r1, r3
 800a43a:	887b      	ldrh	r3, [r7, #2]
 800a43c:	400b      	ands	r3, r1
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	619a      	str	r2, [r3, #24]
}
 800a444:	bf00      	nop
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e08d      	b.n	800a57e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe fbfa 	bl	8008c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2224      	movs	r2, #36	@ 0x24
 800a480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a4a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d107      	bne.n	800a4ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689a      	ldr	r2, [r3, #8]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4c6:	609a      	str	r2, [r3, #8]
 800a4c8:	e006      	b.n	800a4d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a4d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d108      	bne.n	800a4f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4ee:	605a      	str	r2, [r3, #4]
 800a4f0:	e007      	b.n	800a502 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	6812      	ldr	r2, [r2, #0]
 800a50c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691a      	ldr	r2, [r3, #16]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69d9      	ldr	r1, [r3, #28]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	461a      	mov	r2, r3
 800a594:	460b      	mov	r3, r1
 800a596:	817b      	strh	r3, [r7, #10]
 800a598:	4613      	mov	r3, r2
 800a59a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	f040 80fd 	bne.w	800a7a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_I2C_Master_Transmit+0x30>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e0f6      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a5c0:	f7fe fe16 	bl	80091f0 <HAL_GetTick>
 800a5c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2319      	movs	r3, #25
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fa0a 	bl	800a9ec <I2C_WaitOnFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e0e1      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2221      	movs	r2, #33	@ 0x21
 800a5e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	893a      	ldrh	r2, [r7, #8]
 800a602:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2bff      	cmp	r3, #255	@ 0xff
 800a612:	d906      	bls.n	800a622 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	22ff      	movs	r2, #255	@ 0xff
 800a618:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a61a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e007      	b.n	800a632 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a626:	b29a      	uxth	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a62c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a630:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a636:	2b00      	cmp	r3, #0
 800a638:	d024      	beq.n	800a684 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a654:	b29b      	uxth	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a662:	3b01      	subs	r3, #1
 800a664:	b29a      	uxth	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	3301      	adds	r3, #1
 800a672:	b2da      	uxtb	r2, r3
 800a674:	8979      	ldrh	r1, [r7, #10]
 800a676:	4b4e      	ldr	r3, [pc, #312]	@ (800a7b0 <HAL_I2C_Master_Transmit+0x228>)
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fc05 	bl	800ae8c <I2C_TransferConfig>
 800a682:	e066      	b.n	800a752 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	8979      	ldrh	r1, [r7, #10]
 800a68c:	4b48      	ldr	r3, [pc, #288]	@ (800a7b0 <HAL_I2C_Master_Transmit+0x228>)
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fbfa 	bl	800ae8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a698:	e05b      	b.n	800a752 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	6a39      	ldr	r1, [r7, #32]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f9fd 	bl	800aa9e <I2C_WaitOnTXISFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e07b      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d034      	beq.n	800a752 <HAL_I2C_Master_Transmit+0x1ca>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d130      	bne.n	800a752 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2180      	movs	r1, #128	@ 0x80
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f976 	bl	800a9ec <I2C_WaitOnFlagUntilTimeout>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e04d      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a70e:	b29b      	uxth	r3, r3
 800a710:	2bff      	cmp	r3, #255	@ 0xff
 800a712:	d90e      	bls.n	800a732 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	22ff      	movs	r2, #255	@ 0xff
 800a718:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	8979      	ldrh	r1, [r7, #10]
 800a722:	2300      	movs	r3, #0
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fbae 	bl	800ae8c <I2C_TransferConfig>
 800a730:	e00f      	b.n	800a752 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a736:	b29a      	uxth	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a740:	b2da      	uxtb	r2, r3
 800a742:	8979      	ldrh	r1, [r7, #10]
 800a744:	2300      	movs	r3, #0
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 fb9d 	bl	800ae8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a756:	b29b      	uxth	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d19e      	bne.n	800a69a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	6a39      	ldr	r1, [r7, #32]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f9e3 	bl	800ab2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e01a      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2220      	movs	r2, #32
 800a776:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6859      	ldr	r1, [r3, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b4 <HAL_I2C_Master_Transmit+0x22c>)
 800a784:	400b      	ands	r3, r1
 800a786:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e000      	b.n	800a7a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800a7a4:	2302      	movs	r3, #2
  }
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	80002000 	.word	0x80002000
 800a7b4:	fe00e800 	.word	0xfe00e800

0800a7b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	607a      	str	r2, [r7, #4]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	817b      	strh	r3, [r7, #10]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b20      	cmp	r3, #32
 800a7d6:	f040 80db 	bne.w	800a990 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_I2C_Master_Receive+0x30>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e0d4      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a7f0:	f7fe fcfe 	bl	80091f0 <HAL_GetTick>
 800a7f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	2319      	movs	r3, #25
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 f8f2 	bl	800a9ec <I2C_WaitOnFlagUntilTimeout>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e0bf      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2222      	movs	r2, #34	@ 0x22
 800a816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2210      	movs	r2, #16
 800a81e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	893a      	ldrh	r2, [r7, #8]
 800a832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2bff      	cmp	r3, #255	@ 0xff
 800a842:	d90e      	bls.n	800a862 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	22ff      	movs	r2, #255	@ 0xff
 800a848:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	8979      	ldrh	r1, [r7, #10]
 800a852:	4b52      	ldr	r3, [pc, #328]	@ (800a99c <HAL_I2C_Master_Receive+0x1e4>)
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fb16 	bl	800ae8c <I2C_TransferConfig>
 800a860:	e06d      	b.n	800a93e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a866:	b29a      	uxth	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a870:	b2da      	uxtb	r2, r3
 800a872:	8979      	ldrh	r1, [r7, #10]
 800a874:	4b49      	ldr	r3, [pc, #292]	@ (800a99c <HAL_I2C_Master_Receive+0x1e4>)
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 fb05 	bl	800ae8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a882:	e05c      	b.n	800a93e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	6a39      	ldr	r1, [r7, #32]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f993 	bl	800abb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e07c      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a2:	b2d2      	uxtb	r2, r2
 800a8a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d034      	beq.n	800a93e <HAL_I2C_Master_Receive+0x186>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d130      	bne.n	800a93e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2180      	movs	r1, #128	@ 0x80
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 f880 	bl	800a9ec <I2C_WaitOnFlagUntilTimeout>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e04d      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2bff      	cmp	r3, #255	@ 0xff
 800a8fe:	d90e      	bls.n	800a91e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	22ff      	movs	r2, #255	@ 0xff
 800a904:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	8979      	ldrh	r1, [r7, #10]
 800a90e:	2300      	movs	r3, #0
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fab8 	bl	800ae8c <I2C_TransferConfig>
 800a91c:	e00f      	b.n	800a93e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a922:	b29a      	uxth	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	8979      	ldrh	r1, [r7, #10]
 800a930:	2300      	movs	r3, #0
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 faa7 	bl	800ae8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d19d      	bne.n	800a884 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	6a39      	ldr	r1, [r7, #32]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f8ed 	bl	800ab2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e01a      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2220      	movs	r2, #32
 800a962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6859      	ldr	r1, [r3, #4]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a0 <HAL_I2C_Master_Receive+0x1e8>)
 800a970:	400b      	ands	r3, r1
 800a972:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e000      	b.n	800a992 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	80002400 	.word	0x80002400
 800a9a0:	fe00e800 	.word	0xfe00e800

0800a9a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d103      	bne.n	800a9c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d007      	beq.n	800a9e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	699a      	ldr	r2, [r3, #24]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0201 	orr.w	r2, r2, #1
 800a9de:	619a      	str	r2, [r3, #24]
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9fc:	e03b      	b.n	800aa76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f962 	bl	800accc <I2C_IsErrorOccurred>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e041      	b.n	800aa96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa18:	d02d      	beq.n	800aa76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa1a:	f7fe fbe9 	bl	80091f0 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d302      	bcc.n	800aa30 <I2C_WaitOnFlagUntilTimeout+0x44>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d122      	bne.n	800aa76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	bf0c      	ite	eq
 800aa40:	2301      	moveq	r3, #1
 800aa42:	2300      	movne	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d113      	bne.n	800aa76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa52:	f043 0220 	orr.w	r2, r3, #32
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e00f      	b.n	800aa96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	699a      	ldr	r2, [r3, #24]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	bf0c      	ite	eq
 800aa86:	2301      	moveq	r3, #1
 800aa88:	2300      	movne	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d0b4      	beq.n	800a9fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aaaa:	e033      	b.n	800ab14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f90b 	bl	800accc <I2C_IsErrorOccurred>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e031      	b.n	800ab24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aac6:	d025      	beq.n	800ab14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aac8:	f7fe fb92 	bl	80091f0 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d302      	bcc.n	800aade <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11a      	bne.n	800ab14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d013      	beq.n	800ab14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf0:	f043 0220 	orr.w	r2, r3, #32
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e007      	b.n	800ab24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d1c4      	bne.n	800aaac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab38:	e02f      	b.n	800ab9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f8c4 	bl	800accc <I2C_IsErrorOccurred>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e02d      	b.n	800abaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab4e:	f7fe fb4f 	bl	80091f0 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d302      	bcc.n	800ab64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d11a      	bne.n	800ab9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	d013      	beq.n	800ab9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab76:	f043 0220 	orr.w	r2, r3, #32
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2220      	movs	r2, #32
 800ab82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e007      	b.n	800abaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	f003 0320 	and.w	r3, r3, #32
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d1c8      	bne.n	800ab3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800abc4:	e071      	b.n	800acaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 f87e 	bl	800accc <I2C_IsErrorOccurred>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d13b      	bne.n	800ac60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d138      	bne.n	800ac60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d105      	bne.n	800ac08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f003 0310 	and.w	r3, r3, #16
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d121      	bne.n	800ac5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2210      	movs	r2, #16
 800ac1c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2204      	movs	r2, #4
 800ac22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6859      	ldr	r1, [r3, #4]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	4b24      	ldr	r3, [pc, #144]	@ (800acc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ac38:	400b      	ands	r3, r1
 800ac3a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	75fb      	strb	r3, [r7, #23]
 800ac58:	e002      	b.n	800ac60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ac60:	f7fe fac6 	bl	80091f0 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d119      	bne.n	800acaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d116      	bne.n	800acaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	f003 0304 	and.w	r3, r3, #4
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d00f      	beq.n	800acaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	f043 0220 	orr.w	r2, r3, #32
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2220      	movs	r2, #32
 800ac9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f003 0304 	and.w	r3, r3, #4
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d002      	beq.n	800acbe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d083      	beq.n	800abc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	fe00e800 	.word	0xfe00e800

0800accc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	@ 0x28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	f003 0310 	and.w	r3, r3, #16
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d068      	beq.n	800adca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2210      	movs	r2, #16
 800acfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad00:	e049      	b.n	800ad96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad08:	d045      	beq.n	800ad96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad0a:	f7fe fa71 	bl	80091f0 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <I2C_IsErrorOccurred+0x54>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d13a      	bne.n	800ad96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad42:	d121      	bne.n	800ad88 <I2C_IsErrorOccurred+0xbc>
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad4a:	d01d      	beq.n	800ad88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ad4c:	7cfb      	ldrb	r3, [r7, #19]
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	d01a      	beq.n	800ad88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ad62:	f7fe fa45 	bl	80091f0 <HAL_GetTick>
 800ad66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad68:	e00e      	b.n	800ad88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad6a:	f7fe fa41 	bl	80091f0 <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	2b19      	cmp	r3, #25
 800ad76:	d907      	bls.n	800ad88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f043 0320 	orr.w	r3, r3, #32
 800ad7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ad86:	e006      	b.n	800ad96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f003 0320 	and.w	r3, r3, #32
 800ad92:	2b20      	cmp	r3, #32
 800ad94:	d1e9      	bne.n	800ad6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b20      	cmp	r3, #32
 800ada2:	d003      	beq.n	800adac <I2C_IsErrorOccurred+0xe0>
 800ada4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0aa      	beq.n	800ad02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800adac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d103      	bne.n	800adbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2220      	movs	r2, #32
 800adba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	f043 0304 	orr.w	r3, r3, #4
 800adc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800adec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	f043 0308 	orr.w	r3, r3, #8
 800ae04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ae0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	f043 0302 	orr.w	r3, r3, #2
 800ae26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ae38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01c      	beq.n	800ae7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff fdaf 	bl	800a9a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6859      	ldr	r1, [r3, #4]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	4b0d      	ldr	r3, [pc, #52]	@ (800ae88 <I2C_IsErrorOccurred+0x1bc>)
 800ae52:	400b      	ands	r3, r1
 800ae54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ae7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3728      	adds	r7, #40	@ 0x28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	fe00e800 	.word	0xfe00e800

0800ae8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	607b      	str	r3, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	817b      	strh	r3, [r7, #10]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae9e:	897b      	ldrh	r3, [r7, #10]
 800aea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aea4:	7a7b      	ldrb	r3, [r7, #9]
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aeac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aeba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	0d5b      	lsrs	r3, r3, #21
 800aec6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aeca:	4b08      	ldr	r3, [pc, #32]	@ (800aeec <I2C_TransferConfig+0x60>)
 800aecc:	430b      	orrs	r3, r1
 800aece:	43db      	mvns	r3, r3
 800aed0:	ea02 0103 	and.w	r1, r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	03ff63ff 	.word	0x03ff63ff

0800aef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b20      	cmp	r3, #32
 800af04:	d138      	bne.n	800af78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800af10:	2302      	movs	r3, #2
 800af12:	e032      	b.n	800af7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2224      	movs	r2, #36	@ 0x24
 800af20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0201 	bic.w	r2, r2, #1
 800af32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800af42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6819      	ldr	r1, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f042 0201 	orr.w	r2, r2, #1
 800af62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	e000      	b.n	800af7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af78:	2302      	movs	r3, #2
  }
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b20      	cmp	r3, #32
 800af9a:	d139      	bne.n	800b010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800afa6:	2302      	movs	r3, #2
 800afa8:	e033      	b.n	800b012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2224      	movs	r2, #36	@ 0x24
 800afb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0201 	bic.w	r2, r2, #1
 800afc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800afd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	021b      	lsls	r3, r3, #8
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f042 0201 	orr.w	r2, r2, #1
 800affa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2220      	movs	r2, #32
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e000      	b.n	800b012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b010:	2302      	movs	r3, #2
  }
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d141      	bne.n	800b0b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b02e:	4b4b      	ldr	r3, [pc, #300]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b03a:	d131      	bne.n	800b0a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b03c:	4b47      	ldr	r3, [pc, #284]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b042:	4a46      	ldr	r2, [pc, #280]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b04c:	4b43      	ldr	r3, [pc, #268]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b054:	4a41      	ldr	r2, [pc, #260]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b05a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b05c:	4b40      	ldr	r3, [pc, #256]	@ (800b160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2232      	movs	r2, #50	@ 0x32
 800b062:	fb02 f303 	mul.w	r3, r2, r3
 800b066:	4a3f      	ldr	r2, [pc, #252]	@ (800b164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b068:	fba2 2303 	umull	r2, r3, r2, r3
 800b06c:	0c9b      	lsrs	r3, r3, #18
 800b06e:	3301      	adds	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b072:	e002      	b.n	800b07a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3b01      	subs	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b07a:	4b38      	ldr	r3, [pc, #224]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b086:	d102      	bne.n	800b08e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f2      	bne.n	800b074 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b08e:	4b33      	ldr	r3, [pc, #204]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09a:	d158      	bne.n	800b14e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e057      	b.n	800b150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0a0:	4b2e      	ldr	r3, [pc, #184]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0a6:	4a2d      	ldr	r2, [pc, #180]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b0b0:	e04d      	b.n	800b14e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0b8:	d141      	bne.n	800b13e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0ba:	4b28      	ldr	r3, [pc, #160]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b0c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0c6:	d131      	bne.n	800b12c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0c8:	4b24      	ldr	r3, [pc, #144]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ce:	4a23      	ldr	r2, [pc, #140]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0d8:	4b20      	ldr	r3, [pc, #128]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b0e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2232      	movs	r2, #50	@ 0x32
 800b0ee:	fb02 f303 	mul.w	r3, r2, r3
 800b0f2:	4a1c      	ldr	r2, [pc, #112]	@ (800b164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f8:	0c9b      	lsrs	r3, r3, #18
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0fe:	e002      	b.n	800b106 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3b01      	subs	r3, #1
 800b104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b106:	4b15      	ldr	r3, [pc, #84]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b10e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b112:	d102      	bne.n	800b11a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f2      	bne.n	800b100 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b11a:	4b10      	ldr	r3, [pc, #64]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b126:	d112      	bne.n	800b14e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e011      	b.n	800b150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b12c:	4b0b      	ldr	r3, [pc, #44]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b132:	4a0a      	ldr	r2, [pc, #40]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b13c:	e007      	b.n	800b14e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b13e:	4b07      	ldr	r3, [pc, #28]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b146:	4a05      	ldr	r2, [pc, #20]	@ (800b15c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b14c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40007000 	.word	0x40007000
 800b160:	20000000 	.word	0x20000000
 800b164:	431bde83 	.word	0x431bde83

0800b168 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b16c:	4b05      	ldr	r3, [pc, #20]	@ (800b184 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	4a04      	ldr	r2, [pc, #16]	@ (800b184 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b176:	6093      	str	r3, [r2, #8]
}
 800b178:	bf00      	nop
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	40007000 	.word	0x40007000

0800b188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e2fe      	b.n	800b798 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d075      	beq.n	800b292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1a6:	4b97      	ldr	r3, [pc, #604]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 030c 	and.w	r3, r3, #12
 800b1ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1b0:	4b94      	ldr	r3, [pc, #592]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b0c      	cmp	r3, #12
 800b1be:	d102      	bne.n	800b1c6 <HAL_RCC_OscConfig+0x3e>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d002      	beq.n	800b1cc <HAL_RCC_OscConfig+0x44>
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d10b      	bne.n	800b1e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1cc:	4b8d      	ldr	r3, [pc, #564]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05b      	beq.n	800b290 <HAL_RCC_OscConfig+0x108>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d157      	bne.n	800b290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e2d9      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1ec:	d106      	bne.n	800b1fc <HAL_RCC_OscConfig+0x74>
 800b1ee:	4b85      	ldr	r3, [pc, #532]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a84      	ldr	r2, [pc, #528]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b1f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	e01d      	b.n	800b238 <HAL_RCC_OscConfig+0xb0>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b204:	d10c      	bne.n	800b220 <HAL_RCC_OscConfig+0x98>
 800b206:	4b7f      	ldr	r3, [pc, #508]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a7e      	ldr	r2, [pc, #504]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b20c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	4b7c      	ldr	r3, [pc, #496]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a7b      	ldr	r2, [pc, #492]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	e00b      	b.n	800b238 <HAL_RCC_OscConfig+0xb0>
 800b220:	4b78      	ldr	r3, [pc, #480]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a77      	ldr	r2, [pc, #476]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	4b75      	ldr	r3, [pc, #468]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a74      	ldr	r2, [pc, #464]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d013      	beq.n	800b268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b240:	f7fd ffd6 	bl	80091f0 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b248:	f7fd ffd2 	bl	80091f0 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b64      	cmp	r3, #100	@ 0x64
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e29e      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b25a:	4b6a      	ldr	r3, [pc, #424]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f0      	beq.n	800b248 <HAL_RCC_OscConfig+0xc0>
 800b266:	e014      	b.n	800b292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b268:	f7fd ffc2 	bl	80091f0 <HAL_GetTick>
 800b26c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b26e:	e008      	b.n	800b282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b270:	f7fd ffbe 	bl	80091f0 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b64      	cmp	r3, #100	@ 0x64
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e28a      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b282:	4b60      	ldr	r3, [pc, #384]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f0      	bne.n	800b270 <HAL_RCC_OscConfig+0xe8>
 800b28e:	e000      	b.n	800b292 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d075      	beq.n	800b38a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b29e:	4b59      	ldr	r3, [pc, #356]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 030c 	and.w	r3, r3, #12
 800b2a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2a8:	4b56      	ldr	r3, [pc, #344]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b0c      	cmp	r3, #12
 800b2b6:	d102      	bne.n	800b2be <HAL_RCC_OscConfig+0x136>
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d002      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x13c>
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d11f      	bne.n	800b304 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2c4:	4b4f      	ldr	r3, [pc, #316]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <HAL_RCC_OscConfig+0x154>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e25d      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2dc:	4b49      	ldr	r3, [pc, #292]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	061b      	lsls	r3, r3, #24
 800b2ea:	4946      	ldr	r1, [pc, #280]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b2f0:	4b45      	ldr	r3, [pc, #276]	@ (800b408 <HAL_RCC_OscConfig+0x280>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fd ff2f 	bl	8009158 <HAL_InitTick>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d043      	beq.n	800b388 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e249      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d023      	beq.n	800b354 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b30c:	4b3d      	ldr	r3, [pc, #244]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a3c      	ldr	r2, [pc, #240]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b318:	f7fd ff6a 	bl	80091f0 <HAL_GetTick>
 800b31c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b31e:	e008      	b.n	800b332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b320:	f7fd ff66 	bl	80091f0 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e232      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b332:	4b34      	ldr	r3, [pc, #208]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f0      	beq.n	800b320 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b33e:	4b31      	ldr	r3, [pc, #196]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	061b      	lsls	r3, r3, #24
 800b34c:	492d      	ldr	r1, [pc, #180]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	604b      	str	r3, [r1, #4]
 800b352:	e01a      	b.n	800b38a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b354:	4b2b      	ldr	r3, [pc, #172]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a2a      	ldr	r2, [pc, #168]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b35a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b35e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7fd ff46 	bl	80091f0 <HAL_GetTick>
 800b364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b366:	e008      	b.n	800b37a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b368:	f7fd ff42 	bl	80091f0 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	2b02      	cmp	r3, #2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e20e      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b37a:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f0      	bne.n	800b368 <HAL_RCC_OscConfig+0x1e0>
 800b386:	e000      	b.n	800b38a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d041      	beq.n	800b41a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d01c      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b39e:	4b19      	ldr	r3, [pc, #100]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3a4:	4a17      	ldr	r2, [pc, #92]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b3a6:	f043 0301 	orr.w	r3, r3, #1
 800b3aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ae:	f7fd ff1f 	bl	80091f0 <HAL_GetTick>
 800b3b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3b4:	e008      	b.n	800b3c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3b6:	f7fd ff1b 	bl	80091f0 <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d901      	bls.n	800b3c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e1e7      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b3ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0ef      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x22e>
 800b3d6:	e020      	b.n	800b41a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3de:	4a09      	ldr	r2, [pc, #36]	@ (800b404 <HAL_RCC_OscConfig+0x27c>)
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e8:	f7fd ff02 	bl	80091f0 <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b3ee:	e00d      	b.n	800b40c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3f0:	f7fd fefe 	bl	80091f0 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d906      	bls.n	800b40c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e1ca      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
 800b402:	bf00      	nop
 800b404:	40021000 	.word	0x40021000
 800b408:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b40c:	4b8c      	ldr	r3, [pc, #560]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1ea      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a6 	beq.w	800b574 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b428:	2300      	movs	r3, #0
 800b42a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b42c:	4b84      	ldr	r3, [pc, #528]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b42e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <HAL_RCC_OscConfig+0x2b4>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <HAL_RCC_OscConfig+0x2b6>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00d      	beq.n	800b45e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b442:	4b7f      	ldr	r3, [pc, #508]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b446:	4a7e      	ldr	r2, [pc, #504]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b44c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b44e:	4b7c      	ldr	r3, [pc, #496]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b45a:	2301      	movs	r3, #1
 800b45c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b45e:	4b79      	ldr	r3, [pc, #484]	@ (800b644 <HAL_RCC_OscConfig+0x4bc>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d118      	bne.n	800b49c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b46a:	4b76      	ldr	r3, [pc, #472]	@ (800b644 <HAL_RCC_OscConfig+0x4bc>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a75      	ldr	r2, [pc, #468]	@ (800b644 <HAL_RCC_OscConfig+0x4bc>)
 800b470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b476:	f7fd febb 	bl	80091f0 <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b47c:	e008      	b.n	800b490 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b47e:	f7fd feb7 	bl	80091f0 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d901      	bls.n	800b490 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e183      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b490:	4b6c      	ldr	r3, [pc, #432]	@ (800b644 <HAL_RCC_OscConfig+0x4bc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d108      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x32e>
 800b4a4:	4b66      	ldr	r3, [pc, #408]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4aa:	4a65      	ldr	r2, [pc, #404]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4ac:	f043 0301 	orr.w	r3, r3, #1
 800b4b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4b4:	e024      	b.n	800b500 <HAL_RCC_OscConfig+0x378>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	2b05      	cmp	r3, #5
 800b4bc:	d110      	bne.n	800b4e0 <HAL_RCC_OscConfig+0x358>
 800b4be:	4b60      	ldr	r3, [pc, #384]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4c4:	4a5e      	ldr	r2, [pc, #376]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4c6:	f043 0304 	orr.w	r3, r3, #4
 800b4ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4ce:	4b5c      	ldr	r3, [pc, #368]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4d4:	4a5a      	ldr	r2, [pc, #360]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4d6:	f043 0301 	orr.w	r3, r3, #1
 800b4da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4de:	e00f      	b.n	800b500 <HAL_RCC_OscConfig+0x378>
 800b4e0:	4b57      	ldr	r3, [pc, #348]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e6:	4a56      	ldr	r2, [pc, #344]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4f0:	4b53      	ldr	r3, [pc, #332]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4f6:	4a52      	ldr	r2, [pc, #328]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b4f8:	f023 0304 	bic.w	r3, r3, #4
 800b4fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d016      	beq.n	800b536 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b508:	f7fd fe72 	bl	80091f0 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b50e:	e00a      	b.n	800b526 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b510:	f7fd fe6e 	bl	80091f0 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b51e:	4293      	cmp	r3, r2
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e138      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b526:	4b46      	ldr	r3, [pc, #280]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0ed      	beq.n	800b510 <HAL_RCC_OscConfig+0x388>
 800b534:	e015      	b.n	800b562 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b536:	f7fd fe5b 	bl	80091f0 <HAL_GetTick>
 800b53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b53c:	e00a      	b.n	800b554 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b53e:	f7fd fe57 	bl	80091f0 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d901      	bls.n	800b554 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e121      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b554:	4b3a      	ldr	r3, [pc, #232]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1ed      	bne.n	800b53e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d105      	bne.n	800b574 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b568:	4b35      	ldr	r3, [pc, #212]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b56c:	4a34      	ldr	r2, [pc, #208]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b56e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b572:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0320 	and.w	r3, r3, #32
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d03c      	beq.n	800b5fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01c      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b588:	4b2d      	ldr	r3, [pc, #180]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b58a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b58e:	4a2c      	ldr	r2, [pc, #176]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b590:	f043 0301 	orr.w	r3, r3, #1
 800b594:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b598:	f7fd fe2a 	bl	80091f0 <HAL_GetTick>
 800b59c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b59e:	e008      	b.n	800b5b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5a0:	f7fd fe26 	bl	80091f0 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d901      	bls.n	800b5b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e0f2      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5b2:	4b23      	ldr	r3, [pc, #140]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b5b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0ef      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x418>
 800b5c0:	e01b      	b.n	800b5fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b5c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b5c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b5ca:	f023 0301 	bic.w	r3, r3, #1
 800b5ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d2:	f7fd fe0d 	bl	80091f0 <HAL_GetTick>
 800b5d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5d8:	e008      	b.n	800b5ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5da:	f7fd fe09 	bl	80091f0 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d901      	bls.n	800b5ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e0d5      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5ec:	4b14      	ldr	r3, [pc, #80]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b5ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1ef      	bne.n	800b5da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80c9 	beq.w	800b796 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b604:	4b0e      	ldr	r3, [pc, #56]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f003 030c 	and.w	r3, r3, #12
 800b60c:	2b0c      	cmp	r3, #12
 800b60e:	f000 8083 	beq.w	800b718 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d15e      	bne.n	800b6d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b61a:	4b09      	ldr	r3, [pc, #36]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a08      	ldr	r2, [pc, #32]	@ (800b640 <HAL_RCC_OscConfig+0x4b8>)
 800b620:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b626:	f7fd fde3 	bl	80091f0 <HAL_GetTick>
 800b62a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b62c:	e00c      	b.n	800b648 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b62e:	f7fd fddf 	bl	80091f0 <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d905      	bls.n	800b648 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e0ab      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
 800b640:	40021000 	.word	0x40021000
 800b644:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b648:	4b55      	ldr	r3, [pc, #340]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1ec      	bne.n	800b62e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b654:	4b52      	ldr	r3, [pc, #328]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b656:	68da      	ldr	r2, [r3, #12]
 800b658:	4b52      	ldr	r3, [pc, #328]	@ (800b7a4 <HAL_RCC_OscConfig+0x61c>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	6a11      	ldr	r1, [r2, #32]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b664:	3a01      	subs	r2, #1
 800b666:	0112      	lsls	r2, r2, #4
 800b668:	4311      	orrs	r1, r2
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b66e:	0212      	lsls	r2, r2, #8
 800b670:	4311      	orrs	r1, r2
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b676:	0852      	lsrs	r2, r2, #1
 800b678:	3a01      	subs	r2, #1
 800b67a:	0552      	lsls	r2, r2, #21
 800b67c:	4311      	orrs	r1, r2
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b682:	0852      	lsrs	r2, r2, #1
 800b684:	3a01      	subs	r2, #1
 800b686:	0652      	lsls	r2, r2, #25
 800b688:	4311      	orrs	r1, r2
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b68e:	06d2      	lsls	r2, r2, #27
 800b690:	430a      	orrs	r2, r1
 800b692:	4943      	ldr	r1, [pc, #268]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b694:	4313      	orrs	r3, r2
 800b696:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b698:	4b41      	ldr	r3, [pc, #260]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a40      	ldr	r2, [pc, #256]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b69e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	4a3d      	ldr	r2, [pc, #244]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b6aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b0:	f7fd fd9e 	bl	80091f0 <HAL_GetTick>
 800b6b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6b6:	e008      	b.n	800b6ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6b8:	f7fd fd9a 	bl	80091f0 <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d901      	bls.n	800b6ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e066      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6ca:	4b35      	ldr	r3, [pc, #212]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f0      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x530>
 800b6d6:	e05e      	b.n	800b796 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6d8:	4b31      	ldr	r3, [pc, #196]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a30      	ldr	r2, [pc, #192]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b6de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e4:	f7fd fd84 	bl	80091f0 <HAL_GetTick>
 800b6e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6ea:	e008      	b.n	800b6fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6ec:	f7fd fd80 	bl	80091f0 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d901      	bls.n	800b6fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e04c      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6fe:	4b28      	ldr	r3, [pc, #160]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f0      	bne.n	800b6ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b70a:	4b25      	ldr	r3, [pc, #148]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	4924      	ldr	r1, [pc, #144]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b710:	4b25      	ldr	r3, [pc, #148]	@ (800b7a8 <HAL_RCC_OscConfig+0x620>)
 800b712:	4013      	ands	r3, r2
 800b714:	60cb      	str	r3, [r1, #12]
 800b716:	e03e      	b.n	800b796 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e039      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b724:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a0 <HAL_RCC_OscConfig+0x618>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f003 0203 	and.w	r2, r3, #3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	429a      	cmp	r2, r3
 800b736:	d12c      	bne.n	800b792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b742:	3b01      	subs	r3, #1
 800b744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b746:	429a      	cmp	r2, r3
 800b748:	d123      	bne.n	800b792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b754:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b756:	429a      	cmp	r2, r3
 800b758:	d11b      	bne.n	800b792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b764:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b766:	429a      	cmp	r2, r3
 800b768:	d113      	bne.n	800b792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b774:	085b      	lsrs	r3, r3, #1
 800b776:	3b01      	subs	r3, #1
 800b778:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d109      	bne.n	800b792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b788:	085b      	lsrs	r3, r3, #1
 800b78a:	3b01      	subs	r3, #1
 800b78c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b78e:	429a      	cmp	r2, r3
 800b790:	d001      	beq.n	800b796 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e000      	b.n	800b798 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	40021000 	.word	0x40021000
 800b7a4:	019f800c 	.word	0x019f800c
 800b7a8:	feeefffc 	.word	0xfeeefffc

0800b7ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e11e      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7c4:	4b91      	ldr	r3, [pc, #580]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d910      	bls.n	800b7f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7d2:	4b8e      	ldr	r3, [pc, #568]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f023 020f 	bic.w	r2, r3, #15
 800b7da:	498c      	ldr	r1, [pc, #560]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7e2:	4b8a      	ldr	r3, [pc, #552]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d001      	beq.n	800b7f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e106      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d073      	beq.n	800b8e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	2b03      	cmp	r3, #3
 800b806:	d129      	bne.n	800b85c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b808:	4b81      	ldr	r3, [pc, #516]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e0f4      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b818:	f000 f99e 	bl	800bb58 <RCC_GetSysClockFreqFromPLLSource>
 800b81c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	4a7c      	ldr	r2, [pc, #496]	@ (800ba14 <HAL_RCC_ClockConfig+0x268>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d93f      	bls.n	800b8a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b826:	4b7a      	ldr	r3, [pc, #488]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d033      	beq.n	800b8a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b842:	2b00      	cmp	r3, #0
 800b844:	d12f      	bne.n	800b8a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b846:	4b72      	ldr	r3, [pc, #456]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b84e:	4a70      	ldr	r2, [pc, #448]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b854:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b856:	2380      	movs	r3, #128	@ 0x80
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	e024      	b.n	800b8a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	2b02      	cmp	r3, #2
 800b862:	d107      	bne.n	800b874 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b864:	4b6a      	ldr	r3, [pc, #424]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d109      	bne.n	800b884 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e0c6      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b874:	4b66      	ldr	r3, [pc, #408]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e0be      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b884:	f000 f8ce 	bl	800ba24 <HAL_RCC_GetSysClockFreq>
 800b888:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	4a61      	ldr	r2, [pc, #388]	@ (800ba14 <HAL_RCC_ClockConfig+0x268>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d909      	bls.n	800b8a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b892:	4b5f      	ldr	r3, [pc, #380]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b89a:	4a5d      	ldr	r2, [pc, #372]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b89c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b8a2:	2380      	movs	r3, #128	@ 0x80
 800b8a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8a6:	4b5a      	ldr	r3, [pc, #360]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f023 0203 	bic.w	r2, r3, #3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	4957      	ldr	r1, [pc, #348]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8b8:	f7fd fc9a 	bl	80091f0 <HAL_GetTick>
 800b8bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8be:	e00a      	b.n	800b8d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8c0:	f7fd fc96 	bl	80091f0 <HAL_GetTick>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d901      	bls.n	800b8d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e095      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8d6:	4b4e      	ldr	r3, [pc, #312]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 020c 	and.w	r2, r3, #12
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d1eb      	bne.n	800b8c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d023      	beq.n	800b93c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d005      	beq.n	800b90c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b900:	4b43      	ldr	r3, [pc, #268]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	4a42      	ldr	r2, [pc, #264]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b90a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0308 	and.w	r3, r3, #8
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b918:	4b3d      	ldr	r3, [pc, #244]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b920:	4a3b      	ldr	r2, [pc, #236]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b926:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b928:	4b39      	ldr	r3, [pc, #228]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	4936      	ldr	r1, [pc, #216]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b936:	4313      	orrs	r3, r2
 800b938:	608b      	str	r3, [r1, #8]
 800b93a:	e008      	b.n	800b94e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	2b80      	cmp	r3, #128	@ 0x80
 800b940:	d105      	bne.n	800b94e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b942:	4b33      	ldr	r3, [pc, #204]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	4a32      	ldr	r2, [pc, #200]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b948:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b94c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b94e:	4b2f      	ldr	r3, [pc, #188]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 030f 	and.w	r3, r3, #15
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d21d      	bcs.n	800b998 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b95c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f023 020f 	bic.w	r2, r3, #15
 800b964:	4929      	ldr	r1, [pc, #164]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	4313      	orrs	r3, r2
 800b96a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b96c:	f7fd fc40 	bl	80091f0 <HAL_GetTick>
 800b970:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b972:	e00a      	b.n	800b98a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b974:	f7fd fc3c 	bl	80091f0 <HAL_GetTick>
 800b978:	4602      	mov	r2, r0
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b982:	4293      	cmp	r3, r2
 800b984:	d901      	bls.n	800b98a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e03b      	b.n	800ba02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b98a:	4b20      	ldr	r3, [pc, #128]	@ (800ba0c <HAL_RCC_ClockConfig+0x260>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d1ed      	bne.n	800b974 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d008      	beq.n	800b9b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9a4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	4917      	ldr	r1, [pc, #92]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	490f      	ldr	r1, [pc, #60]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b9d6:	f000 f825 	bl	800ba24 <HAL_RCC_GetSysClockFreq>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	@ (800ba10 <HAL_RCC_ClockConfig+0x264>)
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	091b      	lsrs	r3, r3, #4
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	490c      	ldr	r1, [pc, #48]	@ (800ba18 <HAL_RCC_ClockConfig+0x26c>)
 800b9e8:	5ccb      	ldrb	r3, [r1, r3]
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f2:	4a0a      	ldr	r2, [pc, #40]	@ (800ba1c <HAL_RCC_ClockConfig+0x270>)
 800b9f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba20 <HAL_RCC_ClockConfig+0x274>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fd fbac 	bl	8009158 <HAL_InitTick>
 800ba00:	4603      	mov	r3, r0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	40022000 	.word	0x40022000
 800ba10:	40021000 	.word	0x40021000
 800ba14:	04c4b400 	.word	0x04c4b400
 800ba18:	0800f7ac 	.word	0x0800f7ac
 800ba1c:	20000000 	.word	0x20000000
 800ba20:	20000004 	.word	0x20000004

0800ba24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b087      	sub	sp, #28
 800ba28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba2a:	4b2c      	ldr	r3, [pc, #176]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f003 030c 	and.w	r3, r3, #12
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d102      	bne.n	800ba3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba36:	4b2a      	ldr	r3, [pc, #168]	@ (800bae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba38:	613b      	str	r3, [r7, #16]
 800ba3a:	e047      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba3c:	4b27      	ldr	r3, [pc, #156]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f003 030c 	and.w	r3, r3, #12
 800ba44:	2b08      	cmp	r3, #8
 800ba46:	d102      	bne.n	800ba4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba48:	4b26      	ldr	r3, [pc, #152]	@ (800bae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	e03e      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ba4e:	4b23      	ldr	r3, [pc, #140]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f003 030c 	and.w	r3, r3, #12
 800ba56:	2b0c      	cmp	r3, #12
 800ba58:	d136      	bne.n	800bac8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba5a:	4b20      	ldr	r3, [pc, #128]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f003 0303 	and.w	r3, r3, #3
 800ba62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba64:	4b1d      	ldr	r3, [pc, #116]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	091b      	lsrs	r3, r3, #4
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d10c      	bne.n	800ba92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba78:	4a1a      	ldr	r2, [pc, #104]	@ (800bae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba80:	4a16      	ldr	r2, [pc, #88]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba82:	68d2      	ldr	r2, [r2, #12]
 800ba84:	0a12      	lsrs	r2, r2, #8
 800ba86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba8a:	fb02 f303 	mul.w	r3, r2, r3
 800ba8e:	617b      	str	r3, [r7, #20]
      break;
 800ba90:	e00c      	b.n	800baac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba92:	4a13      	ldr	r2, [pc, #76]	@ (800bae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9a:	4a10      	ldr	r2, [pc, #64]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba9c:	68d2      	ldr	r2, [r2, #12]
 800ba9e:	0a12      	lsrs	r2, r2, #8
 800baa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800baa4:	fb02 f303 	mul.w	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
      break;
 800baaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baac:	4b0b      	ldr	r3, [pc, #44]	@ (800badc <HAL_RCC_GetSysClockFreq+0xb8>)
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	0e5b      	lsrs	r3, r3, #25
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	3301      	adds	r3, #1
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	e001      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bacc:	693b      	ldr	r3, [r7, #16]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	40021000 	.word	0x40021000
 800bae0:	00f42400 	.word	0x00f42400
 800bae4:	007a1200 	.word	0x007a1200

0800bae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800baec:	4b03      	ldr	r3, [pc, #12]	@ (800bafc <HAL_RCC_GetHCLKFreq+0x14>)
 800baee:	681b      	ldr	r3, [r3, #0]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	20000000 	.word	0x20000000

0800bb00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bb04:	f7ff fff0 	bl	800bae8 <HAL_RCC_GetHCLKFreq>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	4b06      	ldr	r3, [pc, #24]	@ (800bb24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	0a1b      	lsrs	r3, r3, #8
 800bb10:	f003 0307 	and.w	r3, r3, #7
 800bb14:	4904      	ldr	r1, [pc, #16]	@ (800bb28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb16:	5ccb      	ldrb	r3, [r1, r3]
 800bb18:	f003 031f 	and.w	r3, r3, #31
 800bb1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40021000 	.word	0x40021000
 800bb28:	0800f7bc 	.word	0x0800f7bc

0800bb2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bb30:	f7ff ffda 	bl	800bae8 <HAL_RCC_GetHCLKFreq>
 800bb34:	4602      	mov	r2, r0
 800bb36:	4b06      	ldr	r3, [pc, #24]	@ (800bb50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	0adb      	lsrs	r3, r3, #11
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	4904      	ldr	r1, [pc, #16]	@ (800bb54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb42:	5ccb      	ldrb	r3, [r1, r3]
 800bb44:	f003 031f 	and.w	r3, r3, #31
 800bb48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	40021000 	.word	0x40021000
 800bb54:	0800f7bc 	.word	0x0800f7bc

0800bb58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	f003 0303 	and.w	r3, r3, #3
 800bb66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb68:	4b1b      	ldr	r3, [pc, #108]	@ (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	091b      	lsrs	r3, r3, #4
 800bb6e:	f003 030f 	and.w	r3, r3, #15
 800bb72:	3301      	adds	r3, #1
 800bb74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d10c      	bne.n	800bb96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb7c:	4a17      	ldr	r2, [pc, #92]	@ (800bbdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb84:	4a14      	ldr	r2, [pc, #80]	@ (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb86:	68d2      	ldr	r2, [r2, #12]
 800bb88:	0a12      	lsrs	r2, r2, #8
 800bb8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bb8e:	fb02 f303 	mul.w	r3, r2, r3
 800bb92:	617b      	str	r3, [r7, #20]
    break;
 800bb94:	e00c      	b.n	800bbb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb96:	4a12      	ldr	r2, [pc, #72]	@ (800bbe0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb9e:	4a0e      	ldr	r2, [pc, #56]	@ (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bba0:	68d2      	ldr	r2, [r2, #12]
 800bba2:	0a12      	lsrs	r2, r2, #8
 800bba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bba8:	fb02 f303 	mul.w	r3, r2, r3
 800bbac:	617b      	str	r3, [r7, #20]
    break;
 800bbae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbb0:	4b09      	ldr	r3, [pc, #36]	@ (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	0e5b      	lsrs	r3, r3, #25
 800bbb6:	f003 0303 	and.w	r3, r3, #3
 800bbba:	3301      	adds	r3, #1
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbca:	687b      	ldr	r3, [r7, #4]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	371c      	adds	r7, #28
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	40021000 	.word	0x40021000
 800bbdc:	007a1200 	.word	0x007a1200
 800bbe0:	00f42400 	.word	0x00f42400

0800bbe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbec:	2300      	movs	r3, #0
 800bbee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 8098 	beq.w	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc02:	2300      	movs	r3, #0
 800bc04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc06:	4b43      	ldr	r3, [pc, #268]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10d      	bne.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc12:	4b40      	ldr	r3, [pc, #256]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc16:	4a3f      	ldr	r2, [pc, #252]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc1e:	4b3d      	ldr	r3, [pc, #244]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc26:	60bb      	str	r3, [r7, #8]
 800bc28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc2e:	4b3a      	ldr	r3, [pc, #232]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a39      	ldr	r2, [pc, #228]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc3a:	f7fd fad9 	bl	80091f0 <HAL_GetTick>
 800bc3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc40:	e009      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc42:	f7fd fad5 	bl	80091f0 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d902      	bls.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	74fb      	strb	r3, [r7, #19]
        break;
 800bc54:	e005      	b.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc56:	4b30      	ldr	r3, [pc, #192]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0ef      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc62:	7cfb      	ldrb	r3, [r7, #19]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d159      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc68:	4b2a      	ldr	r3, [pc, #168]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d01e      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d019      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc84:	4b23      	ldr	r3, [pc, #140]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc90:	4b20      	ldr	r3, [pc, #128]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc96:	4a1f      	ldr	r2, [pc, #124]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bca0:	4b1c      	ldr	r3, [pc, #112]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bca6:	4a1b      	ldr	r2, [pc, #108]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bcb0:	4a18      	ldr	r2, [pc, #96]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d016      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc2:	f7fd fa95 	bl	80091f0 <HAL_GetTick>
 800bcc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcc8:	e00b      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcca:	f7fd fa91 	bl	80091f0 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d902      	bls.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	74fb      	strb	r3, [r7, #19]
            break;
 800bce0:	e006      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bce2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0ec      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bcf0:	7cfb      	ldrb	r3, [r7, #19]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcf6:	4b07      	ldr	r3, [pc, #28]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd04:	4903      	ldr	r1, [pc, #12]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bd0c:	e008      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd0e:	7cfb      	ldrb	r3, [r7, #19]
 800bd10:	74bb      	strb	r3, [r7, #18]
 800bd12:	e005      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd14:	40021000 	.word	0x40021000
 800bd18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1c:	7cfb      	ldrb	r3, [r7, #19]
 800bd1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd20:	7c7b      	ldrb	r3, [r7, #17]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d105      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd26:	4ba6      	ldr	r3, [pc, #664]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd2a:	4aa5      	ldr	r2, [pc, #660]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd3e:	4ba0      	ldr	r3, [pc, #640]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd44:	f023 0203 	bic.w	r2, r3, #3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	499c      	ldr	r1, [pc, #624]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd60:	4b97      	ldr	r3, [pc, #604]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd66:	f023 020c 	bic.w	r2, r3, #12
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	4994      	ldr	r1, [pc, #592]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd82:	4b8f      	ldr	r3, [pc, #572]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	498b      	ldr	r1, [pc, #556]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bda4:	4b86      	ldr	r3, [pc, #536]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	4983      	ldr	r1, [pc, #524]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0320 	and.w	r3, r3, #32
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdc6:	4b7e      	ldr	r3, [pc, #504]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	497a      	ldr	r1, [pc, #488]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bde8:	4b75      	ldr	r3, [pc, #468]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	4972      	ldr	r1, [pc, #456]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be0a:	4b6d      	ldr	r3, [pc, #436]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	4969      	ldr	r1, [pc, #420]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be2c:	4b64      	ldr	r3, [pc, #400]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	4961      	ldr	r1, [pc, #388]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be4e:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5c:	4958      	ldr	r1, [pc, #352]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d015      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be70:	4b53      	ldr	r3, [pc, #332]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7e:	4950      	ldr	r1, [pc, #320]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be8e:	d105      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be90:	4b4b      	ldr	r3, [pc, #300]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	4a4a      	ldr	r2, [pc, #296]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d015      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bea8:	4b45      	ldr	r3, [pc, #276]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800beaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb6:	4942      	ldr	r1, [pc, #264]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bec6:	d105      	bne.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bec8:	4b3d      	ldr	r3, [pc, #244]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	4a3c      	ldr	r2, [pc, #240]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bed2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d015      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bee0:	4b37      	ldr	r3, [pc, #220]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bee6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beee:	4934      	ldr	r1, [pc, #208]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800befe:	d105      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf00:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	4a2e      	ldr	r2, [pc, #184]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d015      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf18:	4b29      	ldr	r3, [pc, #164]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf26:	4926      	ldr	r1, [pc, #152]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf36:	d105      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf38:	4b21      	ldr	r3, [pc, #132]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	4a20      	ldr	r2, [pc, #128]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d015      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf50:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5e:	4918      	ldr	r1, [pc, #96]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf6e:	d105      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf70:	4b13      	ldr	r3, [pc, #76]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	4a12      	ldr	r2, [pc, #72]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d015      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bf88:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf96:	490a      	ldr	r1, [pc, #40]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfa6:	d105      	bne.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfa8:	4b05      	ldr	r3, [pc, #20]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	4a04      	ldr	r2, [pc, #16]	@ (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bfae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bfb4:	7cbb      	ldrb	r3, [r7, #18]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40021000 	.word	0x40021000

0800bfc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e049      	b.n	800c06a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7fc feb6 	bl	8008d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3304      	adds	r3, #4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f000 fb12 	bl	800c62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b01      	cmp	r3, #1
 800c086:	d001      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e04a      	b.n	800c122 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a21      	ldr	r2, [pc, #132]	@ (800c130 <HAL_TIM_Base_Start_IT+0xbc>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d018      	beq.n	800c0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b6:	d013      	beq.n	800c0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c134 <HAL_TIM_Base_Start_IT+0xc0>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d00e      	beq.n	800c0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a1c      	ldr	r2, [pc, #112]	@ (800c138 <HAL_TIM_Base_Start_IT+0xc4>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d009      	beq.n	800c0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800c13c <HAL_TIM_Base_Start_IT+0xc8>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d004      	beq.n	800c0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a19      	ldr	r2, [pc, #100]	@ (800c140 <HAL_TIM_Base_Start_IT+0xcc>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d115      	bne.n	800c10c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689a      	ldr	r2, [r3, #8]
 800c0e6:	4b17      	ldr	r3, [pc, #92]	@ (800c144 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b06      	cmp	r3, #6
 800c0f0:	d015      	beq.n	800c11e <HAL_TIM_Base_Start_IT+0xaa>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0f8:	d011      	beq.n	800c11e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f042 0201 	orr.w	r2, r2, #1
 800c108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c10a:	e008      	b.n	800c11e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	e000      	b.n	800c120 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c11e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	40012c00 	.word	0x40012c00
 800c134:	40000400 	.word	0x40000400
 800c138:	40000800 	.word	0x40000800
 800c13c:	40013400 	.word	0x40013400
 800c140:	40014000 	.word	0x40014000
 800c144:	00010007 	.word	0x00010007

0800c148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f003 0302 	and.w	r3, r3, #2
 800c166:	2b00      	cmp	r3, #0
 800c168:	d020      	beq.n	800c1ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d01b      	beq.n	800c1ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f06f 0202 	mvn.w	r2, #2
 800c17c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	f003 0303 	and.w	r3, r3, #3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa2c 	bl	800c5f0 <HAL_TIM_IC_CaptureCallback>
 800c198:	e005      	b.n	800c1a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fa1e 	bl	800c5dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa2f 	bl	800c604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f003 0304 	and.w	r3, r3, #4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d020      	beq.n	800c1f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f003 0304 	and.w	r3, r3, #4
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01b      	beq.n	800c1f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f06f 0204 	mvn.w	r2, #4
 800c1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fa06 	bl	800c5f0 <HAL_TIM_IC_CaptureCallback>
 800c1e4:	e005      	b.n	800c1f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f9f8 	bl	800c5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fa09 	bl	800c604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f003 0308 	and.w	r3, r3, #8
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d020      	beq.n	800c244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f003 0308 	and.w	r3, r3, #8
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01b      	beq.n	800c244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f06f 0208 	mvn.w	r2, #8
 800c214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2204      	movs	r2, #4
 800c21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f9e0 	bl	800c5f0 <HAL_TIM_IC_CaptureCallback>
 800c230:	e005      	b.n	800c23e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f9d2 	bl	800c5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f9e3 	bl	800c604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f003 0310 	and.w	r3, r3, #16
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d020      	beq.n	800c290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f003 0310 	and.w	r3, r3, #16
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01b      	beq.n	800c290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f06f 0210 	mvn.w	r2, #16
 800c260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2208      	movs	r2, #8
 800c266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f9ba 	bl	800c5f0 <HAL_TIM_IC_CaptureCallback>
 800c27c:	e005      	b.n	800c28a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f9ac 	bl	800c5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f9bd 	bl	800c604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00c      	beq.n	800c2b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d007      	beq.n	800c2b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f06f 0201 	mvn.w	r2, #1
 800c2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7f6 f9c8 	bl	8002644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d104      	bne.n	800c2c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00c      	beq.n	800c2e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d007      	beq.n	800c2e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fb69 	bl	800c9b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00c      	beq.n	800c306 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fb61 	bl	800c9c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00c      	beq.n	800c32a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	d007      	beq.n	800c32a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 f977 	bl	800c618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00c      	beq.n	800c34e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f003 0320 	and.w	r3, r3, #32
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d007      	beq.n	800c34e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f06f 0220 	mvn.w	r2, #32
 800c346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fb29 	bl	800c9a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00c      	beq.n	800c372 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d007      	beq.n	800c372 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800c36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fb35 	bl	800c9dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00c      	beq.n	800c396 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c382:	2b00      	cmp	r3, #0
 800c384:	d007      	beq.n	800c396 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800c38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fb2d 	bl	800c9f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00c      	beq.n	800c3ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d007      	beq.n	800c3ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fb25 	bl	800ca04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00c      	beq.n	800c3de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d007      	beq.n	800c3de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fb1d 	bl	800ca18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d101      	bne.n	800c404 <HAL_TIM_ConfigClockSource+0x1c>
 800c400:	2302      	movs	r3, #2
 800c402:	e0de      	b.n	800c5c2 <HAL_TIM_ConfigClockSource+0x1da>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c42e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a63      	ldr	r2, [pc, #396]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	f000 80a9 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c444:	4a61      	ldr	r2, [pc, #388]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c446:	4293      	cmp	r3, r2
 800c448:	f200 80ae 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c44c:	4a60      	ldr	r2, [pc, #384]	@ (800c5d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	f000 80a1 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c454:	4a5e      	ldr	r2, [pc, #376]	@ (800c5d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c456:	4293      	cmp	r3, r2
 800c458:	f200 80a6 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c45c:	4a5d      	ldr	r2, [pc, #372]	@ (800c5d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	f000 8099 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c464:	4a5b      	ldr	r2, [pc, #364]	@ (800c5d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c466:	4293      	cmp	r3, r2
 800c468:	f200 809e 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c46c:	4a5a      	ldr	r2, [pc, #360]	@ (800c5d8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	f000 8091 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c474:	4a58      	ldr	r2, [pc, #352]	@ (800c5d8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c476:	4293      	cmp	r3, r2
 800c478:	f200 8096 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c47c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c480:	f000 8089 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c484:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c488:	f200 808e 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c48c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c490:	d03e      	beq.n	800c510 <HAL_TIM_ConfigClockSource+0x128>
 800c492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c496:	f200 8087 	bhi.w	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49e:	f000 8086 	beq.w	800c5ae <HAL_TIM_ConfigClockSource+0x1c6>
 800c4a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a6:	d87f      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4a8:	2b70      	cmp	r3, #112	@ 0x70
 800c4aa:	d01a      	beq.n	800c4e2 <HAL_TIM_ConfigClockSource+0xfa>
 800c4ac:	2b70      	cmp	r3, #112	@ 0x70
 800c4ae:	d87b      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4b0:	2b60      	cmp	r3, #96	@ 0x60
 800c4b2:	d050      	beq.n	800c556 <HAL_TIM_ConfigClockSource+0x16e>
 800c4b4:	2b60      	cmp	r3, #96	@ 0x60
 800c4b6:	d877      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4b8:	2b50      	cmp	r3, #80	@ 0x50
 800c4ba:	d03c      	beq.n	800c536 <HAL_TIM_ConfigClockSource+0x14e>
 800c4bc:	2b50      	cmp	r3, #80	@ 0x50
 800c4be:	d873      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4c0:	2b40      	cmp	r3, #64	@ 0x40
 800c4c2:	d058      	beq.n	800c576 <HAL_TIM_ConfigClockSource+0x18e>
 800c4c4:	2b40      	cmp	r3, #64	@ 0x40
 800c4c6:	d86f      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4c8:	2b30      	cmp	r3, #48	@ 0x30
 800c4ca:	d064      	beq.n	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c4cc:	2b30      	cmp	r3, #48	@ 0x30
 800c4ce:	d86b      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	d060      	beq.n	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c4d4:	2b20      	cmp	r3, #32
 800c4d6:	d867      	bhi.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d05c      	beq.n	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c4dc:	2b10      	cmp	r3, #16
 800c4de:	d05a      	beq.n	800c596 <HAL_TIM_ConfigClockSource+0x1ae>
 800c4e0:	e062      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4f2:	f000 f9b3 	bl	800c85c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	609a      	str	r2, [r3, #8]
      break;
 800c50e:	e04f      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c520:	f000 f99c 	bl	800c85c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689a      	ldr	r2, [r3, #8]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c532:	609a      	str	r2, [r3, #8]
      break;
 800c534:	e03c      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c542:	461a      	mov	r2, r3
 800c544:	f000 f90e 	bl	800c764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2150      	movs	r1, #80	@ 0x50
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 f967 	bl	800c822 <TIM_ITRx_SetConfig>
      break;
 800c554:	e02c      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c562:	461a      	mov	r2, r3
 800c564:	f000 f92d 	bl	800c7c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2160      	movs	r1, #96	@ 0x60
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f957 	bl	800c822 <TIM_ITRx_SetConfig>
      break;
 800c574:	e01c      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c582:	461a      	mov	r2, r3
 800c584:	f000 f8ee 	bl	800c764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2140      	movs	r1, #64	@ 0x40
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 f947 	bl	800c822 <TIM_ITRx_SetConfig>
      break;
 800c594:	e00c      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f000 f93e 	bl	800c822 <TIM_ITRx_SetConfig>
      break;
 800c5a6:	e003      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ac:	e000      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800c5ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	00100070 	.word	0x00100070
 800c5d0:	00100040 	.word	0x00100040
 800c5d4:	00100030 	.word	0x00100030
 800c5d8:	00100020 	.word	0x00100020

0800c5dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a42      	ldr	r2, [pc, #264]	@ (800c748 <TIM_Base_SetConfig+0x11c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d00f      	beq.n	800c664 <TIM_Base_SetConfig+0x38>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c64a:	d00b      	beq.n	800c664 <TIM_Base_SetConfig+0x38>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a3f      	ldr	r2, [pc, #252]	@ (800c74c <TIM_Base_SetConfig+0x120>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d007      	beq.n	800c664 <TIM_Base_SetConfig+0x38>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a3e      	ldr	r2, [pc, #248]	@ (800c750 <TIM_Base_SetConfig+0x124>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d003      	beq.n	800c664 <TIM_Base_SetConfig+0x38>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a3d      	ldr	r2, [pc, #244]	@ (800c754 <TIM_Base_SetConfig+0x128>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d108      	bne.n	800c676 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c66a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a33      	ldr	r2, [pc, #204]	@ (800c748 <TIM_Base_SetConfig+0x11c>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d01b      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c684:	d017      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a30      	ldr	r2, [pc, #192]	@ (800c74c <TIM_Base_SetConfig+0x120>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d013      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2f      	ldr	r2, [pc, #188]	@ (800c750 <TIM_Base_SetConfig+0x124>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d00f      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a2e      	ldr	r2, [pc, #184]	@ (800c754 <TIM_Base_SetConfig+0x128>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00b      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c758 <TIM_Base_SetConfig+0x12c>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d007      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a2c      	ldr	r2, [pc, #176]	@ (800c75c <TIM_Base_SetConfig+0x130>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d003      	beq.n	800c6b6 <TIM_Base_SetConfig+0x8a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a2b      	ldr	r2, [pc, #172]	@ (800c760 <TIM_Base_SetConfig+0x134>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d108      	bne.n	800c6c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a16      	ldr	r2, [pc, #88]	@ (800c748 <TIM_Base_SetConfig+0x11c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d00f      	beq.n	800c714 <TIM_Base_SetConfig+0xe8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a17      	ldr	r2, [pc, #92]	@ (800c754 <TIM_Base_SetConfig+0x128>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00b      	beq.n	800c714 <TIM_Base_SetConfig+0xe8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a16      	ldr	r2, [pc, #88]	@ (800c758 <TIM_Base_SetConfig+0x12c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d007      	beq.n	800c714 <TIM_Base_SetConfig+0xe8>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a15      	ldr	r2, [pc, #84]	@ (800c75c <TIM_Base_SetConfig+0x130>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d003      	beq.n	800c714 <TIM_Base_SetConfig+0xe8>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a14      	ldr	r2, [pc, #80]	@ (800c760 <TIM_Base_SetConfig+0x134>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d103      	bne.n	800c71c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	691a      	ldr	r2, [r3, #16]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d105      	bne.n	800c73a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	f023 0201 	bic.w	r2, r3, #1
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	611a      	str	r2, [r3, #16]
  }
}
 800c73a:	bf00      	nop
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	40012c00 	.word	0x40012c00
 800c74c:	40000400 	.word	0x40000400
 800c750:	40000800 	.word	0x40000800
 800c754:	40013400 	.word	0x40013400
 800c758:	40014000 	.word	0x40014000
 800c75c:	40014400 	.word	0x40014400
 800c760:	40014800 	.word	0x40014800

0800c764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f023 0201 	bic.w	r2, r3, #1
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	4313      	orrs	r3, r2
 800c798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f023 030a 	bic.w	r3, r3, #10
 800c7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	621a      	str	r2, [r3, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b087      	sub	sp, #28
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	60f8      	str	r0, [r7, #12]
 800c7ca:	60b9      	str	r1, [r7, #8]
 800c7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	f023 0210 	bic.w	r2, r3, #16
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	031b      	lsls	r3, r3, #12
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	621a      	str	r2, [r3, #32]
}
 800c816:	bf00      	nop
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c822:	b480      	push	{r7}
 800c824:	b085      	sub	sp, #20
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	4313      	orrs	r3, r2
 800c844:	f043 0307 	orr.w	r3, r3, #7
 800c848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	609a      	str	r2, [r3, #8]
}
 800c850:	bf00      	nop
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	021a      	lsls	r2, r3, #8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	431a      	orrs	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4313      	orrs	r3, r2
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	4313      	orrs	r3, r2
 800c888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	609a      	str	r2, [r3, #8]
}
 800c890:	bf00      	nop
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e065      	b.n	800c980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a2c      	ldr	r2, [pc, #176]	@ (800c98c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d004      	beq.n	800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a2b      	ldr	r2, [pc, #172]	@ (800c990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d108      	bne.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c8ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a1b      	ldr	r2, [pc, #108]	@ (800c98c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d018      	beq.n	800c954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c92a:	d013      	beq.n	800c954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a18      	ldr	r2, [pc, #96]	@ (800c994 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d00e      	beq.n	800c954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a17      	ldr	r2, [pc, #92]	@ (800c998 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d009      	beq.n	800c954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a12      	ldr	r2, [pc, #72]	@ (800c990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d004      	beq.n	800c954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a13      	ldr	r2, [pc, #76]	@ (800c99c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d10c      	bne.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c95a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	4313      	orrs	r3, r2
 800c964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	40012c00 	.word	0x40012c00
 800c990:	40013400 	.word	0x40013400
 800c994:	40000400 	.word	0x40000400
 800c998:	40000800 	.word	0x40000800
 800c99c:	40014000 	.word	0x40014000

0800c9a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e042      	b.n	800cac4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d106      	bne.n	800ca56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7fc f9a7 	bl	8008da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2224      	movs	r2, #36	@ 0x24
 800ca5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f022 0201 	bic.w	r2, r2, #1
 800ca6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fca2 	bl	800d3c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f9d3 	bl	800ce28 <UART_SetConfig>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d101      	bne.n	800ca8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e01b      	b.n	800cac4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689a      	ldr	r2, [r3, #8]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800caaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f042 0201 	orr.w	r2, r2, #1
 800caba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fd21 	bl	800d504 <UART_CheckIdleState>
 800cac2:	4603      	mov	r3, r0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e04a      	b.n	800cb74 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d106      	bne.n	800caf6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fc f957 	bl	8008da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2224      	movs	r2, #36	@ 0x24
 800cafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f022 0201 	bic.w	r2, r2, #1
 800cb0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fc52 	bl	800d3c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 f983 	bl	800ce28 <UART_SetConfig>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d101      	bne.n	800cb2c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e023      	b.n	800cb74 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685a      	ldr	r2, [r3, #4]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800cb4a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	689a      	ldr	r2, [r3, #8]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f042 0208 	orr.w	r2, r2, #8
 800cb5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fcc9 	bl	800d504 <UART_CheckIdleState>
 800cb72:	4603      	mov	r3, r0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	@ 0x28
 800cb80:	af02      	add	r7, sp, #8
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	603b      	str	r3, [r7, #0]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb92:	2b20      	cmp	r3, #32
 800cb94:	d17b      	bne.n	800cc8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <HAL_UART_Transmit+0x26>
 800cb9c:	88fb      	ldrh	r3, [r7, #6]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d101      	bne.n	800cba6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e074      	b.n	800cc90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2221      	movs	r2, #33	@ 0x21
 800cbb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbb6:	f7fc fb1b 	bl	80091f0 <HAL_GetTick>
 800cbba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	88fa      	ldrh	r2, [r7, #6]
 800cbc0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	88fa      	ldrh	r2, [r7, #6]
 800cbc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbd4:	d108      	bne.n	800cbe8 <HAL_UART_Transmit+0x6c>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d104      	bne.n	800cbe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	61bb      	str	r3, [r7, #24]
 800cbe6:	e003      	b.n	800cbf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbf0:	e030      	b.n	800cc54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2180      	movs	r1, #128	@ 0x80
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 fd2b 	bl	800d658 <UART_WaitOnFlagUntilTimeout>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e03d      	b.n	800cc90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10b      	bne.n	800cc32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	3302      	adds	r3, #2
 800cc2e:	61bb      	str	r3, [r7, #24]
 800cc30:	e007      	b.n	800cc42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1c8      	bne.n	800cbf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2200      	movs	r2, #0
 800cc68:	2140      	movs	r1, #64	@ 0x40
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f000 fcf4 	bl	800d658 <UART_WaitOnFlagUntilTimeout>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d005      	beq.n	800cc82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e006      	b.n	800cc90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2220      	movs	r2, #32
 800cc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	e000      	b.n	800cc90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cc8e:	2302      	movs	r3, #2
  }
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08a      	sub	sp, #40	@ 0x28
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	4613      	mov	r3, r2
 800cca6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccae:	2b20      	cmp	r3, #32
 800ccb0:	f040 80b5 	bne.w	800ce1e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <HAL_UART_Receive+0x28>
 800ccba:	88fb      	ldrh	r3, [r7, #6]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e0ad      	b.n	800ce20 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2222      	movs	r2, #34	@ 0x22
 800ccd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccda:	f7fc fa89 	bl	80091f0 <HAL_GetTick>
 800ccde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	88fa      	ldrh	r2, [r7, #6]
 800cce4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	88fa      	ldrh	r2, [r7, #6]
 800ccec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccf8:	d10e      	bne.n	800cd18 <HAL_UART_Receive+0x80>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <HAL_UART_Receive+0x76>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cd08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd0c:	e02d      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	22ff      	movs	r2, #255	@ 0xff
 800cd12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd16:	e028      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10d      	bne.n	800cd3c <HAL_UART_Receive+0xa4>
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d104      	bne.n	800cd32 <HAL_UART_Receive+0x9a>
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	22ff      	movs	r2, #255	@ 0xff
 800cd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd30:	e01b      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	227f      	movs	r2, #127	@ 0x7f
 800cd36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd3a:	e016      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd44:	d10d      	bne.n	800cd62 <HAL_UART_Receive+0xca>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d104      	bne.n	800cd58 <HAL_UART_Receive+0xc0>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	227f      	movs	r2, #127	@ 0x7f
 800cd52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd56:	e008      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	223f      	movs	r2, #63	@ 0x3f
 800cd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd60:	e003      	b.n	800cd6a <HAL_UART_Receive+0xd2>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd7a:	d108      	bne.n	800cd8e <HAL_UART_Receive+0xf6>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d104      	bne.n	800cd8e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	61bb      	str	r3, [r7, #24]
 800cd8c:	e003      	b.n	800cd96 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cd96:	e036      	b.n	800ce06 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2120      	movs	r1, #32
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 fc58 	bl	800d658 <UART_WaitOnFlagUntilTimeout>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d005      	beq.n	800cdba <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e032      	b.n	800ce20 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10c      	bne.n	800cdda <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	8a7b      	ldrh	r3, [r7, #18]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	e00c      	b.n	800cdf4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	8a7b      	ldrh	r3, [r7, #18]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	4013      	ands	r3, r2
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1c2      	bne.n	800cd98 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2220      	movs	r2, #32
 800ce16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e000      	b.n	800ce20 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ce1e:	2302      	movs	r3, #2
  }
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce2c:	b08c      	sub	sp, #48	@ 0x30
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	431a      	orrs	r2, r3
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	431a      	orrs	r2, r3
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	4bab      	ldr	r3, [pc, #684]	@ (800d104 <UART_SetConfig+0x2dc>)
 800ce58:	4013      	ands	r3, r2
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	6812      	ldr	r2, [r2, #0]
 800ce5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce60:	430b      	orrs	r3, r1
 800ce62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4aa0      	ldr	r2, [pc, #640]	@ (800d108 <UART_SetConfig+0x2e0>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d004      	beq.n	800ce94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce90:	4313      	orrs	r3, r2
 800ce92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ce9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	6812      	ldr	r2, [r2, #0]
 800cea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	f023 010f 	bic.w	r1, r3, #15
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a91      	ldr	r2, [pc, #580]	@ (800d10c <UART_SetConfig+0x2e4>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d125      	bne.n	800cf18 <UART_SetConfig+0xf0>
 800cecc:	4b90      	ldr	r3, [pc, #576]	@ (800d110 <UART_SetConfig+0x2e8>)
 800cece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d81a      	bhi.n	800cf10 <UART_SetConfig+0xe8>
 800ceda:	a201      	add	r2, pc, #4	@ (adr r2, 800cee0 <UART_SetConfig+0xb8>)
 800cedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee0:	0800cef1 	.word	0x0800cef1
 800cee4:	0800cf01 	.word	0x0800cf01
 800cee8:	0800cef9 	.word	0x0800cef9
 800ceec:	0800cf09 	.word	0x0800cf09
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef6:	e0d6      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cef8:	2302      	movs	r3, #2
 800cefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefe:	e0d2      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf00:	2304      	movs	r3, #4
 800cf02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf06:	e0ce      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf08:	2308      	movs	r3, #8
 800cf0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0e:	e0ca      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf10:	2310      	movs	r3, #16
 800cf12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf16:	e0c6      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a7d      	ldr	r2, [pc, #500]	@ (800d114 <UART_SetConfig+0x2ec>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d138      	bne.n	800cf94 <UART_SetConfig+0x16c>
 800cf22:	4b7b      	ldr	r3, [pc, #492]	@ (800d110 <UART_SetConfig+0x2e8>)
 800cf24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf28:	f003 030c 	and.w	r3, r3, #12
 800cf2c:	2b0c      	cmp	r3, #12
 800cf2e:	d82d      	bhi.n	800cf8c <UART_SetConfig+0x164>
 800cf30:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <UART_SetConfig+0x110>)
 800cf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf36:	bf00      	nop
 800cf38:	0800cf6d 	.word	0x0800cf6d
 800cf3c:	0800cf8d 	.word	0x0800cf8d
 800cf40:	0800cf8d 	.word	0x0800cf8d
 800cf44:	0800cf8d 	.word	0x0800cf8d
 800cf48:	0800cf7d 	.word	0x0800cf7d
 800cf4c:	0800cf8d 	.word	0x0800cf8d
 800cf50:	0800cf8d 	.word	0x0800cf8d
 800cf54:	0800cf8d 	.word	0x0800cf8d
 800cf58:	0800cf75 	.word	0x0800cf75
 800cf5c:	0800cf8d 	.word	0x0800cf8d
 800cf60:	0800cf8d 	.word	0x0800cf8d
 800cf64:	0800cf8d 	.word	0x0800cf8d
 800cf68:	0800cf85 	.word	0x0800cf85
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf72:	e098      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf74:	2302      	movs	r3, #2
 800cf76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf7a:	e094      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf7c:	2304      	movs	r3, #4
 800cf7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf82:	e090      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf84:	2308      	movs	r3, #8
 800cf86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf8a:	e08c      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf8c:	2310      	movs	r3, #16
 800cf8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf92:	e088      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a5f      	ldr	r2, [pc, #380]	@ (800d118 <UART_SetConfig+0x2f0>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d125      	bne.n	800cfea <UART_SetConfig+0x1c2>
 800cf9e:	4b5c      	ldr	r3, [pc, #368]	@ (800d110 <UART_SetConfig+0x2e8>)
 800cfa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cfa8:	2b30      	cmp	r3, #48	@ 0x30
 800cfaa:	d016      	beq.n	800cfda <UART_SetConfig+0x1b2>
 800cfac:	2b30      	cmp	r3, #48	@ 0x30
 800cfae:	d818      	bhi.n	800cfe2 <UART_SetConfig+0x1ba>
 800cfb0:	2b20      	cmp	r3, #32
 800cfb2:	d00a      	beq.n	800cfca <UART_SetConfig+0x1a2>
 800cfb4:	2b20      	cmp	r3, #32
 800cfb6:	d814      	bhi.n	800cfe2 <UART_SetConfig+0x1ba>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <UART_SetConfig+0x19a>
 800cfbc:	2b10      	cmp	r3, #16
 800cfbe:	d008      	beq.n	800cfd2 <UART_SetConfig+0x1aa>
 800cfc0:	e00f      	b.n	800cfe2 <UART_SetConfig+0x1ba>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfc8:	e06d      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd0:	e069      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cfd2:	2304      	movs	r3, #4
 800cfd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd8:	e065      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cfda:	2308      	movs	r3, #8
 800cfdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfe0:	e061      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cfe2:	2310      	movs	r3, #16
 800cfe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfe8:	e05d      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a4b      	ldr	r2, [pc, #300]	@ (800d11c <UART_SetConfig+0x2f4>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d125      	bne.n	800d040 <UART_SetConfig+0x218>
 800cff4:	4b46      	ldr	r3, [pc, #280]	@ (800d110 <UART_SetConfig+0x2e8>)
 800cff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cffa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cffe:	2bc0      	cmp	r3, #192	@ 0xc0
 800d000:	d016      	beq.n	800d030 <UART_SetConfig+0x208>
 800d002:	2bc0      	cmp	r3, #192	@ 0xc0
 800d004:	d818      	bhi.n	800d038 <UART_SetConfig+0x210>
 800d006:	2b80      	cmp	r3, #128	@ 0x80
 800d008:	d00a      	beq.n	800d020 <UART_SetConfig+0x1f8>
 800d00a:	2b80      	cmp	r3, #128	@ 0x80
 800d00c:	d814      	bhi.n	800d038 <UART_SetConfig+0x210>
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <UART_SetConfig+0x1f0>
 800d012:	2b40      	cmp	r3, #64	@ 0x40
 800d014:	d008      	beq.n	800d028 <UART_SetConfig+0x200>
 800d016:	e00f      	b.n	800d038 <UART_SetConfig+0x210>
 800d018:	2300      	movs	r3, #0
 800d01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d01e:	e042      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d020:	2302      	movs	r3, #2
 800d022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d026:	e03e      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d028:	2304      	movs	r3, #4
 800d02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d02e:	e03a      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d030:	2308      	movs	r3, #8
 800d032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d036:	e036      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d038:	2310      	movs	r3, #16
 800d03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d03e:	e032      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a30      	ldr	r2, [pc, #192]	@ (800d108 <UART_SetConfig+0x2e0>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d12a      	bne.n	800d0a0 <UART_SetConfig+0x278>
 800d04a:	4b31      	ldr	r3, [pc, #196]	@ (800d110 <UART_SetConfig+0x2e8>)
 800d04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d050:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d058:	d01a      	beq.n	800d090 <UART_SetConfig+0x268>
 800d05a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d05e:	d81b      	bhi.n	800d098 <UART_SetConfig+0x270>
 800d060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d064:	d00c      	beq.n	800d080 <UART_SetConfig+0x258>
 800d066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d06a:	d815      	bhi.n	800d098 <UART_SetConfig+0x270>
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <UART_SetConfig+0x250>
 800d070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d074:	d008      	beq.n	800d088 <UART_SetConfig+0x260>
 800d076:	e00f      	b.n	800d098 <UART_SetConfig+0x270>
 800d078:	2300      	movs	r3, #0
 800d07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d07e:	e012      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d080:	2302      	movs	r3, #2
 800d082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d086:	e00e      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d088:	2304      	movs	r3, #4
 800d08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d08e:	e00a      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d090:	2308      	movs	r3, #8
 800d092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d096:	e006      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d098:	2310      	movs	r3, #16
 800d09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d09e:	e002      	b.n	800d0a6 <UART_SetConfig+0x27e>
 800d0a0:	2310      	movs	r3, #16
 800d0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	@ (800d108 <UART_SetConfig+0x2e0>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	f040 80a8 	bne.w	800d202 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d834      	bhi.n	800d124 <UART_SetConfig+0x2fc>
 800d0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c0 <UART_SetConfig+0x298>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d0e5 	.word	0x0800d0e5
 800d0c4:	0800d125 	.word	0x0800d125
 800d0c8:	0800d0ed 	.word	0x0800d0ed
 800d0cc:	0800d125 	.word	0x0800d125
 800d0d0:	0800d0f3 	.word	0x0800d0f3
 800d0d4:	0800d125 	.word	0x0800d125
 800d0d8:	0800d125 	.word	0x0800d125
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d0fb 	.word	0x0800d0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0e4:	f7fe fd0c 	bl	800bb00 <HAL_RCC_GetPCLK1Freq>
 800d0e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0ea:	e021      	b.n	800d130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d120 <UART_SetConfig+0x2f8>)
 800d0ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0f0:	e01e      	b.n	800d130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0f2:	f7fe fc97 	bl	800ba24 <HAL_RCC_GetSysClockFreq>
 800d0f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0f8:	e01a      	b.n	800d130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d100:	e016      	b.n	800d130 <UART_SetConfig+0x308>
 800d102:	bf00      	nop
 800d104:	cfff69f3 	.word	0xcfff69f3
 800d108:	40008000 	.word	0x40008000
 800d10c:	40013800 	.word	0x40013800
 800d110:	40021000 	.word	0x40021000
 800d114:	40004400 	.word	0x40004400
 800d118:	40004800 	.word	0x40004800
 800d11c:	40004c00 	.word	0x40004c00
 800d120:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d124:	2300      	movs	r3, #0
 800d126:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d12e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 812a 	beq.w	800d38c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d13c:	4a9e      	ldr	r2, [pc, #632]	@ (800d3b8 <UART_SetConfig+0x590>)
 800d13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d142:	461a      	mov	r2, r3
 800d144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d146:	fbb3 f3f2 	udiv	r3, r3, r2
 800d14a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	4613      	mov	r3, r2
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	4413      	add	r3, r2
 800d156:	69ba      	ldr	r2, [r7, #24]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d305      	bcc.n	800d168 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d162:	69ba      	ldr	r2, [r7, #24]
 800d164:	429a      	cmp	r2, r3
 800d166:	d903      	bls.n	800d170 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d16e:	e10d      	b.n	800d38c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	2200      	movs	r2, #0
 800d174:	60bb      	str	r3, [r7, #8]
 800d176:	60fa      	str	r2, [r7, #12]
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17c:	4a8e      	ldr	r2, [pc, #568]	@ (800d3b8 <UART_SetConfig+0x590>)
 800d17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d182:	b29b      	uxth	r3, r3
 800d184:	2200      	movs	r2, #0
 800d186:	603b      	str	r3, [r7, #0]
 800d188:	607a      	str	r2, [r7, #4]
 800d18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d18e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d192:	f7f3 fba3 	bl	80008dc <__aeabi_uldivmod>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4610      	mov	r0, r2
 800d19c:	4619      	mov	r1, r3
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	020b      	lsls	r3, r1, #8
 800d1a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1ac:	0202      	lsls	r2, r0, #8
 800d1ae:	6979      	ldr	r1, [r7, #20]
 800d1b0:	6849      	ldr	r1, [r1, #4]
 800d1b2:	0849      	lsrs	r1, r1, #1
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	eb12 0804 	adds.w	r8, r2, r4
 800d1be:	eb43 0905 	adc.w	r9, r3, r5
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	469a      	mov	sl, r3
 800d1ca:	4693      	mov	fp, r2
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	465b      	mov	r3, fp
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	f7f3 fb82 	bl	80008dc <__aeabi_uldivmod>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4613      	mov	r3, r2
 800d1de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1e6:	d308      	bcc.n	800d1fa <UART_SetConfig+0x3d2>
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1ee:	d204      	bcs.n	800d1fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6a3a      	ldr	r2, [r7, #32]
 800d1f6:	60da      	str	r2, [r3, #12]
 800d1f8:	e0c8      	b.n	800d38c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d200:	e0c4      	b.n	800d38c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d20a:	d167      	bne.n	800d2dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d20c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d210:	2b08      	cmp	r3, #8
 800d212:	d828      	bhi.n	800d266 <UART_SetConfig+0x43e>
 800d214:	a201      	add	r2, pc, #4	@ (adr r2, 800d21c <UART_SetConfig+0x3f4>)
 800d216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21a:	bf00      	nop
 800d21c:	0800d241 	.word	0x0800d241
 800d220:	0800d249 	.word	0x0800d249
 800d224:	0800d251 	.word	0x0800d251
 800d228:	0800d267 	.word	0x0800d267
 800d22c:	0800d257 	.word	0x0800d257
 800d230:	0800d267 	.word	0x0800d267
 800d234:	0800d267 	.word	0x0800d267
 800d238:	0800d267 	.word	0x0800d267
 800d23c:	0800d25f 	.word	0x0800d25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d240:	f7fe fc5e 	bl	800bb00 <HAL_RCC_GetPCLK1Freq>
 800d244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d246:	e014      	b.n	800d272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d248:	f7fe fc70 	bl	800bb2c <HAL_RCC_GetPCLK2Freq>
 800d24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d24e:	e010      	b.n	800d272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d250:	4b5a      	ldr	r3, [pc, #360]	@ (800d3bc <UART_SetConfig+0x594>)
 800d252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d254:	e00d      	b.n	800d272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d256:	f7fe fbe5 	bl	800ba24 <HAL_RCC_GetSysClockFreq>
 800d25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d25c:	e009      	b.n	800d272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d264:	e005      	b.n	800d272 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d266:	2300      	movs	r3, #0
 800d268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 8089 	beq.w	800d38c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27e:	4a4e      	ldr	r2, [pc, #312]	@ (800d3b8 <UART_SetConfig+0x590>)
 800d280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d284:	461a      	mov	r2, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	fbb3 f3f2 	udiv	r3, r3, r2
 800d28c:	005a      	lsls	r2, r3, #1
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	441a      	add	r2, r3
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	2b0f      	cmp	r3, #15
 800d2a4:	d916      	bls.n	800d2d4 <UART_SetConfig+0x4ac>
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2ac:	d212      	bcs.n	800d2d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f023 030f 	bic.w	r3, r3, #15
 800d2b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	085b      	lsrs	r3, r3, #1
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	f003 0307 	and.w	r3, r3, #7
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	8bfb      	ldrh	r3, [r7, #30]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	8bfa      	ldrh	r2, [r7, #30]
 800d2d0:	60da      	str	r2, [r3, #12]
 800d2d2:	e05b      	b.n	800d38c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d2da:	e057      	b.n	800d38c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	d828      	bhi.n	800d336 <UART_SetConfig+0x50e>
 800d2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2ec <UART_SetConfig+0x4c4>)
 800d2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ea:	bf00      	nop
 800d2ec:	0800d311 	.word	0x0800d311
 800d2f0:	0800d319 	.word	0x0800d319
 800d2f4:	0800d321 	.word	0x0800d321
 800d2f8:	0800d337 	.word	0x0800d337
 800d2fc:	0800d327 	.word	0x0800d327
 800d300:	0800d337 	.word	0x0800d337
 800d304:	0800d337 	.word	0x0800d337
 800d308:	0800d337 	.word	0x0800d337
 800d30c:	0800d32f 	.word	0x0800d32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d310:	f7fe fbf6 	bl	800bb00 <HAL_RCC_GetPCLK1Freq>
 800d314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d316:	e014      	b.n	800d342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d318:	f7fe fc08 	bl	800bb2c <HAL_RCC_GetPCLK2Freq>
 800d31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d31e:	e010      	b.n	800d342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d320:	4b26      	ldr	r3, [pc, #152]	@ (800d3bc <UART_SetConfig+0x594>)
 800d322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d324:	e00d      	b.n	800d342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d326:	f7fe fb7d 	bl	800ba24 <HAL_RCC_GetSysClockFreq>
 800d32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d32c:	e009      	b.n	800d342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d334:	e005      	b.n	800d342 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d336:	2300      	movs	r3, #0
 800d338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d340:	bf00      	nop
    }

    if (pclk != 0U)
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	2b00      	cmp	r3, #0
 800d346:	d021      	beq.n	800d38c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34c:	4a1a      	ldr	r2, [pc, #104]	@ (800d3b8 <UART_SetConfig+0x590>)
 800d34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d352:	461a      	mov	r2, r3
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	fbb3 f2f2 	udiv	r2, r3, r2
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	085b      	lsrs	r3, r3, #1
 800d360:	441a      	add	r2, r3
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	2b0f      	cmp	r3, #15
 800d370:	d909      	bls.n	800d386 <UART_SetConfig+0x55e>
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d378:	d205      	bcs.n	800d386 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	60da      	str	r2, [r3, #12]
 800d384:	e002      	b.n	800d38c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	2201      	movs	r2, #1
 800d390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	2201      	movs	r2, #1
 800d398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3730      	adds	r7, #48	@ 0x30
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0800f7d4 	.word	0x0800f7d4
 800d3bc:	00f42400 	.word	0x00f42400

0800d3c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3cc:	f003 0308 	and.w	r3, r3, #8
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00a      	beq.n	800d3ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	430a      	orrs	r2, r1
 800d3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	430a      	orrs	r2, r1
 800d40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00a      	beq.n	800d42e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	430a      	orrs	r2, r1
 800d42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d432:	f003 0304 	and.w	r3, r3, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	430a      	orrs	r2, r1
 800d44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d454:	f003 0310 	and.w	r3, r3, #16
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00a      	beq.n	800d472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	430a      	orrs	r2, r1
 800d470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d476:	f003 0320 	and.w	r3, r3, #32
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00a      	beq.n	800d494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	430a      	orrs	r2, r1
 800d492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d01a      	beq.n	800d4d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	430a      	orrs	r2, r1
 800d4b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4be:	d10a      	bne.n	800d4d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	430a      	orrs	r2, r1
 800d4d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	430a      	orrs	r2, r1
 800d4f6:	605a      	str	r2, [r3, #4]
  }
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b098      	sub	sp, #96	@ 0x60
 800d508:	af02      	add	r7, sp, #8
 800d50a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d514:	f7fb fe6c 	bl	80091f0 <HAL_GetTick>
 800d518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 0308 	and.w	r3, r3, #8
 800d524:	2b08      	cmp	r3, #8
 800d526:	d12f      	bne.n	800d588 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d530:	2200      	movs	r2, #0
 800d532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f88e 	bl	800d658 <UART_WaitOnFlagUntilTimeout>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d022      	beq.n	800d588 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54a:	e853 3f00 	ldrex	r3, [r3]
 800d54e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d556:	653b      	str	r3, [r7, #80]	@ 0x50
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	461a      	mov	r2, r3
 800d55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d560:	647b      	str	r3, [r7, #68]	@ 0x44
 800d562:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d568:	e841 2300 	strex	r3, r2, [r1]
 800d56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1e6      	bne.n	800d542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2220      	movs	r2, #32
 800d578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e063      	b.n	800d650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0304 	and.w	r3, r3, #4
 800d592:	2b04      	cmp	r3, #4
 800d594:	d149      	bne.n	800d62a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d596:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 f857 	bl	800d658 <UART_WaitOnFlagUntilTimeout>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d03c      	beq.n	800d62a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b8:	e853 3f00 	ldrex	r3, [r3]
 800d5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5d6:	e841 2300 	strex	r3, r2, [r1]
 800d5da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1e6      	bne.n	800d5b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f023 0301 	bic.w	r3, r3, #1
 800d5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3308      	adds	r3, #8
 800d600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d602:	61fa      	str	r2, [r7, #28]
 800d604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d606:	69b9      	ldr	r1, [r7, #24]
 800d608:	69fa      	ldr	r2, [r7, #28]
 800d60a:	e841 2300 	strex	r3, r2, [r1]
 800d60e:	617b      	str	r3, [r7, #20]
   return(result);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e5      	bne.n	800d5e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2220      	movs	r2, #32
 800d61a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d626:	2303      	movs	r3, #3
 800d628:	e012      	b.n	800d650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2220      	movs	r2, #32
 800d62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2220      	movs	r2, #32
 800d636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3758      	adds	r7, #88	@ 0x58
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	4613      	mov	r3, r2
 800d666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d668:	e04f      	b.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d670:	d04b      	beq.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d672:	f7fb fdbd 	bl	80091f0 <HAL_GetTick>
 800d676:	4602      	mov	r2, r0
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	69ba      	ldr	r2, [r7, #24]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d302      	bcc.n	800d688 <UART_WaitOnFlagUntilTimeout+0x30>
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d101      	bne.n	800d68c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d688:	2303      	movs	r3, #3
 800d68a:	e04e      	b.n	800d72a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0304 	and.w	r3, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	d037      	beq.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b80      	cmp	r3, #128	@ 0x80
 800d69e:	d034      	beq.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2b40      	cmp	r3, #64	@ 0x40
 800d6a4:	d031      	beq.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	f003 0308 	and.w	r3, r3, #8
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	d110      	bne.n	800d6d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f000 f838 	bl	800d732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2208      	movs	r2, #8
 800d6c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e029      	b.n	800d72a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6e4:	d111      	bne.n	800d70a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f000 f81e 	bl	800d732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e00f      	b.n	800d72a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	69da      	ldr	r2, [r3, #28]
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	4013      	ands	r3, r2
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	429a      	cmp	r2, r3
 800d718:	bf0c      	ite	eq
 800d71a:	2301      	moveq	r3, #1
 800d71c:	2300      	movne	r3, #0
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	461a      	mov	r2, r3
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	429a      	cmp	r2, r3
 800d726:	d0a0      	beq.n	800d66a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d732:	b480      	push	{r7}
 800d734:	b095      	sub	sp, #84	@ 0x54
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d742:	e853 3f00 	ldrex	r3, [r3]
 800d746:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d74e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d758:	643b      	str	r3, [r7, #64]	@ 0x40
 800d75a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d75e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d760:	e841 2300 	strex	r3, r2, [r1]
 800d764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1e6      	bne.n	800d73a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3308      	adds	r3, #8
 800d772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	e853 3f00 	ldrex	r3, [r3]
 800d77a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d782:	f023 0301 	bic.w	r3, r3, #1
 800d786:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3308      	adds	r3, #8
 800d78e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d798:	e841 2300 	strex	r3, r2, [r1]
 800d79c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1e3      	bne.n	800d76c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d118      	bne.n	800d7de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	e853 3f00 	ldrex	r3, [r3]
 800d7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	f023 0310 	bic.w	r3, r3, #16
 800d7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ca:	61bb      	str	r3, [r7, #24]
 800d7cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ce:	6979      	ldr	r1, [r7, #20]
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	e841 2300 	strex	r3, r2, [r1]
 800d7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1e6      	bne.n	800d7ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d7f2:	bf00      	nop
 800d7f4:	3754      	adds	r7, #84	@ 0x54
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d101      	bne.n	800d814 <HAL_UARTEx_EnableFifoMode+0x16>
 800d810:	2302      	movs	r3, #2
 800d812:	e02b      	b.n	800d86c <HAL_UARTEx_EnableFifoMode+0x6e>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2224      	movs	r2, #36	@ 0x24
 800d820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f022 0201 	bic.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d842:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d84a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f8c3 	bl	800d9e0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2220      	movs	r2, #32
 800d85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d882:	2b01      	cmp	r3, #1
 800d884:	d101      	bne.n	800d88a <HAL_UARTEx_DisableFifoMode+0x16>
 800d886:	2302      	movs	r3, #2
 800d888:	e027      	b.n	800d8da <HAL_UARTEx_DisableFifoMode+0x66>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2224      	movs	r2, #36	@ 0x24
 800d896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f022 0201 	bic.w	r2, r2, #1
 800d8b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d8b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b084      	sub	sp, #16
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d101      	bne.n	800d8fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8fa:	2302      	movs	r3, #2
 800d8fc:	e02d      	b.n	800d95a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2201      	movs	r2, #1
 800d902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2224      	movs	r2, #36	@ 0x24
 800d90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f022 0201 	bic.w	r2, r2, #1
 800d924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f850 	bl	800d9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2220      	movs	r2, #32
 800d94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}

0800d962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d962:	b580      	push	{r7, lr}
 800d964:	b084      	sub	sp, #16
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
 800d96a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d976:	2302      	movs	r3, #2
 800d978:	e02d      	b.n	800d9d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2224      	movs	r2, #36	@ 0x24
 800d986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f022 0201 	bic.w	r2, r2, #1
 800d9a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f812 	bl	800d9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2220      	movs	r2, #32
 800d9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d108      	bne.n	800da02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da00:	e031      	b.n	800da66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da02:	2308      	movs	r3, #8
 800da04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da06:	2308      	movs	r3, #8
 800da08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	0e5b      	lsrs	r3, r3, #25
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f003 0307 	and.w	r3, r3, #7
 800da18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	0f5b      	lsrs	r3, r3, #29
 800da22:	b2db      	uxtb	r3, r3
 800da24:	f003 0307 	and.w	r3, r3, #7
 800da28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da2a:	7bbb      	ldrb	r3, [r7, #14]
 800da2c:	7b3a      	ldrb	r2, [r7, #12]
 800da2e:	4911      	ldr	r1, [pc, #68]	@ (800da74 <UARTEx_SetNbDataToProcess+0x94>)
 800da30:	5c8a      	ldrb	r2, [r1, r2]
 800da32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da36:	7b3a      	ldrb	r2, [r7, #12]
 800da38:	490f      	ldr	r1, [pc, #60]	@ (800da78 <UARTEx_SetNbDataToProcess+0x98>)
 800da3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	7b7a      	ldrb	r2, [r7, #13]
 800da4c:	4909      	ldr	r1, [pc, #36]	@ (800da74 <UARTEx_SetNbDataToProcess+0x94>)
 800da4e:	5c8a      	ldrb	r2, [r1, r2]
 800da50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da54:	7b7a      	ldrb	r2, [r7, #13]
 800da56:	4908      	ldr	r1, [pc, #32]	@ (800da78 <UARTEx_SetNbDataToProcess+0x98>)
 800da58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800da5e:	b29a      	uxth	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	0800f7ec 	.word	0x0800f7ec
 800da78:	0800f7f4 	.word	0x0800f7f4

0800da7c <_ZdlPvj>:
 800da7c:	f000 b9ba 	b.w	800ddf4 <_ZdlPv>

0800da80 <_Znwj>:
 800da80:	2801      	cmp	r0, #1
 800da82:	bf38      	it	cc
 800da84:	2001      	movcc	r0, #1
 800da86:	b510      	push	{r4, lr}
 800da88:	4604      	mov	r4, r0
 800da8a:	4620      	mov	r0, r4
 800da8c:	f000 f9c4 	bl	800de18 <malloc>
 800da90:	b100      	cbz	r0, 800da94 <_Znwj+0x14>
 800da92:	bd10      	pop	{r4, pc}
 800da94:	f000 f9b0 	bl	800ddf8 <_ZSt15get_new_handlerv>
 800da98:	b908      	cbnz	r0, 800da9e <_Znwj+0x1e>
 800da9a:	f000 f9b5 	bl	800de08 <abort>
 800da9e:	4780      	blx	r0
 800daa0:	e7f3      	b.n	800da8a <_Znwj+0xa>

0800daa2 <_ZNSaIcEC1Ev>:
 800daa2:	4770      	bx	lr

0800daa4 <_ZNSaIcED1Ev>:
 800daa4:	4770      	bx	lr

0800daa6 <_ZSt17__throw_bad_allocv>:
 800daa6:	b508      	push	{r3, lr}
 800daa8:	f000 f9ae 	bl	800de08 <abort>

0800daac <_ZSt28__throw_bad_array_new_lengthv>:
 800daac:	b508      	push	{r3, lr}
 800daae:	f000 f9ab 	bl	800de08 <abort>

0800dab2 <_ZSt19__throw_logic_errorPKc>:
 800dab2:	b508      	push	{r3, lr}
 800dab4:	f000 f9a8 	bl	800de08 <abort>

0800dab8 <_ZSt20__throw_length_errorPKc>:
 800dab8:	b508      	push	{r3, lr}
 800daba:	f000 f9a5 	bl	800de08 <abort>

0800dabe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800dabe:	b10a      	cbz	r2, 800dac4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800dac0:	f000 bd63 	b.w	800e58a <memcpy>
 800dac4:	4770      	bx	lr

0800dac6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800dac6:	f850 3b08 	ldr.w	r3, [r0], #8
 800daca:	1a1b      	subs	r3, r3, r0
 800dacc:	4258      	negs	r0, r3
 800dace:	4158      	adcs	r0, r3
 800dad0:	4770      	bx	lr
	...

0800dad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800dad4:	b508      	push	{r3, lr}
 800dad6:	680b      	ldr	r3, [r1, #0]
 800dad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dadc:	d302      	bcc.n	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800dade:	480d      	ldr	r0, [pc, #52]	@ (800db14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800dae0:	f7ff ffea 	bl	800dab8 <_ZSt20__throw_length_errorPKc>
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d90b      	bls.n	800db00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800dae8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800daec:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800daf0:	d206      	bcs.n	800db00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800daf2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800daf6:	bf2a      	itet	cs
 800daf8:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800dafc:	6008      	strcc	r0, [r1, #0]
 800dafe:	600b      	strcs	r3, [r1, #0]
 800db00:	6808      	ldr	r0, [r1, #0]
 800db02:	3001      	adds	r0, #1
 800db04:	d501      	bpl.n	800db0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800db06:	f7ff ffce 	bl	800daa6 <_ZSt17__throw_bad_allocv>
 800db0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db0e:	f7ff bfb7 	b.w	800da80 <_Znwj>
 800db12:	bf00      	nop
 800db14:	0800f7fc 	.word	0x0800f7fc

0800db18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	4604      	mov	r4, r0
 800db1c:	f7ff ffd3 	bl	800dac6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db20:	b920      	cbnz	r0, 800db2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800db22:	6820      	ldr	r0, [r4, #0]
 800db24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db28:	f000 b964 	b.w	800ddf4 <_ZdlPv>
 800db2c:	bd10      	pop	{r4, pc}

0800db2e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800db2e:	6840      	ldr	r0, [r0, #4]
 800db30:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800db34:	3901      	subs	r1, #1
 800db36:	1a09      	subs	r1, r1, r0
 800db38:	4291      	cmp	r1, r2
 800db3a:	b508      	push	{r3, lr}
 800db3c:	d202      	bcs.n	800db44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ffba 	bl	800dab8 <_ZSt20__throw_length_errorPKc>
 800db44:	bd08      	pop	{r3, pc}

0800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800db46:	2a01      	cmp	r2, #1
 800db48:	b410      	push	{r4}
 800db4a:	d104      	bne.n	800db56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800db4c:	780a      	ldrb	r2, [r1, #0]
 800db4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db52:	7002      	strb	r2, [r0, #0]
 800db54:	4770      	bx	lr
 800db56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db5a:	f7ff bfb0 	b.w	800dabe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800db5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800db5e:	b508      	push	{r3, lr}
 800db60:	1a52      	subs	r2, r2, r1
 800db62:	f7ff fff0 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db66:	bd08      	pop	{r3, pc}

0800db68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800db68:	b508      	push	{r3, lr}
 800db6a:	1a52      	subs	r2, r2, r1
 800db6c:	f7ff ffeb 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db70:	bd08      	pop	{r3, pc}

0800db72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800db72:	f100 0208 	add.w	r2, r0, #8
 800db76:	6002      	str	r2, [r0, #0]
 800db78:	2200      	movs	r2, #0
 800db7a:	6042      	str	r2, [r0, #4]
 800db7c:	7202      	strb	r2, [r0, #8]
 800db7e:	4770      	bx	lr

0800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800db80:	b510      	push	{r4, lr}
 800db82:	4604      	mov	r4, r0
 800db84:	f7ff ffc8 	bl	800db18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800db88:	4620      	mov	r0, r4
 800db8a:	bd10      	pop	{r4, pc}

0800db8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	460c      	mov	r4, r1
 800db90:	4605      	mov	r5, r0
 800db92:	f7ff ff98 	bl	800dac6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db96:	4606      	mov	r6, r0
 800db98:	4620      	mov	r0, r4
 800db9a:	f7ff ff94 	bl	800dac6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db9e:	b190      	cbz	r0, 800dbc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 800dba0:	42a5      	cmp	r5, r4
 800dba2:	d00a      	beq.n	800dbba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800dba4:	6862      	ldr	r2, [r4, #4]
 800dba6:	b11a      	cbz	r2, 800dbb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 800dba8:	6821      	ldr	r1, [r4, #0]
 800dbaa:	6828      	ldr	r0, [r5, #0]
 800dbac:	f7ff ffcb 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dbb0:	6863      	ldr	r3, [r4, #4]
 800dbb2:	682a      	ldr	r2, [r5, #0]
 800dbb4:	606b      	str	r3, [r5, #4]
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	54d1      	strb	r1, [r2, r3]
 800dbba:	6822      	ldr	r2, [r4, #0]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	6063      	str	r3, [r4, #4]
 800dbc0:	7013      	strb	r3, [r2, #0]
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc6:	b90e      	cbnz	r6, 800dbcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800dbc8:	6828      	ldr	r0, [r5, #0]
 800dbca:	68af      	ldr	r7, [r5, #8]
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	602b      	str	r3, [r5, #0]
 800dbd0:	6863      	ldr	r3, [r4, #4]
 800dbd2:	606b      	str	r3, [r5, #4]
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	60ab      	str	r3, [r5, #8]
 800dbd8:	b110      	cbz	r0, 800dbe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 800dbda:	6020      	str	r0, [r4, #0]
 800dbdc:	60a7      	str	r7, [r4, #8]
 800dbde:	e7ec      	b.n	800dbba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800dbe0:	f104 0308 	add.w	r3, r4, #8
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	e7e8      	b.n	800dbba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0800dbe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800dbe8:	6840      	ldr	r0, [r0, #4]
 800dbea:	4770      	bx	lr

0800dbec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800dbec:	b510      	push	{r4, lr}
 800dbee:	4604      	mov	r4, r0
 800dbf0:	f7ff ff69 	bl	800dac6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800dbf4:	b908      	cbnz	r0, 800dbfa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800dbf6:	68a0      	ldr	r0, [r4, #8]
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	200f      	movs	r0, #15
 800dbfc:	e7fc      	b.n	800dbf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800dbfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800dbfe:	4288      	cmp	r0, r1
 800dc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc02:	4604      	mov	r4, r0
 800dc04:	460e      	mov	r6, r1
 800dc06:	d01d      	beq.n	800dc44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 800dc08:	684d      	ldr	r5, [r1, #4]
 800dc0a:	f7ff ffef 	bl	800dbec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dc0e:	42a8      	cmp	r0, r5
 800dc10:	4602      	mov	r2, r0
 800dc12:	d211      	bcs.n	800dc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 800dc14:	a901      	add	r1, sp, #4
 800dc16:	4620      	mov	r0, r4
 800dc18:	9501      	str	r5, [sp, #4]
 800dc1a:	f7ff ff5b 	bl	800dad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dc1e:	4607      	mov	r7, r0
 800dc20:	4620      	mov	r0, r4
 800dc22:	f7ff ff79 	bl	800db18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800dc26:	9b01      	ldr	r3, [sp, #4]
 800dc28:	6027      	str	r7, [r4, #0]
 800dc2a:	60a3      	str	r3, [r4, #8]
 800dc2c:	6831      	ldr	r1, [r6, #0]
 800dc2e:	6820      	ldr	r0, [r4, #0]
 800dc30:	462a      	mov	r2, r5
 800dc32:	f7ff ff88 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc36:	e001      	b.n	800dc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	d1f7      	bne.n	800dc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 800dc3c:	6823      	ldr	r3, [r4, #0]
 800dc3e:	6065      	str	r5, [r4, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	555a      	strb	r2, [r3, r5]
 800dc44:	b003      	add	sp, #12
 800dc46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	f7ff ffd7 	bl	800dbfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800dc50:	4620      	mov	r0, r4
 800dc52:	bd10      	pop	{r4, pc}

0800dc54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800dc54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc58:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dc5a:	461f      	mov	r7, r3
 800dc5c:	6843      	ldr	r3, [r0, #4]
 800dc5e:	eb01 0802 	add.w	r8, r1, r2
 800dc62:	1ab2      	subs	r2, r6, r2
 800dc64:	441a      	add	r2, r3
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	eba3 0908 	sub.w	r9, r3, r8
 800dc6e:	9201      	str	r2, [sp, #4]
 800dc70:	f7ff ffbc 	bl	800dbec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dc74:	a901      	add	r1, sp, #4
 800dc76:	4602      	mov	r2, r0
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f7ff ff2b 	bl	800dad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dc7e:	4682      	mov	sl, r0
 800dc80:	b11d      	cbz	r5, 800dc8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 800dc82:	6821      	ldr	r1, [r4, #0]
 800dc84:	462a      	mov	r2, r5
 800dc86:	f7ff ff5e 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc8a:	b137      	cbz	r7, 800dc9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800dc8c:	b12e      	cbz	r6, 800dc9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800dc8e:	4632      	mov	r2, r6
 800dc90:	4639      	mov	r1, r7
 800dc92:	eb0a 0005 	add.w	r0, sl, r5
 800dc96:	f7ff ff56 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc9a:	f1b9 0f00 	cmp.w	r9, #0
 800dc9e:	d007      	beq.n	800dcb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800dca0:	6821      	ldr	r1, [r4, #0]
 800dca2:	4435      	add	r5, r6
 800dca4:	464a      	mov	r2, r9
 800dca6:	4441      	add	r1, r8
 800dca8:	eb0a 0005 	add.w	r0, sl, r5
 800dcac:	f7ff ff4b 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7ff ff31 	bl	800db18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	f8c4 a000 	str.w	sl, [r4]
 800dcbc:	60a3      	str	r3, [r4, #8]
 800dcbe:	b002      	add	sp, #8
 800dcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dcc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800dcc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dcc8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800dccc:	4604      	mov	r4, r0
 800dcce:	eb02 0708 	add.w	r7, r2, r8
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	4615      	mov	r5, r2
 800dcd6:	f7ff ff89 	bl	800dbec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dcda:	42b8      	cmp	r0, r7
 800dcdc:	d30e      	bcc.n	800dcfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 800dcde:	b12d      	cbz	r5, 800dcec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 800dce0:	6820      	ldr	r0, [r4, #0]
 800dce2:	462a      	mov	r2, r5
 800dce4:	4631      	mov	r1, r6
 800dce6:	4440      	add	r0, r8
 800dce8:	f7ff ff2d 	bl	800db46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	6067      	str	r7, [r4, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	55da      	strb	r2, [r3, r7]
 800dcf6:	b002      	add	sp, #8
 800dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfc:	9500      	str	r5, [sp, #0]
 800dcfe:	4633      	mov	r3, r6
 800dd00:	2200      	movs	r2, #0
 800dd02:	4641      	mov	r1, r8
 800dd04:	4620      	mov	r0, r4
 800dd06:	f7ff ffa5 	bl	800dc54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800dd0a:	e7ef      	b.n	800dcec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

0800dd0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	4b06      	ldr	r3, [pc, #24]	@ (800dd28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800dd10:	4604      	mov	r4, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	2100      	movs	r1, #0
 800dd18:	f7ff ff09 	bl	800db2e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4620      	mov	r0, r4
 800dd22:	f7ff ffcf 	bl	800dcc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	0800f814 	.word	0x0800f814

0800dd2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800dd2c:	b508      	push	{r3, lr}
 800dd2e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800dd32:	f7ff ffeb 	bl	800dd0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 800dd36:	bd08      	pop	{r3, pc}

0800dd38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800dd38:	b508      	push	{r3, lr}
 800dd3a:	f7ff fff7 	bl	800dd2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800dd3e:	bd08      	pop	{r3, pc}

0800dd40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800dd40:	6800      	ldr	r0, [r0, #0]
 800dd42:	4770      	bx	lr

0800dd44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800dd44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd46:	1a53      	subs	r3, r2, r1
 800dd48:	2b0f      	cmp	r3, #15
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	460d      	mov	r5, r1
 800dd4e:	4616      	mov	r6, r2
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	d906      	bls.n	800dd62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 800dd54:	2200      	movs	r2, #0
 800dd56:	a901      	add	r1, sp, #4
 800dd58:	f7ff febc 	bl	800dad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dd5c:	9b01      	ldr	r3, [sp, #4]
 800dd5e:	6020      	str	r0, [r4, #0]
 800dd60:	60a3      	str	r3, [r4, #8]
 800dd62:	4632      	mov	r2, r6
 800dd64:	4629      	mov	r1, r5
 800dd66:	6820      	ldr	r0, [r4, #0]
 800dd68:	f7ff fef9 	bl	800db5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	6822      	ldr	r2, [r4, #0]
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	2100      	movs	r1, #0
 800dd74:	54d1      	strb	r1, [r2, r3]
 800dd76:	b002      	add	sp, #8
 800dd78:	bd70      	pop	{r4, r5, r6, pc}

0800dd7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800dd7a:	f100 0208 	add.w	r2, r0, #8
 800dd7e:	b510      	push	{r4, lr}
 800dd80:	6002      	str	r2, [r0, #0]
 800dd82:	e9d1 1200 	ldrd	r1, r2, [r1]
 800dd86:	4604      	mov	r4, r0
 800dd88:	f04f 0300 	mov.w	r3, #0
 800dd8c:	440a      	add	r2, r1
 800dd8e:	f7ff ffd9 	bl	800dd44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800dd92:	4620      	mov	r0, r4
 800dd94:	bd10      	pop	{r4, pc}

0800dd96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800dd96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd98:	1a53      	subs	r3, r2, r1
 800dd9a:	2b0f      	cmp	r3, #15
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	460d      	mov	r5, r1
 800dda0:	4616      	mov	r6, r2
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	d906      	bls.n	800ddb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800dda6:	2200      	movs	r2, #0
 800dda8:	a901      	add	r1, sp, #4
 800ddaa:	f7ff fe93 	bl	800dad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ddae:	9b01      	ldr	r3, [sp, #4]
 800ddb0:	6020      	str	r0, [r4, #0]
 800ddb2:	60a3      	str	r3, [r4, #8]
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	6820      	ldr	r0, [r4, #0]
 800ddba:	f7ff fed5 	bl	800db68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	6822      	ldr	r2, [r4, #0]
 800ddc2:	6063      	str	r3, [r4, #4]
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	54d1      	strb	r1, [r2, r3]
 800ddc8:	b002      	add	sp, #8
 800ddca:	bd70      	pop	{r4, r5, r6, pc}

0800ddcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800ddcc:	f100 0308 	add.w	r3, r0, #8
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	6003      	str	r3, [r0, #0]
 800ddd6:	b919      	cbnz	r1, 800dde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 800ddd8:	b112      	cbz	r2, 800dde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 800ddda:	4805      	ldr	r0, [pc, #20]	@ (800ddf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x24>)
 800dddc:	f7ff fe69 	bl	800dab2 <_ZSt19__throw_logic_errorPKc>
 800dde0:	4620      	mov	r0, r4
 800dde2:	f04f 0300 	mov.w	r3, #0
 800dde6:	440a      	add	r2, r1
 800dde8:	f7ff ffd5 	bl	800dd96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ddec:	4620      	mov	r0, r4
 800ddee:	bd10      	pop	{r4, pc}
 800ddf0:	0800f829 	.word	0x0800f829

0800ddf4 <_ZdlPv>:
 800ddf4:	f000 b818 	b.w	800de28 <free>

0800ddf8 <_ZSt15get_new_handlerv>:
 800ddf8:	4b02      	ldr	r3, [pc, #8]	@ (800de04 <_ZSt15get_new_handlerv+0xc>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	f3bf 8f5b 	dmb	ish
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	200006c0 	.word	0x200006c0

0800de08 <abort>:
 800de08:	b508      	push	{r3, lr}
 800de0a:	2006      	movs	r0, #6
 800de0c:	f000 fb1e 	bl	800e44c <raise>
 800de10:	2001      	movs	r0, #1
 800de12:	f7fb f8bb 	bl	8008f8c <_exit>
	...

0800de18 <malloc>:
 800de18:	4b02      	ldr	r3, [pc, #8]	@ (800de24 <malloc+0xc>)
 800de1a:	4601      	mov	r1, r0
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f000 b82d 	b.w	800de7c <_malloc_r>
 800de22:	bf00      	nop
 800de24:	20000018 	.word	0x20000018

0800de28 <free>:
 800de28:	4b02      	ldr	r3, [pc, #8]	@ (800de34 <free+0xc>)
 800de2a:	4601      	mov	r1, r0
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	f000 bbbb 	b.w	800e5a8 <_free_r>
 800de32:	bf00      	nop
 800de34:	20000018 	.word	0x20000018

0800de38 <sbrk_aligned>:
 800de38:	b570      	push	{r4, r5, r6, lr}
 800de3a:	4e0f      	ldr	r6, [pc, #60]	@ (800de78 <sbrk_aligned+0x40>)
 800de3c:	460c      	mov	r4, r1
 800de3e:	6831      	ldr	r1, [r6, #0]
 800de40:	4605      	mov	r5, r0
 800de42:	b911      	cbnz	r1, 800de4a <sbrk_aligned+0x12>
 800de44:	f000 fb52 	bl	800e4ec <_sbrk_r>
 800de48:	6030      	str	r0, [r6, #0]
 800de4a:	4621      	mov	r1, r4
 800de4c:	4628      	mov	r0, r5
 800de4e:	f000 fb4d 	bl	800e4ec <_sbrk_r>
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	d103      	bne.n	800de5e <sbrk_aligned+0x26>
 800de56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de5a:	4620      	mov	r0, r4
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	1cc4      	adds	r4, r0, #3
 800de60:	f024 0403 	bic.w	r4, r4, #3
 800de64:	42a0      	cmp	r0, r4
 800de66:	d0f8      	beq.n	800de5a <sbrk_aligned+0x22>
 800de68:	1a21      	subs	r1, r4, r0
 800de6a:	4628      	mov	r0, r5
 800de6c:	f000 fb3e 	bl	800e4ec <_sbrk_r>
 800de70:	3001      	adds	r0, #1
 800de72:	d1f2      	bne.n	800de5a <sbrk_aligned+0x22>
 800de74:	e7ef      	b.n	800de56 <sbrk_aligned+0x1e>
 800de76:	bf00      	nop
 800de78:	200006c4 	.word	0x200006c4

0800de7c <_malloc_r>:
 800de7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de80:	1ccd      	adds	r5, r1, #3
 800de82:	f025 0503 	bic.w	r5, r5, #3
 800de86:	3508      	adds	r5, #8
 800de88:	2d0c      	cmp	r5, #12
 800de8a:	bf38      	it	cc
 800de8c:	250c      	movcc	r5, #12
 800de8e:	2d00      	cmp	r5, #0
 800de90:	4606      	mov	r6, r0
 800de92:	db01      	blt.n	800de98 <_malloc_r+0x1c>
 800de94:	42a9      	cmp	r1, r5
 800de96:	d904      	bls.n	800dea2 <_malloc_r+0x26>
 800de98:	230c      	movs	r3, #12
 800de9a:	6033      	str	r3, [r6, #0]
 800de9c:	2000      	movs	r0, #0
 800de9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df78 <_malloc_r+0xfc>
 800dea6:	f000 f869 	bl	800df7c <__malloc_lock>
 800deaa:	f8d8 3000 	ldr.w	r3, [r8]
 800deae:	461c      	mov	r4, r3
 800deb0:	bb44      	cbnz	r4, 800df04 <_malloc_r+0x88>
 800deb2:	4629      	mov	r1, r5
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7ff ffbf 	bl	800de38 <sbrk_aligned>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	4604      	mov	r4, r0
 800debe:	d158      	bne.n	800df72 <_malloc_r+0xf6>
 800dec0:	f8d8 4000 	ldr.w	r4, [r8]
 800dec4:	4627      	mov	r7, r4
 800dec6:	2f00      	cmp	r7, #0
 800dec8:	d143      	bne.n	800df52 <_malloc_r+0xd6>
 800deca:	2c00      	cmp	r4, #0
 800decc:	d04b      	beq.n	800df66 <_malloc_r+0xea>
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	4639      	mov	r1, r7
 800ded2:	4630      	mov	r0, r6
 800ded4:	eb04 0903 	add.w	r9, r4, r3
 800ded8:	f000 fb08 	bl	800e4ec <_sbrk_r>
 800dedc:	4581      	cmp	r9, r0
 800dede:	d142      	bne.n	800df66 <_malloc_r+0xea>
 800dee0:	6821      	ldr	r1, [r4, #0]
 800dee2:	1a6d      	subs	r5, r5, r1
 800dee4:	4629      	mov	r1, r5
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7ff ffa6 	bl	800de38 <sbrk_aligned>
 800deec:	3001      	adds	r0, #1
 800deee:	d03a      	beq.n	800df66 <_malloc_r+0xea>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	442b      	add	r3, r5
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	f8d8 3000 	ldr.w	r3, [r8]
 800defa:	685a      	ldr	r2, [r3, #4]
 800defc:	bb62      	cbnz	r2, 800df58 <_malloc_r+0xdc>
 800defe:	f8c8 7000 	str.w	r7, [r8]
 800df02:	e00f      	b.n	800df24 <_malloc_r+0xa8>
 800df04:	6822      	ldr	r2, [r4, #0]
 800df06:	1b52      	subs	r2, r2, r5
 800df08:	d420      	bmi.n	800df4c <_malloc_r+0xd0>
 800df0a:	2a0b      	cmp	r2, #11
 800df0c:	d917      	bls.n	800df3e <_malloc_r+0xc2>
 800df0e:	1961      	adds	r1, r4, r5
 800df10:	42a3      	cmp	r3, r4
 800df12:	6025      	str	r5, [r4, #0]
 800df14:	bf18      	it	ne
 800df16:	6059      	strne	r1, [r3, #4]
 800df18:	6863      	ldr	r3, [r4, #4]
 800df1a:	bf08      	it	eq
 800df1c:	f8c8 1000 	streq.w	r1, [r8]
 800df20:	5162      	str	r2, [r4, r5]
 800df22:	604b      	str	r3, [r1, #4]
 800df24:	4630      	mov	r0, r6
 800df26:	f000 f82f 	bl	800df88 <__malloc_unlock>
 800df2a:	f104 000b 	add.w	r0, r4, #11
 800df2e:	1d23      	adds	r3, r4, #4
 800df30:	f020 0007 	bic.w	r0, r0, #7
 800df34:	1ac2      	subs	r2, r0, r3
 800df36:	bf1c      	itt	ne
 800df38:	1a1b      	subne	r3, r3, r0
 800df3a:	50a3      	strne	r3, [r4, r2]
 800df3c:	e7af      	b.n	800de9e <_malloc_r+0x22>
 800df3e:	6862      	ldr	r2, [r4, #4]
 800df40:	42a3      	cmp	r3, r4
 800df42:	bf0c      	ite	eq
 800df44:	f8c8 2000 	streq.w	r2, [r8]
 800df48:	605a      	strne	r2, [r3, #4]
 800df4a:	e7eb      	b.n	800df24 <_malloc_r+0xa8>
 800df4c:	4623      	mov	r3, r4
 800df4e:	6864      	ldr	r4, [r4, #4]
 800df50:	e7ae      	b.n	800deb0 <_malloc_r+0x34>
 800df52:	463c      	mov	r4, r7
 800df54:	687f      	ldr	r7, [r7, #4]
 800df56:	e7b6      	b.n	800dec6 <_malloc_r+0x4a>
 800df58:	461a      	mov	r2, r3
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d1fb      	bne.n	800df58 <_malloc_r+0xdc>
 800df60:	2300      	movs	r3, #0
 800df62:	6053      	str	r3, [r2, #4]
 800df64:	e7de      	b.n	800df24 <_malloc_r+0xa8>
 800df66:	230c      	movs	r3, #12
 800df68:	6033      	str	r3, [r6, #0]
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 f80c 	bl	800df88 <__malloc_unlock>
 800df70:	e794      	b.n	800de9c <_malloc_r+0x20>
 800df72:	6005      	str	r5, [r0, #0]
 800df74:	e7d6      	b.n	800df24 <_malloc_r+0xa8>
 800df76:	bf00      	nop
 800df78:	200006c8 	.word	0x200006c8

0800df7c <__malloc_lock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	@ (800df84 <__malloc_lock+0x8>)
 800df7e:	f000 bb02 	b.w	800e586 <__retarget_lock_acquire_recursive>
 800df82:	bf00      	nop
 800df84:	2000080c 	.word	0x2000080c

0800df88 <__malloc_unlock>:
 800df88:	4801      	ldr	r0, [pc, #4]	@ (800df90 <__malloc_unlock+0x8>)
 800df8a:	f000 bafd 	b.w	800e588 <__retarget_lock_release_recursive>
 800df8e:	bf00      	nop
 800df90:	2000080c 	.word	0x2000080c

0800df94 <std>:
 800df94:	2300      	movs	r3, #0
 800df96:	b510      	push	{r4, lr}
 800df98:	4604      	mov	r4, r0
 800df9a:	e9c0 3300 	strd	r3, r3, [r0]
 800df9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa2:	6083      	str	r3, [r0, #8]
 800dfa4:	8181      	strh	r1, [r0, #12]
 800dfa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dfa8:	81c2      	strh	r2, [r0, #14]
 800dfaa:	6183      	str	r3, [r0, #24]
 800dfac:	4619      	mov	r1, r3
 800dfae:	2208      	movs	r2, #8
 800dfb0:	305c      	adds	r0, #92	@ 0x5c
 800dfb2:	f000 fa1b 	bl	800e3ec <memset>
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <std+0x58>)
 800dfb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfba:	4b0d      	ldr	r3, [pc, #52]	@ (800dff0 <std+0x5c>)
 800dfbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dff4 <std+0x60>)
 800dfc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <std+0x64>)
 800dfc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dffc <std+0x68>)
 800dfc8:	6224      	str	r4, [r4, #32]
 800dfca:	429c      	cmp	r4, r3
 800dfcc:	d006      	beq.n	800dfdc <std+0x48>
 800dfce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfd2:	4294      	cmp	r4, r2
 800dfd4:	d002      	beq.n	800dfdc <std+0x48>
 800dfd6:	33d0      	adds	r3, #208	@ 0xd0
 800dfd8:	429c      	cmp	r4, r3
 800dfda:	d105      	bne.n	800dfe8 <std+0x54>
 800dfdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe4:	f000 bace 	b.w	800e584 <__retarget_lock_init_recursive>
 800dfe8:	bd10      	pop	{r4, pc}
 800dfea:	bf00      	nop
 800dfec:	0800e209 	.word	0x0800e209
 800dff0:	0800e22b 	.word	0x0800e22b
 800dff4:	0800e263 	.word	0x0800e263
 800dff8:	0800e287 	.word	0x0800e287
 800dffc:	200006cc 	.word	0x200006cc

0800e000 <stdio_exit_handler>:
 800e000:	4a02      	ldr	r2, [pc, #8]	@ (800e00c <stdio_exit_handler+0xc>)
 800e002:	4903      	ldr	r1, [pc, #12]	@ (800e010 <stdio_exit_handler+0x10>)
 800e004:	4803      	ldr	r0, [pc, #12]	@ (800e014 <stdio_exit_handler+0x14>)
 800e006:	f000 b869 	b.w	800e0dc <_fwalk_sglue>
 800e00a:	bf00      	nop
 800e00c:	2000000c 	.word	0x2000000c
 800e010:	0800ece5 	.word	0x0800ece5
 800e014:	2000001c 	.word	0x2000001c

0800e018 <cleanup_stdio>:
 800e018:	6841      	ldr	r1, [r0, #4]
 800e01a:	4b0c      	ldr	r3, [pc, #48]	@ (800e04c <cleanup_stdio+0x34>)
 800e01c:	4299      	cmp	r1, r3
 800e01e:	b510      	push	{r4, lr}
 800e020:	4604      	mov	r4, r0
 800e022:	d001      	beq.n	800e028 <cleanup_stdio+0x10>
 800e024:	f000 fe5e 	bl	800ece4 <_fflush_r>
 800e028:	68a1      	ldr	r1, [r4, #8]
 800e02a:	4b09      	ldr	r3, [pc, #36]	@ (800e050 <cleanup_stdio+0x38>)
 800e02c:	4299      	cmp	r1, r3
 800e02e:	d002      	beq.n	800e036 <cleanup_stdio+0x1e>
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fe57 	bl	800ece4 <_fflush_r>
 800e036:	68e1      	ldr	r1, [r4, #12]
 800e038:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <cleanup_stdio+0x3c>)
 800e03a:	4299      	cmp	r1, r3
 800e03c:	d004      	beq.n	800e048 <cleanup_stdio+0x30>
 800e03e:	4620      	mov	r0, r4
 800e040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e044:	f000 be4e 	b.w	800ece4 <_fflush_r>
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	bf00      	nop
 800e04c:	200006cc 	.word	0x200006cc
 800e050:	20000734 	.word	0x20000734
 800e054:	2000079c 	.word	0x2000079c

0800e058 <global_stdio_init.part.0>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	4b0b      	ldr	r3, [pc, #44]	@ (800e088 <global_stdio_init.part.0+0x30>)
 800e05c:	4c0b      	ldr	r4, [pc, #44]	@ (800e08c <global_stdio_init.part.0+0x34>)
 800e05e:	4a0c      	ldr	r2, [pc, #48]	@ (800e090 <global_stdio_init.part.0+0x38>)
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	4620      	mov	r0, r4
 800e064:	2200      	movs	r2, #0
 800e066:	2104      	movs	r1, #4
 800e068:	f7ff ff94 	bl	800df94 <std>
 800e06c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e070:	2201      	movs	r2, #1
 800e072:	2109      	movs	r1, #9
 800e074:	f7ff ff8e 	bl	800df94 <std>
 800e078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e07c:	2202      	movs	r2, #2
 800e07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e082:	2112      	movs	r1, #18
 800e084:	f7ff bf86 	b.w	800df94 <std>
 800e088:	20000804 	.word	0x20000804
 800e08c:	200006cc 	.word	0x200006cc
 800e090:	0800e001 	.word	0x0800e001

0800e094 <__sfp_lock_acquire>:
 800e094:	4801      	ldr	r0, [pc, #4]	@ (800e09c <__sfp_lock_acquire+0x8>)
 800e096:	f000 ba76 	b.w	800e586 <__retarget_lock_acquire_recursive>
 800e09a:	bf00      	nop
 800e09c:	2000080d 	.word	0x2000080d

0800e0a0 <__sfp_lock_release>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	@ (800e0a8 <__sfp_lock_release+0x8>)
 800e0a2:	f000 ba71 	b.w	800e588 <__retarget_lock_release_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	2000080d 	.word	0x2000080d

0800e0ac <__sinit>:
 800e0ac:	b510      	push	{r4, lr}
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	f7ff fff0 	bl	800e094 <__sfp_lock_acquire>
 800e0b4:	6a23      	ldr	r3, [r4, #32]
 800e0b6:	b11b      	cbz	r3, 800e0c0 <__sinit+0x14>
 800e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0bc:	f7ff bff0 	b.w	800e0a0 <__sfp_lock_release>
 800e0c0:	4b04      	ldr	r3, [pc, #16]	@ (800e0d4 <__sinit+0x28>)
 800e0c2:	6223      	str	r3, [r4, #32]
 800e0c4:	4b04      	ldr	r3, [pc, #16]	@ (800e0d8 <__sinit+0x2c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1f5      	bne.n	800e0b8 <__sinit+0xc>
 800e0cc:	f7ff ffc4 	bl	800e058 <global_stdio_init.part.0>
 800e0d0:	e7f2      	b.n	800e0b8 <__sinit+0xc>
 800e0d2:	bf00      	nop
 800e0d4:	0800e019 	.word	0x0800e019
 800e0d8:	20000804 	.word	0x20000804

0800e0dc <_fwalk_sglue>:
 800e0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	4688      	mov	r8, r1
 800e0e4:	4614      	mov	r4, r2
 800e0e6:	2600      	movs	r6, #0
 800e0e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0ec:	f1b9 0901 	subs.w	r9, r9, #1
 800e0f0:	d505      	bpl.n	800e0fe <_fwalk_sglue+0x22>
 800e0f2:	6824      	ldr	r4, [r4, #0]
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	d1f7      	bne.n	800e0e8 <_fwalk_sglue+0xc>
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d907      	bls.n	800e114 <_fwalk_sglue+0x38>
 800e104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e108:	3301      	adds	r3, #1
 800e10a:	d003      	beq.n	800e114 <_fwalk_sglue+0x38>
 800e10c:	4629      	mov	r1, r5
 800e10e:	4638      	mov	r0, r7
 800e110:	47c0      	blx	r8
 800e112:	4306      	orrs	r6, r0
 800e114:	3568      	adds	r5, #104	@ 0x68
 800e116:	e7e9      	b.n	800e0ec <_fwalk_sglue+0x10>

0800e118 <iprintf>:
 800e118:	b40f      	push	{r0, r1, r2, r3}
 800e11a:	b507      	push	{r0, r1, r2, lr}
 800e11c:	4906      	ldr	r1, [pc, #24]	@ (800e138 <iprintf+0x20>)
 800e11e:	ab04      	add	r3, sp, #16
 800e120:	6808      	ldr	r0, [r1, #0]
 800e122:	f853 2b04 	ldr.w	r2, [r3], #4
 800e126:	6881      	ldr	r1, [r0, #8]
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	f000 fab1 	bl	800e690 <_vfiprintf_r>
 800e12e:	b003      	add	sp, #12
 800e130:	f85d eb04 	ldr.w	lr, [sp], #4
 800e134:	b004      	add	sp, #16
 800e136:	4770      	bx	lr
 800e138:	20000018 	.word	0x20000018

0800e13c <putchar>:
 800e13c:	4b02      	ldr	r3, [pc, #8]	@ (800e148 <putchar+0xc>)
 800e13e:	4601      	mov	r1, r0
 800e140:	6818      	ldr	r0, [r3, #0]
 800e142:	6882      	ldr	r2, [r0, #8]
 800e144:	f000 be58 	b.w	800edf8 <_putc_r>
 800e148:	20000018 	.word	0x20000018

0800e14c <_puts_r>:
 800e14c:	6a03      	ldr	r3, [r0, #32]
 800e14e:	b570      	push	{r4, r5, r6, lr}
 800e150:	6884      	ldr	r4, [r0, #8]
 800e152:	4605      	mov	r5, r0
 800e154:	460e      	mov	r6, r1
 800e156:	b90b      	cbnz	r3, 800e15c <_puts_r+0x10>
 800e158:	f7ff ffa8 	bl	800e0ac <__sinit>
 800e15c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e15e:	07db      	lsls	r3, r3, #31
 800e160:	d405      	bmi.n	800e16e <_puts_r+0x22>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	0598      	lsls	r0, r3, #22
 800e166:	d402      	bmi.n	800e16e <_puts_r+0x22>
 800e168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e16a:	f000 fa0c 	bl	800e586 <__retarget_lock_acquire_recursive>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	0719      	lsls	r1, r3, #28
 800e172:	d502      	bpl.n	800e17a <_puts_r+0x2e>
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d135      	bne.n	800e1e6 <_puts_r+0x9a>
 800e17a:	4621      	mov	r1, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f000 f8c5 	bl	800e30c <__swsetup_r>
 800e182:	b380      	cbz	r0, 800e1e6 <_puts_r+0x9a>
 800e184:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e18a:	07da      	lsls	r2, r3, #31
 800e18c:	d405      	bmi.n	800e19a <_puts_r+0x4e>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	059b      	lsls	r3, r3, #22
 800e192:	d402      	bmi.n	800e19a <_puts_r+0x4e>
 800e194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e196:	f000 f9f7 	bl	800e588 <__retarget_lock_release_recursive>
 800e19a:	4628      	mov	r0, r5
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	da04      	bge.n	800e1ac <_puts_r+0x60>
 800e1a2:	69a2      	ldr	r2, [r4, #24]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	dc17      	bgt.n	800e1d8 <_puts_r+0x8c>
 800e1a8:	290a      	cmp	r1, #10
 800e1aa:	d015      	beq.n	800e1d8 <_puts_r+0x8c>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	1c5a      	adds	r2, r3, #1
 800e1b0:	6022      	str	r2, [r4, #0]
 800e1b2:	7019      	strb	r1, [r3, #0]
 800e1b4:	68a3      	ldr	r3, [r4, #8]
 800e1b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	60a3      	str	r3, [r4, #8]
 800e1be:	2900      	cmp	r1, #0
 800e1c0:	d1ed      	bne.n	800e19e <_puts_r+0x52>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	da11      	bge.n	800e1ea <_puts_r+0x9e>
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	210a      	movs	r1, #10
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f000 f85f 	bl	800e28e <__swbuf_r>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d0d7      	beq.n	800e184 <_puts_r+0x38>
 800e1d4:	250a      	movs	r5, #10
 800e1d6:	e7d7      	b.n	800e188 <_puts_r+0x3c>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f000 f857 	bl	800e28e <__swbuf_r>
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d1e7      	bne.n	800e1b4 <_puts_r+0x68>
 800e1e4:	e7ce      	b.n	800e184 <_puts_r+0x38>
 800e1e6:	3e01      	subs	r6, #1
 800e1e8:	e7e4      	b.n	800e1b4 <_puts_r+0x68>
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	6022      	str	r2, [r4, #0]
 800e1f0:	220a      	movs	r2, #10
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	e7ee      	b.n	800e1d4 <_puts_r+0x88>
	...

0800e1f8 <puts>:
 800e1f8:	4b02      	ldr	r3, [pc, #8]	@ (800e204 <puts+0xc>)
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	6818      	ldr	r0, [r3, #0]
 800e1fe:	f7ff bfa5 	b.w	800e14c <_puts_r>
 800e202:	bf00      	nop
 800e204:	20000018 	.word	0x20000018

0800e208 <__sread>:
 800e208:	b510      	push	{r4, lr}
 800e20a:	460c      	mov	r4, r1
 800e20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e210:	f000 f946 	bl	800e4a0 <_read_r>
 800e214:	2800      	cmp	r0, #0
 800e216:	bfab      	itete	ge
 800e218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e21a:	89a3      	ldrhlt	r3, [r4, #12]
 800e21c:	181b      	addge	r3, r3, r0
 800e21e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e222:	bfac      	ite	ge
 800e224:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e226:	81a3      	strhlt	r3, [r4, #12]
 800e228:	bd10      	pop	{r4, pc}

0800e22a <__swrite>:
 800e22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22e:	461f      	mov	r7, r3
 800e230:	898b      	ldrh	r3, [r1, #12]
 800e232:	05db      	lsls	r3, r3, #23
 800e234:	4605      	mov	r5, r0
 800e236:	460c      	mov	r4, r1
 800e238:	4616      	mov	r6, r2
 800e23a:	d505      	bpl.n	800e248 <__swrite+0x1e>
 800e23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e240:	2302      	movs	r3, #2
 800e242:	2200      	movs	r2, #0
 800e244:	f000 f91a 	bl	800e47c <_lseek_r>
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e24e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e252:	81a3      	strh	r3, [r4, #12]
 800e254:	4632      	mov	r2, r6
 800e256:	463b      	mov	r3, r7
 800e258:	4628      	mov	r0, r5
 800e25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e25e:	f000 b955 	b.w	800e50c <_write_r>

0800e262 <__sseek>:
 800e262:	b510      	push	{r4, lr}
 800e264:	460c      	mov	r4, r1
 800e266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e26a:	f000 f907 	bl	800e47c <_lseek_r>
 800e26e:	1c43      	adds	r3, r0, #1
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	bf15      	itete	ne
 800e274:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e27a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e27e:	81a3      	strheq	r3, [r4, #12]
 800e280:	bf18      	it	ne
 800e282:	81a3      	strhne	r3, [r4, #12]
 800e284:	bd10      	pop	{r4, pc}

0800e286 <__sclose>:
 800e286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e28a:	f000 b8e7 	b.w	800e45c <_close_r>

0800e28e <__swbuf_r>:
 800e28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e290:	460e      	mov	r6, r1
 800e292:	4614      	mov	r4, r2
 800e294:	4605      	mov	r5, r0
 800e296:	b118      	cbz	r0, 800e2a0 <__swbuf_r+0x12>
 800e298:	6a03      	ldr	r3, [r0, #32]
 800e29a:	b90b      	cbnz	r3, 800e2a0 <__swbuf_r+0x12>
 800e29c:	f7ff ff06 	bl	800e0ac <__sinit>
 800e2a0:	69a3      	ldr	r3, [r4, #24]
 800e2a2:	60a3      	str	r3, [r4, #8]
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	071a      	lsls	r2, r3, #28
 800e2a8:	d501      	bpl.n	800e2ae <__swbuf_r+0x20>
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	b943      	cbnz	r3, 800e2c0 <__swbuf_r+0x32>
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f000 f82b 	bl	800e30c <__swsetup_r>
 800e2b6:	b118      	cbz	r0, 800e2c0 <__swbuf_r+0x32>
 800e2b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e2bc:	4638      	mov	r0, r7
 800e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	6922      	ldr	r2, [r4, #16]
 800e2c4:	1a98      	subs	r0, r3, r2
 800e2c6:	6963      	ldr	r3, [r4, #20]
 800e2c8:	b2f6      	uxtb	r6, r6
 800e2ca:	4283      	cmp	r3, r0
 800e2cc:	4637      	mov	r7, r6
 800e2ce:	dc05      	bgt.n	800e2dc <__swbuf_r+0x4e>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 fd06 	bl	800ece4 <_fflush_r>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d1ed      	bne.n	800e2b8 <__swbuf_r+0x2a>
 800e2dc:	68a3      	ldr	r3, [r4, #8]
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	60a3      	str	r3, [r4, #8]
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	6022      	str	r2, [r4, #0]
 800e2e8:	701e      	strb	r6, [r3, #0]
 800e2ea:	6962      	ldr	r2, [r4, #20]
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d004      	beq.n	800e2fc <__swbuf_r+0x6e>
 800e2f2:	89a3      	ldrh	r3, [r4, #12]
 800e2f4:	07db      	lsls	r3, r3, #31
 800e2f6:	d5e1      	bpl.n	800e2bc <__swbuf_r+0x2e>
 800e2f8:	2e0a      	cmp	r6, #10
 800e2fa:	d1df      	bne.n	800e2bc <__swbuf_r+0x2e>
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	4628      	mov	r0, r5
 800e300:	f000 fcf0 	bl	800ece4 <_fflush_r>
 800e304:	2800      	cmp	r0, #0
 800e306:	d0d9      	beq.n	800e2bc <__swbuf_r+0x2e>
 800e308:	e7d6      	b.n	800e2b8 <__swbuf_r+0x2a>
	...

0800e30c <__swsetup_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4b29      	ldr	r3, [pc, #164]	@ (800e3b4 <__swsetup_r+0xa8>)
 800e310:	4605      	mov	r5, r0
 800e312:	6818      	ldr	r0, [r3, #0]
 800e314:	460c      	mov	r4, r1
 800e316:	b118      	cbz	r0, 800e320 <__swsetup_r+0x14>
 800e318:	6a03      	ldr	r3, [r0, #32]
 800e31a:	b90b      	cbnz	r3, 800e320 <__swsetup_r+0x14>
 800e31c:	f7ff fec6 	bl	800e0ac <__sinit>
 800e320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e324:	0719      	lsls	r1, r3, #28
 800e326:	d422      	bmi.n	800e36e <__swsetup_r+0x62>
 800e328:	06da      	lsls	r2, r3, #27
 800e32a:	d407      	bmi.n	800e33c <__swsetup_r+0x30>
 800e32c:	2209      	movs	r2, #9
 800e32e:	602a      	str	r2, [r5, #0]
 800e330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e334:	81a3      	strh	r3, [r4, #12]
 800e336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e33a:	e033      	b.n	800e3a4 <__swsetup_r+0x98>
 800e33c:	0758      	lsls	r0, r3, #29
 800e33e:	d512      	bpl.n	800e366 <__swsetup_r+0x5a>
 800e340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e342:	b141      	cbz	r1, 800e356 <__swsetup_r+0x4a>
 800e344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e348:	4299      	cmp	r1, r3
 800e34a:	d002      	beq.n	800e352 <__swsetup_r+0x46>
 800e34c:	4628      	mov	r0, r5
 800e34e:	f000 f92b 	bl	800e5a8 <_free_r>
 800e352:	2300      	movs	r3, #0
 800e354:	6363      	str	r3, [r4, #52]	@ 0x34
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e35c:	81a3      	strh	r3, [r4, #12]
 800e35e:	2300      	movs	r3, #0
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	6923      	ldr	r3, [r4, #16]
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	89a3      	ldrh	r3, [r4, #12]
 800e368:	f043 0308 	orr.w	r3, r3, #8
 800e36c:	81a3      	strh	r3, [r4, #12]
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	b94b      	cbnz	r3, 800e386 <__swsetup_r+0x7a>
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e37c:	d003      	beq.n	800e386 <__swsetup_r+0x7a>
 800e37e:	4621      	mov	r1, r4
 800e380:	4628      	mov	r0, r5
 800e382:	f000 fcfd 	bl	800ed80 <__smakebuf_r>
 800e386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e38a:	f013 0201 	ands.w	r2, r3, #1
 800e38e:	d00a      	beq.n	800e3a6 <__swsetup_r+0x9a>
 800e390:	2200      	movs	r2, #0
 800e392:	60a2      	str	r2, [r4, #8]
 800e394:	6962      	ldr	r2, [r4, #20]
 800e396:	4252      	negs	r2, r2
 800e398:	61a2      	str	r2, [r4, #24]
 800e39a:	6922      	ldr	r2, [r4, #16]
 800e39c:	b942      	cbnz	r2, 800e3b0 <__swsetup_r+0xa4>
 800e39e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3a2:	d1c5      	bne.n	800e330 <__swsetup_r+0x24>
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	0799      	lsls	r1, r3, #30
 800e3a8:	bf58      	it	pl
 800e3aa:	6962      	ldrpl	r2, [r4, #20]
 800e3ac:	60a2      	str	r2, [r4, #8]
 800e3ae:	e7f4      	b.n	800e39a <__swsetup_r+0x8e>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7f7      	b.n	800e3a4 <__swsetup_r+0x98>
 800e3b4:	20000018 	.word	0x20000018

0800e3b8 <memmove>:
 800e3b8:	4288      	cmp	r0, r1
 800e3ba:	b510      	push	{r4, lr}
 800e3bc:	eb01 0402 	add.w	r4, r1, r2
 800e3c0:	d902      	bls.n	800e3c8 <memmove+0x10>
 800e3c2:	4284      	cmp	r4, r0
 800e3c4:	4623      	mov	r3, r4
 800e3c6:	d807      	bhi.n	800e3d8 <memmove+0x20>
 800e3c8:	1e43      	subs	r3, r0, #1
 800e3ca:	42a1      	cmp	r1, r4
 800e3cc:	d008      	beq.n	800e3e0 <memmove+0x28>
 800e3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3d6:	e7f8      	b.n	800e3ca <memmove+0x12>
 800e3d8:	4402      	add	r2, r0
 800e3da:	4601      	mov	r1, r0
 800e3dc:	428a      	cmp	r2, r1
 800e3de:	d100      	bne.n	800e3e2 <memmove+0x2a>
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3ea:	e7f7      	b.n	800e3dc <memmove+0x24>

0800e3ec <memset>:
 800e3ec:	4402      	add	r2, r0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d100      	bne.n	800e3f6 <memset+0xa>
 800e3f4:	4770      	bx	lr
 800e3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fa:	e7f9      	b.n	800e3f0 <memset+0x4>

0800e3fc <_raise_r>:
 800e3fc:	291f      	cmp	r1, #31
 800e3fe:	b538      	push	{r3, r4, r5, lr}
 800e400:	4605      	mov	r5, r0
 800e402:	460c      	mov	r4, r1
 800e404:	d904      	bls.n	800e410 <_raise_r+0x14>
 800e406:	2316      	movs	r3, #22
 800e408:	6003      	str	r3, [r0, #0]
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e412:	b112      	cbz	r2, 800e41a <_raise_r+0x1e>
 800e414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e418:	b94b      	cbnz	r3, 800e42e <_raise_r+0x32>
 800e41a:	4628      	mov	r0, r5
 800e41c:	f000 f864 	bl	800e4e8 <_getpid_r>
 800e420:	4622      	mov	r2, r4
 800e422:	4601      	mov	r1, r0
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e42a:	f000 b84b 	b.w	800e4c4 <_kill_r>
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d00a      	beq.n	800e448 <_raise_r+0x4c>
 800e432:	1c59      	adds	r1, r3, #1
 800e434:	d103      	bne.n	800e43e <_raise_r+0x42>
 800e436:	2316      	movs	r3, #22
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	2001      	movs	r0, #1
 800e43c:	e7e7      	b.n	800e40e <_raise_r+0x12>
 800e43e:	2100      	movs	r1, #0
 800e440:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e444:	4620      	mov	r0, r4
 800e446:	4798      	blx	r3
 800e448:	2000      	movs	r0, #0
 800e44a:	e7e0      	b.n	800e40e <_raise_r+0x12>

0800e44c <raise>:
 800e44c:	4b02      	ldr	r3, [pc, #8]	@ (800e458 <raise+0xc>)
 800e44e:	4601      	mov	r1, r0
 800e450:	6818      	ldr	r0, [r3, #0]
 800e452:	f7ff bfd3 	b.w	800e3fc <_raise_r>
 800e456:	bf00      	nop
 800e458:	20000018 	.word	0x20000018

0800e45c <_close_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	4d06      	ldr	r5, [pc, #24]	@ (800e478 <_close_r+0x1c>)
 800e460:	2300      	movs	r3, #0
 800e462:	4604      	mov	r4, r0
 800e464:	4608      	mov	r0, r1
 800e466:	602b      	str	r3, [r5, #0]
 800e468:	f7fa fdb8 	bl	8008fdc <_close>
 800e46c:	1c43      	adds	r3, r0, #1
 800e46e:	d102      	bne.n	800e476 <_close_r+0x1a>
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	b103      	cbz	r3, 800e476 <_close_r+0x1a>
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	20000808 	.word	0x20000808

0800e47c <_lseek_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d07      	ldr	r5, [pc, #28]	@ (800e49c <_lseek_r+0x20>)
 800e480:	4604      	mov	r4, r0
 800e482:	4608      	mov	r0, r1
 800e484:	4611      	mov	r1, r2
 800e486:	2200      	movs	r2, #0
 800e488:	602a      	str	r2, [r5, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f7fa fdcd 	bl	800902a <_lseek>
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	d102      	bne.n	800e49a <_lseek_r+0x1e>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	b103      	cbz	r3, 800e49a <_lseek_r+0x1e>
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
 800e49c:	20000808 	.word	0x20000808

0800e4a0 <_read_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4d07      	ldr	r5, [pc, #28]	@ (800e4c0 <_read_r+0x20>)
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	4608      	mov	r0, r1
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	602a      	str	r2, [r5, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7fa fd77 	bl	8008fa2 <_read>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_read_r+0x1e>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_read_r+0x1e>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20000808 	.word	0x20000808

0800e4c4 <_kill_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4d07      	ldr	r5, [pc, #28]	@ (800e4e4 <_kill_r+0x20>)
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	602b      	str	r3, [r5, #0]
 800e4d2:	f7fa fd4b 	bl	8008f6c <_kill>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	d102      	bne.n	800e4e0 <_kill_r+0x1c>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	b103      	cbz	r3, 800e4e0 <_kill_r+0x1c>
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20000808 	.word	0x20000808

0800e4e8 <_getpid_r>:
 800e4e8:	f7fa bd38 	b.w	8008f5c <_getpid>

0800e4ec <_sbrk_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d06      	ldr	r5, [pc, #24]	@ (800e508 <_sbrk_r+0x1c>)
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	602b      	str	r3, [r5, #0]
 800e4f8:	f7fa fda4 	bl	8009044 <_sbrk>
 800e4fc:	1c43      	adds	r3, r0, #1
 800e4fe:	d102      	bne.n	800e506 <_sbrk_r+0x1a>
 800e500:	682b      	ldr	r3, [r5, #0]
 800e502:	b103      	cbz	r3, 800e506 <_sbrk_r+0x1a>
 800e504:	6023      	str	r3, [r4, #0]
 800e506:	bd38      	pop	{r3, r4, r5, pc}
 800e508:	20000808 	.word	0x20000808

0800e50c <_write_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4d07      	ldr	r5, [pc, #28]	@ (800e52c <_write_r+0x20>)
 800e510:	4604      	mov	r4, r0
 800e512:	4608      	mov	r0, r1
 800e514:	4611      	mov	r1, r2
 800e516:	2200      	movs	r2, #0
 800e518:	602a      	str	r2, [r5, #0]
 800e51a:	461a      	mov	r2, r3
 800e51c:	f7f4 f872 	bl	8002604 <_write>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	d102      	bne.n	800e52a <_write_r+0x1e>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	b103      	cbz	r3, 800e52a <_write_r+0x1e>
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	bd38      	pop	{r3, r4, r5, pc}
 800e52c:	20000808 	.word	0x20000808

0800e530 <__errno>:
 800e530:	4b01      	ldr	r3, [pc, #4]	@ (800e538 <__errno+0x8>)
 800e532:	6818      	ldr	r0, [r3, #0]
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	20000018 	.word	0x20000018

0800e53c <__libc_init_array>:
 800e53c:	b570      	push	{r4, r5, r6, lr}
 800e53e:	4d0d      	ldr	r5, [pc, #52]	@ (800e574 <__libc_init_array+0x38>)
 800e540:	4c0d      	ldr	r4, [pc, #52]	@ (800e578 <__libc_init_array+0x3c>)
 800e542:	1b64      	subs	r4, r4, r5
 800e544:	10a4      	asrs	r4, r4, #2
 800e546:	2600      	movs	r6, #0
 800e548:	42a6      	cmp	r6, r4
 800e54a:	d109      	bne.n	800e560 <__libc_init_array+0x24>
 800e54c:	4d0b      	ldr	r5, [pc, #44]	@ (800e57c <__libc_init_array+0x40>)
 800e54e:	4c0c      	ldr	r4, [pc, #48]	@ (800e580 <__libc_init_array+0x44>)
 800e550:	f000 fca8 	bl	800eea4 <_init>
 800e554:	1b64      	subs	r4, r4, r5
 800e556:	10a4      	asrs	r4, r4, #2
 800e558:	2600      	movs	r6, #0
 800e55a:	42a6      	cmp	r6, r4
 800e55c:	d105      	bne.n	800e56a <__libc_init_array+0x2e>
 800e55e:	bd70      	pop	{r4, r5, r6, pc}
 800e560:	f855 3b04 	ldr.w	r3, [r5], #4
 800e564:	4798      	blx	r3
 800e566:	3601      	adds	r6, #1
 800e568:	e7ee      	b.n	800e548 <__libc_init_array+0xc>
 800e56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e56e:	4798      	blx	r3
 800e570:	3601      	adds	r6, #1
 800e572:	e7f2      	b.n	800e55a <__libc_init_array+0x1e>
 800e574:	0800f898 	.word	0x0800f898
 800e578:	0800f898 	.word	0x0800f898
 800e57c:	0800f898 	.word	0x0800f898
 800e580:	0800f8a0 	.word	0x0800f8a0

0800e584 <__retarget_lock_init_recursive>:
 800e584:	4770      	bx	lr

0800e586 <__retarget_lock_acquire_recursive>:
 800e586:	4770      	bx	lr

0800e588 <__retarget_lock_release_recursive>:
 800e588:	4770      	bx	lr

0800e58a <memcpy>:
 800e58a:	440a      	add	r2, r1
 800e58c:	4291      	cmp	r1, r2
 800e58e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e592:	d100      	bne.n	800e596 <memcpy+0xc>
 800e594:	4770      	bx	lr
 800e596:	b510      	push	{r4, lr}
 800e598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e59c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5a0:	4291      	cmp	r1, r2
 800e5a2:	d1f9      	bne.n	800e598 <memcpy+0xe>
 800e5a4:	bd10      	pop	{r4, pc}
	...

0800e5a8 <_free_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d041      	beq.n	800e634 <_free_r+0x8c>
 800e5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5b4:	1f0c      	subs	r4, r1, #4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	bfb8      	it	lt
 800e5ba:	18e4      	addlt	r4, r4, r3
 800e5bc:	f7ff fcde 	bl	800df7c <__malloc_lock>
 800e5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e638 <_free_r+0x90>)
 800e5c2:	6813      	ldr	r3, [r2, #0]
 800e5c4:	b933      	cbnz	r3, 800e5d4 <_free_r+0x2c>
 800e5c6:	6063      	str	r3, [r4, #4]
 800e5c8:	6014      	str	r4, [r2, #0]
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5d0:	f7ff bcda 	b.w	800df88 <__malloc_unlock>
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d908      	bls.n	800e5ea <_free_r+0x42>
 800e5d8:	6820      	ldr	r0, [r4, #0]
 800e5da:	1821      	adds	r1, r4, r0
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	bf01      	itttt	eq
 800e5e0:	6819      	ldreq	r1, [r3, #0]
 800e5e2:	685b      	ldreq	r3, [r3, #4]
 800e5e4:	1809      	addeq	r1, r1, r0
 800e5e6:	6021      	streq	r1, [r4, #0]
 800e5e8:	e7ed      	b.n	800e5c6 <_free_r+0x1e>
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	b10b      	cbz	r3, 800e5f4 <_free_r+0x4c>
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	d9fa      	bls.n	800e5ea <_free_r+0x42>
 800e5f4:	6811      	ldr	r1, [r2, #0]
 800e5f6:	1850      	adds	r0, r2, r1
 800e5f8:	42a0      	cmp	r0, r4
 800e5fa:	d10b      	bne.n	800e614 <_free_r+0x6c>
 800e5fc:	6820      	ldr	r0, [r4, #0]
 800e5fe:	4401      	add	r1, r0
 800e600:	1850      	adds	r0, r2, r1
 800e602:	4283      	cmp	r3, r0
 800e604:	6011      	str	r1, [r2, #0]
 800e606:	d1e0      	bne.n	800e5ca <_free_r+0x22>
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	6053      	str	r3, [r2, #4]
 800e60e:	4408      	add	r0, r1
 800e610:	6010      	str	r0, [r2, #0]
 800e612:	e7da      	b.n	800e5ca <_free_r+0x22>
 800e614:	d902      	bls.n	800e61c <_free_r+0x74>
 800e616:	230c      	movs	r3, #12
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	e7d6      	b.n	800e5ca <_free_r+0x22>
 800e61c:	6820      	ldr	r0, [r4, #0]
 800e61e:	1821      	adds	r1, r4, r0
 800e620:	428b      	cmp	r3, r1
 800e622:	bf04      	itt	eq
 800e624:	6819      	ldreq	r1, [r3, #0]
 800e626:	685b      	ldreq	r3, [r3, #4]
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	bf04      	itt	eq
 800e62c:	1809      	addeq	r1, r1, r0
 800e62e:	6021      	streq	r1, [r4, #0]
 800e630:	6054      	str	r4, [r2, #4]
 800e632:	e7ca      	b.n	800e5ca <_free_r+0x22>
 800e634:	bd38      	pop	{r3, r4, r5, pc}
 800e636:	bf00      	nop
 800e638:	200006c8 	.word	0x200006c8

0800e63c <__sfputc_r>:
 800e63c:	6893      	ldr	r3, [r2, #8]
 800e63e:	3b01      	subs	r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	b410      	push	{r4}
 800e644:	6093      	str	r3, [r2, #8]
 800e646:	da08      	bge.n	800e65a <__sfputc_r+0x1e>
 800e648:	6994      	ldr	r4, [r2, #24]
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	db01      	blt.n	800e652 <__sfputc_r+0x16>
 800e64e:	290a      	cmp	r1, #10
 800e650:	d103      	bne.n	800e65a <__sfputc_r+0x1e>
 800e652:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e656:	f7ff be1a 	b.w	800e28e <__swbuf_r>
 800e65a:	6813      	ldr	r3, [r2, #0]
 800e65c:	1c58      	adds	r0, r3, #1
 800e65e:	6010      	str	r0, [r2, #0]
 800e660:	7019      	strb	r1, [r3, #0]
 800e662:	4608      	mov	r0, r1
 800e664:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <__sfputs_r>:
 800e66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66c:	4606      	mov	r6, r0
 800e66e:	460f      	mov	r7, r1
 800e670:	4614      	mov	r4, r2
 800e672:	18d5      	adds	r5, r2, r3
 800e674:	42ac      	cmp	r4, r5
 800e676:	d101      	bne.n	800e67c <__sfputs_r+0x12>
 800e678:	2000      	movs	r0, #0
 800e67a:	e007      	b.n	800e68c <__sfputs_r+0x22>
 800e67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e680:	463a      	mov	r2, r7
 800e682:	4630      	mov	r0, r6
 800e684:	f7ff ffda 	bl	800e63c <__sfputc_r>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d1f3      	bne.n	800e674 <__sfputs_r+0xa>
 800e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e690 <_vfiprintf_r>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	460d      	mov	r5, r1
 800e696:	b09d      	sub	sp, #116	@ 0x74
 800e698:	4614      	mov	r4, r2
 800e69a:	4698      	mov	r8, r3
 800e69c:	4606      	mov	r6, r0
 800e69e:	b118      	cbz	r0, 800e6a8 <_vfiprintf_r+0x18>
 800e6a0:	6a03      	ldr	r3, [r0, #32]
 800e6a2:	b90b      	cbnz	r3, 800e6a8 <_vfiprintf_r+0x18>
 800e6a4:	f7ff fd02 	bl	800e0ac <__sinit>
 800e6a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6aa:	07d9      	lsls	r1, r3, #31
 800e6ac:	d405      	bmi.n	800e6ba <_vfiprintf_r+0x2a>
 800e6ae:	89ab      	ldrh	r3, [r5, #12]
 800e6b0:	059a      	lsls	r2, r3, #22
 800e6b2:	d402      	bmi.n	800e6ba <_vfiprintf_r+0x2a>
 800e6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6b6:	f7ff ff66 	bl	800e586 <__retarget_lock_acquire_recursive>
 800e6ba:	89ab      	ldrh	r3, [r5, #12]
 800e6bc:	071b      	lsls	r3, r3, #28
 800e6be:	d501      	bpl.n	800e6c4 <_vfiprintf_r+0x34>
 800e6c0:	692b      	ldr	r3, [r5, #16]
 800e6c2:	b99b      	cbnz	r3, 800e6ec <_vfiprintf_r+0x5c>
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f7ff fe20 	bl	800e30c <__swsetup_r>
 800e6cc:	b170      	cbz	r0, 800e6ec <_vfiprintf_r+0x5c>
 800e6ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6d0:	07dc      	lsls	r4, r3, #31
 800e6d2:	d504      	bpl.n	800e6de <_vfiprintf_r+0x4e>
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6d8:	b01d      	add	sp, #116	@ 0x74
 800e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6de:	89ab      	ldrh	r3, [r5, #12]
 800e6e0:	0598      	lsls	r0, r3, #22
 800e6e2:	d4f7      	bmi.n	800e6d4 <_vfiprintf_r+0x44>
 800e6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6e6:	f7ff ff4f 	bl	800e588 <__retarget_lock_release_recursive>
 800e6ea:	e7f3      	b.n	800e6d4 <_vfiprintf_r+0x44>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6f0:	2320      	movs	r3, #32
 800e6f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6fa:	2330      	movs	r3, #48	@ 0x30
 800e6fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e8ac <_vfiprintf_r+0x21c>
 800e700:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e704:	f04f 0901 	mov.w	r9, #1
 800e708:	4623      	mov	r3, r4
 800e70a:	469a      	mov	sl, r3
 800e70c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e710:	b10a      	cbz	r2, 800e716 <_vfiprintf_r+0x86>
 800e712:	2a25      	cmp	r2, #37	@ 0x25
 800e714:	d1f9      	bne.n	800e70a <_vfiprintf_r+0x7a>
 800e716:	ebba 0b04 	subs.w	fp, sl, r4
 800e71a:	d00b      	beq.n	800e734 <_vfiprintf_r+0xa4>
 800e71c:	465b      	mov	r3, fp
 800e71e:	4622      	mov	r2, r4
 800e720:	4629      	mov	r1, r5
 800e722:	4630      	mov	r0, r6
 800e724:	f7ff ffa1 	bl	800e66a <__sfputs_r>
 800e728:	3001      	adds	r0, #1
 800e72a:	f000 80a7 	beq.w	800e87c <_vfiprintf_r+0x1ec>
 800e72e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e730:	445a      	add	r2, fp
 800e732:	9209      	str	r2, [sp, #36]	@ 0x24
 800e734:	f89a 3000 	ldrb.w	r3, [sl]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 809f 	beq.w	800e87c <_vfiprintf_r+0x1ec>
 800e73e:	2300      	movs	r3, #0
 800e740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e748:	f10a 0a01 	add.w	sl, sl, #1
 800e74c:	9304      	str	r3, [sp, #16]
 800e74e:	9307      	str	r3, [sp, #28]
 800e750:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e754:	931a      	str	r3, [sp, #104]	@ 0x68
 800e756:	4654      	mov	r4, sl
 800e758:	2205      	movs	r2, #5
 800e75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e75e:	4853      	ldr	r0, [pc, #332]	@ (800e8ac <_vfiprintf_r+0x21c>)
 800e760:	f7f1 fd5e 	bl	8000220 <memchr>
 800e764:	9a04      	ldr	r2, [sp, #16]
 800e766:	b9d8      	cbnz	r0, 800e7a0 <_vfiprintf_r+0x110>
 800e768:	06d1      	lsls	r1, r2, #27
 800e76a:	bf44      	itt	mi
 800e76c:	2320      	movmi	r3, #32
 800e76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e772:	0713      	lsls	r3, r2, #28
 800e774:	bf44      	itt	mi
 800e776:	232b      	movmi	r3, #43	@ 0x2b
 800e778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e77c:	f89a 3000 	ldrb.w	r3, [sl]
 800e780:	2b2a      	cmp	r3, #42	@ 0x2a
 800e782:	d015      	beq.n	800e7b0 <_vfiprintf_r+0x120>
 800e784:	9a07      	ldr	r2, [sp, #28]
 800e786:	4654      	mov	r4, sl
 800e788:	2000      	movs	r0, #0
 800e78a:	f04f 0c0a 	mov.w	ip, #10
 800e78e:	4621      	mov	r1, r4
 800e790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e794:	3b30      	subs	r3, #48	@ 0x30
 800e796:	2b09      	cmp	r3, #9
 800e798:	d94b      	bls.n	800e832 <_vfiprintf_r+0x1a2>
 800e79a:	b1b0      	cbz	r0, 800e7ca <_vfiprintf_r+0x13a>
 800e79c:	9207      	str	r2, [sp, #28]
 800e79e:	e014      	b.n	800e7ca <_vfiprintf_r+0x13a>
 800e7a0:	eba0 0308 	sub.w	r3, r0, r8
 800e7a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	9304      	str	r3, [sp, #16]
 800e7ac:	46a2      	mov	sl, r4
 800e7ae:	e7d2      	b.n	800e756 <_vfiprintf_r+0xc6>
 800e7b0:	9b03      	ldr	r3, [sp, #12]
 800e7b2:	1d19      	adds	r1, r3, #4
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	9103      	str	r1, [sp, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	bfbb      	ittet	lt
 800e7bc:	425b      	neglt	r3, r3
 800e7be:	f042 0202 	orrlt.w	r2, r2, #2
 800e7c2:	9307      	strge	r3, [sp, #28]
 800e7c4:	9307      	strlt	r3, [sp, #28]
 800e7c6:	bfb8      	it	lt
 800e7c8:	9204      	strlt	r2, [sp, #16]
 800e7ca:	7823      	ldrb	r3, [r4, #0]
 800e7cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ce:	d10a      	bne.n	800e7e6 <_vfiprintf_r+0x156>
 800e7d0:	7863      	ldrb	r3, [r4, #1]
 800e7d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7d4:	d132      	bne.n	800e83c <_vfiprintf_r+0x1ac>
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	1d1a      	adds	r2, r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	9203      	str	r2, [sp, #12]
 800e7de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7e2:	3402      	adds	r4, #2
 800e7e4:	9305      	str	r3, [sp, #20]
 800e7e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e8bc <_vfiprintf_r+0x22c>
 800e7ea:	7821      	ldrb	r1, [r4, #0]
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	f7f1 fd16 	bl	8000220 <memchr>
 800e7f4:	b138      	cbz	r0, 800e806 <_vfiprintf_r+0x176>
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	eba0 000a 	sub.w	r0, r0, sl
 800e7fc:	2240      	movs	r2, #64	@ 0x40
 800e7fe:	4082      	lsls	r2, r0
 800e800:	4313      	orrs	r3, r2
 800e802:	3401      	adds	r4, #1
 800e804:	9304      	str	r3, [sp, #16]
 800e806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e80a:	4829      	ldr	r0, [pc, #164]	@ (800e8b0 <_vfiprintf_r+0x220>)
 800e80c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e810:	2206      	movs	r2, #6
 800e812:	f7f1 fd05 	bl	8000220 <memchr>
 800e816:	2800      	cmp	r0, #0
 800e818:	d03f      	beq.n	800e89a <_vfiprintf_r+0x20a>
 800e81a:	4b26      	ldr	r3, [pc, #152]	@ (800e8b4 <_vfiprintf_r+0x224>)
 800e81c:	bb1b      	cbnz	r3, 800e866 <_vfiprintf_r+0x1d6>
 800e81e:	9b03      	ldr	r3, [sp, #12]
 800e820:	3307      	adds	r3, #7
 800e822:	f023 0307 	bic.w	r3, r3, #7
 800e826:	3308      	adds	r3, #8
 800e828:	9303      	str	r3, [sp, #12]
 800e82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e82c:	443b      	add	r3, r7
 800e82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e830:	e76a      	b.n	800e708 <_vfiprintf_r+0x78>
 800e832:	fb0c 3202 	mla	r2, ip, r2, r3
 800e836:	460c      	mov	r4, r1
 800e838:	2001      	movs	r0, #1
 800e83a:	e7a8      	b.n	800e78e <_vfiprintf_r+0xfe>
 800e83c:	2300      	movs	r3, #0
 800e83e:	3401      	adds	r4, #1
 800e840:	9305      	str	r3, [sp, #20]
 800e842:	4619      	mov	r1, r3
 800e844:	f04f 0c0a 	mov.w	ip, #10
 800e848:	4620      	mov	r0, r4
 800e84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e84e:	3a30      	subs	r2, #48	@ 0x30
 800e850:	2a09      	cmp	r2, #9
 800e852:	d903      	bls.n	800e85c <_vfiprintf_r+0x1cc>
 800e854:	2b00      	cmp	r3, #0
 800e856:	d0c6      	beq.n	800e7e6 <_vfiprintf_r+0x156>
 800e858:	9105      	str	r1, [sp, #20]
 800e85a:	e7c4      	b.n	800e7e6 <_vfiprintf_r+0x156>
 800e85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e860:	4604      	mov	r4, r0
 800e862:	2301      	movs	r3, #1
 800e864:	e7f0      	b.n	800e848 <_vfiprintf_r+0x1b8>
 800e866:	ab03      	add	r3, sp, #12
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	462a      	mov	r2, r5
 800e86c:	4b12      	ldr	r3, [pc, #72]	@ (800e8b8 <_vfiprintf_r+0x228>)
 800e86e:	a904      	add	r1, sp, #16
 800e870:	4630      	mov	r0, r6
 800e872:	f3af 8000 	nop.w
 800e876:	4607      	mov	r7, r0
 800e878:	1c78      	adds	r0, r7, #1
 800e87a:	d1d6      	bne.n	800e82a <_vfiprintf_r+0x19a>
 800e87c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0x1fe>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	059a      	lsls	r2, r3, #22
 800e886:	d402      	bmi.n	800e88e <_vfiprintf_r+0x1fe>
 800e888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e88a:	f7ff fe7d 	bl	800e588 <__retarget_lock_release_recursive>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	065b      	lsls	r3, r3, #25
 800e892:	f53f af1f 	bmi.w	800e6d4 <_vfiprintf_r+0x44>
 800e896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e898:	e71e      	b.n	800e6d8 <_vfiprintf_r+0x48>
 800e89a:	ab03      	add	r3, sp, #12
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	462a      	mov	r2, r5
 800e8a0:	4b05      	ldr	r3, [pc, #20]	@ (800e8b8 <_vfiprintf_r+0x228>)
 800e8a2:	a904      	add	r1, sp, #16
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f000 f879 	bl	800e99c <_printf_i>
 800e8aa:	e7e4      	b.n	800e876 <_vfiprintf_r+0x1e6>
 800e8ac:	0800f85b 	.word	0x0800f85b
 800e8b0:	0800f865 	.word	0x0800f865
 800e8b4:	00000000 	.word	0x00000000
 800e8b8:	0800e66b 	.word	0x0800e66b
 800e8bc:	0800f861 	.word	0x0800f861

0800e8c0 <_printf_common>:
 800e8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	4698      	mov	r8, r3
 800e8c8:	688a      	ldr	r2, [r1, #8]
 800e8ca:	690b      	ldr	r3, [r1, #16]
 800e8cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	bfb8      	it	lt
 800e8d4:	4613      	movlt	r3, r2
 800e8d6:	6033      	str	r3, [r6, #0]
 800e8d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8dc:	4607      	mov	r7, r0
 800e8de:	460c      	mov	r4, r1
 800e8e0:	b10a      	cbz	r2, 800e8e6 <_printf_common+0x26>
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	6033      	str	r3, [r6, #0]
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	0699      	lsls	r1, r3, #26
 800e8ea:	bf42      	ittt	mi
 800e8ec:	6833      	ldrmi	r3, [r6, #0]
 800e8ee:	3302      	addmi	r3, #2
 800e8f0:	6033      	strmi	r3, [r6, #0]
 800e8f2:	6825      	ldr	r5, [r4, #0]
 800e8f4:	f015 0506 	ands.w	r5, r5, #6
 800e8f8:	d106      	bne.n	800e908 <_printf_common+0x48>
 800e8fa:	f104 0a19 	add.w	sl, r4, #25
 800e8fe:	68e3      	ldr	r3, [r4, #12]
 800e900:	6832      	ldr	r2, [r6, #0]
 800e902:	1a9b      	subs	r3, r3, r2
 800e904:	42ab      	cmp	r3, r5
 800e906:	dc26      	bgt.n	800e956 <_printf_common+0x96>
 800e908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e90c:	6822      	ldr	r2, [r4, #0]
 800e90e:	3b00      	subs	r3, #0
 800e910:	bf18      	it	ne
 800e912:	2301      	movne	r3, #1
 800e914:	0692      	lsls	r2, r2, #26
 800e916:	d42b      	bmi.n	800e970 <_printf_common+0xb0>
 800e918:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e91c:	4641      	mov	r1, r8
 800e91e:	4638      	mov	r0, r7
 800e920:	47c8      	blx	r9
 800e922:	3001      	adds	r0, #1
 800e924:	d01e      	beq.n	800e964 <_printf_common+0xa4>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	6922      	ldr	r2, [r4, #16]
 800e92a:	f003 0306 	and.w	r3, r3, #6
 800e92e:	2b04      	cmp	r3, #4
 800e930:	bf02      	ittt	eq
 800e932:	68e5      	ldreq	r5, [r4, #12]
 800e934:	6833      	ldreq	r3, [r6, #0]
 800e936:	1aed      	subeq	r5, r5, r3
 800e938:	68a3      	ldr	r3, [r4, #8]
 800e93a:	bf0c      	ite	eq
 800e93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e940:	2500      	movne	r5, #0
 800e942:	4293      	cmp	r3, r2
 800e944:	bfc4      	itt	gt
 800e946:	1a9b      	subgt	r3, r3, r2
 800e948:	18ed      	addgt	r5, r5, r3
 800e94a:	2600      	movs	r6, #0
 800e94c:	341a      	adds	r4, #26
 800e94e:	42b5      	cmp	r5, r6
 800e950:	d11a      	bne.n	800e988 <_printf_common+0xc8>
 800e952:	2000      	movs	r0, #0
 800e954:	e008      	b.n	800e968 <_printf_common+0xa8>
 800e956:	2301      	movs	r3, #1
 800e958:	4652      	mov	r2, sl
 800e95a:	4641      	mov	r1, r8
 800e95c:	4638      	mov	r0, r7
 800e95e:	47c8      	blx	r9
 800e960:	3001      	adds	r0, #1
 800e962:	d103      	bne.n	800e96c <_printf_common+0xac>
 800e964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96c:	3501      	adds	r5, #1
 800e96e:	e7c6      	b.n	800e8fe <_printf_common+0x3e>
 800e970:	18e1      	adds	r1, r4, r3
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	2030      	movs	r0, #48	@ 0x30
 800e976:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e97a:	4422      	add	r2, r4
 800e97c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e984:	3302      	adds	r3, #2
 800e986:	e7c7      	b.n	800e918 <_printf_common+0x58>
 800e988:	2301      	movs	r3, #1
 800e98a:	4622      	mov	r2, r4
 800e98c:	4641      	mov	r1, r8
 800e98e:	4638      	mov	r0, r7
 800e990:	47c8      	blx	r9
 800e992:	3001      	adds	r0, #1
 800e994:	d0e6      	beq.n	800e964 <_printf_common+0xa4>
 800e996:	3601      	adds	r6, #1
 800e998:	e7d9      	b.n	800e94e <_printf_common+0x8e>
	...

0800e99c <_printf_i>:
 800e99c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a0:	7e0f      	ldrb	r7, [r1, #24]
 800e9a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9a4:	2f78      	cmp	r7, #120	@ 0x78
 800e9a6:	4691      	mov	r9, r2
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	469a      	mov	sl, r3
 800e9ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9b2:	d807      	bhi.n	800e9c4 <_printf_i+0x28>
 800e9b4:	2f62      	cmp	r7, #98	@ 0x62
 800e9b6:	d80a      	bhi.n	800e9ce <_printf_i+0x32>
 800e9b8:	2f00      	cmp	r7, #0
 800e9ba:	f000 80d2 	beq.w	800eb62 <_printf_i+0x1c6>
 800e9be:	2f58      	cmp	r7, #88	@ 0x58
 800e9c0:	f000 80b9 	beq.w	800eb36 <_printf_i+0x19a>
 800e9c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9cc:	e03a      	b.n	800ea44 <_printf_i+0xa8>
 800e9ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9d2:	2b15      	cmp	r3, #21
 800e9d4:	d8f6      	bhi.n	800e9c4 <_printf_i+0x28>
 800e9d6:	a101      	add	r1, pc, #4	@ (adr r1, 800e9dc <_printf_i+0x40>)
 800e9d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9dc:	0800ea35 	.word	0x0800ea35
 800e9e0:	0800ea49 	.word	0x0800ea49
 800e9e4:	0800e9c5 	.word	0x0800e9c5
 800e9e8:	0800e9c5 	.word	0x0800e9c5
 800e9ec:	0800e9c5 	.word	0x0800e9c5
 800e9f0:	0800e9c5 	.word	0x0800e9c5
 800e9f4:	0800ea49 	.word	0x0800ea49
 800e9f8:	0800e9c5 	.word	0x0800e9c5
 800e9fc:	0800e9c5 	.word	0x0800e9c5
 800ea00:	0800e9c5 	.word	0x0800e9c5
 800ea04:	0800e9c5 	.word	0x0800e9c5
 800ea08:	0800eb49 	.word	0x0800eb49
 800ea0c:	0800ea73 	.word	0x0800ea73
 800ea10:	0800eb03 	.word	0x0800eb03
 800ea14:	0800e9c5 	.word	0x0800e9c5
 800ea18:	0800e9c5 	.word	0x0800e9c5
 800ea1c:	0800eb6b 	.word	0x0800eb6b
 800ea20:	0800e9c5 	.word	0x0800e9c5
 800ea24:	0800ea73 	.word	0x0800ea73
 800ea28:	0800e9c5 	.word	0x0800e9c5
 800ea2c:	0800e9c5 	.word	0x0800e9c5
 800ea30:	0800eb0b 	.word	0x0800eb0b
 800ea34:	6833      	ldr	r3, [r6, #0]
 800ea36:	1d1a      	adds	r2, r3, #4
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6032      	str	r2, [r6, #0]
 800ea3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea44:	2301      	movs	r3, #1
 800ea46:	e09d      	b.n	800eb84 <_printf_i+0x1e8>
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	6820      	ldr	r0, [r4, #0]
 800ea4c:	1d19      	adds	r1, r3, #4
 800ea4e:	6031      	str	r1, [r6, #0]
 800ea50:	0606      	lsls	r6, r0, #24
 800ea52:	d501      	bpl.n	800ea58 <_printf_i+0xbc>
 800ea54:	681d      	ldr	r5, [r3, #0]
 800ea56:	e003      	b.n	800ea60 <_printf_i+0xc4>
 800ea58:	0645      	lsls	r5, r0, #25
 800ea5a:	d5fb      	bpl.n	800ea54 <_printf_i+0xb8>
 800ea5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea60:	2d00      	cmp	r5, #0
 800ea62:	da03      	bge.n	800ea6c <_printf_i+0xd0>
 800ea64:	232d      	movs	r3, #45	@ 0x2d
 800ea66:	426d      	negs	r5, r5
 800ea68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea6c:	4859      	ldr	r0, [pc, #356]	@ (800ebd4 <_printf_i+0x238>)
 800ea6e:	230a      	movs	r3, #10
 800ea70:	e011      	b.n	800ea96 <_printf_i+0xfa>
 800ea72:	6821      	ldr	r1, [r4, #0]
 800ea74:	6833      	ldr	r3, [r6, #0]
 800ea76:	0608      	lsls	r0, r1, #24
 800ea78:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea7c:	d402      	bmi.n	800ea84 <_printf_i+0xe8>
 800ea7e:	0649      	lsls	r1, r1, #25
 800ea80:	bf48      	it	mi
 800ea82:	b2ad      	uxthmi	r5, r5
 800ea84:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea86:	4853      	ldr	r0, [pc, #332]	@ (800ebd4 <_printf_i+0x238>)
 800ea88:	6033      	str	r3, [r6, #0]
 800ea8a:	bf14      	ite	ne
 800ea8c:	230a      	movne	r3, #10
 800ea8e:	2308      	moveq	r3, #8
 800ea90:	2100      	movs	r1, #0
 800ea92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea96:	6866      	ldr	r6, [r4, #4]
 800ea98:	60a6      	str	r6, [r4, #8]
 800ea9a:	2e00      	cmp	r6, #0
 800ea9c:	bfa2      	ittt	ge
 800ea9e:	6821      	ldrge	r1, [r4, #0]
 800eaa0:	f021 0104 	bicge.w	r1, r1, #4
 800eaa4:	6021      	strge	r1, [r4, #0]
 800eaa6:	b90d      	cbnz	r5, 800eaac <_printf_i+0x110>
 800eaa8:	2e00      	cmp	r6, #0
 800eaaa:	d04b      	beq.n	800eb44 <_printf_i+0x1a8>
 800eaac:	4616      	mov	r6, r2
 800eaae:	fbb5 f1f3 	udiv	r1, r5, r3
 800eab2:	fb03 5711 	mls	r7, r3, r1, r5
 800eab6:	5dc7      	ldrb	r7, [r0, r7]
 800eab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eabc:	462f      	mov	r7, r5
 800eabe:	42bb      	cmp	r3, r7
 800eac0:	460d      	mov	r5, r1
 800eac2:	d9f4      	bls.n	800eaae <_printf_i+0x112>
 800eac4:	2b08      	cmp	r3, #8
 800eac6:	d10b      	bne.n	800eae0 <_printf_i+0x144>
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	07df      	lsls	r7, r3, #31
 800eacc:	d508      	bpl.n	800eae0 <_printf_i+0x144>
 800eace:	6923      	ldr	r3, [r4, #16]
 800ead0:	6861      	ldr	r1, [r4, #4]
 800ead2:	4299      	cmp	r1, r3
 800ead4:	bfde      	ittt	le
 800ead6:	2330      	movle	r3, #48	@ 0x30
 800ead8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eadc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eae0:	1b92      	subs	r2, r2, r6
 800eae2:	6122      	str	r2, [r4, #16]
 800eae4:	f8cd a000 	str.w	sl, [sp]
 800eae8:	464b      	mov	r3, r9
 800eaea:	aa03      	add	r2, sp, #12
 800eaec:	4621      	mov	r1, r4
 800eaee:	4640      	mov	r0, r8
 800eaf0:	f7ff fee6 	bl	800e8c0 <_printf_common>
 800eaf4:	3001      	adds	r0, #1
 800eaf6:	d14a      	bne.n	800eb8e <_printf_i+0x1f2>
 800eaf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eafc:	b004      	add	sp, #16
 800eafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	f043 0320 	orr.w	r3, r3, #32
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	4833      	ldr	r0, [pc, #204]	@ (800ebd8 <_printf_i+0x23c>)
 800eb0c:	2778      	movs	r7, #120	@ 0x78
 800eb0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	6831      	ldr	r1, [r6, #0]
 800eb16:	061f      	lsls	r7, r3, #24
 800eb18:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb1c:	d402      	bmi.n	800eb24 <_printf_i+0x188>
 800eb1e:	065f      	lsls	r7, r3, #25
 800eb20:	bf48      	it	mi
 800eb22:	b2ad      	uxthmi	r5, r5
 800eb24:	6031      	str	r1, [r6, #0]
 800eb26:	07d9      	lsls	r1, r3, #31
 800eb28:	bf44      	itt	mi
 800eb2a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb2e:	6023      	strmi	r3, [r4, #0]
 800eb30:	b11d      	cbz	r5, 800eb3a <_printf_i+0x19e>
 800eb32:	2310      	movs	r3, #16
 800eb34:	e7ac      	b.n	800ea90 <_printf_i+0xf4>
 800eb36:	4827      	ldr	r0, [pc, #156]	@ (800ebd4 <_printf_i+0x238>)
 800eb38:	e7e9      	b.n	800eb0e <_printf_i+0x172>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	f023 0320 	bic.w	r3, r3, #32
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	e7f6      	b.n	800eb32 <_printf_i+0x196>
 800eb44:	4616      	mov	r6, r2
 800eb46:	e7bd      	b.n	800eac4 <_printf_i+0x128>
 800eb48:	6833      	ldr	r3, [r6, #0]
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	6961      	ldr	r1, [r4, #20]
 800eb4e:	1d18      	adds	r0, r3, #4
 800eb50:	6030      	str	r0, [r6, #0]
 800eb52:	062e      	lsls	r6, r5, #24
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	d501      	bpl.n	800eb5c <_printf_i+0x1c0>
 800eb58:	6019      	str	r1, [r3, #0]
 800eb5a:	e002      	b.n	800eb62 <_printf_i+0x1c6>
 800eb5c:	0668      	lsls	r0, r5, #25
 800eb5e:	d5fb      	bpl.n	800eb58 <_printf_i+0x1bc>
 800eb60:	8019      	strh	r1, [r3, #0]
 800eb62:	2300      	movs	r3, #0
 800eb64:	6123      	str	r3, [r4, #16]
 800eb66:	4616      	mov	r6, r2
 800eb68:	e7bc      	b.n	800eae4 <_printf_i+0x148>
 800eb6a:	6833      	ldr	r3, [r6, #0]
 800eb6c:	1d1a      	adds	r2, r3, #4
 800eb6e:	6032      	str	r2, [r6, #0]
 800eb70:	681e      	ldr	r6, [r3, #0]
 800eb72:	6862      	ldr	r2, [r4, #4]
 800eb74:	2100      	movs	r1, #0
 800eb76:	4630      	mov	r0, r6
 800eb78:	f7f1 fb52 	bl	8000220 <memchr>
 800eb7c:	b108      	cbz	r0, 800eb82 <_printf_i+0x1e6>
 800eb7e:	1b80      	subs	r0, r0, r6
 800eb80:	6060      	str	r0, [r4, #4]
 800eb82:	6863      	ldr	r3, [r4, #4]
 800eb84:	6123      	str	r3, [r4, #16]
 800eb86:	2300      	movs	r3, #0
 800eb88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb8c:	e7aa      	b.n	800eae4 <_printf_i+0x148>
 800eb8e:	6923      	ldr	r3, [r4, #16]
 800eb90:	4632      	mov	r2, r6
 800eb92:	4649      	mov	r1, r9
 800eb94:	4640      	mov	r0, r8
 800eb96:	47d0      	blx	sl
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d0ad      	beq.n	800eaf8 <_printf_i+0x15c>
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	079b      	lsls	r3, r3, #30
 800eba0:	d413      	bmi.n	800ebca <_printf_i+0x22e>
 800eba2:	68e0      	ldr	r0, [r4, #12]
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	4298      	cmp	r0, r3
 800eba8:	bfb8      	it	lt
 800ebaa:	4618      	movlt	r0, r3
 800ebac:	e7a6      	b.n	800eafc <_printf_i+0x160>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	47d0      	blx	sl
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d09d      	beq.n	800eaf8 <_printf_i+0x15c>
 800ebbc:	3501      	adds	r5, #1
 800ebbe:	68e3      	ldr	r3, [r4, #12]
 800ebc0:	9903      	ldr	r1, [sp, #12]
 800ebc2:	1a5b      	subs	r3, r3, r1
 800ebc4:	42ab      	cmp	r3, r5
 800ebc6:	dcf2      	bgt.n	800ebae <_printf_i+0x212>
 800ebc8:	e7eb      	b.n	800eba2 <_printf_i+0x206>
 800ebca:	2500      	movs	r5, #0
 800ebcc:	f104 0619 	add.w	r6, r4, #25
 800ebd0:	e7f5      	b.n	800ebbe <_printf_i+0x222>
 800ebd2:	bf00      	nop
 800ebd4:	0800f86c 	.word	0x0800f86c
 800ebd8:	0800f87d 	.word	0x0800f87d

0800ebdc <__sflush_r>:
 800ebdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe4:	0716      	lsls	r6, r2, #28
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	460c      	mov	r4, r1
 800ebea:	d454      	bmi.n	800ec96 <__sflush_r+0xba>
 800ebec:	684b      	ldr	r3, [r1, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dc02      	bgt.n	800ebf8 <__sflush_r+0x1c>
 800ebf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd48      	ble.n	800ec8a <__sflush_r+0xae>
 800ebf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebfa:	2e00      	cmp	r6, #0
 800ebfc:	d045      	beq.n	800ec8a <__sflush_r+0xae>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec04:	682f      	ldr	r7, [r5, #0]
 800ec06:	6a21      	ldr	r1, [r4, #32]
 800ec08:	602b      	str	r3, [r5, #0]
 800ec0a:	d030      	beq.n	800ec6e <__sflush_r+0x92>
 800ec0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	0759      	lsls	r1, r3, #29
 800ec12:	d505      	bpl.n	800ec20 <__sflush_r+0x44>
 800ec14:	6863      	ldr	r3, [r4, #4]
 800ec16:	1ad2      	subs	r2, r2, r3
 800ec18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec1a:	b10b      	cbz	r3, 800ec20 <__sflush_r+0x44>
 800ec1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	2300      	movs	r3, #0
 800ec22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec24:	6a21      	ldr	r1, [r4, #32]
 800ec26:	4628      	mov	r0, r5
 800ec28:	47b0      	blx	r6
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	d106      	bne.n	800ec3e <__sflush_r+0x62>
 800ec30:	6829      	ldr	r1, [r5, #0]
 800ec32:	291d      	cmp	r1, #29
 800ec34:	d82b      	bhi.n	800ec8e <__sflush_r+0xb2>
 800ec36:	4a2a      	ldr	r2, [pc, #168]	@ (800ece0 <__sflush_r+0x104>)
 800ec38:	410a      	asrs	r2, r1
 800ec3a:	07d6      	lsls	r6, r2, #31
 800ec3c:	d427      	bmi.n	800ec8e <__sflush_r+0xb2>
 800ec3e:	2200      	movs	r2, #0
 800ec40:	6062      	str	r2, [r4, #4]
 800ec42:	04d9      	lsls	r1, r3, #19
 800ec44:	6922      	ldr	r2, [r4, #16]
 800ec46:	6022      	str	r2, [r4, #0]
 800ec48:	d504      	bpl.n	800ec54 <__sflush_r+0x78>
 800ec4a:	1c42      	adds	r2, r0, #1
 800ec4c:	d101      	bne.n	800ec52 <__sflush_r+0x76>
 800ec4e:	682b      	ldr	r3, [r5, #0]
 800ec50:	b903      	cbnz	r3, 800ec54 <__sflush_r+0x78>
 800ec52:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec56:	602f      	str	r7, [r5, #0]
 800ec58:	b1b9      	cbz	r1, 800ec8a <__sflush_r+0xae>
 800ec5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec5e:	4299      	cmp	r1, r3
 800ec60:	d002      	beq.n	800ec68 <__sflush_r+0x8c>
 800ec62:	4628      	mov	r0, r5
 800ec64:	f7ff fca0 	bl	800e5a8 <_free_r>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec6c:	e00d      	b.n	800ec8a <__sflush_r+0xae>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b0      	blx	r6
 800ec74:	4602      	mov	r2, r0
 800ec76:	1c50      	adds	r0, r2, #1
 800ec78:	d1c9      	bne.n	800ec0e <__sflush_r+0x32>
 800ec7a:	682b      	ldr	r3, [r5, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0c6      	beq.n	800ec0e <__sflush_r+0x32>
 800ec80:	2b1d      	cmp	r3, #29
 800ec82:	d001      	beq.n	800ec88 <__sflush_r+0xac>
 800ec84:	2b16      	cmp	r3, #22
 800ec86:	d11e      	bne.n	800ecc6 <__sflush_r+0xea>
 800ec88:	602f      	str	r7, [r5, #0]
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	e022      	b.n	800ecd4 <__sflush_r+0xf8>
 800ec8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec92:	b21b      	sxth	r3, r3
 800ec94:	e01b      	b.n	800ecce <__sflush_r+0xf2>
 800ec96:	690f      	ldr	r7, [r1, #16]
 800ec98:	2f00      	cmp	r7, #0
 800ec9a:	d0f6      	beq.n	800ec8a <__sflush_r+0xae>
 800ec9c:	0793      	lsls	r3, r2, #30
 800ec9e:	680e      	ldr	r6, [r1, #0]
 800eca0:	bf08      	it	eq
 800eca2:	694b      	ldreq	r3, [r1, #20]
 800eca4:	600f      	str	r7, [r1, #0]
 800eca6:	bf18      	it	ne
 800eca8:	2300      	movne	r3, #0
 800ecaa:	eba6 0807 	sub.w	r8, r6, r7
 800ecae:	608b      	str	r3, [r1, #8]
 800ecb0:	f1b8 0f00 	cmp.w	r8, #0
 800ecb4:	dde9      	ble.n	800ec8a <__sflush_r+0xae>
 800ecb6:	6a21      	ldr	r1, [r4, #32]
 800ecb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecba:	4643      	mov	r3, r8
 800ecbc:	463a      	mov	r2, r7
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	47b0      	blx	r6
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	dc08      	bgt.n	800ecd8 <__sflush_r+0xfc>
 800ecc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecce:	81a3      	strh	r3, [r4, #12]
 800ecd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	4407      	add	r7, r0
 800ecda:	eba8 0800 	sub.w	r8, r8, r0
 800ecde:	e7e7      	b.n	800ecb0 <__sflush_r+0xd4>
 800ece0:	dfbffffe 	.word	0xdfbffffe

0800ece4 <_fflush_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	690b      	ldr	r3, [r1, #16]
 800ece8:	4605      	mov	r5, r0
 800ecea:	460c      	mov	r4, r1
 800ecec:	b913      	cbnz	r3, 800ecf4 <_fflush_r+0x10>
 800ecee:	2500      	movs	r5, #0
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	bd38      	pop	{r3, r4, r5, pc}
 800ecf4:	b118      	cbz	r0, 800ecfe <_fflush_r+0x1a>
 800ecf6:	6a03      	ldr	r3, [r0, #32]
 800ecf8:	b90b      	cbnz	r3, 800ecfe <_fflush_r+0x1a>
 800ecfa:	f7ff f9d7 	bl	800e0ac <__sinit>
 800ecfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d0f3      	beq.n	800ecee <_fflush_r+0xa>
 800ed06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed08:	07d0      	lsls	r0, r2, #31
 800ed0a:	d404      	bmi.n	800ed16 <_fflush_r+0x32>
 800ed0c:	0599      	lsls	r1, r3, #22
 800ed0e:	d402      	bmi.n	800ed16 <_fflush_r+0x32>
 800ed10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed12:	f7ff fc38 	bl	800e586 <__retarget_lock_acquire_recursive>
 800ed16:	4628      	mov	r0, r5
 800ed18:	4621      	mov	r1, r4
 800ed1a:	f7ff ff5f 	bl	800ebdc <__sflush_r>
 800ed1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed20:	07da      	lsls	r2, r3, #31
 800ed22:	4605      	mov	r5, r0
 800ed24:	d4e4      	bmi.n	800ecf0 <_fflush_r+0xc>
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	059b      	lsls	r3, r3, #22
 800ed2a:	d4e1      	bmi.n	800ecf0 <_fflush_r+0xc>
 800ed2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed2e:	f7ff fc2b 	bl	800e588 <__retarget_lock_release_recursive>
 800ed32:	e7dd      	b.n	800ecf0 <_fflush_r+0xc>

0800ed34 <__swhatbuf_r>:
 800ed34:	b570      	push	{r4, r5, r6, lr}
 800ed36:	460c      	mov	r4, r1
 800ed38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed3c:	2900      	cmp	r1, #0
 800ed3e:	b096      	sub	sp, #88	@ 0x58
 800ed40:	4615      	mov	r5, r2
 800ed42:	461e      	mov	r6, r3
 800ed44:	da0d      	bge.n	800ed62 <__swhatbuf_r+0x2e>
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed4c:	f04f 0100 	mov.w	r1, #0
 800ed50:	bf14      	ite	ne
 800ed52:	2340      	movne	r3, #64	@ 0x40
 800ed54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed58:	2000      	movs	r0, #0
 800ed5a:	6031      	str	r1, [r6, #0]
 800ed5c:	602b      	str	r3, [r5, #0]
 800ed5e:	b016      	add	sp, #88	@ 0x58
 800ed60:	bd70      	pop	{r4, r5, r6, pc}
 800ed62:	466a      	mov	r2, sp
 800ed64:	f000 f87c 	bl	800ee60 <_fstat_r>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	dbec      	blt.n	800ed46 <__swhatbuf_r+0x12>
 800ed6c:	9901      	ldr	r1, [sp, #4]
 800ed6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed76:	4259      	negs	r1, r3
 800ed78:	4159      	adcs	r1, r3
 800ed7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed7e:	e7eb      	b.n	800ed58 <__swhatbuf_r+0x24>

0800ed80 <__smakebuf_r>:
 800ed80:	898b      	ldrh	r3, [r1, #12]
 800ed82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed84:	079d      	lsls	r5, r3, #30
 800ed86:	4606      	mov	r6, r0
 800ed88:	460c      	mov	r4, r1
 800ed8a:	d507      	bpl.n	800ed9c <__smakebuf_r+0x1c>
 800ed8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	6123      	str	r3, [r4, #16]
 800ed94:	2301      	movs	r3, #1
 800ed96:	6163      	str	r3, [r4, #20]
 800ed98:	b003      	add	sp, #12
 800ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed9c:	ab01      	add	r3, sp, #4
 800ed9e:	466a      	mov	r2, sp
 800eda0:	f7ff ffc8 	bl	800ed34 <__swhatbuf_r>
 800eda4:	9f00      	ldr	r7, [sp, #0]
 800eda6:	4605      	mov	r5, r0
 800eda8:	4639      	mov	r1, r7
 800edaa:	4630      	mov	r0, r6
 800edac:	f7ff f866 	bl	800de7c <_malloc_r>
 800edb0:	b948      	cbnz	r0, 800edc6 <__smakebuf_r+0x46>
 800edb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edb6:	059a      	lsls	r2, r3, #22
 800edb8:	d4ee      	bmi.n	800ed98 <__smakebuf_r+0x18>
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	f043 0302 	orr.w	r3, r3, #2
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	e7e2      	b.n	800ed8c <__smakebuf_r+0xc>
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	6020      	str	r0, [r4, #0]
 800edca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edd6:	b15b      	cbz	r3, 800edf0 <__smakebuf_r+0x70>
 800edd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eddc:	4630      	mov	r0, r6
 800edde:	f000 f851 	bl	800ee84 <_isatty_r>
 800ede2:	b128      	cbz	r0, 800edf0 <__smakebuf_r+0x70>
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	f023 0303 	bic.w	r3, r3, #3
 800edea:	f043 0301 	orr.w	r3, r3, #1
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	89a3      	ldrh	r3, [r4, #12]
 800edf2:	431d      	orrs	r5, r3
 800edf4:	81a5      	strh	r5, [r4, #12]
 800edf6:	e7cf      	b.n	800ed98 <__smakebuf_r+0x18>

0800edf8 <_putc_r>:
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	460d      	mov	r5, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	4606      	mov	r6, r0
 800ee00:	b118      	cbz	r0, 800ee0a <_putc_r+0x12>
 800ee02:	6a03      	ldr	r3, [r0, #32]
 800ee04:	b90b      	cbnz	r3, 800ee0a <_putc_r+0x12>
 800ee06:	f7ff f951 	bl	800e0ac <__sinit>
 800ee0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee0c:	07d8      	lsls	r0, r3, #31
 800ee0e:	d405      	bmi.n	800ee1c <_putc_r+0x24>
 800ee10:	89a3      	ldrh	r3, [r4, #12]
 800ee12:	0599      	lsls	r1, r3, #22
 800ee14:	d402      	bmi.n	800ee1c <_putc_r+0x24>
 800ee16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee18:	f7ff fbb5 	bl	800e586 <__retarget_lock_acquire_recursive>
 800ee1c:	68a3      	ldr	r3, [r4, #8]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	60a3      	str	r3, [r4, #8]
 800ee24:	da05      	bge.n	800ee32 <_putc_r+0x3a>
 800ee26:	69a2      	ldr	r2, [r4, #24]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	db12      	blt.n	800ee52 <_putc_r+0x5a>
 800ee2c:	b2eb      	uxtb	r3, r5
 800ee2e:	2b0a      	cmp	r3, #10
 800ee30:	d00f      	beq.n	800ee52 <_putc_r+0x5a>
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	6022      	str	r2, [r4, #0]
 800ee38:	701d      	strb	r5, [r3, #0]
 800ee3a:	b2ed      	uxtb	r5, r5
 800ee3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee3e:	07da      	lsls	r2, r3, #31
 800ee40:	d405      	bmi.n	800ee4e <_putc_r+0x56>
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	059b      	lsls	r3, r3, #22
 800ee46:	d402      	bmi.n	800ee4e <_putc_r+0x56>
 800ee48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee4a:	f7ff fb9d 	bl	800e588 <__retarget_lock_release_recursive>
 800ee4e:	4628      	mov	r0, r5
 800ee50:	bd70      	pop	{r4, r5, r6, pc}
 800ee52:	4629      	mov	r1, r5
 800ee54:	4622      	mov	r2, r4
 800ee56:	4630      	mov	r0, r6
 800ee58:	f7ff fa19 	bl	800e28e <__swbuf_r>
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	e7ed      	b.n	800ee3c <_putc_r+0x44>

0800ee60 <_fstat_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	4d07      	ldr	r5, [pc, #28]	@ (800ee80 <_fstat_r+0x20>)
 800ee64:	2300      	movs	r3, #0
 800ee66:	4604      	mov	r4, r0
 800ee68:	4608      	mov	r0, r1
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	602b      	str	r3, [r5, #0]
 800ee6e:	f7fa f8c1 	bl	8008ff4 <_fstat>
 800ee72:	1c43      	adds	r3, r0, #1
 800ee74:	d102      	bne.n	800ee7c <_fstat_r+0x1c>
 800ee76:	682b      	ldr	r3, [r5, #0]
 800ee78:	b103      	cbz	r3, 800ee7c <_fstat_r+0x1c>
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	bd38      	pop	{r3, r4, r5, pc}
 800ee7e:	bf00      	nop
 800ee80:	20000808 	.word	0x20000808

0800ee84 <_isatty_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d06      	ldr	r5, [pc, #24]	@ (800eea0 <_isatty_r+0x1c>)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	602b      	str	r3, [r5, #0]
 800ee90:	f7fa f8c0 	bl	8009014 <_isatty>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_isatty_r+0x1a>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_isatty_r+0x1a>
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	20000808 	.word	0x20000808

0800eea4 <_init>:
 800eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea6:	bf00      	nop
 800eea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeaa:	bc08      	pop	{r3}
 800eeac:	469e      	mov	lr, r3
 800eeae:	4770      	bx	lr

0800eeb0 <_fini>:
 800eeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb2:	bf00      	nop
 800eeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeb6:	bc08      	pop	{r3}
 800eeb8:	469e      	mov	lr, r3
 800eeba:	4770      	bx	lr
