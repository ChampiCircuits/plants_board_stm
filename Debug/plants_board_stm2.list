
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800619c  0800619c  0000719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061dc  080061dc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080061dc  080061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e4  080061e4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061ec  080061ec  000071ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080061f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000000c  080061fc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080061fc  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022152  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003767  00000000  00000000  0002a18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0002d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163e  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024643  00000000  00000000  00030bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d392  00000000  00000000  000551f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7f0  00000000  00000000  00072583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fd73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d9c  00000000  00000000  0015fdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00167b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006184 	.word	0x08006184

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006184 	.word	0x08006184

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	601a      	str	r2, [r3, #0]
{
}
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	1cf9      	adds	r1, r7, #3
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	f004 fe76 	bl	800522c <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	f107 010f 	add.w	r1, r7, #15
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	f004 fefc 	bl	8005348 <HAL_UART_Receive>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000560:	bf00      	nop
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f107 010f 	add.w	r1, r7, #15
 800056a:	2300      	movs	r3, #0
 800056c:	2201      	movs	r2, #1
 800056e:	f004 feeb 	bl	8005348 <HAL_UART_Receive>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1ef      	bne.n	8000562 <_ZN7SCServo12fflushRevBufEv+0xa>
    return;
 8000582:	bf00      	nop
}
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_ZN7SCServo12EnableTorqueEhhh>:

int SCServo::EnableTorque(u8 ID, u8 Enable, u8 ReturnLevel)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	4608      	mov	r0, r1
 8000594:	4611      	mov	r1, r2
 8000596:	461a      	mov	r2, r3
 8000598:	4603      	mov	r3, r0
 800059a:	70fb      	strb	r3, [r7, #3]
 800059c:	460b      	mov	r3, r1
 800059e:	70bb      	strb	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
    int messageLength = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]

    fflushRevBuf();
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffd5 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 80005ae:	21ff      	movs	r1, #255	@ 0xff
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffb8 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 80005b6:	21ff      	movs	r1, #255	@ 0xff
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffb4 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	4619      	mov	r1, r3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffaf 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ffa9 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 80005d4:	2103      	movs	r1, #3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffa5 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_TORQUE_ENABLE);
 80005dc:	2128      	movs	r1, #40	@ 0x28
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffa1 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(Enable);
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff9c 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + Enable + P_TORQUE_ENABLE))&0xFF);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	4413      	add	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	4413      	add	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff8c 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID !=  0xfe && ReturnLevel==2)
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	2bfe      	cmp	r3, #254	@ 0xfe
 8000612:	d009      	beq.n	8000628 <_ZN7SCServo12EnableTorqueEhhh+0x9e>
 8000614:	787b      	ldrb	r3, [r7, #1]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d106      	bne.n	8000628 <_ZN7SCServo12EnableTorqueEhhh+0x9e>
        return ReadBuf(6);
 800061a:	2200      	movs	r2, #0
 800061c:	2106      	movs	r1, #6
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f879 	bl	8000716 <_ZN7SCServo7ReadBufEtPh>
 8000624:	4603      	mov	r3, r0
 8000626:	e000      	b.n	800062a <_ZN7SCServo12EnableTorqueEhhh+0xa0>
    return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZN7SCServo8WritePosEhiih>:

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	460b      	mov	r3, r1
 8000640:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	121b      	asrs	r3, r3, #8
 800064a:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	121b      	asrs	r3, r3, #8
 8000654:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff ff7c 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000660:	21ff      	movs	r1, #255	@ 0xff
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f7ff ff5f 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000668:	21ff      	movs	r1, #255	@ 0xff
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff ff5b 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000670:	7afb      	ldrb	r3, [r7, #11]
 8000672:	4619      	mov	r1, r3
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff ff56 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff50 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000686:	2103      	movs	r1, #3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ff4c 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 800068e:	212a      	movs	r1, #42	@ 0x2a
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ff48 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8000696:	7cfb      	ldrb	r3, [r7, #19]
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f7ff ff43 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(posH);
 80006a0:	7cbb      	ldrb	r3, [r7, #18]
 80006a2:	4619      	mov	r1, r3
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f7ff ff3e 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(velL);
 80006aa:	7c7b      	ldrb	r3, [r7, #17]
 80006ac:	4619      	mov	r1, r3
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff39 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(velH);
 80006b4:	7c3b      	ldrb	r3, [r7, #16]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff34 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	4413      	add	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	7cfb      	ldrb	r3, [r7, #19]
 80006ca:	4413      	add	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	7cbb      	ldrb	r3, [r7, #18]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	7c7b      	ldrb	r3, [r7, #17]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	7c3b      	ldrb	r3, [r7, #16]
 80006dc:	4413      	add	r3, r2
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff1b 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	2b10      	cmp	r3, #16
 80006f4:	d00a      	beq.n	800070c <_ZN7SCServo8WritePosEhiih+0xda>
 80006f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d106      	bne.n	800070c <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 80006fe:	2200      	movs	r2, #0
 8000700:	2106      	movs	r1, #6
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 f807 	bl	8000716 <_ZN7SCServo7ReadBufEtPh>
 8000708:	4603      	mov	r3, r0
 800070a:	e000      	b.n	800070e <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	460b      	mov	r3, r1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	897a      	ldrh	r2, [r7, #10]
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f004 fe0a 	bl	8005348 <HAL_UART_Receive>
 8000734:	4603      	mov	r3, r0
 8000736:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 800073e:	897b      	ldrh	r3, [r7, #10]
 8000740:	e001      	b.n	8000746 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_ZN7SCServo16WriteLimitTroqueEhih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WriteLimitTroque(u8 ID, int MaxTroque, u8 ReturnLevel)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	72fb      	strb	r3, [r7, #11]
 800075e:	4613      	mov	r3, r2
 8000760:	72bb      	strb	r3, [r7, #10]
    int messageLength = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	617b      	str	r3, [r7, #20]
    u8 MaxTL = MaxTroque>>8;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	121b      	asrs	r3, r3, #8
 800076a:	74fb      	strb	r3, [r7, #19]
    u8 MaxTH = MaxTroque&0xff;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	74bb      	strb	r3, [r7, #18]

    fflushRevBuf();
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff fef1 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000776:	21ff      	movs	r1, #255	@ 0xff
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff fed4 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 800077e:	21ff      	movs	r1, #255	@ 0xff
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff fed0 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	4619      	mov	r1, r3
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f7ff fecb 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff fec5 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 800079c:	2103      	movs	r1, #3
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff fec1 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_MAX_TORQUE_L);
 80007a4:	2110      	movs	r1, #16
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f7ff febd 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxTL);
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	4619      	mov	r1, r3
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff feb8 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxTH);
 80007b6:	7cbb      	ldrb	r3, [r7, #18]
 80007b8:	4619      	mov	r1, r3
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f7ff feb3 	bl	8000526 <_ZN7SCServo6PrintfEh>

    Printf((~(ID + messageLength + INST_WRITE + P_MAX_TORQUE_L + MaxTL + MaxTH))&0xFF);
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	4413      	add	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7cbb      	ldrb	r3, [r7, #18]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	f06f 0313 	mvn.w	r3, #19
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff fea0 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d009      	beq.n	8000800 <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
 80007ec:	7abb      	ldrb	r3, [r7, #10]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d106      	bne.n	8000800 <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
        return ReadBuf(6);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff ff8d 	bl	8000716 <_ZN7SCServo7ReadBufEtPh>
 80007fc:	4603      	mov	r3, r0
 80007fe:	e000      	b.n	8000802 <_ZN7SCServo16WriteLimitTroqueEhih+0xb4>
    return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	807b      	strh	r3, [r7, #2]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2201      	movs	r2, #1
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000838:	621a      	str	r2, [r3, #32]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	4a17      	ldr	r2, [pc, #92]	@ (800089c <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t+0x90>)
 8000840:	fbb2 f2f3 	udiv	r2, r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	220a      	movs	r2, #10
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2200      	movs	r2, #0
 8000858:	631a      	str	r2, [r3, #48]	@ 0x30
    this->gpio_port_step = gpio_port_step;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	8bba      	ldrh	r2, [r7, #28]
 8000870:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f002 fddc 	bl	800343c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8000884:	8bbb      	ldrh	r3, [r7, #28]
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	69b8      	ldr	r0, [r7, #24]
 800088c:	f002 fdd6 	bl	800343c <HAL_GPIO_WritePin>

  }
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	00989680 	.word	0x00989680

080008a0 <_ZN7Stepper8set_goalEi>:

  void set_goal(int goal) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    this->goal = goal;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dd01      	ble.n	80008c4 <_ZN7Stepper8set_goalEi+0x24>
 80008c0:	2201      	movs	r2, #1
 80008c2:	e001      	b.n	80008c8 <_ZN7Stepper8set_goalEi+0x28>
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d0:	4798      	blx	r3
 80008d2:	4602      	mov	r2, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6898      	ldr	r0, [r3, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	8999      	ldrh	r1, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d101      	bne.n	80008f4 <_ZN7Stepper8set_goalEi+0x54>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <_ZN7Stepper8set_goalEi+0x56>
 80008f4:	2300      	movs	r3, #0
 80008f6:	461a      	mov	r2, r3
 80008f8:	f002 fda0 	bl	800343c <HAL_GPIO_WritePin>
  }
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	611a      	str	r2, [r3, #16]
  }
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7e1b      	ldrb	r3, [r3, #24]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d05b      	beq.n	80009e8 <_ZN7Stepper9spin_onceEv+0xc8>
      return;
    }

    if (state.state == State::HIGH) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7e1b      	ldrb	r3, [r3, #24]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d11b      	bne.n	8000970 <_ZN7Stepper9spin_onceEv+0x50>
      if (get_time_us() - time_start_high > time_high) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093c:	4798      	blx	r3
 800093e:	4602      	mov	r2, r0
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000944:	1ad2      	subs	r2, r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094a:	429a      	cmp	r2, r3
 800094c:	bf8c      	ite	hi
 800094e:	2301      	movhi	r3, #1
 8000950:	2300      	movls	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d03d      	beq.n	80009d4 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	f002 fd6a 	bl	800343c <HAL_GPIO_WritePin>
        state.state = State::LOW;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2202      	movs	r2, #2
 800096c:	761a      	strb	r2, [r3, #24]
 800096e:	e031      	b.n	80009d4 <_ZN7Stepper9spin_onceEv+0xb4>
      }
    } else if (state.state == State::LOW) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7e1b      	ldrb	r3, [r3, #24]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d12d      	bne.n	80009d4 <_ZN7Stepper9spin_onceEv+0xb4>
      if (get_time_us() - time_start_step > time_step) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097c:	4798      	blx	r3
 800097e:	4602      	mov	r2, r0
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	429a      	cmp	r2, r3
 800098c:	bf8c      	ite	hi
 800098e:	2301      	movhi	r3, #1
 8000990:	2300      	movls	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01d      	beq.n	80009d4 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	889b      	ldrh	r3, [r3, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	f002 fd4a 	bl	800343c <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b2:	4798      	blx	r3
 80009b4:	4602      	mov	r2, r0
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009be:	4798      	blx	r3
 80009c0:	4602      	mov	r2, r0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	441a      	add	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691a      	ldr	r2, [r3, #16]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69db      	ldr	r3, [r3, #28]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d104      	bne.n	80009ea <_ZN7Stepper9spin_onceEv+0xca>
      state.state = State::STOPPED;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	761a      	strb	r2, [r3, #24]
 80009e6:	e000      	b.n	80009ea <_ZN7Stepper9spin_onceEv+0xca>
      return;
 80009e8:	bf00      	nop
    }
  }
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7e1b      	ldrb	r3, [r3, #24]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf0c      	ite	eq
 8000a00:	2301      	moveq	r3, #1
 8000a02:	2300      	movne	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
  }
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a24:	d104      	bne.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a03      	ldr	r2, [pc, #12]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a2e:	6013      	str	r3, [r2, #0]
  }
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000320 	.word	0x20000320

08000a40 <_Z11get_time_usv>:

unsigned long get_time_us() {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <_Z11get_time_usv+0x28>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a4c:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <_Z11get_time_usv+0x2c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <_Z11get_time_usv+0x30>)
 8000a54:	fb03 f202 	mul.w	r2, r3, r2
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	200001ac 	.word	0x200001ac
 8000a6c:	20000320 	.word	0x20000320
 8000a70:	000f4240 	.word	0x000f4240

08000a74 <_Z19lift_go_to_init_posv>:
  stepper_res.set_goal(0);

}

void lift_go_to_init_pos()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  // Here we don't have a sensor. So we just turn the motor for a certain distance. (5 spins at 3200 steps per spin)

  stepper_lift.set_goal(-5*3200);
 8000a78:	490b      	ldr	r1, [pc, #44]	@ (8000aa8 <_Z19lift_go_to_init_posv+0x34>)
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <_Z19lift_go_to_init_posv+0x38>)
 8000a7c:	f7ff ff10 	bl	80008a0 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8000a80:	e002      	b.n	8000a88 <_Z19lift_go_to_init_posv+0x14>
  {
    stepper_lift.spin_once();
 8000a82:	480a      	ldr	r0, [pc, #40]	@ (8000aac <_Z19lift_go_to_init_posv+0x38>)
 8000a84:	f7ff ff4c 	bl	8000920 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8000a88:	4808      	ldr	r0, [pc, #32]	@ (8000aac <_Z19lift_go_to_init_posv+0x38>)
 8000a8a:	f7ff ffb1 	bl	80009f0 <_ZN7Stepper10is_stoppedEv>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f3      	bne.n	8000a82 <_Z19lift_go_to_init_posv+0xe>
  }
  stepper_lift.set_pos(0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <_Z19lift_go_to_init_posv+0x38>)
 8000a9e:	f7ff ff31 	bl	8000904 <_ZN7Stepper7set_posEi>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	ffffc180 	.word	0xffffc180
 8000aac:	20000324 	.word	0x20000324

08000ab0 <_Z26servo_horiz_go_to_init_posv>:

void servo_horiz_go_to_init_pos()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af02      	add	r7, sp, #8
  servos.EnableTorque(SERVO_HORIZ_ID, 1);
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2108      	movs	r1, #8
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <_Z26servo_horiz_go_to_init_posv+0x40>)
 8000abe:	f7ff fd64 	bl	800058a <_ZN7SCServo12EnableTorqueEhhh>
  servos.WriteLimitTroque(SERVO_HORIZ_ID, 1023);
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <_Z26servo_horiz_go_to_init_posv+0x40>)
 8000acc:	f7ff fe3f 	bl	800074e <_ZN7SCServo16WriteLimitTroqueEhih>
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_RETRACT, 200);
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	23c8      	movs	r3, #200	@ 0xc8
 8000ad6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000ada:	2108      	movs	r1, #8
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <_Z26servo_horiz_go_to_init_posv+0x40>)
 8000ade:	f7ff fda8 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 8000ae2:	20c8      	movs	r0, #200	@ 0xc8
 8000ae4:	f000 ff42 	bl	800196c <HAL_Delay>
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000394 	.word	0x20000394

08000af4 <_Z26actuators_go_to_init_posesv>:

void actuators_go_to_init_poses()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  servo_horiz_go_to_init_pos();
 8000af8:	f7ff ffda 	bl	8000ab0 <_Z26servo_horiz_go_to_init_posv>
  // reservoir_go_to_init_pos();
  lift_go_to_init_pos();
 8000afc:	f7ff ffba 	bl	8000a74 <_Z19lift_go_to_init_posv>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_Z12lift_go_downv>:

void lift_go_down()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_DOWN);
 8000b08:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8000b0c:	4809      	ldr	r0, [pc, #36]	@ (8000b34 <_Z12lift_go_downv+0x30>)
 8000b0e:	f7ff fec7 	bl	80008a0 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8000b12:	e002      	b.n	8000b1a <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 8000b14:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <_Z12lift_go_downv+0x30>)
 8000b16:	f7ff ff03 	bl	8000920 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8000b1a:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <_Z12lift_go_downv+0x30>)
 8000b1c:	f7ff ff68 	bl	80009f0 <_ZN7Stepper10is_stoppedEv>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f3      	bne.n	8000b14 <_Z12lift_go_downv+0x10>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000324 	.word	0x20000324

08000b38 <_Z10lift_go_upv>:

void lift_go_up()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8000b3c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <_Z10lift_go_upv+0x30>)
 8000b42:	f7ff fead 	bl	80008a0 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8000b46:	e002      	b.n	8000b4e <_Z10lift_go_upv+0x16>
  {
    stepper_lift.spin_once();
 8000b48:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <_Z10lift_go_upv+0x30>)
 8000b4a:	f7ff fee9 	bl	8000920 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <_Z10lift_go_upv+0x30>)
 8000b50:	f7ff ff4e 	bl	80009f0 <_ZN7Stepper10is_stoppedEv>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f083 0301 	eor.w	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f3      	bne.n	8000b48 <_Z10lift_go_upv+0x10>
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000324 	.word	0x20000324

08000b6c <_Z14lift_go_middlev>:

void lift_go_middle()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 8000b70:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <_Z14lift_go_middlev+0x30>)
 8000b76:	f7ff fe93 	bl	80008a0 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8000b7a:	e002      	b.n	8000b82 <_Z14lift_go_middlev+0x16>
  {
    stepper_lift.spin_once();
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <_Z14lift_go_middlev+0x30>)
 8000b7e:	f7ff fecf 	bl	8000920 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <_Z14lift_go_middlev+0x30>)
 8000b84:	f7ff ff34 	bl	80009f0 <_ZN7Stepper10is_stoppedEv>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f083 0301 	eor.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f3      	bne.n	8000b7c <_Z14lift_go_middlev+0x10>
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000324 	.word	0x20000324

08000ba0 <_Z14grabber_extendv>:

void grabber_extend()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_EXTEND, 500);
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <_Z14grabber_extendv+0x28>)
 8000bb6:	f7ff fd3c 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(500);
 8000bba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bbe:	f000 fed5 	bl	800196c <HAL_Delay>
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000394 	.word	0x20000394

08000bcc <_Z15grabber_retractb>:

void grabber_retract(bool block=true)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_RETRACT, 500);
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bde:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000be2:	2108      	movs	r1, #8
 8000be4:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <_Z15grabber_retractb+0x34>)
 8000be6:	f7ff fd24 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <_Z15grabber_retractb+0x2c>
 8000bf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf4:	f000 feba 	bl	800196c <HAL_Delay>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000394 	.word	0x20000394

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fe3f 	bl	800188a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f82a 	bl	8000c64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 fad2 	bl	80011b8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000c14:	f000 faa6 	bl	8001164 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000c18:	f000 fa44 	bl	80010a4 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8000c1c:	f000 f9e0 	bl	8000fe0 <_ZL19MX_USART1_UART_Initv>
  MX_ADC2_Init();
 8000c20:	f000 f876 	bl	8000d10 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 8000c24:	f000 f8e4 	bl	8000df0 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8000c28:	f000 f92e 	bl	8000e88 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8000c2c:	f000 f97a 	bl	8000f24 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <main+0x5c>)
 8000c32:	f003 fd77 	bl	8004724 <HAL_TIM_Base_Start_IT>

    actuators_go_to_init_poses();
 8000c36:	f7ff ff5d 	bl	8000af4 <_Z26actuators_go_to_init_posesv>

    lift_go_down();
 8000c3a:	f7ff ff63 	bl	8000b04 <_Z12lift_go_downv>
    HAL_Delay(3000);
 8000c3e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c42:	f000 fe93 	bl	800196c <HAL_Delay>

    lift_go_up();
 8000c46:	f7ff ff77 	bl	8000b38 <_Z10lift_go_upv>
    // HAL_Delay(3000);

    grabber_extend();
 8000c4a:	f7ff ffa9 	bl	8000ba0 <_Z14grabber_extendv>
    // HAL_Delay(3000);

    lift_go_middle();
 8000c4e:	f7ff ff8d 	bl	8000b6c <_Z14lift_go_middlev>
    // HAL_Delay(3000);

    grabber_retract(false);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff ffba 	bl	8000bcc <_Z15grabber_retractb>
    // HAL_Delay(3000);

    lift_go_down();
 8000c58:	f7ff ff54 	bl	8000b04 <_Z12lift_go_downv>
    // manual_control();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <main+0x58>
 8000c60:	200001ac 	.word	0x200001ac

08000c64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2238      	movs	r2, #56	@ 0x38
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 fa5a 	bl	800612c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f002 fd22 	bl	80036d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ca6:	2355      	movs	r3, #85	@ 0x55
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fdbc 	bl	8003838 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf14      	ite	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	2300      	moveq	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000cd0:	f000 fae2 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2104      	movs	r1, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 f8b5 	bl	8003e5c <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	bf14      	ite	ne
 8000cf8:	2301      	movne	r3, #1
 8000cfa:	2300      	moveq	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000d02:	f000 fac9 	bl	8001298 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	@ 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fa05 	bl	800612c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d24:	4a30      	ldr	r2, [pc, #192]	@ (8000de8 <_ZL12MX_ADC2_Initv+0xd8>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d8a:	4816      	ldr	r0, [pc, #88]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d8c:	f000 ffe6 	bl	8001d5c <HAL_ADC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8000da0:	f000 fa7a 	bl	8001298 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_ZL12MX_ADC2_Initv+0xdc>)
 8000da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da8:	2306      	movs	r3, #6
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db0:	237f      	movs	r3, #127	@ 0x7f
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db4:	2304      	movs	r3, #4
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <_ZL12MX_ADC2_Initv+0xd4>)
 8000dc2:	f001 f94f 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8000dd6:	f000 fa5f 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000028 	.word	0x20000028
 8000de8:	50000100 	.word	0x50000100
 8000dec:	04300002 	.word	0x04300002

08000df0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <_ZL14MX_FDCAN1_Initv+0x94>)
 8000df8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e20:	2210      	movs	r2, #16
 8000e22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e62:	f001 ffb9 	bl	8002dd8 <HAL_FDCAN_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8000e76:	f000 fa0f 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000f4 	.word	0x200000f4
 8000e84:	40006400 	.word	0x40006400

08000e88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <_ZL12MX_I2C1_Initv+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000e94:	4a22      	ldr	r2, [pc, #136]	@ (8000f20 <_ZL12MX_I2C1_Initv+0x98>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec2:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000ec4:	f002 fad2 	bl	800346c <HAL_I2C_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000ed8:	f000 f9de 	bl	8001298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000ee0:	f002 fb5f 	bl	80035a2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000ef4:	f000 f9d0 	bl	8001298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x90>)
 8000efc:	f002 fb9c 	bl	8003638 <HAL_I2CEx_ConfigDigitalFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000f10:	f000 f9c2 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000158 	.word	0x20000158
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	30a0a7fb 	.word	0x30a0a7fb

08000f24 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f58:	4a20      	ldr	r2, [pc, #128]	@ (8000fdc <_ZL12MX_TIM2_Initv+0xb8>)
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f68:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f6a:	f003 fb83 	bl	8004674 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000f7e:	f000 f98b 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f90:	f003 fd82 	bl	8004a98 <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf14      	ite	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	2300      	moveq	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000fa4:	f000 f978 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000fb6:	f003 ffc9 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000fca:	f000 f965 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001ac 	.word	0x200001ac
 8000fdc:	000f4240 	.word	0x000f4240

08000fe0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800109c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000fec:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8000fee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001004:	220c      	movs	r2, #12
 8001006:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001014:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001026:	481c      	ldr	r0, [pc, #112]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001028:	f004 f8a8 	bl	800517c <HAL_HalfDuplex_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 800103c:	f000 f92c 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4815      	ldr	r0, [pc, #84]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001044:	f004 ffa7 	bl	8005f96 <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8001058:	f000 f91e 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105c:	2100      	movs	r1, #0
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001060:	f004 ffd7 	bl	8006012 <HAL_UARTEx_SetRxFifoThreshold>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8001074:	f000 f910 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001078:	4807      	ldr	r0, [pc, #28]	@ (8001098 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800107a:	f004 ff18 	bl	8005eae <HAL_UARTEx_EnableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 800108e:	f000 f903 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001f8 	.word	0x200001f8
 800109c:	40013800 	.word	0x40013800
 80010a0:	000f4240 	.word	0x000f4240

080010a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a8:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ae:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ec:	481b      	ldr	r0, [pc, #108]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010ee:	f003 fff5 	bl	80050dc <HAL_UART_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001102:	f000 f8c9 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4814      	ldr	r0, [pc, #80]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800110a:	f004 ff44 	bl	8005f96 <HAL_UARTEx_SetTxFifoThreshold>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800111e:	f000 f8bb 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001126:	f004 ff74 	bl	8006012 <HAL_UARTEx_SetRxFifoThreshold>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800113a:	f000 f8ad 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001140:	f004 fef0 	bl	8005f24 <HAL_UARTEx_DisableFifoMode>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001154:	f000 f8a0 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000028c 	.word	0x2000028c
 8001160:	40004400 	.word	0x40004400

08001164 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6493      	str	r3, [r2, #72]	@ 0x48
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 8001184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6493      	str	r3, [r2, #72]	@ 0x48
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_ZL11MX_DMA_Initv+0x50>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	200b      	movs	r0, #11
 80011a0:	f001 fc2b 	bl	80029fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011a4:	200b      	movs	r0, #11
 80011a6:	f001 fc42 	bl	8002a2e <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <_ZL12MX_GPIO_Initv+0xd8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2192      	movs	r1, #146	@ 0x92
 8001202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001206:	f002 f919 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|STEP_LIFT_Pin|LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f240 1141 	movw	r1, #321	@ 0x141
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <_ZL12MX_GPIO_Initv+0xdc>)
 8001212:	f002 f913 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8001216:	2392      	movs	r3, #146	@ 0x92
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f001 ff82 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin STEP_LIFT_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|STEP_LIFT_Pin|LD2_Pin;
 8001234:	f240 1341 	movw	r3, #321	@ 0x141
 8001238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	4811      	ldr	r0, [pc, #68]	@ (8001294 <_ZL12MX_GPIO_Initv+0xdc>)
 800124e:	f001 ff73 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125c:	2301      	movs	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f001 ff65 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = FIN_COURSE_RES_Pin;
 800126e:	2320      	movs	r3, #32
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FIN_COURSE_RES_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <_ZL12MX_GPIO_Initv+0xdc>)
 8001282:	f001 ff59 	bl	8003138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	48000400 	.word	0x48000400

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11e      	bne.n	80012f2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d119      	bne.n	80012f2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2340      	movs	r3, #64	@ 0x40
 80012ca:	4a0c      	ldr	r2, [pc, #48]	@ (80012fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80012ce:	480d      	ldr	r0, [pc, #52]	@ (8001304 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80012d0:	f7ff fa9c 	bl	800080c <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012e2:	4907      	ldr	r1, [pc, #28]	@ (8001300 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80012e6:	f7ff fa91 	bl	800080c <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80012ee:	f7ff f90b 	bl	8000508 <_ZN7SCServoC1EP20__UART_HandleTypeDef>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	48000400 	.word	0x48000400
 8001300:	08000a41 	.word	0x08000a41
 8001304:	20000324 	.word	0x20000324
 8001308:	2000035c 	.word	0x2000035c
 800130c:	200001f8 	.word	0x200001f8
 8001310:	20000394 	.word	0x20000394

08001314 <_GLOBAL__sub_I_hadc2>:
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
 8001318:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff ffc1 	bl	80012a4 <_Z41__static_initialization_and_destruction_0ii>
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	@ 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800135a:	f002 fa5d 	bl	8003818 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b09a      	sub	sp, #104	@ 0x68
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2244      	movs	r2, #68	@ 0x44
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fecd 	bl	800612c <memset>
  if(hadc->Instance==ADC2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a33      	ldr	r2, [pc, #204]	@ (8001464 <HAL_ADC_MspInit+0xf8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d15f      	bne.n	800145c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800139c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 ff71 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013b8:	f7ff ff6e 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_ADC_MspInit+0xfc>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ec:	2301      	movs	r3, #1
 80013ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f001 fe99 	bl	8003138 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_ADC_MspInit+0x104>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_ADC_MspInit+0x100>)
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_ADC_MspInit+0x100>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800142a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_ADC_MspInit+0x100>)
 800142e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001432:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001436:	2220      	movs	r2, #32
 8001438:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_ADC_MspInit+0x100>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001440:	480a      	ldr	r0, [pc, #40]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001442:	f001 fb0f 	bl	8002a64 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800144c:	f7ff ff24 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001454:	655a      	str	r2, [r3, #84]	@ 0x54
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <HAL_ADC_MspInit+0x100>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3768      	adds	r7, #104	@ 0x68
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	50000100 	.word	0x50000100
 8001468:	40021000 	.word	0x40021000
 800146c:	20000094 	.word	0x20000094
 8001470:	40020008 	.word	0x40020008

08001474 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	@ 0x68
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2244      	movs	r2, #68	@ 0x44
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f004 fe49 	bl	800612c <memset>
  if(hfdcan->Instance==FDCAN1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a20      	ldr	r2, [pc, #128]	@ (8001520 <HAL_FDCAN_MspInit+0xac>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d139      	bne.n	8001518 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80014aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 feed 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80014c0:	f7ff feea 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_FDCAN_MspInit+0xb0>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001506:	2309      	movs	r3, #9
 8001508:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001514:	f001 fe10 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3768      	adds	r7, #104	@ 0x68
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40006400 	.word	0x40006400
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09c      	sub	sp, #112	@ 0x70
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	2244      	movs	r2, #68	@ 0x44
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fdef 	bl	800612c <memset>
  if(hi2c->Instance==I2C1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2d      	ldr	r2, [pc, #180]	@ (8001608 <HAL_I2C_MspInit+0xe0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d153      	bne.n	8001600 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001558:	2340      	movs	r3, #64	@ 0x40
 800155a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fe95 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff fe92 	bl	8001298 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	4a24      	ldr	r2, [pc, #144]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4a1e      	ldr	r2, [pc, #120]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	2312      	movs	r3, #18
 80015ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b6:	2304      	movs	r3, #4
 80015b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c4:	f001 fdb8 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d8:	2304      	movs	r3, #4
 80015da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	@ (8001610 <HAL_I2C_MspInit+0xe8>)
 80015e4:	f001 fda8 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 80015ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_I2C_MspInit+0xe4>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3770      	adds	r7, #112	@ 0x70
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40005400 	.word	0x40005400
 800160c:	40021000 	.word	0x40021000
 8001610:	48000400 	.word	0x48000400

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001624:	d113      	bne.n	800164e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <HAL_TIM_Base_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <HAL_TIM_Base_MspInit+0x44>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6593      	str	r3, [r2, #88]	@ 0x58
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_TIM_Base_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201c      	movs	r0, #28
 8001644:	f001 f9d9 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001648:	201c      	movs	r0, #28
 800164a:	f001 f9f0 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09c      	sub	sp, #112	@ 0x70
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	2244      	movs	r2, #68	@ 0x44
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f004 fd55 	bl	800612c <memset>
  if(huart->Instance==USART1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <HAL_UART_MspInit+0x124>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d138      	bne.n	80016fe <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fdfb 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a4:	f7ff fdf8 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ac:	4a35      	ldr	r2, [pc, #212]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b4:	4b33      	ldr	r3, [pc, #204]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <HAL_UART_MspInit+0x128>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ea:	2307      	movs	r3, #7
 80016ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f001 fd1e 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fc:	e03b      	b.n	8001776 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <HAL_UART_MspInit+0x12c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d136      	bne.n	8001776 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fdbd 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001720:	f7ff fdba 	bl	8001298 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_UART_MspInit+0x128>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a16      	ldr	r2, [pc, #88]	@ (8001784 <HAL_UART_MspInit+0x128>)
 800172a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_UART_MspInit+0x128>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_UART_MspInit+0x128>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a10      	ldr	r2, [pc, #64]	@ (8001784 <HAL_UART_MspInit+0x128>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_UART_MspInit+0x128>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001754:	230c      	movs	r3, #12
 8001756:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f001 fce1 	bl	8003138 <HAL_GPIO_Init>
}
 8001776:	bf00      	nop
 8001778:	3770      	adds	r7, #112	@ 0x70
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40013800 	.word	0x40013800
 8001784:	40021000 	.word	0x40021000
 8001788:	40004400 	.word	0x40004400

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 f8a5 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <DMA1_Channel1_IRQHandler+0x10>)
 80017f2:	f001 f9df 	bl	8002bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000094 	.word	0x20000094

08001800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <TIM2_IRQHandler+0x10>)
 8001806:	f002 fff7 	bl	80047f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200001ac 	.word	0x200001ac

08001814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001838:	480d      	ldr	r0, [pc, #52]	@ (8001870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800183a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 800183c:	f7ff ffea 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <LoopForever+0x6>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	@ (8001878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <LoopForever+0xe>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	@ (8001884 <LoopForever+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001866:	f004 fc69 	bl	800613c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186a:	f7ff f9cb 	bl	8000c04 <main>

0800186e <LoopForever>:

LoopForever:
    b LoopForever
 800186e:	e7fe      	b.n	800186e <LoopForever>
  ldr   r0, =_estack
 8001870:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800187c:	080061f0 	.word	0x080061f0
  ldr r2, =_sbss
 8001880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001884:	2000039c 	.word	0x2000039c

08001888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC1_2_IRQHandler>

0800188a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f001 f8a5 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f80e 	bl	80018bc <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e001      	b.n	80018b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ac:	f7ff fd3a 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b0:	79fb      	ldrb	r3, [r7, #7]

}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <HAL_InitTick+0x68>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d022      	beq.n	8001916 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_InitTick+0x6c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_InitTick+0x68>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f8b0 	bl	8002a4a <HAL_SYSTICK_Config>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10f      	bne.n	8001910 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	d809      	bhi.n	800190a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f6:	2200      	movs	r2, #0
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018fe:	f001 f87c 	bl	80029fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_InitTick+0x70>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e007      	b.n	800191a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	e004      	b.n	800191a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000008 	.word	0x20000008
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x1c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x20>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4413      	add	r3, r2
 800193e:	4a03      	ldr	r2, [pc, #12]	@ (800194c <HAL_IncTick+0x1c>)
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000398 	.word	0x20000398
 8001950:	20000008 	.word	0x20000008

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000398 	.word	0x20000398

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001984:	d004      	beq.n	8001990 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_Delay+0x40>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001990:	bf00      	nop
 8001992:	f7ff ffdf 	bl	8001954 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d8f7      	bhi.n	8001992 <HAL_Delay+0x26>
  {
  }
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000008 	.word	0x20000008

080019b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3360      	adds	r3, #96	@ 0x60
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <LL_ADC_SetOffset+0x44>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	03fff000 	.word	0x03fff000

08001a60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3360      	adds	r3, #96	@ 0x60
 8001a6e:	461a      	mov	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3360      	adds	r3, #96	@ 0x60
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3360      	adds	r3, #96	@ 0x60
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3360      	adds	r3, #96	@ 0x60
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	615a      	str	r2, [r3, #20]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3330      	adds	r3, #48	@ 0x30
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	4413      	add	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	211f      	movs	r1, #31
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	f003 011f 	and.w	r1, r3, #31
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3314      	adds	r3, #20
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	0e5b      	lsrs	r3, r3, #25
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0d1b      	lsrs	r3, r3, #20
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	2107      	movs	r1, #7
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0d1b      	lsrs	r3, r3, #20
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0318 	and.w	r3, r3, #24
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c28:	40d9      	lsrs	r1, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	431a      	orrs	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	0007ffff 	.word	0x0007ffff

08001c4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6093      	str	r3, [r2, #8]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_IsEnabled+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_IsEnabled+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e167      	b.n	8002046 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff faf1 	bl	800136c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff67 	bl	8001c70 <LL_ADC_IsDeepPowerDownEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff4d 	bl	8001c4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff82 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff66 	bl	8001c98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8002050 <HAL_ADC_Init+0x2f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	4aa0      	ldr	r2, [pc, #640]	@ (8002054 <HAL_ADC_Init+0x2f8>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	099b      	lsrs	r3, r3, #6
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff64 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e02:	f043 0210 	orr.w	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff75 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8001e24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8100 	bne.w	8002034 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 80fc 	bne.w	8002034 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff49 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e60:	f7ff ff42 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e64:	4604      	mov	r4, r0
 8001e66:	487c      	ldr	r0, [pc, #496]	@ (8002058 <HAL_ADC_Init+0x2fc>)
 8001e68:	f7ff ff3e 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4878      	ldr	r0, [pc, #480]	@ (800205c <HAL_ADC_Init+0x300>)
 8001e7c:	f7ff fd98 	bl	80019b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f5b      	ldrb	r3, [r3, #29]
 8001e84:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e90:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e96:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e9e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	045b      	lsls	r3, r3, #17
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	4b60      	ldr	r3, [pc, #384]	@ (8002060 <HAL_ADC_Init+0x304>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff14 	bl	8001d34 <LL_ADC_INJ_IsConversionOngoing>
 8001f0c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d16d      	bne.n	8001ff0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d16a      	bne.n	8001ff0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f26:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6911      	ldr	r1, [r2, #16]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f7a:	e013      	b.n	8001fa4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d118      	bne.n	8001fe0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002010:	e007      	b.n	8002022 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020f 	bic.w	r2, r2, #15
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002032:	e007      	b.n	8002044 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002044:	7ffb      	ldrb	r3, [r7, #31]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	20000000 	.word	0x20000000
 8002054:	053e2d63 	.word	0x053e2d63
 8002058:	50000100 	.word	0x50000100
 800205c:	50000300 	.word	0x50000300
 8002060:	fff04007 	.word	0xfff04007

08002064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b6      	sub	sp, #216	@ 0xd8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x22>
 8002082:	2302      	movs	r3, #2
 8002084:	e3c8      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7b4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe3b 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 83ad 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f7ff fd51 	bl	8001b54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fe29 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 80020bc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe35 	bl	8001d34 <LL_ADC_INJ_IsConversionOngoing>
 80020ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 81d9 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 81d4 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020ea:	d10f      	bne.n	800210c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff fd58 	bl	8001bac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd12 	bl	8001b2e <LL_ADC_SetSamplingTimeCommonConfig>
 800210a:	e00e      	b.n	800212a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	461a      	mov	r2, r3
 800211a:	f7ff fd47 	bl	8001bac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fd02 	bl	8001b2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d022      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800215c:	f7ff fc5c 	bl	8001a18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fca8 	bl	8001ac2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x124>
 8002182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002186:	e000      	b.n	800218a <HAL_ADC_ConfigChannel+0x126>
 8002188:	2300      	movs	r3, #0
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fcb4 	bl	8001af8 <LL_ADC_SetOffsetSaturation>
 8002190:	e17b      	b.n	800248a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fc61 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_ADC_ConfigChannel+0x15a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc56 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	e01e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x198>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fc4b 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e004      	b.n	80021fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80021f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1b0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	e018      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e004      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800223c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc1a 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fbfe 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x220>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fbf3 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	e01e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x25e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fbe8 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80022a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80022aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_ConfigChannel+0x276>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	e018      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e004      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002302:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fbb7 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb9b 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2e6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb90 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	e01e      	b.n	8002388 <HAL_ADC_ConfigChannel+0x324>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb85 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800236c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002370:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800237c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x33c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e016      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80023b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80023b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb56 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2103      	movs	r1, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fb3a 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x3a8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2103      	movs	r1, #3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb2f 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x3d8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb24 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002426:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e003      	b.n	800243a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002432:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3f0>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	e011      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002464:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb01 	bl	8001a8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fc2a 	bl	8001ce8 <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 8140 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fbab 	bl	8001c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a8f      	ldr	r2, [pc, #572]	@ (80026f0 <HAL_ADC_ConfigChannel+0x68c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f040 8131 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x47e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e019      	b.n	8002516 <HAL_ADC_ConfigChannel+0x4b2>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b09      	cmp	r3, #9
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002516:	2b00      	cmp	r3, #0
 8002518:	d079      	beq.n	800260e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4d2>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002534:	e015      	b.n	8002562 <HAL_ADC_ConfigChannel+0x4fe>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3301      	adds	r3, #1
 800255c:	069b      	lsls	r3, r3, #26
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x51e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	e017      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x54e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800259e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x574>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 021f 	and.w	r2, r3, #31
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	051b      	lsls	r3, r3, #20
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x5a6>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260a:	430b      	orrs	r3, r1
 800260c:	e081      	b.n	8002712 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_ADC_ConfigChannel+0x5c6>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	3301      	adds	r3, #1
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002628:	e015      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5f2>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	069b      	lsls	r3, r3, #26
 8002652:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x612>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	e017      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x642>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	61fb      	str	r3, [r7, #28]
  return result;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x66e>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x6ac>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	613b      	str	r3, [r7, #16]
  return result;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e006      	b.n	80026fc <HAL_ADC_ConfigChannel+0x698>
 80026ee:	bf00      	nop
 80026f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002710:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002716:	4619      	mov	r1, r3
 8002718:	f7ff fa48 	bl	8001bac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <HAL_ADC_ConfigChannel+0x7bc>)
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d071      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	483e      	ldr	r0, [pc, #248]	@ (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 800272a:	f7ff f967 	bl	80019fc <LL_ADC_GetCommonPathInternalCh>
 800272e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3c      	ldr	r2, [pc, #240]	@ (8002828 <HAL_ADC_ConfigChannel+0x7c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x6e2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3a      	ldr	r2, [pc, #232]	@ (800282c <HAL_ADC_ConfigChannel+0x7c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d127      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800274a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d121      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800275a:	d157      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002764:	4619      	mov	r1, r3
 8002766:	482f      	ldr	r0, [pc, #188]	@ (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 8002768:	f7ff f935 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276c:	4b30      	ldr	r3, [pc, #192]	@ (8002830 <HAL_ADC_ConfigChannel+0x7cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a30      	ldr	r2, [pc, #192]	@ (8002834 <HAL_ADC_ConfigChannel+0x7d0>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002786:	e002      	b.n	800278e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	e03a      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_ADC_ConfigChannel+0x7d4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d113      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	@ (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02a      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027be:	4619      	mov	r1, r3
 80027c0:	4818      	ldr	r0, [pc, #96]	@ (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027c2:	f7ff f908 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	e021      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11c      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d011      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027f0:	4619      	mov	r1, r3
 80027f2:	480c      	ldr	r0, [pc, #48]	@ (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027f4:	f7ff f8ef 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
 80027f8:	e008      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002814:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002818:	4618      	mov	r0, r3
 800281a:	37d8      	adds	r7, #216	@ 0xd8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	80080000 	.word	0x80080000
 8002824:	50000300 	.word	0x50000300
 8002828:	c3210000 	.word	0xc3210000
 800282c:	90c00010 	.word	0x90c00010
 8002830:	20000000 	.word	0x20000000
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	c7520000 	.word	0xc7520000
 800283c:	50000100 	.word	0x50000100
 8002840:	cb840000 	.word	0xcb840000

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	@ (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	@ (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	@ (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	@ 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff40 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff90 	bl	8002938 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5f 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff33 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffa4 	bl	80029a0 <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e08d      	b.n	8002b92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_DMA_Init+0x138>)
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d80f      	bhi.n	8002aa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b45      	ldr	r3, [pc, #276]	@ (8002ba0 <HAL_DMA_Init+0x13c>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <HAL_DMA_Init+0x140>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	009a      	lsls	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ba8 <HAL_DMA_Init+0x144>)
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aa0:	e00e      	b.n	8002ac0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_DMA_Init+0x148>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba4 <HAL_DMA_Init+0x140>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	009a      	lsls	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb0 <HAL_DMA_Init+0x14c>)
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8fe 	bl	8002d14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b20:	d102      	bne.n	8002b28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_DMA_Init+0x104>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d80c      	bhi.n	8002b68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f91e 	bl	8002d90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	e008      	b.n	8002b7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40020407 	.word	0x40020407
 8002ba0:	bffdfff8 	.word	0xbffdfff8
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	bffdfbf8 	.word	0xbffdfbf8
 8002bb0:	40020400 	.word	0x40020400

08002bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d026      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x7a>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d021      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	2104      	movs	r1, #4
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d071      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c2c:	e06c      	b.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2202      	movs	r2, #2
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02e      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d029      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 020a 	bic.w	r2, r2, #10
 8002c68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2102      	movs	r1, #2
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d038      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c9e:	e033      	b.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2208      	movs	r2, #8
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02a      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d025      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 020e 	bic.w	r2, r2, #14
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
}
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d802      	bhi.n	8002d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002d28:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e001      	b.n	8002d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d30:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3b08      	subs	r3, #8
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	009a      	lsls	r2, r3, #2
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40020407 	.word	0x40020407
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020820 	.word	0x40020820
 8002d88:	cccccccd 	.word	0xcccccccd
 8002d8c:	40020880 	.word	0x40020880

08002d90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a08      	ldr	r2, [pc, #32]	@ (8002dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	1000823f 	.word	0x1000823f
 8002dd4:	40020940 	.word	0x40020940

08002dd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e147      	b.n	800307a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fb38 	bl	8001474 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0210 	bic.w	r2, r2, #16
 8002e12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e14:	f7fe fd9e 	bl	8001954 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e1a:	e012      	b.n	8002e42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e1c:	f7fe fd9a 	bl	8001954 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d90b      	bls.n	8002e42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e11b      	b.n	800307a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d0e5      	beq.n	8002e1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7fe fd78 	bl	8001954 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e66:	e012      	b.n	8002e8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e68:	f7fe fd74 	bl	8001954 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d90b      	bls.n	8002e8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0f5      	b.n	800307a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0e5      	beq.n	8002e68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0202 	orr.w	r2, r2, #2
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a74      	ldr	r2, [pc, #464]	@ (8003084 <HAL_FDCAN_Init+0x2ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d103      	bne.n	8002ebe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002eb6:	4a74      	ldr	r2, [pc, #464]	@ (8003088 <HAL_FDCAN_Init+0x2b0>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7c1b      	ldrb	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed4:	619a      	str	r2, [r3, #24]
 8002ed6:	e007      	b.n	8002ee8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7c5b      	ldrb	r3, [r3, #17]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	e007      	b.n	8002f12 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f10:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7c9b      	ldrb	r3, [r3, #18]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d108      	bne.n	8002f2c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f28:	619a      	str	r2, [r3, #24]
 8002f2a:	e007      	b.n	8002f3c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f3a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002f60:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0210 	bic.w	r2, r2, #16
 8002f70:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0204 	orr.w	r2, r2, #4
 8002f88:	619a      	str	r2, [r3, #24]
 8002f8a:	e02c      	b.n	8002fe6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d028      	beq.n	8002fe6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002faa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0210 	orr.w	r2, r2, #16
 8002fba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d110      	bne.n	8002fe6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	619a      	str	r2, [r3, #24]
 8002fd4:	e007      	b.n	8002fe6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0220 	orr.w	r2, r2, #32
 8002fe4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ff6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	3b01      	subs	r3, #1
 8003008:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800300e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003010:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800301a:	d115      	bne.n	8003048 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	3b01      	subs	r3, #1
 8003028:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800302a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	3b01      	subs	r3, #1
 8003032:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003034:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	3b01      	subs	r3, #1
 800303e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003044:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003046:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f814 	bl	800308c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40006400 	.word	0x40006400
 8003088:	40006500 	.word	0x40006500

0800308c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003094:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003096:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	041a      	lsls	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030cc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	061a      	lsls	r2, r3, #24
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e005      	b.n	800311a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3f3      	bcc.n	800310e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	4000a400 	.word	0x4000a400

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003146:	e15a      	b.n	80033fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 814c 	beq.w	80033f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d005      	beq.n	8003178 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003174:	2b02      	cmp	r3, #2
 8003176:	d130      	bne.n	80031da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ae:	2201      	movs	r2, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0201 	and.w	r2, r3, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d017      	beq.n	8003216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d123      	bne.n	800326a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0203 	and.w	r2, r3, #3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a6 	beq.w	80033f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ac:	4b5b      	ldr	r3, [pc, #364]	@ (800341c <HAL_GPIO_Init+0x2e4>)
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	4a5a      	ldr	r2, [pc, #360]	@ (800341c <HAL_GPIO_Init+0x2e4>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032b8:	4b58      	ldr	r3, [pc, #352]	@ (800341c <HAL_GPIO_Init+0x2e4>)
 80032ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c4:	4a56      	ldr	r2, [pc, #344]	@ (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	220f      	movs	r2, #15
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032ee:	d01f      	beq.n	8003330 <HAL_GPIO_Init+0x1f8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003424 <HAL_GPIO_Init+0x2ec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d019      	beq.n	800332c <HAL_GPIO_Init+0x1f4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003428 <HAL_GPIO_Init+0x2f0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_GPIO_Init+0x1f0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a4a      	ldr	r2, [pc, #296]	@ (800342c <HAL_GPIO_Init+0x2f4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00d      	beq.n	8003324 <HAL_GPIO_Init+0x1ec>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a49      	ldr	r2, [pc, #292]	@ (8003430 <HAL_GPIO_Init+0x2f8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <HAL_GPIO_Init+0x1e8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a48      	ldr	r2, [pc, #288]	@ (8003434 <HAL_GPIO_Init+0x2fc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_GPIO_Init+0x1e4>
 8003318:	2305      	movs	r3, #5
 800331a:	e00a      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 800331c:	2306      	movs	r3, #6
 800331e:	e008      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003320:	2304      	movs	r3, #4
 8003322:	e006      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003324:	2303      	movs	r3, #3
 8003326:	e004      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003328:	2302      	movs	r3, #2
 800332a:	e002      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003330:	2300      	movs	r3, #0
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	f002 0203 	and.w	r2, r2, #3
 8003338:	0092      	lsls	r2, r2, #2
 800333a:	4093      	lsls	r3, r2
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003342:	4937      	ldr	r1, [pc, #220]	@ (8003420 <HAL_GPIO_Init+0x2e8>)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_GPIO_Init+0x300>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003374:	4a30      	ldr	r2, [pc, #192]	@ (8003438 <HAL_GPIO_Init+0x300>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337a:	4b2f      	ldr	r3, [pc, #188]	@ (8003438 <HAL_GPIO_Init+0x300>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339e:	4a26      	ldr	r2, [pc, #152]	@ (8003438 <HAL_GPIO_Init+0x300>)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033a4:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <HAL_GPIO_Init+0x300>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <HAL_GPIO_Init+0x300>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_GPIO_Init+0x300>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f2:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <HAL_GPIO_Init+0x300>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3301      	adds	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f ae9d 	bne.w	8003148 <HAL_GPIO_Init+0x10>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40021000 	.word	0x40021000
 8003420:	40010000 	.word	0x40010000
 8003424:	48000400 	.word	0x48000400
 8003428:	48000800 	.word	0x48000800
 800342c:	48000c00 	.word	0x48000c00
 8003430:	48001000 	.word	0x48001000
 8003434:	48001400 	.word	0x48001400
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e08d      	b.n	800359a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe f848 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	@ 0x24
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	e006      	b.n	80034f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d108      	bne.n	800350e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e007      	b.n	800351e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800352c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d138      	bne.n	800362a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e032      	b.n	800362c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	@ 0x24
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b20      	cmp	r3, #32
 800364c:	d139      	bne.n	80036c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003658:	2302      	movs	r3, #2
 800365a:	e033      	b.n	80036c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	@ 0x24
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800368a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d141      	bne.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036de:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d131      	bne.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ec:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f2:	4a46      	ldr	r2, [pc, #280]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fc:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003704:	4a41      	ldr	r2, [pc, #260]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800370a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370c:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2232      	movs	r2, #50	@ 0x32
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	4a3f      	ldr	r2, [pc, #252]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003722:	e002      	b.n	800372a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372a:	4b38      	ldr	r3, [pc, #224]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003736:	d102      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f2      	bne.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373e:	4b33      	ldr	r3, [pc, #204]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d158      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e057      	b.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003750:	4b2e      	ldr	r3, [pc, #184]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003756:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800375c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003760:	e04d      	b.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003768:	d141      	bne.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800376a:	4b28      	ldr	r3, [pc, #160]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003776:	d131      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003778:	4b24      	ldr	r3, [pc, #144]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003788:	4b20      	ldr	r3, [pc, #128]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003790:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003798:	4b1d      	ldr	r3, [pc, #116]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2232      	movs	r2, #50	@ 0x32
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ae:	e002      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d102      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f2      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ca:	4b10      	ldr	r3, [pc, #64]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	d112      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e011      	b.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e2:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037ec:	e007      	b.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ee:	4b07      	ldr	r3, [pc, #28]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f6:	4a05      	ldr	r2, [pc, #20]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40007000 	.word	0x40007000
 8003810:	20000000 	.word	0x20000000
 8003814:	431bde83 	.word	0x431bde83

08003818 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003826:	6093      	str	r3, [r2, #8]
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40007000 	.word	0x40007000

08003838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e2fe      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d075      	beq.n	8003942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003856:	4b97      	ldr	r3, [pc, #604]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003860:	4b94      	ldr	r3, [pc, #592]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d102      	bne.n	8003876 <HAL_RCC_OscConfig+0x3e>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d002      	beq.n	800387c <HAL_RCC_OscConfig+0x44>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d10b      	bne.n	8003894 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d05b      	beq.n	8003940 <HAL_RCC_OscConfig+0x108>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d157      	bne.n	8003940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e2d9      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d106      	bne.n	80038ac <HAL_RCC_OscConfig+0x74>
 800389e:	4b85      	ldr	r3, [pc, #532]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a84      	ldr	r2, [pc, #528]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038d0:	4b78      	ldr	r3, [pc, #480]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a77      	ldr	r2, [pc, #476]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b75      	ldr	r3, [pc, #468]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a74      	ldr	r2, [pc, #464]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f830 	bl	8001954 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f82c 	bl	8001954 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e29e      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xc0>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f81c 	bl	8001954 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe f818 	bl	8001954 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e28a      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003932:	4b60      	ldr	r3, [pc, #384]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0xe8>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d075      	beq.n	8003a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b59      	ldr	r3, [pc, #356]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4b56      	ldr	r3, [pc, #344]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d102      	bne.n	800396e <HAL_RCC_OscConfig+0x136>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d002      	beq.n	8003974 <HAL_RCC_OscConfig+0x13c>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d11f      	bne.n	80039b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003974:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x154>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e25d      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	4946      	ldr	r1, [pc, #280]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039a0:	4b45      	ldr	r3, [pc, #276]	@ (8003ab8 <HAL_RCC_OscConfig+0x280>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd ff89 	bl	80018bc <HAL_InitTick>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d043      	beq.n	8003a38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e249      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d023      	beq.n	8003a04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039bc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd ffc4 	bl	8001954 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fd ffc0 	bl	8001954 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e232      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e2:	4b34      	ldr	r3, [pc, #208]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ee:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	492d      	ldr	r1, [pc, #180]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
 8003a02:	e01a      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd ffa0 	bl	8001954 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fd ff9c 	bl	8001954 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e20e      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1e0>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d041      	beq.n	8003aca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a54:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd ff79 	bl	8001954 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fd ff75 	bl	8001954 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1e7      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ef      	beq.n	8003a66 <HAL_RCC_OscConfig+0x22e>
 8003a86:	e020      	b.n	8003aca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd ff5c 	bl	8001954 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a9e:	e00d      	b.n	8003abc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fd ff58 	bl	8001954 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d906      	bls.n	8003abc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1ca      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003abc:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ea      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a6 	beq.w	8003c24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003adc:	4b84      	ldr	r3, [pc, #528]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_OscConfig+0x2b4>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x2b6>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afe:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0e:	4b79      	ldr	r3, [pc, #484]	@ (8003cf4 <HAL_RCC_OscConfig+0x4bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b1a:	4b76      	ldr	r3, [pc, #472]	@ (8003cf4 <HAL_RCC_OscConfig+0x4bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x4bc>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd ff15 	bl	8001954 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd ff11 	bl	8001954 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e183      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b40:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <HAL_RCC_OscConfig+0x4bc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d108      	bne.n	8003b66 <HAL_RCC_OscConfig+0x32e>
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	4a65      	ldr	r2, [pc, #404]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b64:	e024      	b.n	8003bb0 <HAL_RCC_OscConfig+0x378>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d110      	bne.n	8003b90 <HAL_RCC_OscConfig+0x358>
 8003b6e:	4b60      	ldr	r3, [pc, #384]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	4a5e      	ldr	r2, [pc, #376]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b84:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b8e:	e00f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x378>
 8003b90:	4b57      	ldr	r3, [pc, #348]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	4a56      	ldr	r2, [pc, #344]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba6:	4a52      	ldr	r2, [pc, #328]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d016      	beq.n	8003be6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fd fecc 	bl	8001954 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fec8 	bl	8001954 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e138      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x388>
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7fd feb5 	bl	8001954 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd feb1 	bl	8001954 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e121      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c04:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ed      	bne.n	8003bee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	4b35      	ldr	r3, [pc, #212]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1c:	4a34      	ldr	r2, [pc, #208]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03c      	beq.n	8003caa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c38:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd fe84 	bl	8001954 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c50:	f7fd fe80 	bl	8001954 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0f2      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c62:	4b23      	ldr	r3, [pc, #140]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ef      	beq.n	8003c50 <HAL_RCC_OscConfig+0x418>
 8003c70:	e01b      	b.n	8003caa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c72:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c78:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fd fe67 	bl	8001954 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c8a:	f7fd fe63 	bl	8001954 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0d5      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c9c:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ef      	bne.n	8003c8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80c9 	beq.w	8003e46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	f000 8083 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d15e      	bne.n	8003d88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b8>)
 8003cd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fe3d 	bl	8001954 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd fe39 	bl	8001954 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d905      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0ab      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	4b55      	ldr	r3, [pc, #340]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ec      	bne.n	8003cde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d04:	4b52      	ldr	r3, [pc, #328]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4b52      	ldr	r3, [pc, #328]	@ (8003e54 <HAL_RCC_OscConfig+0x61c>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6a11      	ldr	r1, [r2, #32]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d14:	3a01      	subs	r2, #1
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d1e:	0212      	lsls	r2, r2, #8
 8003d20:	4311      	orrs	r1, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d26:	0852      	lsrs	r2, r2, #1
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	0552      	lsls	r2, r2, #21
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d32:	0852      	lsrs	r2, r2, #1
 8003d34:	3a01      	subs	r2, #1
 8003d36:	0652      	lsls	r2, r2, #25
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d3e:	06d2      	lsls	r2, r2, #27
 8003d40:	430a      	orrs	r2, r1
 8003d42:	4943      	ldr	r1, [pc, #268]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a40      	ldr	r2, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d54:	4b3e      	ldr	r3, [pc, #248]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a3d      	ldr	r2, [pc, #244]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd fdf8 	bl	8001954 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fd fdf4 	bl	8001954 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e066      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	4b35      	ldr	r3, [pc, #212]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x530>
 8003d86:	e05e      	b.n	8003e46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a30      	ldr	r2, [pc, #192]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fdde 	bl	8001954 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd fdda 	bl	8001954 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04c      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dae:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dba:	4b25      	ldr	r3, [pc, #148]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4924      	ldr	r1, [pc, #144]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_OscConfig+0x620>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
 8003dc6:	e03e      	b.n	8003e46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e039      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d12c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	3b01      	subs	r3, #1
 8003df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d123      	bne.n	8003e42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d11b      	bne.n	8003e42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d113      	bne.n	8003e42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	3b01      	subs	r3, #1
 8003e28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	019f800c 	.word	0x019f800c
 8003e58:	feeefffc 	.word	0xfeeefffc

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e11e      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b91      	ldr	r3, [pc, #580]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d910      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b8e      	ldr	r3, [pc, #568]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 020f 	bic.w	r2, r3, #15
 8003e8a:	498c      	ldr	r1, [pc, #560]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b8a      	ldr	r3, [pc, #552]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e106      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d073      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d129      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb8:	4b81      	ldr	r3, [pc, #516]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0f4      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ec8:	f000 f99e 	bl	8004208 <RCC_GetSysClockFreqFromPLLSource>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a7c      	ldr	r2, [pc, #496]	@ (80040c4 <HAL_RCC_ClockConfig+0x268>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d93f      	bls.n	8003f56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d033      	beq.n	8003f56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d12f      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ef6:	4b72      	ldr	r3, [pc, #456]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003efe:	4a70      	ldr	r2, [pc, #448]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e024      	b.n	8003f56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f14:	4b6a      	ldr	r3, [pc, #424]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0c6      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f24:	4b66      	ldr	r3, [pc, #408]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0be      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f34:	f000 f8ce 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4a61      	ldr	r2, [pc, #388]	@ (80040c4 <HAL_RCC_ClockConfig+0x268>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d909      	bls.n	8003f56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f42:	4b5f      	ldr	r3, [pc, #380]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4957      	ldr	r1, [pc, #348]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f68:	f7fd fcf4 	bl	8001954 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fd fcf0 	bl	8001954 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e095      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b4e      	ldr	r3, [pc, #312]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a42      	ldr	r2, [pc, #264]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b39      	ldr	r3, [pc, #228]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4936      	ldr	r1, [pc, #216]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b80      	cmp	r3, #128	@ 0x80
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ff2:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003ff8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ffc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d21d      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 020f 	bic.w	r2, r3, #15
 8004014:	4929      	ldr	r1, [pc, #164]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800401c:	f7fd fc9a 	bl	8001954 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fd fc96 	bl	8001954 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e03b      	b.n	80040b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d1ed      	bne.n	8004024 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4917      	ldr	r1, [pc, #92]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490f      	ldr	r1, [pc, #60]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004086:	f000 f825 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490c      	ldr	r1, [pc, #48]	@ (80040c8 <HAL_RCC_ClockConfig+0x26c>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a0a      	ldr	r2, [pc, #40]	@ (80040cc <HAL_RCC_ClockConfig+0x270>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040a6:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_RCC_ClockConfig+0x274>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fc06 	bl	80018bc <HAL_InitTick>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40021000 	.word	0x40021000
 80040c4:	04c4b400 	.word	0x04c4b400
 80040c8:	0800619c 	.word	0x0800619c
 80040cc:	20000000 	.word	0x20000000
 80040d0:	20000004 	.word	0x20000004

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040da:	4b2c      	ldr	r3, [pc, #176]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d102      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e047      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040ec:	4b27      	ldr	r3, [pc, #156]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040f8:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e03e      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040fe:	4b23      	ldr	r3, [pc, #140]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d136      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004114:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3301      	adds	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d10c      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004128:	4a1a      	ldr	r2, [pc, #104]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xc0>)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	4a16      	ldr	r2, [pc, #88]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004132:	68d2      	ldr	r2, [r2, #12]
 8004134:	0a12      	lsrs	r2, r2, #8
 8004136:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
      break;
 8004140:	e00c      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004142:	4a13      	ldr	r2, [pc, #76]	@ (8004190 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	4a10      	ldr	r2, [pc, #64]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	0a12      	lsrs	r2, r2, #8
 8004150:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_GetSysClockFreq+0xb8>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	0e5b      	lsrs	r3, r3, #25
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	3301      	adds	r3, #1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e001      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800417c:	693b      	ldr	r3, [r7, #16]
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	00f42400 	.word	0x00f42400
 8004194:	007a1200 	.word	0x007a1200

08004198 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041b4:	f7ff fff0 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4904      	ldr	r1, [pc, #16]	@ (80041d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	080061ac 	.word	0x080061ac

080041dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041e0:	f7ff ffda 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0adb      	lsrs	r3, r3, #11
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4904      	ldr	r1, [pc, #16]	@ (8004204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	080061ac 	.word	0x080061ac

08004208 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d10c      	bne.n	8004246 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422c:	4a17      	ldr	r2, [pc, #92]	@ (800428c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004236:	68d2      	ldr	r2, [r2, #12]
 8004238:	0a12      	lsrs	r2, r2, #8
 800423a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
    break;
 8004244:	e00c      	b.n	8004260 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004246:	4a12      	ldr	r2, [pc, #72]	@ (8004290 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	0a12      	lsrs	r2, r2, #8
 8004254:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
    break;
 800425e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0e5b      	lsrs	r3, r3, #25
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800427a:	687b      	ldr	r3, [r7, #4]
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40021000 	.word	0x40021000
 800428c:	007a1200 	.word	0x007a1200
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800429c:	2300      	movs	r3, #0
 800429e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a0:	2300      	movs	r3, #0
 80042a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8098 	beq.w	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b6:	4b43      	ldr	r3, [pc, #268]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	4b40      	ldr	r3, [pc, #256]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ce:	4b3d      	ldr	r3, [pc, #244]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	2301      	movs	r3, #1
 80042dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042de:	4b3a      	ldr	r3, [pc, #232]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a39      	ldr	r2, [pc, #228]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ea:	f7fd fb33 	bl	8001954 <HAL_GetTick>
 80042ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f0:	e009      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fd fb2f 	bl	8001954 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	74fb      	strb	r3, [r7, #19]
        break;
 8004304:	e005      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004306:	4b30      	ldr	r3, [pc, #192]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ef      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d159      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004318:	4b2a      	ldr	r3, [pc, #168]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01e      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d019      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004334:	4b23      	ldr	r3, [pc, #140]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004340:	4b20      	ldr	r3, [pc, #128]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004346:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004350:	4b1c      	ldr	r3, [pc, #112]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004360:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fd faef 	bl	8001954 <HAL_GetTick>
 8004376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004378:	e00b      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd faeb 	bl	8001954 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d902      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	74fb      	strb	r3, [r7, #19]
            break;
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ec      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a6:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	4903      	ldr	r1, [pc, #12]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043bc:	e008      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	74bb      	strb	r3, [r7, #18]
 80043c2:	e005      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d0:	7c7b      	ldrb	r3, [r7, #17]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4ba6      	ldr	r3, [pc, #664]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	4aa5      	ldr	r2, [pc, #660]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ee:	4ba0      	ldr	r3, [pc, #640]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f023 0203 	bic.w	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	499c      	ldr	r1, [pc, #624]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004410:	4b97      	ldr	r3, [pc, #604]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f023 020c 	bic.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4994      	ldr	r1, [pc, #592]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004432:	4b8f      	ldr	r3, [pc, #572]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004438:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	498b      	ldr	r1, [pc, #556]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004454:	4b86      	ldr	r3, [pc, #536]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4983      	ldr	r1, [pc, #524]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004476:	4b7e      	ldr	r3, [pc, #504]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	497a      	ldr	r1, [pc, #488]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004498:	4b75      	ldr	r3, [pc, #468]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	4972      	ldr	r1, [pc, #456]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4969      	ldr	r1, [pc, #420]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044dc:	4b64      	ldr	r3, [pc, #400]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4961      	ldr	r1, [pc, #388]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	4958      	ldr	r1, [pc, #352]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004520:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	4950      	ldr	r1, [pc, #320]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004558:	4b45      	ldr	r3, [pc, #276]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	4942      	ldr	r1, [pc, #264]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004576:	d105      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004578:	4b3d      	ldr	r3, [pc, #244]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004582:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004590:	4b37      	ldr	r3, [pc, #220]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	4934      	ldr	r1, [pc, #208]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ae:	d105      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c8:	4b29      	ldr	r3, [pc, #164]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	4926      	ldr	r1, [pc, #152]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e6:	d105      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e8:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a20      	ldr	r2, [pc, #128]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	4918      	ldr	r1, [pc, #96]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800461e:	d105      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a12      	ldr	r2, [pc, #72]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800462a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004638:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	490a      	ldr	r1, [pc, #40]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004664:	7cbb      	ldrb	r3, [r7, #18]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e049      	b.n	800471a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc ffba 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fb12 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04a      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d013      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x6c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x6c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x6c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <HAL_TIM_Base_Start_IT+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x6c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d115      	bne.n	80047bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b17      	ldr	r3, [pc, #92]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d015      	beq.n	80047ce <HAL_TIM_Base_Start_IT+0xaa>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d011      	beq.n	80047ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	e008      	b.n	80047ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e000      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	00010007 	.word	0x00010007

080047f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0202 	mvn.w	r2, #2
 800482c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa2c 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa1e 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa2f 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0204 	mvn.w	r2, #4
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa06 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9f8 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa09 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0208 	mvn.w	r2, #8
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2204      	movs	r2, #4
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9e0 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9d2 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9e3 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2208      	movs	r2, #8
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9ba 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9ac 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f9bd 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc f858 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb69 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb61 	bl	8005078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f977 	bl	8004cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00c      	beq.n	80049fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0220 	mvn.w	r2, #32
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fb29 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb35 	bl	800508c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb2d 	bl	80050a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb25 	bl	80050b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb1d 	bl	80050c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0de      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x1da>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004ad2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a63      	ldr	r2, [pc, #396]	@ (8004c7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f000 80a9 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004af4:	4a61      	ldr	r2, [pc, #388]	@ (8004c7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f200 80ae 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004afc:	4a60      	ldr	r2, [pc, #384]	@ (8004c80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	f000 80a1 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b04:	4a5e      	ldr	r2, [pc, #376]	@ (8004c80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	f200 80a6 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8004c84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	f000 8099 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b14:	4a5b      	ldr	r2, [pc, #364]	@ (8004c84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	f200 809e 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004c88 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f000 8091 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b24:	4a58      	ldr	r2, [pc, #352]	@ (8004c88 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f200 8096 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b30:	f000 8089 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b38:	f200 808e 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b40:	d03e      	beq.n	8004bc0 <HAL_TIM_ConfigClockSource+0x128>
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b46:	f200 8087 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	f000 8086 	beq.w	8004c5e <HAL_TIM_ConfigClockSource+0x1c6>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b56:	d87f      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b58:	2b70      	cmp	r3, #112	@ 0x70
 8004b5a:	d01a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xfa>
 8004b5c:	2b70      	cmp	r3, #112	@ 0x70
 8004b5e:	d87b      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b60:	2b60      	cmp	r3, #96	@ 0x60
 8004b62:	d050      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x16e>
 8004b64:	2b60      	cmp	r3, #96	@ 0x60
 8004b66:	d877      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b68:	2b50      	cmp	r3, #80	@ 0x50
 8004b6a:	d03c      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x14e>
 8004b6c:	2b50      	cmp	r3, #80	@ 0x50
 8004b6e:	d873      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d058      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x18e>
 8004b74:	2b40      	cmp	r3, #64	@ 0x40
 8004b76:	d86f      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b78:	2b30      	cmp	r3, #48	@ 0x30
 8004b7a:	d064      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b7c:	2b30      	cmp	r3, #48	@ 0x30
 8004b7e:	d86b      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d060      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d867      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d05c      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d05a      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b90:	e062      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ba2:	f000 f9b3 	bl	8004f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	609a      	str	r2, [r3, #8]
      break;
 8004bbe:	e04f      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd0:	f000 f99c 	bl	8004f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004be2:	609a      	str	r2, [r3, #8]
      break;
 8004be4:	e03c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f90e 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2150      	movs	r1, #80	@ 0x50
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f967 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004c04:	e02c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f92d 	bl	8004e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2160      	movs	r1, #96	@ 0x60
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f957 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004c24:	e01c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 f8ee 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2140      	movs	r1, #64	@ 0x40
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f947 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e00c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f000 f93e 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004c56:	e003      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5c:	e000      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	00100070 	.word	0x00100070
 8004c80:	00100040 	.word	0x00100040
 8004c84:	00100030 	.word	0x00100030
 8004c88:	00100020 	.word	0x00100020

08004c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a42      	ldr	r2, [pc, #264]	@ (8004df8 <TIM_Base_SetConfig+0x11c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00f      	beq.n	8004d14 <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfa:	d00b      	beq.n	8004d14 <TIM_Base_SetConfig+0x38>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004dfc <TIM_Base_SetConfig+0x120>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_Base_SetConfig+0x38>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3e      	ldr	r2, [pc, #248]	@ (8004e00 <TIM_Base_SetConfig+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0x38>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e04 <TIM_Base_SetConfig+0x128>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d108      	bne.n	8004d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a33      	ldr	r2, [pc, #204]	@ (8004df8 <TIM_Base_SetConfig+0x11c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01b      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d34:	d017      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a30      	ldr	r2, [pc, #192]	@ (8004dfc <TIM_Base_SetConfig+0x120>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	@ (8004e00 <TIM_Base_SetConfig+0x124>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2e      	ldr	r2, [pc, #184]	@ (8004e04 <TIM_Base_SetConfig+0x128>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	@ (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	@ (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <TIM_Base_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <TIM_Base_SetConfig+0xe8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <TIM_Base_SetConfig+0x128>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0xe8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0xe8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <TIM_Base_SetConfig+0x130>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0xe8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <TIM_Base_SetConfig+0x134>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d103      	bne.n	8004dcc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]
  }
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40013400 	.word	0x40013400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f023 0210 	bic.w	r2, r3, #16
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f043 0307 	orr.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	021a      	lsls	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e065      	b.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fda:	d013      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a12      	ldr	r2, [pc, #72]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a13      	ldr	r2, [pc, #76]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40014000 	.word	0x40014000

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e042      	b.n	8005174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc faab 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2224      	movs	r2, #36	@ 0x24
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fca2 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f9d3 	bl	80054d8 <UART_SetConfig>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e01b      	b.n	8005174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800514a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800515a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fd21 	bl	8005bb4 <UART_CheckIdleState>
 8005172:	4603      	mov	r3, r0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e04a      	b.n	8005224 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fc fa5b 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2224      	movs	r2, #36	@ 0x24
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fc52 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f983 	bl	80054d8 <UART_SetConfig>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e023      	b.n	8005224 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80051fa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fcc9 	bl	8005bb4 <UART_CheckIdleState>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	@ 0x28
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	2b20      	cmp	r3, #32
 8005244:	d17b      	bne.n	800533e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_Transmit+0x26>
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e074      	b.n	8005340 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2221      	movs	r2, #33	@ 0x21
 8005262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005266:	f7fc fb75 	bl	8001954 <HAL_GetTick>
 800526a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d108      	bne.n	8005298 <HAL_UART_Transmit+0x6c>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e003      	b.n	80052a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a0:	e030      	b.n	8005304 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fd2b 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e03d      	b.n	8005340 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10b      	bne.n	80052e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	3302      	adds	r3, #2
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	e007      	b.n	80052f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1c8      	bne.n	80052a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	2140      	movs	r1, #64	@ 0x40
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fcf4 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e006      	b.n	8005340 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e000      	b.n	8005340 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
  }
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	@ 0x28
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800535e:	2b20      	cmp	r3, #32
 8005360:	f040 80b5 	bne.w	80054ce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Receive+0x28>
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0ad      	b.n	80054d0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2222      	movs	r2, #34	@ 0x22
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538a:	f7fc fae3 	bl	8001954 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a8:	d10e      	bne.n	80053c8 <HAL_UART_Receive+0x80>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <HAL_UART_Receive+0x76>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053bc:	e02d      	b.n	800541a <HAL_UART_Receive+0xd2>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	22ff      	movs	r2, #255	@ 0xff
 80053c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053c6:	e028      	b.n	800541a <HAL_UART_Receive+0xd2>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <HAL_UART_Receive+0xa4>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_UART_Receive+0x9a>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	22ff      	movs	r2, #255	@ 0xff
 80053dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053e0:	e01b      	b.n	800541a <HAL_UART_Receive+0xd2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	227f      	movs	r2, #127	@ 0x7f
 80053e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053ea:	e016      	b.n	800541a <HAL_UART_Receive+0xd2>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f4:	d10d      	bne.n	8005412 <HAL_UART_Receive+0xca>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <HAL_UART_Receive+0xc0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	227f      	movs	r2, #127	@ 0x7f
 8005402:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005406:	e008      	b.n	800541a <HAL_UART_Receive+0xd2>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	223f      	movs	r2, #63	@ 0x3f
 800540c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005410:	e003      	b.n	800541a <HAL_UART_Receive+0xd2>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005420:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542a:	d108      	bne.n	800543e <HAL_UART_Receive+0xf6>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e003      	b.n	8005446 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005446:	e036      	b.n	80054b6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	2120      	movs	r1, #32
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fc58 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e032      	b.n	80054d0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	b29a      	uxth	r2, r3
 8005478:	8a7b      	ldrh	r3, [r7, #18]
 800547a:	4013      	ands	r3, r2
 800547c:	b29a      	uxth	r2, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3302      	adds	r3, #2
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e00c      	b.n	80054a4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	b2da      	uxtb	r2, r3
 8005492:	8a7b      	ldrh	r3, [r7, #18]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4013      	ands	r3, r2
 8005498:	b2da      	uxtb	r2, r3
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1c2      	bne.n	8005448 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b08c      	sub	sp, #48	@ 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4bab      	ldr	r3, [pc, #684]	@ (80057b4 <UART_SetConfig+0x2dc>)
 8005508:	4013      	ands	r3, r2
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005510:	430b      	orrs	r3, r1
 8005512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4aa0      	ldr	r2, [pc, #640]	@ (80057b8 <UART_SetConfig+0x2e0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005540:	4313      	orrs	r3, r2
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800554e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005558:	430b      	orrs	r3, r1
 800555a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	f023 010f 	bic.w	r1, r3, #15
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a91      	ldr	r2, [pc, #580]	@ (80057bc <UART_SetConfig+0x2e4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d125      	bne.n	80055c8 <UART_SetConfig+0xf0>
 800557c:	4b90      	ldr	r3, [pc, #576]	@ (80057c0 <UART_SetConfig+0x2e8>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d81a      	bhi.n	80055c0 <UART_SetConfig+0xe8>
 800558a:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <UART_SetConfig+0xb8>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055b1 	.word	0x080055b1
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e0d6      	b.n	8005756 <UART_SetConfig+0x27e>
 80055a8:	2302      	movs	r3, #2
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e0d2      	b.n	8005756 <UART_SetConfig+0x27e>
 80055b0:	2304      	movs	r3, #4
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e0ce      	b.n	8005756 <UART_SetConfig+0x27e>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e0ca      	b.n	8005756 <UART_SetConfig+0x27e>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c6:	e0c6      	b.n	8005756 <UART_SetConfig+0x27e>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a7d      	ldr	r2, [pc, #500]	@ (80057c4 <UART_SetConfig+0x2ec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d138      	bne.n	8005644 <UART_SetConfig+0x16c>
 80055d2:	4b7b      	ldr	r3, [pc, #492]	@ (80057c0 <UART_SetConfig+0x2e8>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d82d      	bhi.n	800563c <UART_SetConfig+0x164>
 80055e0:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <UART_SetConfig+0x110>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	0800563d 	.word	0x0800563d
 8005604:	0800563d 	.word	0x0800563d
 8005608:	08005625 	.word	0x08005625
 800560c:	0800563d 	.word	0x0800563d
 8005610:	0800563d 	.word	0x0800563d
 8005614:	0800563d 	.word	0x0800563d
 8005618:	08005635 	.word	0x08005635
 800561c:	2300      	movs	r3, #0
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005622:	e098      	b.n	8005756 <UART_SetConfig+0x27e>
 8005624:	2302      	movs	r3, #2
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562a:	e094      	b.n	8005756 <UART_SetConfig+0x27e>
 800562c:	2304      	movs	r3, #4
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005632:	e090      	b.n	8005756 <UART_SetConfig+0x27e>
 8005634:	2308      	movs	r3, #8
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563a:	e08c      	b.n	8005756 <UART_SetConfig+0x27e>
 800563c:	2310      	movs	r3, #16
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005642:	e088      	b.n	8005756 <UART_SetConfig+0x27e>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5f      	ldr	r2, [pc, #380]	@ (80057c8 <UART_SetConfig+0x2f0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d125      	bne.n	800569a <UART_SetConfig+0x1c2>
 800564e:	4b5c      	ldr	r3, [pc, #368]	@ (80057c0 <UART_SetConfig+0x2e8>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005658:	2b30      	cmp	r3, #48	@ 0x30
 800565a:	d016      	beq.n	800568a <UART_SetConfig+0x1b2>
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d818      	bhi.n	8005692 <UART_SetConfig+0x1ba>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d00a      	beq.n	800567a <UART_SetConfig+0x1a2>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d814      	bhi.n	8005692 <UART_SetConfig+0x1ba>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <UART_SetConfig+0x19a>
 800566c:	2b10      	cmp	r3, #16
 800566e:	d008      	beq.n	8005682 <UART_SetConfig+0x1aa>
 8005670:	e00f      	b.n	8005692 <UART_SetConfig+0x1ba>
 8005672:	2300      	movs	r3, #0
 8005674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005678:	e06d      	b.n	8005756 <UART_SetConfig+0x27e>
 800567a:	2302      	movs	r3, #2
 800567c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005680:	e069      	b.n	8005756 <UART_SetConfig+0x27e>
 8005682:	2304      	movs	r3, #4
 8005684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005688:	e065      	b.n	8005756 <UART_SetConfig+0x27e>
 800568a:	2308      	movs	r3, #8
 800568c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005690:	e061      	b.n	8005756 <UART_SetConfig+0x27e>
 8005692:	2310      	movs	r3, #16
 8005694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005698:	e05d      	b.n	8005756 <UART_SetConfig+0x27e>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4b      	ldr	r2, [pc, #300]	@ (80057cc <UART_SetConfig+0x2f4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d125      	bne.n	80056f0 <UART_SetConfig+0x218>
 80056a4:	4b46      	ldr	r3, [pc, #280]	@ (80057c0 <UART_SetConfig+0x2e8>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b0:	d016      	beq.n	80056e0 <UART_SetConfig+0x208>
 80056b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b4:	d818      	bhi.n	80056e8 <UART_SetConfig+0x210>
 80056b6:	2b80      	cmp	r3, #128	@ 0x80
 80056b8:	d00a      	beq.n	80056d0 <UART_SetConfig+0x1f8>
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d814      	bhi.n	80056e8 <UART_SetConfig+0x210>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <UART_SetConfig+0x1f0>
 80056c2:	2b40      	cmp	r3, #64	@ 0x40
 80056c4:	d008      	beq.n	80056d8 <UART_SetConfig+0x200>
 80056c6:	e00f      	b.n	80056e8 <UART_SetConfig+0x210>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ce:	e042      	b.n	8005756 <UART_SetConfig+0x27e>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	e03e      	b.n	8005756 <UART_SetConfig+0x27e>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e03a      	b.n	8005756 <UART_SetConfig+0x27e>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e036      	b.n	8005756 <UART_SetConfig+0x27e>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e032      	b.n	8005756 <UART_SetConfig+0x27e>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a30      	ldr	r2, [pc, #192]	@ (80057b8 <UART_SetConfig+0x2e0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d12a      	bne.n	8005750 <UART_SetConfig+0x278>
 80056fa:	4b31      	ldr	r3, [pc, #196]	@ (80057c0 <UART_SetConfig+0x2e8>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005704:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005708:	d01a      	beq.n	8005740 <UART_SetConfig+0x268>
 800570a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800570e:	d81b      	bhi.n	8005748 <UART_SetConfig+0x270>
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005714:	d00c      	beq.n	8005730 <UART_SetConfig+0x258>
 8005716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800571a:	d815      	bhi.n	8005748 <UART_SetConfig+0x270>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <UART_SetConfig+0x250>
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005724:	d008      	beq.n	8005738 <UART_SetConfig+0x260>
 8005726:	e00f      	b.n	8005748 <UART_SetConfig+0x270>
 8005728:	2300      	movs	r3, #0
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572e:	e012      	b.n	8005756 <UART_SetConfig+0x27e>
 8005730:	2302      	movs	r3, #2
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005736:	e00e      	b.n	8005756 <UART_SetConfig+0x27e>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573e:	e00a      	b.n	8005756 <UART_SetConfig+0x27e>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005746:	e006      	b.n	8005756 <UART_SetConfig+0x27e>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574e:	e002      	b.n	8005756 <UART_SetConfig+0x27e>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <UART_SetConfig+0x2e0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	f040 80a8 	bne.w	80058b2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005762:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005766:	2b08      	cmp	r3, #8
 8005768:	d834      	bhi.n	80057d4 <UART_SetConfig+0x2fc>
 800576a:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <UART_SetConfig+0x298>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005795 	.word	0x08005795
 8005774:	080057d5 	.word	0x080057d5
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057d5 	.word	0x080057d5
 8005780:	080057a3 	.word	0x080057a3
 8005784:	080057d5 	.word	0x080057d5
 8005788:	080057d5 	.word	0x080057d5
 800578c:	080057d5 	.word	0x080057d5
 8005790:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005794:	f7fe fd0c 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800579a:	e021      	b.n	80057e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <UART_SetConfig+0x2f8>)
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057a0:	e01e      	b.n	80057e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fe fc97 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80057a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057a8:	e01a      	b.n	80057e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057b0:	e016      	b.n	80057e0 <UART_SetConfig+0x308>
 80057b2:	bf00      	nop
 80057b4:	cfff69f3 	.word	0xcfff69f3
 80057b8:	40008000 	.word	0x40008000
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40004400 	.word	0x40004400
 80057c8:	40004800 	.word	0x40004800
 80057cc:	40004c00 	.word	0x40004c00
 80057d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 812a 	beq.w	8005a3c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	4a9e      	ldr	r2, [pc, #632]	@ (8005a68 <UART_SetConfig+0x590>)
 80057ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	d305      	bcc.n	8005818 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800581e:	e10d      	b.n	8005a3c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	2200      	movs	r2, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	4a8e      	ldr	r2, [pc, #568]	@ (8005a68 <UART_SetConfig+0x590>)
 800582e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005832:	b29b      	uxth	r3, r3
 8005834:	2200      	movs	r2, #0
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005842:	f7fa fce9 	bl	8000218 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	020b      	lsls	r3, r1, #8
 8005858:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800585c:	0202      	lsls	r2, r0, #8
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	6849      	ldr	r1, [r1, #4]
 8005862:	0849      	lsrs	r1, r1, #1
 8005864:	2000      	movs	r0, #0
 8005866:	460c      	mov	r4, r1
 8005868:	4605      	mov	r5, r0
 800586a:	eb12 0804 	adds.w	r8, r2, r4
 800586e:	eb43 0905 	adc.w	r9, r3, r5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	469a      	mov	sl, r3
 800587a:	4693      	mov	fp, r2
 800587c:	4652      	mov	r2, sl
 800587e:	465b      	mov	r3, fp
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fa fcc8 	bl	8000218 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4613      	mov	r3, r2
 800588e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005896:	d308      	bcc.n	80058aa <UART_SetConfig+0x3d2>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589e:	d204      	bcs.n	80058aa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e0c8      	b.n	8005a3c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058b0:	e0c4      	b.n	8005a3c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ba:	d167      	bne.n	800598c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80058bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d828      	bhi.n	8005916 <UART_SetConfig+0x43e>
 80058c4:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0x3f4>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	08005917 	.word	0x08005917
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005917 	.word	0x08005917
 80058e4:	08005917 	.word	0x08005917
 80058e8:	08005917 	.word	0x08005917
 80058ec:	0800590f 	.word	0x0800590f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7fe fc5e 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7fe fc70 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 80058fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005900:	4b5a      	ldr	r3, [pc, #360]	@ (8005a6c <UART_SetConfig+0x594>)
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005904:	e00d      	b.n	8005922 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005906:	f7fe fbe5 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800590a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590c:	e009      	b.n	8005922 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005914:	e005      	b.n	8005922 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8089 	beq.w	8005a3c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	4a4e      	ldr	r2, [pc, #312]	@ (8005a68 <UART_SetConfig+0x590>)
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	fbb3 f3f2 	udiv	r3, r3, r2
 800593c:	005a      	lsls	r2, r3, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d916      	bls.n	8005984 <UART_SetConfig+0x4ac>
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d212      	bcs.n	8005984 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f023 030f 	bic.w	r3, r3, #15
 8005966:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	b29a      	uxth	r2, r3
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	4313      	orrs	r3, r2
 8005978:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	8bfa      	ldrh	r2, [r7, #30]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e05b      	b.n	8005a3c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800598a:	e057      	b.n	8005a3c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800598c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005990:	2b08      	cmp	r3, #8
 8005992:	d828      	bhi.n	80059e6 <UART_SetConfig+0x50e>
 8005994:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0x4c4>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fe fbf6 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 80059c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059c6:	e014      	b.n	80059f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe fc08 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 80059cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <UART_SetConfig+0x594>)
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059d4:	e00d      	b.n	80059f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fe fb7d 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80059da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059dc:	e009      	b.n	80059f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059e4:	e005      	b.n	80059f2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059f0:	bf00      	nop
    }

    if (pclk != 0U)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d021      	beq.n	8005a3c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a68 <UART_SetConfig+0x590>)
 80059fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	441a      	add	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d909      	bls.n	8005a36 <UART_SetConfig+0x55e>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a28:	d205      	bcs.n	8005a36 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e002      	b.n	8005a3c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3730      	adds	r7, #48	@ 0x30
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	080061b4 	.word	0x080061b4
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6e:	d10a      	bne.n	8005b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b098      	sub	sp, #96	@ 0x60
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc4:	f7fb fec6 	bl	8001954 <HAL_GetTick>
 8005bc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d12f      	bne.n	8005c38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f88e 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d022      	beq.n	8005c38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e063      	b.n	8005d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d149      	bne.n	8005cda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f857 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d03c      	beq.n	8005cda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e012      	b.n	8005d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3758      	adds	r7, #88	@ 0x58
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d18:	e04f      	b.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d20:	d04b      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d22:	f7fb fe17 	bl	8001954 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e04e      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d037      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d034      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b40      	cmp	r3, #64	@ 0x40
 8005d54:	d031      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d110      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f838 	bl	8005de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2208      	movs	r2, #8
 8005d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e029      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d94:	d111      	bne.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f81e 	bl	8005de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e00f      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d0a0      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b095      	sub	sp, #84	@ 0x54
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e6      	bne.n	8005dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3308      	adds	r3, #8
 8005e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e3      	bne.n	8005e1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d118      	bne.n	8005e8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0310 	bic.w	r3, r3, #16
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	613b      	str	r3, [r7, #16]
   return(result);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e6      	bne.n	8005e5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ea2:	bf00      	nop
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UARTEx_EnableFifoMode+0x16>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e02b      	b.n	8005f1c <HAL_UARTEx_EnableFifoMode+0x6e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2224      	movs	r2, #36	@ 0x24
 8005ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ef2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005efa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8c3 	bl	8006090 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e027      	b.n	8005f8a <HAL_UARTEx_DisableFifoMode+0x66>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	@ 0x24
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e02d      	b.n	800600a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2224      	movs	r2, #36	@ 0x24
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f850 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006026:	2302      	movs	r3, #2
 8006028:	e02d      	b.n	8006086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2224      	movs	r2, #36	@ 0x24
 8006036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f812 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060b0:	e031      	b.n	8006116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060b2:	2308      	movs	r3, #8
 80060b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060b6:	2308      	movs	r3, #8
 80060b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	0e5b      	lsrs	r3, r3, #25
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	0f5b      	lsrs	r3, r3, #29
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	7b3a      	ldrb	r2, [r7, #12]
 80060de:	4911      	ldr	r1, [pc, #68]	@ (8006124 <UARTEx_SetNbDataToProcess+0x94>)
 80060e0:	5c8a      	ldrb	r2, [r1, r2]
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060e6:	7b3a      	ldrb	r2, [r7, #12]
 80060e8:	490f      	ldr	r1, [pc, #60]	@ (8006128 <UARTEx_SetNbDataToProcess+0x98>)
 80060ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	7b7a      	ldrb	r2, [r7, #13]
 80060fc:	4909      	ldr	r1, [pc, #36]	@ (8006124 <UARTEx_SetNbDataToProcess+0x94>)
 80060fe:	5c8a      	ldrb	r2, [r1, r2]
 8006100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006104:	7b7a      	ldrb	r2, [r7, #13]
 8006106:	4908      	ldr	r1, [pc, #32]	@ (8006128 <UARTEx_SetNbDataToProcess+0x98>)
 8006108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800610a:	fb93 f3f2 	sdiv	r3, r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	080061cc 	.word	0x080061cc
 8006128:	080061d4 	.word	0x080061d4

0800612c <memset>:
 800612c:	4402      	add	r2, r0
 800612e:	4603      	mov	r3, r0
 8006130:	4293      	cmp	r3, r2
 8006132:	d100      	bne.n	8006136 <memset+0xa>
 8006134:	4770      	bx	lr
 8006136:	f803 1b01 	strb.w	r1, [r3], #1
 800613a:	e7f9      	b.n	8006130 <memset+0x4>

0800613c <__libc_init_array>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	4d0d      	ldr	r5, [pc, #52]	@ (8006174 <__libc_init_array+0x38>)
 8006140:	4c0d      	ldr	r4, [pc, #52]	@ (8006178 <__libc_init_array+0x3c>)
 8006142:	1b64      	subs	r4, r4, r5
 8006144:	10a4      	asrs	r4, r4, #2
 8006146:	2600      	movs	r6, #0
 8006148:	42a6      	cmp	r6, r4
 800614a:	d109      	bne.n	8006160 <__libc_init_array+0x24>
 800614c:	4d0b      	ldr	r5, [pc, #44]	@ (800617c <__libc_init_array+0x40>)
 800614e:	4c0c      	ldr	r4, [pc, #48]	@ (8006180 <__libc_init_array+0x44>)
 8006150:	f000 f818 	bl	8006184 <_init>
 8006154:	1b64      	subs	r4, r4, r5
 8006156:	10a4      	asrs	r4, r4, #2
 8006158:	2600      	movs	r6, #0
 800615a:	42a6      	cmp	r6, r4
 800615c:	d105      	bne.n	800616a <__libc_init_array+0x2e>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	f855 3b04 	ldr.w	r3, [r5], #4
 8006164:	4798      	blx	r3
 8006166:	3601      	adds	r6, #1
 8006168:	e7ee      	b.n	8006148 <__libc_init_array+0xc>
 800616a:	f855 3b04 	ldr.w	r3, [r5], #4
 800616e:	4798      	blx	r3
 8006170:	3601      	adds	r6, #1
 8006172:	e7f2      	b.n	800615a <__libc_init_array+0x1e>
 8006174:	080061e4 	.word	0x080061e4
 8006178:	080061e4 	.word	0x080061e4
 800617c:	080061e4 	.word	0x080061e4
 8006180:	080061ec 	.word	0x080061ec

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
