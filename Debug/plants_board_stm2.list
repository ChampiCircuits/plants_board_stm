
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006178  08006178  00007178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800633c  0800633c  0000733c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006340  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  0800639c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800639c  000083c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017806  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca7  00000000  00000000  0001f892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00022540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  000236e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230d0  00000000  00000000  00024459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001183b  00000000  00000000  00047529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7cbe  00000000  00000000  00058d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  00130a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00135c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006160 	.word	0x08006160

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08006160 	.word	0x08006160

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	601a      	str	r2, [r3, #0]
{
}
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	1cf9      	adds	r1, r7, #3
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	f004 fcb8 	bl	8004eb0 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	f107 010f 	add.w	r1, r7, #15
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	f004 fd3e 	bl	8004fcc <HAL_UART_Receive>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000560:	bf00      	nop
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f107 010f 	add.w	r1, r7, #15
 800056a:	2300      	movs	r3, #0
 800056c:	2201      	movs	r2, #1
 800056e:	f004 fd2d 	bl	8004fcc <HAL_UART_Receive>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1ef      	bne.n	8000562 <_ZN7SCServo12fflushRevBufEv+0xa>
    return;
 8000582:	bf00      	nop
}
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	460b      	mov	r3, r1
 8000598:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	121b      	asrs	r3, r3, #8
 80005a2:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	121b      	asrs	r3, r3, #8
 80005ac:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f7ff ffd0 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 80005b8:	21ff      	movs	r1, #255	@ 0xff
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ffb3 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 80005c0:	21ff      	movs	r1, #255	@ 0xff
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f7ff ffaf 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 80005c8:	7afb      	ldrb	r3, [r7, #11]
 80005ca:	4619      	mov	r1, r3
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff ffaa 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	68f8      	ldr	r0, [r7, #12]
 80005da:	f7ff ffa4 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 80005de:	2103      	movs	r1, #3
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff ffa0 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 80005e6:	212a      	movs	r1, #42	@ 0x2a
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f7ff ff9c 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(posL);
 80005ee:	7cfb      	ldrb	r3, [r7, #19]
 80005f0:	4619      	mov	r1, r3
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f7ff ff97 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(posH);
 80005f8:	7cbb      	ldrb	r3, [r7, #18]
 80005fa:	4619      	mov	r1, r3
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f7ff ff92 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(velL);
 8000602:	7c7b      	ldrb	r3, [r7, #17]
 8000604:	4619      	mov	r1, r3
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f7ff ff8d 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(velH);
 800060c:	7c3b      	ldrb	r3, [r7, #16]
 800060e:	4619      	mov	r1, r3
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f7ff ff88 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	4413      	add	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	7cfb      	ldrb	r3, [r7, #19]
 8000622:	4413      	add	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7cbb      	ldrb	r3, [r7, #18]
 8000628:	4413      	add	r3, r2
 800062a:	b2da      	uxtb	r2, r3
 800062c:	7c7b      	ldrb	r3, [r7, #17]
 800062e:	4413      	add	r3, r2
 8000630:	b2da      	uxtb	r2, r3
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	4413      	add	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f7ff ff6f 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	2b10      	cmp	r3, #16
 800064c:	d00a      	beq.n	8000664 <_ZN7SCServo8WritePosEhiih+0xda>
 800064e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d106      	bne.n	8000664 <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 8000656:	2200      	movs	r2, #0
 8000658:	2106      	movs	r1, #6
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f807 	bl	800066e <_ZN7SCServo7ReadBufEtPh>
 8000660:	4603      	mov	r3, r0
 8000662:	e000      	b.n	8000666 <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	460b      	mov	r3, r1
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	897a      	ldrh	r2, [r7, #10]
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f004 fca0 	bl	8004fcc <HAL_UART_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 8000696:	897b      	ldrh	r3, [r7, #10]
 8000698:	e001      	b.n	800069e <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_ZN7SCServo15WriteLimitAngleEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WriteLimitAngle(u8 ID, int MinAngel, int MaxAngle, u8 ReturnLevel)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	460b      	mov	r3, r1
 80006b4:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	617b      	str	r3, [r7, #20]
    u8 MinAL = MinAngel>>8;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	121b      	asrs	r3, r3, #8
 80006be:	74fb      	strb	r3, [r7, #19]
    u8 MinAH = MinAngel&0xff;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	74bb      	strb	r3, [r7, #18]
    u8 MaxAL = MaxAngle>>8;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	121b      	asrs	r3, r3, #8
 80006c8:	747b      	strb	r3, [r7, #17]
    u8 MaxAH = MaxAngle&0xff;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff ff42 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 80006d4:	21ff      	movs	r1, #255	@ 0xff
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f7ff ff25 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 80006dc:	21ff      	movs	r1, #255	@ 0xff
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	f7ff ff21 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	4619      	mov	r1, r3
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff1c 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff ff16 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 80006fa:	2103      	movs	r1, #3
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ff12 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_MIN_ANGLE_LIMIT_L);
 8000702:	2109      	movs	r1, #9
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff ff0e 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MinAL);
 800070a:	7cfb      	ldrb	r3, [r7, #19]
 800070c:	4619      	mov	r1, r3
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff09 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MinAH);
 8000714:	7cbb      	ldrb	r3, [r7, #18]
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff04 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxAL);
 800071e:	7c7b      	ldrb	r3, [r7, #17]
 8000720:	4619      	mov	r1, r3
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff feff 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxAH);
 8000728:	7c3b      	ldrb	r3, [r7, #16]
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fefa 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_MIN_ANGLE_LIMIT_L + MinAL + MinAH + MaxAL + MaxAH))&0xFF);
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	7afb      	ldrb	r3, [r7, #11]
 8000738:	4413      	add	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	4413      	add	r3, r2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	7cbb      	ldrb	r3, [r7, #18]
 8000744:	4413      	add	r3, r2
 8000746:	b2da      	uxtb	r2, r3
 8000748:	7c7b      	ldrb	r3, [r7, #17]
 800074a:	4413      	add	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	7c3b      	ldrb	r3, [r7, #16]
 8000750:	4413      	add	r3, r2
 8000752:	b2da      	uxtb	r2, r3
 8000754:	f06f 030c 	mvn.w	r3, #12
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff fee1 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	2b10      	cmp	r3, #16
 8000768:	d00a      	beq.n	8000780 <_ZN7SCServo15WriteLimitAngleEhiih+0xda>
 800076a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d106      	bne.n	8000780 <_ZN7SCServo15WriteLimitAngleEhiih+0xda>
        return ReadBuf(6);
 8000772:	2200      	movs	r2, #0
 8000774:	2106      	movs	r1, #6
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ff79 	bl	800066e <_ZN7SCServo7ReadBufEtPh>
 800077c:	4603      	mov	r3, r0
 800077e:	e000      	b.n	8000782 <_ZN7SCServo15WriteLimitAngleEhiih+0xdc>
    return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_ZN7SCServo16WriteLimitTroqueEhih>:

int SCServo::WriteLimitTroque(u8 ID, int MaxTroque, u8 ReturnLevel)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	461a      	mov	r2, r3
 8000796:	460b      	mov	r3, r1
 8000798:	72fb      	strb	r3, [r7, #11]
 800079a:	4613      	mov	r3, r2
 800079c:	72bb      	strb	r3, [r7, #10]
    int messageLength = 5;
 800079e:	2305      	movs	r3, #5
 80007a0:	617b      	str	r3, [r7, #20]
    u8 MaxTL = MaxTroque>>8;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	121b      	asrs	r3, r3, #8
 80007a6:	74fb      	strb	r3, [r7, #19]
    u8 MaxTH = MaxTroque&0xff;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	74bb      	strb	r3, [r7, #18]

    fflushRevBuf();
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fed3 	bl	8000558 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 80007b2:	21ff      	movs	r1, #255	@ 0xff
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff feb6 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 80007ba:	21ff      	movs	r1, #255	@ 0xff
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff feb2 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 80007c2:	7afb      	ldrb	r3, [r7, #11]
 80007c4:	4619      	mov	r1, r3
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f7ff fead 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fea7 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 80007d8:	2103      	movs	r1, #3
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff fea3 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(P_MAX_TORQUE_L);
 80007e0:	2110      	movs	r1, #16
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f7ff fe9f 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxTL);
 80007e8:	7cfb      	ldrb	r3, [r7, #19]
 80007ea:	4619      	mov	r1, r3
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f7ff fe9a 	bl	8000526 <_ZN7SCServo6PrintfEh>
    Printf(MaxTH);
 80007f2:	7cbb      	ldrb	r3, [r7, #18]
 80007f4:	4619      	mov	r1, r3
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff fe95 	bl	8000526 <_ZN7SCServo6PrintfEh>

    Printf((~(ID + messageLength + INST_WRITE + P_MAX_TORQUE_L + MaxTL + MaxTH))&0xFF);
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	4413      	add	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	7cfb      	ldrb	r3, [r7, #19]
 8000808:	4413      	add	r3, r2
 800080a:	b2da      	uxtb	r2, r3
 800080c:	7cbb      	ldrb	r3, [r7, #18]
 800080e:	4413      	add	r3, r2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	f06f 0313 	mvn.w	r3, #19
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff fe82 	bl	8000526 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	2b10      	cmp	r3, #16
 8000826:	d009      	beq.n	800083c <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
 8000828:	7abb      	ldrb	r3, [r7, #10]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d106      	bne.n	800083c <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
        return ReadBuf(6);
 800082e:	2200      	movs	r2, #0
 8000830:	2106      	movs	r1, #6
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ff1b 	bl	800066e <_ZN7SCServo7ReadBufEtPh>
 8000838:	4603      	mov	r3, r0
 800083a:	e000      	b.n	800083e <_ZN7SCServo16WriteLimitTroqueEhih+0xb4>
    return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 fc1c 	bl	80010a4 <_ZNSaIiED1Ev>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <_Z15go_to_waypointsv>:
        //	  HAL_Delay(10);

    }
}

void go_to_waypoints() {
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b0d8      	sub	sp, #352	@ 0x160
 800087c:	af02      	add	r7, sp, #8

    SCServo servos = SCServo(&huart1);
 800087e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000882:	49c0      	ldr	r1, [pc, #768]	@ (8000b84 <_Z15go_to_waypointsv+0x30c>)
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe3f 	bl	8000508 <_ZN7SCServoC1EP20__UART_HandleTypeDef>

    int ids_servos[3] = {7, 9, 8};
 800088a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800088e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000892:	4abd      	ldr	r2, [pc, #756]	@ (8000b88 <_Z15go_to_waypointsv+0x310>)
 8000894:	ca07      	ldmia	r2, {r0, r1, r2}
 8000896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int lower_limit[3] = {520, 375, 0};
 800089a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800089e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80008a2:	4aba      	ldr	r2, [pc, #744]	@ (8000b8c <_Z15go_to_waypointsv+0x314>)
 80008a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int upper_limit[3] = {930, 1023, 1023};
 80008aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80008b2:	4ab7      	ldr	r2, [pc, #732]	@ (8000b90 <_Z15go_to_waypointsv+0x318>)
 80008b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int pos_servos[3];

    for (int i = 0; i < 3; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80008c0:	e024      	b.n	800090c <_Z15go_to_waypointsv+0x94>
        servos.WriteLimitAngle(ids_servos[i], lower_limit[i], upper_limit[i]);
 80008c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80008ca:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80008ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d2:	b2d9      	uxtb	r1, r3
 80008d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80008dc:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80008e0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80008e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80008ec:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80008f8:	2201      	movs	r2, #1
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	4622      	mov	r2, r4
 80008fe:	f7ff fed2 	bl	80006a6 <_ZN7SCServo15WriteLimitAngleEhiih>
    for (int i = 0; i < 3; i++) {
 8000902:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000906:	3301      	adds	r3, #1
 8000908:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800090c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000910:	2b02      	cmp	r3, #2
 8000912:	ddd6      	ble.n	80008c2 <_Z15go_to_waypointsv+0x4a>
    }

    HAL_Delay(200);
 8000914:	20c8      	movs	r0, #200	@ 0xc8
 8000916:	f001 fe81 	bl	800261c <HAL_Delay>


            std::vector<int>{748, 484, 176, 300},
//            std::vector<int>{713, 476, 192, 1000}, // point préhension original

    };
 800091a:	4b9e      	ldr	r3, [pc, #632]	@ (8000b94 <_Z15go_to_waypointsv+0x31c>)
 800091c:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 8000920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000926:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800092e:	2304      	movs	r3, #4
 8000930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000934:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fba7 	bl	800108c <_ZNSaIiEC1Ev>
 800093e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000942:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000946:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800094a:	ca06      	ldmia	r2, {r1, r2}
 800094c:	f000 fbb6 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8000950:	4b91      	ldr	r3, [pc, #580]	@ (8000b98 <_Z15go_to_waypointsv+0x320>)
 8000952:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 8000956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800095c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000964:	2304      	movs	r3, #4
 8000966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800096a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fb8c 	bl	800108c <_ZNSaIiEC1Ev>
 8000974:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000978:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800097c:	f103 000c 	add.w	r0, r3, #12
 8000980:	4613      	mov	r3, r2
 8000982:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8000986:	ca06      	ldmia	r2, {r1, r2}
 8000988:	f000 fb98 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 800098c:	4b83      	ldr	r3, [pc, #524]	@ (8000b9c <_Z15go_to_waypointsv+0x324>)
 800098e:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8000992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000998:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800099c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80009a0:	2304      	movs	r3, #4
 80009a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80009a6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fb6e 	bl	800108c <_ZNSaIiEC1Ev>
 80009b0:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 80009b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009b8:	f103 0018 	add.w	r0, r3, #24
 80009bc:	4613      	mov	r3, r2
 80009be:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 80009c2:	ca06      	ldmia	r2, {r1, r2}
 80009c4:	f000 fb7a 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 80009c8:	4b75      	ldr	r3, [pc, #468]	@ (8000ba0 <_Z15go_to_waypointsv+0x328>)
 80009ca:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009d4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80009d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80009dc:	2304      	movs	r3, #4
 80009de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80009e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fb50 	bl	800108c <_ZNSaIiEC1Ev>
 80009ec:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80009f8:	4613      	mov	r3, r2
 80009fa:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80009fe:	ca06      	ldmia	r2, {r1, r2}
 8000a00:	f000 fb5c 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8000a04:	4b67      	ldr	r3, [pc, #412]	@ (8000ba4 <_Z15go_to_waypointsv+0x32c>)
 8000a06:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 8000a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a10:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000a14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000a1e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fb32 	bl	800108c <_ZNSaIiEC1Ev>
 8000a28:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000a34:	4613      	mov	r3, r2
 8000a36:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000a3a:	ca06      	ldmia	r2, {r1, r2}
 8000a3c:	f000 fb3e 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8000a40:	4b59      	ldr	r3, [pc, #356]	@ (8000ba8 <_Z15go_to_waypointsv+0x330>)
 8000a42:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000a54:	2304      	movs	r3, #4
 8000a56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000a5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fb14 	bl	800108c <_ZNSaIiEC1Ev>
 8000a64:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a6c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8000a70:	4613      	mov	r3, r2
 8000a72:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000a76:	ca06      	ldmia	r2, {r1, r2}
 8000a78:	f000 fb20 	bl	80010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8000a7c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a84:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a92:	2206      	movs	r2, #6
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fb63 	bl	8001166 <_ZNSaISt6vectorIiSaIiEEEC1Ev>
 8000aa0:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000aa4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8000aa8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000aac:	f107 000c 	add.w	r0, r7, #12
 8000ab0:	ca06      	ldmia	r2, {r1, r2}
 8000ab2:	f000 fb70 	bl	8001196 <_ZNSt6vectorIS_IiSaIiEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8000ab6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fb5f 	bl	800117e <_ZNSaISt6vectorIiSaIiEEED1Ev>
 8000ac0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000ac4:	3448      	adds	r4, #72	@ 0x48
 8000ac6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aca:	429c      	cmp	r4, r3
 8000acc:	d004      	beq.n	8000ad8 <_Z15go_to_waypointsv+0x260>
 8000ace:	3c0c      	subs	r4, #12
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f000 fb14 	bl	80010fe <_ZNSt6vectorIiSaIiEED1Ev>
 8000ad6:	e7f6      	b.n	8000ac6 <_Z15go_to_waypointsv+0x24e>
 8000ad8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fae1 	bl	80010a4 <_ZNSaIiED1Ev>
 8000ae2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fadc 	bl	80010a4 <_ZNSaIiED1Ev>
 8000aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fad7 	bl	80010a4 <_ZNSaIiED1Ev>
 8000af6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fad2 	bl	80010a4 <_ZNSaIiED1Ev>
 8000b00:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 facd 	bl	80010a4 <_ZNSaIiED1Ev>
 8000b0a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fac8 	bl	80010a4 <_ZNSaIiED1Ev>

    // Limit torque to 200
    for (int i = 0; i < 3; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000b1a:	e014      	b.n	8000b46 <_Z15go_to_waypointsv+0x2ce>
        servos.WriteLimitTroque(ids_servos[i], 600);
 8000b1c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b24:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8000b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2c:	b2d9      	uxtb	r1, r3
 8000b2e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000b32:	2301      	movs	r3, #1
 8000b34:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000b38:	f7ff fe27 	bl	800078a <_ZN7SCServo16WriteLimitTroqueEhih>
    for (int i = 0; i < 3; i++) {
 8000b3c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000b46:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	dde6      	ble.n	8000b1c <_Z15go_to_waypointsv+0x2a4>
    }

    HAL_Delay(500);
 8000b4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b52:	f001 fd63 	bl	800261c <HAL_Delay>

    for (int i = 0; i < waypoints.size(); i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000b5c:	e063      	b.n	8000c26 <_Z15go_to_waypointsv+0x3ae>
        std::vector<int> waypoint = waypoints[i];
 8000b5e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fb67 	bl	800123c <_ZNSt6vectorIS_IiSaIiEESaIS1_EEixEj>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	463b      	mov	r3, r7
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fb74 	bl	8001262 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
        for (int j = 0; j < 3; j++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000b80:	e03a      	b.n	8000bf8 <_Z15go_to_waypointsv+0x380>
 8000b82:	bf00      	nop
 8000b84:	20000144 	.word	0x20000144
 8000b88:	08006238 	.word	0x08006238
 8000b8c:	08006244 	.word	0x08006244
 8000b90:	08006250 	.word	0x08006250
 8000b94:	0800625c 	.word	0x0800625c
 8000b98:	0800626c 	.word	0x0800626c
 8000b9c:	0800627c 	.word	0x0800627c
 8000ba0:	0800628c 	.word	0x0800628c
 8000ba4:	0800629c 	.word	0x0800629c
 8000ba8:	080062ac 	.word	0x080062ac
            servos.WritePos(ids_servos[j], waypoint[j], waypoint[3]);
 8000bac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000bb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbc:	b2dc      	uxtb	r4, r3
 8000bbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fb88 	bl	80012dc <_ZNSt6vectorIiSaIiEEixEj>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	681d      	ldr	r5, [r3, #0]
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb81 	bl	80012dc <_ZNSt6vectorIiSaIiEEixEj>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000be2:	2201      	movs	r2, #1
 8000be4:	9200      	str	r2, [sp, #0]
 8000be6:	462a      	mov	r2, r5
 8000be8:	4621      	mov	r1, r4
 8000bea:	f7ff fcce 	bl	800058a <_ZN7SCServo8WritePosEhiih>
        for (int j = 0; j < 3; j++) {
 8000bee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000bf8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	ddd5      	ble.n	8000bac <_Z15go_to_waypointsv+0x334>
        }
        HAL_Delay(waypoint[3]);
 8000c00:	463b      	mov	r3, r7
 8000c02:	2103      	movs	r1, #3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb69 	bl	80012dc <_ZNSt6vectorIiSaIiEEixEj>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fd04 	bl	800261c <HAL_Delay>
    }
 8000c14:	463b      	mov	r3, r7
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fa71 	bl	80010fe <_ZNSt6vectorIiSaIiEED1Ev>
    for (int i = 0; i < waypoints.size(); i++) {
 8000c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000c20:	3301      	adds	r3, #1
 8000c22:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 faf0 	bl	8001210 <_ZNKSt6vectorIS_IiSaIiEESaIS1_EE4sizeEv>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000c36:	429a      	cmp	r2, r3
 8000c38:	bf8c      	ite	hi
 8000c3a:	2301      	movhi	r3, #1
 8000c3c:	2300      	movls	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d18c      	bne.n	8000b5e <_Z15go_to_waypointsv+0x2e6>



}
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fac5 	bl	80011d8 <_ZNSt6vectorIS_IiSaIiEESaIS1_EED1Ev>
 8000c4e:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}
 8000c56:	bf00      	nop

08000c58 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000c5c:	f001 fc6d 	bl	800253a <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000c60:	f000 f80e 	bl	8000c80 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000c64:	f000 f9be 	bl	8000fe4 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8000c68:	f000 f992 	bl	8000f90 <_ZL11MX_DMA_Initv>
    MX_USART2_UART_Init();
 8000c6c:	f000 f930 	bl	8000ed0 <_ZL19MX_USART2_UART_Initv>
    MX_USART1_UART_Init();
 8000c70:	f000 f8cc 	bl	8000e0c <_ZL19MX_USART1_UART_Initv>
    MX_ADC2_Init();
 8000c74:	f000 f85a 	bl	8000d2c <_ZL12MX_ADC2_Initv>
    /* USER CODE BEGIN 2 */

    go_to_waypoints();
 8000c78:	f7ff fdfe 	bl	8000878 <_Z15go_to_waypointsv>
//    manual_control();
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <main+0x24>

08000c80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	2238      	movs	r2, #56	@ 0x38
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 f994 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f003 f88a 	bl	8003dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cc2:	2355      	movs	r3, #85	@ 0x55
 8000cc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 f924 	bl	8003f24 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000cec:	f000 f9c8 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2104      	movs	r1, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 fc1d 	bl	8004548 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000d1e:	f000 f9af 	bl	8001080 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3750      	adds	r7, #80	@ 0x50
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2220      	movs	r2, #32
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 f93f 	bl	8005fbc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d40:	4a30      	ldr	r2, [pc, #192]	@ (8000e04 <_ZL12MX_ADC2_Initv+0xd8>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d4e:	2208      	movs	r2, #8
 8000d50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d58:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000da6:	4816      	ldr	r0, [pc, #88]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000da8:	f001 fe30 	bl	8002a0c <HAL_ADC_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8000dbc:	f000 f960 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <_ZL12MX_ADC2_Initv+0xdc>)
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dcc:	237f      	movs	r3, #127	@ 0x7f
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4808      	ldr	r0, [pc, #32]	@ (8000e00 <_ZL12MX_ADC2_Initv+0xd4>)
 8000dde:	f001 ff99 	bl	8002d14 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf14      	ite	ne
 8000de8:	2301      	movne	r3, #1
 8000dea:	2300      	moveq	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8000df2:	f000 f945 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000078 	.word	0x20000078
 8000e04:	50000100 	.word	0x50000100
 8000e08:	04300002 	.word	0x04300002

08000e0c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e12:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e18:	4a2c      	ldr	r2, [pc, #176]	@ (8000ecc <_ZL19MX_USART1_UART_Initv+0xc0>)
 8000e1a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e22:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e30:	220c      	movs	r2, #12
 8000e32:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e52:	481c      	ldr	r0, [pc, #112]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e54:	f003 ffd4 	bl	8004e00 <HAL_HalfDuplex_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000e68:	f000 f90a 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4815      	ldr	r0, [pc, #84]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e70:	f004 fed3 	bl	8005c1a <HAL_UARTEx_SetTxFifoThreshold>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	bf14      	ite	ne
 8000e7a:	2301      	movne	r3, #1
 8000e7c:	2300      	moveq	r3, #0
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8000e84:	f000 f8fc 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e8c:	f004 ff03 	bl	8005c96 <HAL_UARTEx_SetRxFifoThreshold>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8000ea0:	f000 f8ee 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000ea4:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ea6:	f004 fe44 	bl	8005b32 <HAL_UARTEx_EnableFifoMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8000eba:	f000 f8e1 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000144 	.word	0x20000144
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	000f4240 	.word	0x000f4240

08000ed0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f8c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f18:	481b      	ldr	r0, [pc, #108]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f1a:	f003 ff21 	bl	8004d60 <HAL_UART_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000f2e:	f000 f8a7 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f36:	f004 fe70 	bl	8005c1a <HAL_UARTEx_SetTxFifoThreshold>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf14      	ite	ne
 8000f40:	2301      	movne	r3, #1
 8000f42:	2300      	moveq	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f4a:	f000 f899 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f52:	f004 fea0 	bl	8005c96 <HAL_UARTEx_SetRxFifoThreshold>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000f66:	f000 f88b 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f6c:	f004 fe1c 	bl	8005ba8 <HAL_UARTEx_DisableFifoMode>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000f80:	f000 f87e 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200001d8 	.word	0x200001d8
 8000f8c:	40004400 	.word	0x40004400

08000f90 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <_ZL11MX_DMA_Initv+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	200b      	movs	r0, #11
 8000fcc:	f002 fb6d 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f002 fb84 	bl	80036de <HAL_NVIC_EnableIRQ>

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a18      	ldr	r2, [pc, #96]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <_ZL12MX_GPIO_Initv+0x94>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001030:	4812      	ldr	r0, [pc, #72]	@ (800107c <_ZL12MX_GPIO_Initv+0x98>)
 8001032:	f002 feab 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104e:	f002 fd1b 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <_ZL12MX_GPIO_Initv+0x98>)
 800106c:	f002 fd0c 	bl	8003a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x8>

0800108c <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f931 	bl	80012fc <_ZNSt15__new_allocatorIiEC1Ev>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f930 	bl	8001312 <_ZNSt15__new_allocatorIiED1Ev>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	1d38      	adds	r0, r7, #4
 80010c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80010ca:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f929 	bl	8001328 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f934 	bl	8001346 <_ZNKSt16initializer_listIiE5beginEv>
 80010de:	4604      	mov	r4, r0
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f93b 	bl	800135e <_ZNKSt16initializer_listIiE3endEv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	462b      	mov	r3, r5
 80010ec:	4621      	mov	r1, r4
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f947 	bl	8001382 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}

080010fe <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80010fe:	b5b0      	push	{r4, r5, r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681c      	ldr	r4, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f96f 	bl	80013f4 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8001116:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001118:	461a      	mov	r2, r3
 800111a:	4629      	mov	r1, r5
 800111c:	4620      	mov	r0, r4
 800111e:	f000 f974 	bl	800140a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f805 	bl	8001134 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bdb0      	pop	{r4, r5, r7, pc}

08001134 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800114c:	461a      	mov	r2, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f977 	bl	8001442 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb81 	bl	800085e <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZNSaISt6vectorIiSaIiEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f97a 	bl	8001468 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEEC1Ev>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZNSaISt6vectorIiSaIiEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f979 	bl	800147e <_ZNSt15__new_allocatorISt6vectorIiSaIiEEED1Ev>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZNSt6vectorIS_IiSaIiEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
 8001196:	b5b0      	push	{r4, r5, r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	1d38      	adds	r0, r7, #4
 80011a0:	e880 0006 	stmia.w	r0, {r1, r2}
 80011a4:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f97e 	bl	80014ac <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EEC1ERKS3_>
	_M_range_initialize(__l.begin(), __l.end(),
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f9a8 	bl	8001508 <_ZNKSt16initializer_listISt6vectorIiSaIiEEE5beginEv>
 80011b8:	4604      	mov	r4, r0
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f9af 	bl	8001520 <_ZNKSt16initializer_listISt6vectorIiSaIiEEE3endEv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	462b      	mov	r3, r5
 80011c6:	4621      	mov	r1, r4
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f000 f9be 	bl	800154a <_ZNSt6vectorIS_IiSaIiEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}

080011d8 <_ZNSt6vectorIS_IiSaIiEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681c      	ldr	r4, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f9e9 	bl	80015c2 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE19_M_get_Tp_allocatorEv>
 80011f0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80011f2:	461a      	mov	r2, r3
 80011f4:	4629      	mov	r1, r5
 80011f6:	4620      	mov	r0, r4
 80011f8:	f000 f9ee 	bl	80015d8 <_ZSt8_DestroyIPSt6vectorIiSaIiEES2_EvT_S4_RSaIT0_E>
      }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f964 	bl	80014cc <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EED1Ev>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001210 <_ZNKSt6vectorIS_IiSaIiEESaIS1_EE4sizeEv>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	109b      	asrs	r3, r3, #2
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <_ZNKSt6vectorIS_IiSaIiEESaIS1_EE4sizeEv+0x28>)
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	aaaaaaab 	.word	0xaaaaaaab

0800123c <_ZNSt6vectorIS_IiSaIiEESaIS1_EEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
      }
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
 8001262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800126c:	687c      	ldr	r4, [r7, #4]
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f000 f9c0 	bl	80015f4 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8001274:	4605      	mov	r5, r0
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f9cb 	bl	8001614 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800127e:	4602      	mov	r2, r0
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f9cf 	bl	800162a <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE17_S_select_on_copyERKS1_>
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	461a      	mov	r2, r3
 8001292:	4629      	mov	r1, r5
 8001294:	4620      	mov	r0, r4
 8001296:	f000 f9d6 	bl	8001646 <_ZNSt12_Vector_baseIiSaIiEEC1EjRKS0_>
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff00 	bl	80010a4 <_ZNSaIiED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80012a4:	6838      	ldr	r0, [r7, #0]
 80012a6:	f000 f9e2 	bl	800166e <_ZNKSt6vectorIiSaIiEE5beginEv>
 80012aa:	4605      	mov	r5, r0
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f000 f9ee 	bl	800168e <_ZNKSt6vectorIiSaIiEE3endEv>
 80012b2:	4606      	mov	r6, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f89a 	bl	80013f4 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80012c0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80012c2:	4622      	mov	r2, r4
 80012c4:	4631      	mov	r1, r6
 80012c6:	4628      	mov	r0, r5
 80012c8:	f000 f9f2 	bl	80016b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E>
 80012cc:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
      }
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012dc <_ZNSt6vectorIiSaIiEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
      }
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f9cb 	bl	80016d2 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffed 	bl	8001346 <_ZNKSt16initializer_listIiE5beginEv>
 800136c:	4604      	mov	r4, r0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f9c1 	bl	80016f6 <_ZNKSt16initializer_listIiE4sizeEv>
 8001374:	4603      	mov	r3, r0
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4423      	add	r3, r4
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}

08001382 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001382:	b590      	push	{r4, r7, lr}
 8001384:	b087      	sub	sp, #28
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f000 f9bb 	bl	800170e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001398:	4603      	mov	r3, r0
 800139a:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800139c:	68fc      	ldr	r4, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f827 	bl	80013f4 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f000 f9c4 	bl	8001738 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4620      	mov	r0, r4
 80013b6:	f000 f9e7 	bl	8001788 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	441a      	add	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f80d 	bl	80013f4 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80013da:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80013dc:	4622      	mov	r2, r4
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f000 f9e5 	bl	80017b0 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 80013e6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
	}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f9da 	bl	80017d2 <_ZSt8_DestroyIPiEvT_S1_>
    }
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f9da 	bl	80017ec <_ZNSt15__new_allocatorIiEC1ERKS0_>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
	if (__p)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f9d2 	bl	8001804 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZNSt15__new_allocatorISt6vectorIiSaIiEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe6e 	bl	800117e <_ZNSaISt6vectorIiSaIiEEED1Ev>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f9b1 	bl	8001822 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE12_Vector_implC1ERKS3_>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	109b      	asrs	r3, r3, #2
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EED1Ev+0x38>)
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80014ea:	461a      	mov	r2, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f9aa 	bl	8001846 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE13_M_deallocateEPS2_j>
      }
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffcd 	bl	8001494 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE12_Vector_implD1Ev>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	aaaaaaab 	.word	0xaaaaaaab

08001508 <_ZNKSt16initializer_listISt6vectorIiSaIiEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZNKSt16initializer_listISt6vectorIiSaIiEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffed 	bl	8001508 <_ZNKSt16initializer_listISt6vectorIiSaIiEEE5beginEv>
 800152e:	4604      	mov	r4, r0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f99b 	bl	800186c <_ZNKSt16initializer_listISt6vectorIiSaIiEEE4sizeEv>
 8001536:	4602      	mov	r2, r0
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4423      	add	r3, r4
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}

0800154a <_ZNSt6vectorIS_IiSaIiEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f000 f992 	bl	8001884 <_ZSt8distanceIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8001560:	4603      	mov	r3, r0
 8001562:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001564:	68fc      	ldr	r4, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f82a 	bl	80015c2 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE19_M_get_Tp_allocatorEv>
 800156e:	4603      	mov	r3, r0
 8001570:	4619      	mov	r1, r3
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f000 f99a 	bl	80018ac <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_S_check_init_lenEjRKS2_>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	4620      	mov	r0, r4
 800157e:	f000 f9bd 	bl	80018fc <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	18ca      	adds	r2, r1, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f80d 	bl	80015c2 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE19_M_get_Tp_allocatorEv>
 80015a8:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80015aa:	4622      	mov	r2, r4
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f000 f9b8 	bl	8001924 <_ZSt22__uninitialized_copy_aIPKSt6vectorIiSaIiEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 80015b4:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]
	}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}

080015c2 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_ZSt8_DestroyIPSt6vectorIiSaIiEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f9ad 	bl	8001946 <_ZSt8_DestroyIPSt6vectorIiSaIiEEEvT_S4_>
    }
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	109b      	asrs	r3, r3, #2
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN9__gnu_cxx14__alloc_traitsISaIiEiE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f991 	bl	8001960 <_ZNSt16allocator_traitsISaIiEE37select_on_container_copy_constructionERKS0_>
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZNSt12_Vector_baseIiSaIiEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f83b 	bl	80016d2 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f98b 	bl	800197a <_ZNSt12_Vector_baseIiSaIiEE17_M_create_storageEj>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZNKSt6vectorIiSaIiEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f996 	bl	80019b0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZNKSt6vectorIiSaIiEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1d1a      	adds	r2, r3, #4
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f985 	bl	80019b0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiiET0_T_SA_S9_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f984 	bl	80019d0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>
 80016c8:	4603      	mov	r3, r0
    }
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fea1 	bl	8001426 <_ZNSaIiEC1ERKS_>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f986 	bl	80019f8 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800170e:	b5b0      	push	{r4, r5, r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001718:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f97f 	bl	8001a20 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001722:	462a      	mov	r2, r5
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	4620      	mov	r0, r4
 8001728:	f000 f985 	bl	8001a36 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800172c:	4603      	mov	r3, r0
    }
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001738 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fe6c 	bl	8001426 <_ZNSaIiEC1ERKS_>
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f97f 	bl	8001a56 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8001758:	4602      	mov	r2, r0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4293      	cmp	r3, r2
 800175e:	bf8c      	ite	hi
 8001760:	2301      	movhi	r3, #1
 8001762:	2300      	movls	r3, #0
 8001764:	b2dc      	uxtb	r4, r3
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc9a 	bl	80010a4 <_ZNSaIiED1Ev>
 8001770:	2c00      	cmp	r4, #0
 8001772:	d002      	beq.n	800177a <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001774:	4803      	ldr	r0, [pc, #12]	@ (8001784 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 8001776:	f004 fb34 	bl	8005de2 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800177a:	687b      	ldr	r3, [r7, #4]
      }
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	080062bc 	.word	0x080062bc

08001788 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f974 	bl	8001a8a <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 80017a2:	4603      	mov	r3, r0
 80017a4:	e000      	b.n	80017a8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 80017a6:	2300      	movs	r3, #0
      }
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f970 	bl	8001aa8 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 80017c8:	4603      	mov	r3, r0
    }
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80017dc:	6839      	ldr	r1, [r7, #0]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f976 	bl	8001ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f966 	bl	8001ae6 <_ZNSt15__new_allocatorIiE10deallocateEPij>
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f969 	bl	8001b06 <_ZNSaISt6vectorIiSaIiEEEC1ERKS2_>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f973 	bl	8001b22 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
	if (__p)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f973 	bl	8001b4a <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE10deallocateERS3_PS2_j>
      }
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_ZNKSt16initializer_listISt6vectorIiSaIiEEE4sizeEv>:
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZSt8distanceIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
    distance(_InputIterator __first, _InputIterator __last)
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800188e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f968 	bl	8001b68 <_ZSt19__iterator_categoryIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 8001898:	462a      	mov	r2, r5
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f96f 	bl	8001b80 <_ZSt10__distanceIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 80018a2:	4603      	mov	r3, r0
    }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdb0      	pop	{r4, r5, r7, pc}

080018ac <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f922 	bl	8001b06 <_ZNSaISt6vectorIiSaIiEEEC1ERKS2_>
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f970 	bl	8001bac <_ZNSt6vectorIS_IiSaIiEESaIS1_EE11_S_max_sizeERKS2_>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bf8c      	ite	hi
 80018d4:	2301      	movhi	r3, #1
 80018d6:	2300      	movls	r3, #0
 80018d8:	b2dc      	uxtb	r4, r3
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fc4d 	bl	800117e <_ZNSaISt6vectorIiSaIiEEED1Ev>
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	d002      	beq.n	80018ee <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 80018ea:	f004 fa7a 	bl	8005de2 <_ZSt20__throw_length_errorPKc>
	return __n;
 80018ee:	687b      	ldr	r3, [r7, #4]
      }
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	080062bc 	.word	0x080062bc

080018fc <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj+0x1e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f967 	bl	8001be4 <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE8allocateERS3_j>
 8001916:	4603      	mov	r3, r0
 8001918:	e000      	b.n	800191c <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj+0x20>
 800191a:	2300      	movs	r3, #0
      }
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZSt22__uninitialized_copy_aIPKSt6vectorIiSaIiEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f963 	bl	8001c02 <_ZSt18uninitialized_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_>
 800193c:	4603      	mov	r3, r0
    }
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_ZSt8_DestroyIPSt6vectorIiSaIiEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f969 	bl	8001c2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
    }
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZNSt16allocator_traitsISaIiEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fd5a 	bl	8001426 <_ZNSaIiEC1ERKS_>
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZNSt12_Vector_baseIiSaIiEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fefe 	bl	8001788 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
      }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 80019e0:	2301      	movs	r3, #1
 80019e2:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f937 	bl	8001c5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiEET0_T_SC_SB_>
 80019ee:	4603      	mov	r3, r0
    }
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
	{ }
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001a28:	bf00      	nop
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	109b      	asrs	r3, r3, #2
    }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001a5e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001a62:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f909 	bl	8001c7c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001a6e:	f107 0208 	add.w	r2, r7, #8
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f90b 	bl	8001c94 <_ZSt3minIjERKT_S2_S2_>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
      }
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001a94:	2200      	movs	r2, #0
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f90f 	bl	8001cbc <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f924 	bl	8001d0e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8001ac6:	4603      	mov	r3, r0
    }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_ZNSt15__new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4619      	mov	r1, r3
 8001af8:	68b8      	ldr	r0, [r7, #8]
 8001afa:	f004 f959 	bl	8005db0 <_ZdlPvj>
      }
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_ZNSaISt6vectorIiSaIiEEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f90b 	bl	8001d2e <_ZNSt15__new_allocatorISt6vectorIiSaIiEEEC1ERKS3_>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
	{ }
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f8f3 	bl	8001d46 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE10deallocateEPS2_j>
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZSt19__iterator_categoryIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
    __iterator_category(const _Iter&)
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001b70:	bf00      	nop
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_ZSt10__distanceIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	109b      	asrs	r3, r3, #2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <_ZSt10__distanceIPKSt6vectorIiSaIiEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag+0x28>)
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	aaaaaaab 	.word	0xaaaaaaab

08001bac <_ZNSt6vectorIS_IiSaIiEESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <_ZNSt6vectorIS_IiSaIiEESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8001bb6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8d7 	bl	8001d6c <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE8max_sizeERKS3_>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001bc2:	f107 0208 	add.w	r2, r7, #8
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f861 	bl	8001c94 <_ZSt3minIjERKT_S2_S2_>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	681b      	ldr	r3, [r3, #0]
      }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0aaaaaaa 	.word	0x0aaaaaaa

08001be4 <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001bee:	2200      	movs	r2, #0
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8c6 	bl	8001d84 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZSt18uninitialized_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8001c12:	2300      	movs	r3, #0
 8001c14:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f8e0 	bl	8001de0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_>
 8001c20:	4603      	mov	r3, r0
    }
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001c34:	e009      	b.n	8001c4a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8e2 	bl	8001e00 <_ZSt11__addressofISt6vectorIiSaIiEEEPT_RS3_>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f8e9 	bl	8001e16 <_ZSt8_DestroyISt6vectorIiSaIiEEEvPT_>
	  for (; __first != __last; ++__first)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	330c      	adds	r3, #12
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1f1      	bne.n	8001c36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0xc>
	}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f8dd 	bl	8001e2c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8e9 	bl	8001e5c <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 8001c8a:	4603      	mov	r3, r0
      }
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d201      	bcs.n	8001cae <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	e000      	b.n	8001cb0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001cae:	687b      	ldr	r3, [r7, #4]
    }
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f8d3 	bl	8001e74 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	bf8c      	ite	hi
 8001cd6:	2301      	movhi	r3, #1
 8001cd8:	2300      	movls	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf0:	d301      	bcc.n	8001cf6 <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001cf2:	f004 f873 	bl	8005ddc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001cf6:	f004 f86e 	bl	8005dd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 f858 	bl	8005db4 <_Znwj>
 8001d04:	4603      	mov	r3, r0
      }
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f8b4 	bl	8001e8c <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZNSt15__new_allocatorISt6vectorIiSaIiEEEC1ERKS3_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	68b8      	ldr	r0, [r7, #8]
 8001d60:	f004 f826 	bl	8005db0 <_ZdlPvj>
      }
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZNSt16allocator_traitsISaISt6vectorIiSaIiEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8a1 	bl	8001ebc <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE8max_sizeEv>
 8001d7a:	4603      	mov	r3, r0
      }
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f89f 	bl	8001ed4 <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE11_M_max_sizeEv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	bf8c      	ite	hi
 8001d9e:	2301      	movhi	r3, #1
 8001da0:	2300      	movls	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv+0x58>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <_ZNSt15__new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001dba:	f004 f80f 	bl	8005ddc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001dbe:	f004 f80a 	bl	8005dd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fff1 	bl	8005db4 <_Znwj>
 8001dd2:	4603      	mov	r3, r0
      }
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	15555555 	.word	0x15555555

08001de0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f87d 	bl	8001ef0 <_ZSt16__do_uninit_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZSt11__addressofISt6vectorIiSaIiEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_ZSt8_DestroyISt6vectorIiSaIiEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff f96d 	bl	80010fe <_ZNSt6vectorIiSaIiEED1Ev>
    }
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f879 	bl	8001f30 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f000 f875 	bl	8001f30 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>
 8001e46:	4603      	mov	r3, r0
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f000 f87a 	bl	8001f46 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET1_T0_SA_S9_>
 8001e52:	4603      	mov	r3, r0
    }
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f805 	bl	8001e74 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001e7c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f877 	bl	8001f8c <_ZSt12__miter_baseIPKiET_S2_>
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	68b8      	ldr	r0, [r7, #8]
 8001ea2:	f000 f873 	bl	8001f8c <_ZSt12__miter_baseIPKiET_S2_>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4620      	mov	r0, r4
 8001eae:	f000 f878 	bl	8001fa2 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8001eb2:	4603      	mov	r3, r0
    }
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}

08001ebc <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f805 	bl	8001ed4 <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE11_M_max_sizeEv>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <_ZNKSt15__new_allocatorISt6vectorIiSaIiEEE11_M_max_sizeEv+0x18>)
      }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	0aaaaaaa 	.word	0x0aaaaaaa

08001ef0 <_ZSt16__do_uninit_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8001f00:	e00d      	b.n	8001f1e <_ZSt16__do_uninit_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff7c 	bl	8001e00 <_ZSt11__addressofISt6vectorIiSaIiEEEPT_RS3_>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f86b 	bl	8001fe8 <_ZSt10_ConstructISt6vectorIiSaIiEEJRKS2_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	330c      	adds	r3, #12
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d1ed      	bne.n	8001f02 <_ZSt16__do_uninit_copyIPKSt6vectorIiSaIiEEPS2_ET0_T_S7_S6_+0x12>
	  return __cur;
 8001f26:	697b      	ldr	r3, [r7, #20]
    }
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEPiET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001f46:	b5b0      	push	{r4, r5, r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f85f 	bl	8002016 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f000 f85b 	bl	8002016 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001f60:	4605      	mov	r5, r0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f864 	bl	8002032 <_ZSt12__niter_baseIPiET_S1_>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4620      	mov	r0, r4
 8001f72:	f000 f869 	bl	8002048 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 8001f76:	4602      	mov	r2, r0
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f873 	bl	8002068 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8001f82:	4603      	mov	r3, r0
    }
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}

08001f8c <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001fa2:	b5b0      	push	{r4, r5, r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f866 	bl	8002080 <_ZSt12__niter_baseIPKiET_S2_>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	68b8      	ldr	r0, [r7, #8]
 8001fb8:	f000 f862 	bl	8002080 <_ZSt12__niter_baseIPKiET_S2_>
 8001fbc:	4605      	mov	r5, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f836 	bl	8002032 <_ZSt12__niter_baseIPiET_S1_>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4629      	mov	r1, r5
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f000 f83b 	bl	8002048 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f845 	bl	8002068 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8001fde:	4603      	mov	r3, r0
    }
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZSt10_ConstructISt6vectorIiSaIiEEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	200c      	movs	r0, #12
 8001ff8:	f7fe fc25 	bl	8000846 <_ZnwjPv>
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	f000 f849 	bl	8002096 <_ZSt7forwardIRKSt6vectorIiSaIiEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff f92a 	bl	8001262 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
    }
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}

08002016 <_ZSt12__niter_baseIPKiSt6vectorIiSaIiEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f843 	bl	80020ac <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
 8002026:	4603      	mov	r3, r0
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
    { return __it; }
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f832 	bl	80020c2 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 800205e:	4603      	mov	r3, r0
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_ZSt7forwardIRKSt6vectorIiSaIiEEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f805 	bl	80020e2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 80020d8:	4603      	mov	r3, r0
    }
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	109b      	asrs	r3, r3, #2
 80020f6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	461a      	mov	r2, r3
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f003 ff3e 	bl	8005f88 <memmove>
	  return __result + _Num;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
	}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x44>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x44>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6613      	str	r3, [r2, #96]	@ 0x60
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x44>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_MspInit+0x44>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_MspInit+0x44>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_MspInit+0x44>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002152:	f001 fed7 	bl	8003f04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09a      	sub	sp, #104	@ 0x68
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2244      	movs	r2, #68	@ 0x44
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f003 ff19 	bl	8005fbc <memset>
  if(hadc->Instance==ADC2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a33      	ldr	r2, [pc, #204]	@ (800225c <HAL_ADC_MspInit+0xf8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d15f      	bne.n	8002254 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002198:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800219a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800219e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 fbeb 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80021b0:	f7fe ff66 	bl	8001080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c0:	4b27      	ldr	r3, [pc, #156]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d8:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021e4:	2301      	movs	r3, #1
 80021e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	2303      	movs	r3, #3
 80021ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f4:	4619      	mov	r1, r3
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fa:	f001 fc45 	bl	8003a88 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80021fe:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002200:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <HAL_ADC_MspInit+0x104>)
 8002202:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002204:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002206:	2224      	movs	r2, #36	@ 0x24
 8002208:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800221e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002222:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002226:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800222e:	2220      	movs	r2, #32
 8002230:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002238:	480a      	ldr	r0, [pc, #40]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800223a:	f001 fa6b 	bl	8003714 <HAL_DMA_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002244:	f7fe ff1c 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3768      	adds	r7, #104	@ 0x68
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	50000100 	.word	0x50000100
 8002260:	40021000 	.word	0x40021000
 8002264:	200000e4 	.word	0x200000e4
 8002268:	40020008 	.word	0x40020008

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b09c      	sub	sp, #112	@ 0x70
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	2244      	movs	r2, #68	@ 0x44
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fe95 	bl	8005fbc <memset>
  if(huart->Instance==USART1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a3e      	ldr	r2, [pc, #248]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d138      	bne.n	800230e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800229c:	2301      	movs	r3, #1
 800229e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fb69 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022b4:	f7fe fee4 	bl	8001080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b8:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80022c4:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_UART_MspInit+0x128>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ee:	2312      	movs	r3, #18
 80022f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fa:	2307      	movs	r3, #7
 80022fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002302:	4619      	mov	r1, r3
 8002304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002308:	f001 fbbe 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800230c:	e03b      	b.n	8002386 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	@ (8002398 <HAL_UART_MspInit+0x12c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d136      	bne.n	8002386 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002320:	f107 0318 	add.w	r3, r7, #24
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fb2b 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002330:	f7fe fea6 	bl	8001080 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002334:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <HAL_UART_MspInit+0x128>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	4a16      	ldr	r2, [pc, #88]	@ (8002394 <HAL_UART_MspInit+0x128>)
 800233a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800233e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <HAL_UART_MspInit+0x128>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_UART_MspInit+0x128>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <HAL_UART_MspInit+0x128>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002358:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_UART_MspInit+0x128>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002364:	230c      	movs	r3, #12
 8002366:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002374:	2307      	movs	r3, #7
 8002376:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002382:	f001 fb81 	bl	8003a88 <HAL_GPIO_Init>
}
 8002386:	bf00      	nop
 8002388:	3770      	adds	r7, #112	@ 0x70
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40004400 	.word	0x40004400

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <NMI_Handler+0x4>

080023a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <MemManage_Handler+0x4>

080023b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f2:	f000 f8f5 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <DMA1_Channel1_IRQHandler+0x10>)
 8002402:	f001 fa2f 	bl	8003864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200000e4 	.word	0x200000e4

08002410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_kill>:

int _kill(int pid, int sig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800242a:	f003 fe23 	bl	8006074 <__errno>
 800242e:	4603      	mov	r3, r0
 8002430:	2216      	movs	r2, #22
 8002432:	601a      	str	r2, [r3, #0]
  return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_exit>:

void _exit (int status)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002448:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ffe7 	bl	8002420 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002452:	bf00      	nop
 8002454:	e7fd      	b.n	8002452 <_exit+0x12>
	...

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f003 fdf4 	bl	8006074 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20008000 	.word	0x20008000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	2000026c 	.word	0x2000026c
 80024c0:	200003c0 	.word	0x200003c0

080024c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024e8:	480d      	ldr	r0, [pc, #52]	@ (8002520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	@ (8002528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <LoopForever+0xe>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <LoopForever+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f003 fdb3 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251a:	f7fe fb9d 	bl	8000c58 <main>

0800251e <LoopForever>:

LoopForever:
    b LoopForever
 800251e:	e7fe      	b.n	800251e <LoopForever>
  ldr   r0, =_estack
 8002520:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800252c:	08006340 	.word	0x08006340
  ldr r2, =_sbss
 8002530:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002534:	200003c0 	.word	0x200003c0

08002538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC1_2_IRQHandler>

0800253a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f001 f8a5 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f80e 	bl	800256c <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	e001      	b.n	8002560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255c:	f7ff fdde 	bl	800211c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002560:	79fb      	ldrb	r3, [r7, #7]

}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002578:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <HAL_InitTick+0x68>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d022      	beq.n	80025c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_InitTick+0x6c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <HAL_InitTick+0x68>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800258c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f8b0 	bl	80036fa <HAL_SYSTICK_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d809      	bhi.n	80025ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a6:	2200      	movs	r2, #0
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025ae:	f001 f87c 	bl	80036aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_InitTick+0x70>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e007      	b.n	80025ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e004      	b.n	80025ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e001      	b.n	80025ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000008 	.word	0x20000008
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_IncTick+0x1c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_IncTick+0x20>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a03      	ldr	r2, [pc, #12]	@ (80025fc <HAL_IncTick+0x1c>)
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	20000270 	.word	0x20000270
 8002600:	20000008 	.word	0x20000008

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000270 	.word	0x20000270

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002634:	d004      	beq.n	8002640 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_Delay+0x40>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002640:	bf00      	nop
 8002642:	f7ff ffdf 	bl	8002604 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d8f7      	bhi.n	8002642 <HAL_Delay+0x26>
  {
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000008 	.word	0x20000008

08002660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3360      	adds	r3, #96	@ 0x60
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <LL_ADC_SetOffset+0x44>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	03fff000 	.word	0x03fff000

08002710 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3360      	adds	r3, #96	@ 0x60
 800271e:	461a      	mov	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3360      	adds	r3, #96	@ 0x60
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3360      	adds	r3, #96	@ 0x60
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	431a      	orrs	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3360      	adds	r3, #96	@ 0x60
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	615a      	str	r2, [r3, #20]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3330      	adds	r3, #48	@ 0x30
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	211f      	movs	r1, #31
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	f003 011f 	and.w	r1, r3, #31
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	431a      	orrs	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3314      	adds	r3, #20
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0e5b      	lsrs	r3, r3, #25
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	4413      	add	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0d1b      	lsrs	r3, r3, #20
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2107      	movs	r1, #7
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	401a      	ands	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	0d1b      	lsrs	r3, r3, #20
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0318 	and.w	r3, r3, #24
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028d8:	40d9      	lsrs	r1, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	400b      	ands	r3, r1
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	0007ffff 	.word	0x0007ffff

080028fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800290c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6093      	str	r3, [r2, #8]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002934:	d101      	bne.n	800293a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800295c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002984:	d101      	bne.n	800298a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_IsEnabled+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_IsEnabled+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d101      	bne.n	80029d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d101      	bne.n	80029fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e167      	b.n	8002cf6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fb95 	bl	8002164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff67 	bl	8002920 <LL_ADC_IsDeepPowerDownEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff4d 	bl	80028fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff82 	bl	8002970 <LL_ADC_IsInternalRegulatorEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d115      	bne.n	8002a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff66 	bl	8002948 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a7c:	4ba0      	ldr	r3, [pc, #640]	@ (8002d00 <HAL_ADC_Init+0x2f4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	4aa0      	ldr	r2, [pc, #640]	@ (8002d04 <HAL_ADC_Init+0x2f8>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a90:	e002      	b.n	8002a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f9      	bne.n	8002a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff64 	bl	8002970 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff75 	bl	80029be <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8100 	bne.w	8002ce4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80fc 	bne.w	8002ce4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff49 	bl	8002998 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b10:	f7ff ff42 	bl	8002998 <LL_ADC_IsEnabled>
 8002b14:	4604      	mov	r4, r0
 8002b16:	487c      	ldr	r0, [pc, #496]	@ (8002d08 <HAL_ADC_Init+0x2fc>)
 8002b18:	f7ff ff3e 	bl	8002998 <LL_ADC_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4323      	orrs	r3, r4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4878      	ldr	r0, [pc, #480]	@ (8002d0c <HAL_ADC_Init+0x300>)
 8002b2c:	f7ff fd98 	bl	8002660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7f5b      	ldrb	r3, [r3, #29]
 8002b34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	045b      	lsls	r3, r3, #17
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <HAL_ADC_Init+0x304>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff14 	bl	80029e4 <LL_ADC_INJ_IsConversionOngoing>
 8002bbc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d16d      	bne.n	8002ca0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d16a      	bne.n	8002ca0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002be6:	f023 0302 	bic.w	r3, r3, #2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6911      	ldr	r1, [r2, #16]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c2a:	e013      	b.n	8002c54 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d118      	bne.n	8002c90 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c80:	430a      	orrs	r2, r1
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	611a      	str	r2, [r3, #16]
 8002c8e:	e007      	b.n	8002ca0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f023 010f 	bic.w	r1, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc0:	e007      	b.n	8002cd2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 020f 	bic.w	r2, r2, #15
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ce2:	e007      	b.n	8002cf4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000
 8002d04:	053e2d63 	.word	0x053e2d63
 8002d08:	50000100 	.word	0x50000100
 8002d0c:	50000300 	.word	0x50000300
 8002d10:	fff04007 	.word	0xfff04007

08002d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0b6      	sub	sp, #216	@ 0xd8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x22>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e3c8      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x7b4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe3b 	bl	80029be <LL_ADC_REG_IsConversionOngoing>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 83ad 	bne.w	80034aa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f7ff fd51 	bl	8002804 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe29 	bl	80029be <LL_ADC_REG_IsConversionOngoing>
 8002d6c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe35 	bl	80029e4 <LL_ADC_INJ_IsConversionOngoing>
 8002d7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 81d9 	bne.w	800313a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 81d4 	bne.w	800313a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d9a:	d10f      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7ff fd58 	bl	800285c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fd12 	bl	80027de <LL_ADC_SetSamplingTimeCommonConfig>
 8002dba:	e00e      	b.n	8002dda <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f7ff fd47 	bl	800285c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fd02 	bl	80027de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d022      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e0c:	f7ff fc5c 	bl	80026c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6919      	ldr	r1, [r3, #16]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f7ff fca8 	bl	8002772 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d102      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x124>
 8002e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e36:	e000      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x126>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7ff fcb4 	bl	80027a8 <LL_ADC_SetOffsetSaturation>
 8002e40:	e17b      	b.n	800313a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc61 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x15a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fc56 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	e01e      	b.n	8002eac <HAL_ADC_ConfigChannel+0x198>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fc4b 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e004      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	e018      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1e2>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e004      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fc1a 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fbfe 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x220>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fbf3 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	e01e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x25e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fbe8 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e004      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x276>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	e018      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x2a8>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e004      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d106      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fbb7 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fb9b 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x2e6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fb90 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	e01e      	b.n	8003038 <HAL_ADC_ConfigChannel+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fb85 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003018:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800301c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003020:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e004      	b.n	8003036 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800302c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x33c>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	e016      	b.n	800307e <HAL_ADC_ConfigChannel+0x36a>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003068:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e004      	b.n	800307e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800307e:	429a      	cmp	r2, r3
 8003080:	d106      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	2102      	movs	r1, #2
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fb56 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2103      	movs	r1, #3
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fb3a 	bl	8002710 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x3a8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2103      	movs	r1, #3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fb2f 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	f003 021f 	and.w	r2, r3, #31
 80030ba:	e017      	b.n	80030ec <HAL_ADC_ConfigChannel+0x3d8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2103      	movs	r1, #3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fb24 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80030e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x3f0>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	e011      	b.n	8003128 <HAL_ADC_ConfigChannel+0x414>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003114:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2200      	movs	r2, #0
 8003132:	2103      	movs	r1, #3
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb01 	bl	800273c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fc2a 	bl	8002998 <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8140 	bne.w	80033cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	461a      	mov	r2, r3
 800315a:	f7ff fbab 	bl	80028b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4a8f      	ldr	r2, [pc, #572]	@ (80033a0 <HAL_ADC_ConfigChannel+0x68c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	f040 8131 	bne.w	80033cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x47e>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	3301      	adds	r3, #1
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b09      	cmp	r3, #9
 8003188:	bf94      	ite	ls
 800318a:	2301      	movls	r3, #1
 800318c:	2300      	movhi	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e019      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x4b2>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031a2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e003      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2b09      	cmp	r3, #9
 80031be:	bf94      	ite	ls
 80031c0:	2301      	movls	r3, #1
 80031c2:	2300      	movhi	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d079      	beq.n	80032be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x4d2>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	3301      	adds	r3, #1
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e4:	e015      	b.n	8003212 <HAL_ADC_ConfigChannel+0x4fe>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e003      	b.n	800320a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x51e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0e9b      	lsrs	r3, r3, #26
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	e017      	b.n	8003262 <HAL_ADC_ConfigChannel+0x54e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e003      	b.n	8003256 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800324e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	ea42 0103 	orr.w	r1, r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x574>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	e018      	b.n	80032ba <HAL_ADC_ConfigChannel+0x5a6>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800329a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 021f 	and.w	r2, r3, #31
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ba:	430b      	orrs	r3, r1
 80032bc:	e081      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_ADC_ConfigChannel+0x5c6>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	3301      	adds	r3, #1
 80032d2:	069b      	lsls	r3, r3, #26
 80032d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d8:	e015      	b.n	8003306 <HAL_ADC_ConfigChannel+0x5f2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e003      	b.n	80032fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x612>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	e017      	b.n	8003356 <HAL_ADC_ConfigChannel+0x642>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	61fb      	str	r3, [r7, #28]
  return result;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e003      	b.n	800334a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x66e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	3301      	adds	r3, #1
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	3b1e      	subs	r3, #30
 800337a:	051b      	lsls	r3, r3, #20
 800337c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003380:	e01e      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x6ac>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	613b      	str	r3, [r7, #16]
  return result;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e006      	b.n	80033ac <HAL_ADC_ConfigChannel+0x698>
 800339e:	bf00      	nop
 80033a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7ff fa48 	bl	800285c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d071      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d8:	483e      	ldr	r0, [pc, #248]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80033da:	f7ff f967 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80033de:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x6e2>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3a      	ldr	r2, [pc, #232]	@ (80034dc <HAL_ADC_ConfigChannel+0x7c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d127      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d121      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340a:	d157      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003410:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003414:	4619      	mov	r1, r3
 8003416:	482f      	ldr	r0, [pc, #188]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003418:	f7ff f935 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341c:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	4a30      	ldr	r2, [pc, #192]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003436:	e002      	b.n	800343e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b01      	subs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f9      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003444:	e03a      	b.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a27      	ldr	r2, [pc, #156]	@ (80034e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d113      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_ADC_ConfigChannel+0x7d8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02a      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800346e:	4619      	mov	r1, r3
 8003470:	4818      	ldr	r0, [pc, #96]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003472:	f7ff f908 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003476:	e021      	b.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11c      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a16      	ldr	r2, [pc, #88]	@ (80034ec <HAL_ADC_ConfigChannel+0x7d8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d011      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034a0:	4619      	mov	r1, r3
 80034a2:	480c      	ldr	r0, [pc, #48]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80034a4:	f7ff f8ef 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
 80034a8:	e008      	b.n	80034bc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	37d8      	adds	r7, #216	@ 0xd8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	80080000 	.word	0x80080000
 80034d4:	50000300 	.word	0x50000300
 80034d8:	c3210000 	.word	0xc3210000
 80034dc:	90c00010 	.word	0x90c00010
 80034e0:	20000000 	.word	0x20000000
 80034e4:	053e2d63 	.word	0x053e2d63
 80034e8:	c7520000 	.word	0xc7520000
 80034ec:	50000100 	.word	0x50000100
 80034f0:	cb840000 	.word	0xcb840000

080034f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	@ (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	@ (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	@ (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	@ 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
         );
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003660:	d301      	bcc.n	8003666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003662:	2301      	movs	r3, #1
 8003664:	e00f      	b.n	8003686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003666:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <SysTick_Config+0x40>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366e:	210f      	movs	r1, #15
 8003670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003674:	f7ff ff8e 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <SysTick_Config+0x40>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367e:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <SysTick_Config+0x40>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000e010 	.word	0xe000e010

08003694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff29 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff40 	bl	800353c <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff90 	bl	80035e8 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5f 	bl	8003594 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff33 	bl	8003558 <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa4 	bl	8003650 <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e08d      	b.n	8003842 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_DMA_Init+0x138>)
 800372e:	429a      	cmp	r2, r3
 8003730:	d80f      	bhi.n	8003752 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b45      	ldr	r3, [pc, #276]	@ (8003850 <HAL_DMA_Init+0x13c>)
 800373a:	4413      	add	r3, r2
 800373c:	4a45      	ldr	r2, [pc, #276]	@ (8003854 <HAL_DMA_Init+0x140>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a42      	ldr	r2, [pc, #264]	@ (8003858 <HAL_DMA_Init+0x144>)
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003750:	e00e      	b.n	8003770 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	4b40      	ldr	r3, [pc, #256]	@ (800385c <HAL_DMA_Init+0x148>)
 800375a:	4413      	add	r3, r2
 800375c:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <HAL_DMA_Init+0x140>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a3c      	ldr	r2, [pc, #240]	@ (8003860 <HAL_DMA_Init+0x14c>)
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8fe 	bl	80039c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d0:	d102      	bne.n	80037d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_DMA_Init+0x104>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d80c      	bhi.n	8003818 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f91e 	bl	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e008      	b.n	800382a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40020407 	.word	0x40020407
 8003850:	bffdfff8 	.word	0xbffdfff8
 8003854:	cccccccd 	.word	0xcccccccd
 8003858:	40020000 	.word	0x40020000
 800385c:	bffdfbf8 	.word	0xbffdfbf8
 8003860:	40020400 	.word	0x40020400

08003864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2204      	movs	r2, #4
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d026      	beq.n	80038de <HAL_DMA_IRQHandler+0x7a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d021      	beq.n	80038de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0204 	bic.w	r2, r2, #4
 80038b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	2104      	movs	r1, #4
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d071      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038dc:	e06c      	b.n	80039b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2202      	movs	r2, #2
 80038e8:	409a      	lsls	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02e      	beq.n	8003950 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d029      	beq.n	8003950 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 020a 	bic.w	r2, r2, #10
 8003918:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2102      	movs	r1, #2
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d038      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800394e:	e033      	b.n	80039b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2208      	movs	r2, #8
 800395a:	409a      	lsls	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d02a      	beq.n	80039ba <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d025      	beq.n	80039ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 020e 	bic.w	r2, r2, #14
 800397c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f003 021f 	and.w	r2, r3, #31
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f202 	lsl.w	r2, r1, r2
 8003990:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
}
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d802      	bhi.n	80039de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e001      	b.n	80039e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039e0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	3b08      	subs	r3, #8
 80039ee:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40020407 	.word	0x40020407
 8003a30:	40020800 	.word	0x40020800
 8003a34:	40020820 	.word	0x40020820
 8003a38:	cccccccd 	.word	0xcccccccd
 8003a3c:	40020880 	.word	0x40020880

08003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	1000823f 	.word	0x1000823f
 8003a84:	40020940 	.word	0x40020940

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a96:	e15a      	b.n	8003d4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 814c 	beq.w	8003d48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d005      	beq.n	8003ac8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d130      	bne.n	8003b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0201 	and.w	r2, r3, #1
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d017      	beq.n	8003b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d123      	bne.n	8003bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	6939      	ldr	r1, [r7, #16]
 8003bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80a6 	beq.w	8003d48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8003d6c <HAL_GPIO_Init+0x2e4>)
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	4a5a      	ldr	r2, [pc, #360]	@ (8003d6c <HAL_GPIO_Init+0x2e4>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c08:	4b58      	ldr	r3, [pc, #352]	@ (8003d6c <HAL_GPIO_Init+0x2e4>)
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c14:	4a56      	ldr	r2, [pc, #344]	@ (8003d70 <HAL_GPIO_Init+0x2e8>)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	089b      	lsrs	r3, r3, #2
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c3e:	d01f      	beq.n	8003c80 <HAL_GPIO_Init+0x1f8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a4c      	ldr	r2, [pc, #304]	@ (8003d74 <HAL_GPIO_Init+0x2ec>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d019      	beq.n	8003c7c <HAL_GPIO_Init+0x1f4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_GPIO_Init+0x1f0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a4a      	ldr	r2, [pc, #296]	@ (8003d7c <HAL_GPIO_Init+0x2f4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00d      	beq.n	8003c74 <HAL_GPIO_Init+0x1ec>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a49      	ldr	r2, [pc, #292]	@ (8003d80 <HAL_GPIO_Init+0x2f8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <HAL_GPIO_Init+0x1e8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a48      	ldr	r2, [pc, #288]	@ (8003d84 <HAL_GPIO_Init+0x2fc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_GPIO_Init+0x1e4>
 8003c68:	2305      	movs	r3, #5
 8003c6a:	e00a      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	e008      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e006      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c74:	2303      	movs	r3, #3
 8003c76:	e004      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e002      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_GPIO_Init+0x1fa>
 8003c80:	2300      	movs	r3, #0
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	f002 0203 	and.w	r2, r2, #3
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c92:	4937      	ldr	r1, [pc, #220]	@ (8003d70 <HAL_GPIO_Init+0x2e8>)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc4:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cca:	4b2f      	ldr	r3, [pc, #188]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cee:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003cf4:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d18:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d42:	4a11      	ldr	r2, [pc, #68]	@ (8003d88 <HAL_GPIO_Init+0x300>)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f ae9d 	bne.w	8003a98 <HAL_GPIO_Init+0x10>
  }
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40010000 	.word	0x40010000
 8003d74:	48000400 	.word	0x48000400
 8003d78:	48000800 	.word	0x48000800
 8003d7c:	48000c00 	.word	0x48000c00
 8003d80:	48001000 	.word	0x48001000
 8003d84:	48001400 	.word	0x48001400
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da8:	e002      	b.n	8003db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d141      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dca:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd6:	d131      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd8:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dde:	4a46      	ldr	r2, [pc, #280]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003df0:	4a41      	ldr	r2, [pc, #260]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2232      	movs	r2, #50	@ 0x32
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	4a3f      	ldr	r2, [pc, #252]	@ (8003f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	e002      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e22:	d102      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f2      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e36:	d158      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e057      	b.n	8003eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e4c:	e04d      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e54:	d141      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e56:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e62:	d131      	bne.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e64:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e74:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2232      	movs	r2, #50	@ 0x32
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0c9b      	lsrs	r3, r3, #18
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9a:	e002      	b.n	8003ea2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eae:	d102      	bne.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f2      	bne.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec2:	d112      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e011      	b.n	8003eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ed8:	e007      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eda:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ee2:	4a05      	ldr	r2, [pc, #20]	@ (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ee8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	20000000 	.word	0x20000000
 8003f00:	431bde83 	.word	0x431bde83

08003f04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f12:	6093      	str	r3, [r2, #8]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40007000 	.word	0x40007000

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e2fe      	b.n	8004534 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d075      	beq.n	800402e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f42:	4b97      	ldr	r3, [pc, #604]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4c:	4b94      	ldr	r3, [pc, #592]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d102      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3e>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_OscConfig+0x44>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d10b      	bne.n	8003f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	4b8d      	ldr	r3, [pc, #564]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05b      	beq.n	800402c <HAL_RCC_OscConfig+0x108>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d157      	bne.n	800402c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e2d9      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x74>
 8003f8a:	4b85      	ldr	r3, [pc, #532]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a84      	ldr	r2, [pc, #528]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e01d      	b.n	8003fd4 <HAL_RCC_OscConfig+0xb0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x98>
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4b7c      	ldr	r3, [pc, #496]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7b      	ldr	r2, [pc, #492]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCC_OscConfig+0xb0>
 8003fbc:	4b78      	ldr	r3, [pc, #480]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a77      	ldr	r2, [pc, #476]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b75      	ldr	r3, [pc, #468]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a74      	ldr	r2, [pc, #464]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fb12 	bl	8002604 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fb0e 	bl	8002604 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e29e      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xc0>
 8004002:	e014      	b.n	800402e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe fafe 	bl	8002604 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fafa 	bl	8002604 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e28a      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401e:	4b60      	ldr	r3, [pc, #384]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0xe8>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d075      	beq.n	8004126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403a:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004044:	4b56      	ldr	r3, [pc, #344]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d102      	bne.n	800405a <HAL_RCC_OscConfig+0x136>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d002      	beq.n	8004060 <HAL_RCC_OscConfig+0x13c>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b04      	cmp	r3, #4
 800405e:	d11f      	bne.n	80040a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004060:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_OscConfig+0x154>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e25d      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b49      	ldr	r3, [pc, #292]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	4946      	ldr	r1, [pc, #280]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800408c:	4b45      	ldr	r3, [pc, #276]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fa6b 	bl	800256c <HAL_InitTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d043      	beq.n	8004124 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e249      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d023      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3c      	ldr	r2, [pc, #240]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe faa6 	bl	8002604 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe faa2 	bl	8002604 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e232      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ce:	4b34      	ldr	r3, [pc, #208]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040da:	4b31      	ldr	r3, [pc, #196]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	492d      	ldr	r1, [pc, #180]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
 80040ee:	e01a      	b.n	8004126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fa82 	bl	8002604 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	f7fe fa7e 	bl	8002604 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e20e      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004116:	4b22      	ldr	r3, [pc, #136]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x1e0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d041      	beq.n	80041b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01c      	beq.n	8004174 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004140:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fe fa5b 	bl	8002604 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004152:	f7fe fa57 	bl	8002604 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1e7      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004164:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0ef      	beq.n	8004152 <HAL_RCC_OscConfig+0x22e>
 8004172:	e020      	b.n	80041b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004174:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417a:	4a09      	ldr	r2, [pc, #36]	@ (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fe fa3e 	bl	8002604 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800418a:	e00d      	b.n	80041a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418c:	f7fe fa3a 	bl	8002604 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d906      	bls.n	80041a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1ca      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041a8:	4b8c      	ldr	r3, [pc, #560]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ea      	bne.n	800418c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80a6 	beq.w	8004310 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c8:	4b84      	ldr	r3, [pc, #528]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2b4>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x2b6>
 80041d8:	2300      	movs	r3, #0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b7f      	ldr	r3, [pc, #508]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	4a7e      	ldr	r2, [pc, #504]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ea:	4b7c      	ldr	r3, [pc, #496]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fa:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <HAL_RCC_OscConfig+0x4bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCC_OscConfig+0x4bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x4bc>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fe f9f7 	bl	8002604 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe f9f3 	bl	8002604 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e183      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x4bc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d108      	bne.n	8004252 <HAL_RCC_OscConfig+0x32e>
 8004240:	4b66      	ldr	r3, [pc, #408]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	4a65      	ldr	r2, [pc, #404]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004250:	e024      	b.n	800429c <HAL_RCC_OscConfig+0x378>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d110      	bne.n	800427c <HAL_RCC_OscConfig+0x358>
 800425a:	4b60      	ldr	r3, [pc, #384]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	4a5e      	ldr	r2, [pc, #376]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800426a:	4b5c      	ldr	r3, [pc, #368]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	4a5a      	ldr	r2, [pc, #360]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800427a:	e00f      	b.n	800429c <HAL_RCC_OscConfig+0x378>
 800427c:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	4a56      	ldr	r2, [pc, #344]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800428c:	4b53      	ldr	r3, [pc, #332]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	4a52      	ldr	r2, [pc, #328]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fe f9ae 	bl	8002604 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe f9aa 	bl	8002604 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e138      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c2:	4b46      	ldr	r3, [pc, #280]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ed      	beq.n	80042ac <HAL_RCC_OscConfig+0x388>
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fe f997 	bl	8002604 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fe f993 	bl	8002604 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e121      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f0:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ed      	bne.n	80042da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042fe:	7ffb      	ldrb	r3, [r7, #31]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004304:	4b35      	ldr	r3, [pc, #212]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004308:	4a34      	ldr	r2, [pc, #208]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03c      	beq.n	8004396 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800432a:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe f966 	bl	8002604 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800433c:	f7fe f962 	bl	8002604 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0f2      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800434e:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004350:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <HAL_RCC_OscConfig+0x418>
 800435c:	e01b      	b.n	8004396 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800435e:	4b1f      	ldr	r3, [pc, #124]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004364:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fe f949 	bl	8002604 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004376:	f7fe f945 	bl	8002604 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0d5      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004388:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ef      	bne.n	8004376 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80c9 	beq.w	8004532 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a0:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	f000 8083 	beq.w	80044b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d15e      	bne.n	8004474 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe f91f 	bl	8002604 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c8:	e00c      	b.n	80043e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fe f91b 	bl	8002604 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d905      	bls.n	80043e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0ab      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e4:	4b55      	ldr	r3, [pc, #340]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ec      	bne.n	80043ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f0:	4b52      	ldr	r3, [pc, #328]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	4b52      	ldr	r3, [pc, #328]	@ (8004540 <HAL_RCC_OscConfig+0x61c>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6a11      	ldr	r1, [r2, #32]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004400:	3a01      	subs	r2, #1
 8004402:	0112      	lsls	r2, r2, #4
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800440a:	0212      	lsls	r2, r2, #8
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004412:	0852      	lsrs	r2, r2, #1
 8004414:	3a01      	subs	r2, #1
 8004416:	0552      	lsls	r2, r2, #21
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800441e:	0852      	lsrs	r2, r2, #1
 8004420:	3a01      	subs	r2, #1
 8004422:	0652      	lsls	r2, r2, #25
 8004424:	4311      	orrs	r1, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800442a:	06d2      	lsls	r2, r2, #27
 800442c:	430a      	orrs	r2, r1
 800442e:	4943      	ldr	r1, [pc, #268]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004430:	4313      	orrs	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b41      	ldr	r3, [pc, #260]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a40      	ldr	r2, [pc, #256]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004440:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a3d      	ldr	r2, [pc, #244]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800444a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f8da 	bl	8002604 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe f8d6 	bl	8002604 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e066      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	4b35      	ldr	r3, [pc, #212]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x530>
 8004472:	e05e      	b.n	8004532 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004474:	4b31      	ldr	r3, [pc, #196]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 800447a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe f8c0 	bl	8002604 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe f8bc 	bl	8002604 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e04c      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449a:	4b28      	ldr	r3, [pc, #160]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044a6:	4b25      	ldr	r3, [pc, #148]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	4924      	ldr	r1, [pc, #144]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <HAL_RCC_OscConfig+0x620>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]
 80044b2:	e03e      	b.n	8004532 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e039      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044c0:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <HAL_RCC_OscConfig+0x618>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d12c      	bne.n	800452e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	3b01      	subs	r3, #1
 80044e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d123      	bne.n	800452e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11b      	bne.n	800452e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d113      	bne.n	800452e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d109      	bne.n	800452e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	3b01      	subs	r3, #1
 8004528:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	019f800c 	.word	0x019f800c
 8004544:	feeefffc 	.word	0xfeeefffc

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e11e      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d910      	bls.n	8004590 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b8e      	ldr	r3, [pc, #568]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 020f 	bic.w	r2, r3, #15
 8004576:	498c      	ldr	r1, [pc, #560]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e106      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d073      	beq.n	8004684 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d129      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a4:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0f4      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045b4:	f000 f99e 	bl	80048f4 <RCC_GetSysClockFreqFromPLLSource>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4a7c      	ldr	r2, [pc, #496]	@ (80047b0 <HAL_RCC_ClockConfig+0x268>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d93f      	bls.n	8004642 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045c2:	4b7a      	ldr	r3, [pc, #488]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d033      	beq.n	8004642 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d12f      	bne.n	8004642 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045e2:	4b72      	ldr	r3, [pc, #456]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ea:	4a70      	ldr	r2, [pc, #448]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80045ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e024      	b.n	8004642 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004600:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0c6      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004610:	4b66      	ldr	r3, [pc, #408]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0be      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004620:	f000 f8ce 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4a61      	ldr	r2, [pc, #388]	@ (80047b0 <HAL_RCC_ClockConfig+0x268>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d909      	bls.n	8004642 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800462e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004636:	4a5d      	ldr	r2, [pc, #372]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004642:	4b5a      	ldr	r3, [pc, #360]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 0203 	bic.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4957      	ldr	r1, [pc, #348]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fd ffd6 	bl	8002604 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fd ffd2 	bl	8002604 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e095      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	4b4e      	ldr	r3, [pc, #312]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 020c 	and.w	r2, r3, #12
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d1eb      	bne.n	800465c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d023      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a42      	ldr	r2, [pc, #264]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046b4:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046bc:	4a3b      	ldr	r2, [pc, #236]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4936      	ldr	r1, [pc, #216]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
 80046d6:	e008      	b.n	80046ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d105      	bne.n	80046ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4a32      	ldr	r2, [pc, #200]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 80046e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ea:	4b2f      	ldr	r3, [pc, #188]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d21d      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f8:	4b2b      	ldr	r3, [pc, #172]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f023 020f 	bic.w	r2, r3, #15
 8004700:	4929      	ldr	r1, [pc, #164]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004708:	f7fd ff7c 	bl	8002604 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004710:	f7fd ff78 	bl	8002604 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e03b      	b.n	800479e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d1ed      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004740:	4b1a      	ldr	r3, [pc, #104]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4917      	ldr	r1, [pc, #92]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800475e:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	490f      	ldr	r1, [pc, #60]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004772:	f000 f825 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004776:	4602      	mov	r2, r0
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <HAL_RCC_ClockConfig+0x264>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	490c      	ldr	r1, [pc, #48]	@ (80047b4 <HAL_RCC_ClockConfig+0x26c>)
 8004784:	5ccb      	ldrb	r3, [r1, r3]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <HAL_RCC_ClockConfig+0x270>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004792:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <HAL_RCC_ClockConfig+0x274>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd fee8 	bl	800256c <HAL_InitTick>
 800479c:	4603      	mov	r3, r0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	04c4b400 	.word	0x04c4b400
 80047b4:	080062f0 	.word	0x080062f0
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d102      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d2:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e047      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047d8:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d102      	bne.n	80047ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e4:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e03e      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ea:	4b23      	ldr	r3, [pc, #140]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d136      	bne.n	8004864 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047f6:	4b20      	ldr	r3, [pc, #128]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004800:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3301      	adds	r3, #1
 800480c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d10c      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004814:	4a1a      	ldr	r2, [pc, #104]	@ (8004880 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800481e:	68d2      	ldr	r2, [r2, #12]
 8004820:	0a12      	lsrs	r2, r2, #8
 8004822:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	617b      	str	r3, [r7, #20]
      break;
 800482c:	e00c      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800482e:	4a13      	ldr	r2, [pc, #76]	@ (800487c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	4a10      	ldr	r2, [pc, #64]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004838:	68d2      	ldr	r2, [r2, #12]
 800483a:	0a12      	lsrs	r2, r2, #8
 800483c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
      break;
 8004846:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	0e5b      	lsrs	r3, r3, #25
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e001      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004868:	693b      	ldr	r3, [r7, #16]
}
 800486a:	4618      	mov	r0, r3
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	@ (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000000 	.word	0x20000000

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4904      	ldr	r1, [pc, #16]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08006300 	.word	0x08006300

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048cc:	f7ff ffda 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0adb      	lsrs	r3, r3, #11
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4904      	ldr	r1, [pc, #16]	@ (80048f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	08006300 	.word	0x08006300

080048f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004974 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d10c      	bne.n	8004932 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	4a14      	ldr	r2, [pc, #80]	@ (8004974 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004922:	68d2      	ldr	r2, [r2, #12]
 8004924:	0a12      	lsrs	r2, r2, #8
 8004926:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
    break;
 8004930:	e00c      	b.n	800494c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004932:	4a12      	ldr	r2, [pc, #72]	@ (800497c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	4a0e      	ldr	r2, [pc, #56]	@ (8004974 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	0a12      	lsrs	r2, r2, #8
 8004940:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]
    break;
 800494a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	0e5b      	lsrs	r3, r3, #25
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	3301      	adds	r3, #1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004966:	687b      	ldr	r3, [r7, #4]
}
 8004968:	4618      	mov	r0, r3
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40021000 	.word	0x40021000
 8004978:	007a1200 	.word	0x007a1200
 800497c:	00f42400 	.word	0x00f42400

08004980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004988:	2300      	movs	r3, #0
 800498a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800498c:	2300      	movs	r3, #0
 800498e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8098 	beq.w	8004ace <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800499e:	2300      	movs	r3, #0
 80049a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a2:	4b43      	ldr	r3, [pc, #268]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	4b40      	ldr	r3, [pc, #256]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ba:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c6:	2301      	movs	r3, #1
 80049c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ca:	4b3a      	ldr	r3, [pc, #232]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a39      	ldr	r2, [pc, #228]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049d6:	f7fd fe15 	bl	8002604 <HAL_GetTick>
 80049da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049dc:	e009      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fd fe11 	bl	8002604 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	74fb      	strb	r3, [r7, #19]
        break;
 80049f0:	e005      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ef      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d159      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a04:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d019      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a20:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a2c:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a32:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a42:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a4c:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd fdd1 	bl	8002604 <HAL_GetTick>
 8004a62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a64:	e00b      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd fdcd 	bl	8002604 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d902      	bls.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a7c:	e006      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ec      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004aa8:	e008      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	74bb      	strb	r3, [r7, #18]
 8004aae:	e005      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004abc:	7c7b      	ldrb	r3, [r7, #17]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac2:	4ba6      	ldr	r3, [pc, #664]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	4aa5      	ldr	r2, [pc, #660]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004acc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ada:	4ba0      	ldr	r3, [pc, #640]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	f023 0203 	bic.w	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	499c      	ldr	r1, [pc, #624]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004afc:	4b97      	ldr	r3, [pc, #604]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f023 020c 	bic.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4994      	ldr	r1, [pc, #592]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	498b      	ldr	r1, [pc, #556]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b40:	4b86      	ldr	r3, [pc, #536]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	4983      	ldr	r1, [pc, #524]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b62:	4b7e      	ldr	r3, [pc, #504]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	497a      	ldr	r1, [pc, #488]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b84:	4b75      	ldr	r3, [pc, #468]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	4972      	ldr	r1, [pc, #456]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4969      	ldr	r1, [pc, #420]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc8:	4b64      	ldr	r3, [pc, #400]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	4961      	ldr	r1, [pc, #388]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bea:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	4958      	ldr	r1, [pc, #352]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c0c:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1a:	4950      	ldr	r1, [pc, #320]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a4a      	ldr	r2, [pc, #296]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c44:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4942      	ldr	r1, [pc, #264]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c62:	d105      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b3d      	ldr	r3, [pc, #244]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a3c      	ldr	r2, [pc, #240]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c7c:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	4934      	ldr	r1, [pc, #208]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d015      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cb4:	4b29      	ldr	r3, [pc, #164]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc2:	4926      	ldr	r1, [pc, #152]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd2:	d105      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d015      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cec:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	4918      	ldr	r1, [pc, #96]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0c:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a12      	ldr	r2, [pc, #72]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d015      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d32:	490a      	ldr	r1, [pc, #40]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d42:	d105      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4a04      	ldr	r2, [pc, #16]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d50:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000

08004d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e042      	b.n	8004df8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fd fa71 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2224      	movs	r2, #36	@ 0x24
 8004d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0201 	bic.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fca2 	bl	80056f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9d3 	bl	800515c <UART_SetConfig>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e01b      	b.n	8004df8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fd21 	bl	8005838 <UART_CheckIdleState>
 8004df6:	4603      	mov	r3, r0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e04a      	b.n	8004ea8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fd fa21 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2224      	movs	r2, #36	@ 0x24
 8004e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fc52 	bl	80056f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f983 	bl	800515c <UART_SetConfig>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e023      	b.n	8004ea8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fcc9 	bl	8005838 <UART_CheckIdleState>
 8004ea6:	4603      	mov	r3, r0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	@ 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d17b      	bne.n	8004fc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Transmit+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e074      	b.n	8004fc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	@ 0x21
 8004ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fd fb8b 	bl	8002604 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f08:	d108      	bne.n	8004f1c <HAL_UART_Transmit+0x6c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e003      	b.n	8004f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f24:	e030      	b.n	8004f88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fd2b 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e03d      	b.n	8004fc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	3302      	adds	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e007      	b.n	8004f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1c8      	bne.n	8004f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2140      	movs	r1, #64	@ 0x40
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fcf4 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e006      	b.n	8004fc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f040 80b5 	bne.w	8005152 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Receive+0x28>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0ad      	b.n	8005154 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2222      	movs	r2, #34	@ 0x22
 8005004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800500e:	f7fd faf9 	bl	8002604 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502c:	d10e      	bne.n	800504c <HAL_UART_Receive+0x80>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <HAL_UART_Receive+0x76>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800503c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005040:	e02d      	b.n	800509e <HAL_UART_Receive+0xd2>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22ff      	movs	r2, #255	@ 0xff
 8005046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800504a:	e028      	b.n	800509e <HAL_UART_Receive+0xd2>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <HAL_UART_Receive+0xa4>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_UART_Receive+0x9a>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	22ff      	movs	r2, #255	@ 0xff
 8005060:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005064:	e01b      	b.n	800509e <HAL_UART_Receive+0xd2>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	227f      	movs	r2, #127	@ 0x7f
 800506a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800506e:	e016      	b.n	800509e <HAL_UART_Receive+0xd2>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005078:	d10d      	bne.n	8005096 <HAL_UART_Receive+0xca>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <HAL_UART_Receive+0xc0>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	227f      	movs	r2, #127	@ 0x7f
 8005086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800508a:	e008      	b.n	800509e <HAL_UART_Receive+0xd2>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	223f      	movs	r2, #63	@ 0x3f
 8005090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005094:	e003      	b.n	800509e <HAL_UART_Receive+0xd2>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ae:	d108      	bne.n	80050c2 <HAL_UART_Receive+0xf6>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e003      	b.n	80050ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050ca:	e036      	b.n	800513a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2120      	movs	r1, #32
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fc58 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e032      	b.n	8005154 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	8a7b      	ldrh	r3, [r7, #18]
 80050fe:	4013      	ands	r3, r2
 8005100:	b29a      	uxth	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	3302      	adds	r3, #2
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e00c      	b.n	8005128 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	b2da      	uxtb	r2, r3
 8005116:	8a7b      	ldrh	r3, [r7, #18]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4013      	ands	r3, r2
 800511c:	b2da      	uxtb	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1c2      	bne.n	80050cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800515c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005160:	b08c      	sub	sp, #48	@ 0x30
 8005162:	af00      	add	r7, sp, #0
 8005164:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	431a      	orrs	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4313      	orrs	r3, r2
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4bab      	ldr	r3, [pc, #684]	@ (8005438 <UART_SetConfig+0x2dc>)
 800518c:	4013      	ands	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005194:	430b      	orrs	r3, r1
 8005196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4aa0      	ldr	r2, [pc, #640]	@ (800543c <UART_SetConfig+0x2e0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c4:	4313      	orrs	r3, r2
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051dc:	430b      	orrs	r3, r1
 80051de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	f023 010f 	bic.w	r1, r3, #15
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a91      	ldr	r2, [pc, #580]	@ (8005440 <UART_SetConfig+0x2e4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <UART_SetConfig+0xf0>
 8005200:	4b90      	ldr	r3, [pc, #576]	@ (8005444 <UART_SetConfig+0x2e8>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b03      	cmp	r3, #3
 800520c:	d81a      	bhi.n	8005244 <UART_SetConfig+0xe8>
 800520e:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <UART_SetConfig+0xb8>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005225 	.word	0x08005225
 8005218:	08005235 	.word	0x08005235
 800521c:	0800522d 	.word	0x0800522d
 8005220:	0800523d 	.word	0x0800523d
 8005224:	2301      	movs	r3, #1
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522a:	e0d6      	b.n	80053da <UART_SetConfig+0x27e>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e0d2      	b.n	80053da <UART_SetConfig+0x27e>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523a:	e0ce      	b.n	80053da <UART_SetConfig+0x27e>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e0ca      	b.n	80053da <UART_SetConfig+0x27e>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e0c6      	b.n	80053da <UART_SetConfig+0x27e>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7d      	ldr	r2, [pc, #500]	@ (8005448 <UART_SetConfig+0x2ec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d138      	bne.n	80052c8 <UART_SetConfig+0x16c>
 8005256:	4b7b      	ldr	r3, [pc, #492]	@ (8005444 <UART_SetConfig+0x2e8>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b0c      	cmp	r3, #12
 8005262:	d82d      	bhi.n	80052c0 <UART_SetConfig+0x164>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0x110>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052a9 	.word	0x080052a9
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a6:	e098      	b.n	80053da <UART_SetConfig+0x27e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ae:	e094      	b.n	80053da <UART_SetConfig+0x27e>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b6:	e090      	b.n	80053da <UART_SetConfig+0x27e>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052be:	e08c      	b.n	80053da <UART_SetConfig+0x27e>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c6:	e088      	b.n	80053da <UART_SetConfig+0x27e>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a5f      	ldr	r2, [pc, #380]	@ (800544c <UART_SetConfig+0x2f0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d125      	bne.n	800531e <UART_SetConfig+0x1c2>
 80052d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005444 <UART_SetConfig+0x2e8>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052dc:	2b30      	cmp	r3, #48	@ 0x30
 80052de:	d016      	beq.n	800530e <UART_SetConfig+0x1b2>
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d818      	bhi.n	8005316 <UART_SetConfig+0x1ba>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d00a      	beq.n	80052fe <UART_SetConfig+0x1a2>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d814      	bhi.n	8005316 <UART_SetConfig+0x1ba>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <UART_SetConfig+0x19a>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d008      	beq.n	8005306 <UART_SetConfig+0x1aa>
 80052f4:	e00f      	b.n	8005316 <UART_SetConfig+0x1ba>
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fc:	e06d      	b.n	80053da <UART_SetConfig+0x27e>
 80052fe:	2302      	movs	r3, #2
 8005300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005304:	e069      	b.n	80053da <UART_SetConfig+0x27e>
 8005306:	2304      	movs	r3, #4
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530c:	e065      	b.n	80053da <UART_SetConfig+0x27e>
 800530e:	2308      	movs	r3, #8
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005314:	e061      	b.n	80053da <UART_SetConfig+0x27e>
 8005316:	2310      	movs	r3, #16
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531c:	e05d      	b.n	80053da <UART_SetConfig+0x27e>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4b      	ldr	r2, [pc, #300]	@ (8005450 <UART_SetConfig+0x2f4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d125      	bne.n	8005374 <UART_SetConfig+0x218>
 8005328:	4b46      	ldr	r3, [pc, #280]	@ (8005444 <UART_SetConfig+0x2e8>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005332:	2bc0      	cmp	r3, #192	@ 0xc0
 8005334:	d016      	beq.n	8005364 <UART_SetConfig+0x208>
 8005336:	2bc0      	cmp	r3, #192	@ 0xc0
 8005338:	d818      	bhi.n	800536c <UART_SetConfig+0x210>
 800533a:	2b80      	cmp	r3, #128	@ 0x80
 800533c:	d00a      	beq.n	8005354 <UART_SetConfig+0x1f8>
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d814      	bhi.n	800536c <UART_SetConfig+0x210>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <UART_SetConfig+0x1f0>
 8005346:	2b40      	cmp	r3, #64	@ 0x40
 8005348:	d008      	beq.n	800535c <UART_SetConfig+0x200>
 800534a:	e00f      	b.n	800536c <UART_SetConfig+0x210>
 800534c:	2300      	movs	r3, #0
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e042      	b.n	80053da <UART_SetConfig+0x27e>
 8005354:	2302      	movs	r3, #2
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535a:	e03e      	b.n	80053da <UART_SetConfig+0x27e>
 800535c:	2304      	movs	r3, #4
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e03a      	b.n	80053da <UART_SetConfig+0x27e>
 8005364:	2308      	movs	r3, #8
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e036      	b.n	80053da <UART_SetConfig+0x27e>
 800536c:	2310      	movs	r3, #16
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e032      	b.n	80053da <UART_SetConfig+0x27e>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a30      	ldr	r2, [pc, #192]	@ (800543c <UART_SetConfig+0x2e0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d12a      	bne.n	80053d4 <UART_SetConfig+0x278>
 800537e:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <UART_SetConfig+0x2e8>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800538c:	d01a      	beq.n	80053c4 <UART_SetConfig+0x268>
 800538e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005392:	d81b      	bhi.n	80053cc <UART_SetConfig+0x270>
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005398:	d00c      	beq.n	80053b4 <UART_SetConfig+0x258>
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539e:	d815      	bhi.n	80053cc <UART_SetConfig+0x270>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <UART_SetConfig+0x250>
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x260>
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x270>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e012      	b.n	80053da <UART_SetConfig+0x27e>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	e00e      	b.n	80053da <UART_SetConfig+0x27e>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c2:	e00a      	b.n	80053da <UART_SetConfig+0x27e>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e006      	b.n	80053da <UART_SetConfig+0x27e>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e002      	b.n	80053da <UART_SetConfig+0x27e>
 80053d4:	2310      	movs	r3, #16
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a17      	ldr	r2, [pc, #92]	@ (800543c <UART_SetConfig+0x2e0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	f040 80a8 	bne.w	8005536 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d834      	bhi.n	8005458 <UART_SetConfig+0x2fc>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0x298>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005459 	.word	0x08005459
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005459 	.word	0x08005459
 8005404:	08005427 	.word	0x08005427
 8005408:	08005459 	.word	0x08005459
 800540c:	08005459 	.word	0x08005459
 8005410:	08005459 	.word	0x08005459
 8005414:	0800542f 	.word	0x0800542f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7ff fa40 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 800541c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800541e:	e021      	b.n	8005464 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <UART_SetConfig+0x2f8>)
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005424:	e01e      	b.n	8005464 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005426:	f7ff f9cb 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800542a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800542c:	e01a      	b.n	8005464 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005434:	e016      	b.n	8005464 <UART_SetConfig+0x308>
 8005436:	bf00      	nop
 8005438:	cfff69f3 	.word	0xcfff69f3
 800543c:	40008000 	.word	0x40008000
 8005440:	40013800 	.word	0x40013800
 8005444:	40021000 	.word	0x40021000
 8005448:	40004400 	.word	0x40004400
 800544c:	40004800 	.word	0x40004800
 8005450:	40004c00 	.word	0x40004c00
 8005454:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005462:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 812a 	beq.w	80056c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	4a9e      	ldr	r2, [pc, #632]	@ (80056ec <UART_SetConfig+0x590>)
 8005472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005476:	461a      	mov	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	fbb3 f3f2 	udiv	r3, r3, r2
 800547e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	429a      	cmp	r2, r3
 800548e:	d305      	bcc.n	800549c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	429a      	cmp	r2, r3
 800549a:	d903      	bls.n	80054a4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054a2:	e10d      	b.n	80056c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	2200      	movs	r2, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	60fa      	str	r2, [r7, #12]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	4a8e      	ldr	r2, [pc, #568]	@ (80056ec <UART_SetConfig+0x590>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054c6:	f7fa fea7 	bl	8000218 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	020b      	lsls	r3, r1, #8
 80054dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054e0:	0202      	lsls	r2, r0, #8
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	6849      	ldr	r1, [r1, #4]
 80054e6:	0849      	lsrs	r1, r1, #1
 80054e8:	2000      	movs	r0, #0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4605      	mov	r5, r0
 80054ee:	eb12 0804 	adds.w	r8, r2, r4
 80054f2:	eb43 0905 	adc.w	r9, r3, r5
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	469a      	mov	sl, r3
 80054fe:	4693      	mov	fp, r2
 8005500:	4652      	mov	r2, sl
 8005502:	465b      	mov	r3, fp
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	f7fa fe86 	bl	8000218 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800551a:	d308      	bcc.n	800552e <UART_SetConfig+0x3d2>
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005522:	d204      	bcs.n	800552e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	60da      	str	r2, [r3, #12]
 800552c:	e0c8      	b.n	80056c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005534:	e0c4      	b.n	80056c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553e:	d167      	bne.n	8005610 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005544:	2b08      	cmp	r3, #8
 8005546:	d828      	bhi.n	800559a <UART_SetConfig+0x43e>
 8005548:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <UART_SetConfig+0x3f4>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	0800559b 	.word	0x0800559b
 8005560:	0800558b 	.word	0x0800558b
 8005564:	0800559b 	.word	0x0800559b
 8005568:	0800559b 	.word	0x0800559b
 800556c:	0800559b 	.word	0x0800559b
 8005570:	08005593 	.word	0x08005593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005574:	f7ff f992 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8005578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557a:	e014      	b.n	80055a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7ff f9a4 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8005580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005582:	e010      	b.n	80055a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005584:	4b5a      	ldr	r3, [pc, #360]	@ (80056f0 <UART_SetConfig+0x594>)
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005588:	e00d      	b.n	80055a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558a:	f7ff f919 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800558e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005590:	e009      	b.n	80055a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005598:	e005      	b.n	80055a6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8089 	beq.w	80056c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	4a4e      	ldr	r2, [pc, #312]	@ (80056ec <UART_SetConfig+0x590>)
 80055b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d916      	bls.n	8005608 <UART_SetConfig+0x4ac>
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d212      	bcs.n	8005608 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f023 030f 	bic.w	r3, r3, #15
 80055ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	8bfb      	ldrh	r3, [r7, #30]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	8bfa      	ldrh	r2, [r7, #30]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e05b      	b.n	80056c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800560e:	e057      	b.n	80056c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005610:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005614:	2b08      	cmp	r3, #8
 8005616:	d828      	bhi.n	800566a <UART_SetConfig+0x50e>
 8005618:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <UART_SetConfig+0x4c4>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	0800566b 	.word	0x0800566b
 8005630:	0800565b 	.word	0x0800565b
 8005634:	0800566b 	.word	0x0800566b
 8005638:	0800566b 	.word	0x0800566b
 800563c:	0800566b 	.word	0x0800566b
 8005640:	08005663 	.word	0x08005663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7ff f92a 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8005648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800564a:	e014      	b.n	8005676 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7ff f93c 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8005650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005652:	e010      	b.n	8005676 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005654:	4b26      	ldr	r3, [pc, #152]	@ (80056f0 <UART_SetConfig+0x594>)
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005658:	e00d      	b.n	8005676 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565a:	f7ff f8b1 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800565e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005660:	e009      	b.n	8005676 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005668:	e005      	b.n	8005676 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005674:	bf00      	nop
    }

    if (pclk != 0U)
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d021      	beq.n	80056c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <UART_SetConfig+0x590>)
 8005682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005686:	461a      	mov	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	fbb3 f2f2 	udiv	r2, r3, r2
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	441a      	add	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d909      	bls.n	80056ba <UART_SetConfig+0x55e>
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ac:	d205      	bcs.n	80056ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
 80056b8:	e002      	b.n	80056c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3730      	adds	r7, #48	@ 0x30
 80056e4:	46bd      	mov	sp, r7
 80056e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ea:	bf00      	nop
 80056ec:	08006308 	.word	0x08006308
 80056f0:	00f42400 	.word	0x00f42400

080056f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01a      	beq.n	800580a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f2:	d10a      	bne.n	800580a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b098      	sub	sp, #96	@ 0x60
 800583c:	af02      	add	r7, sp, #8
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005848:	f7fc fedc 	bl	8002604 <HAL_GetTick>
 800584c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d12f      	bne.n	80058bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800585c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005864:	2200      	movs	r2, #0
 8005866:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f88e 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d022      	beq.n	80058bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588a:	653b      	str	r3, [r7, #80]	@ 0x50
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005894:	647b      	str	r3, [r7, #68]	@ 0x44
 8005896:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800589a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e6      	bne.n	8005876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e063      	b.n	8005984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d149      	bne.n	800595e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d2:	2200      	movs	r2, #0
 80058d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f857 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d03c      	beq.n	800595e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	623b      	str	r3, [r7, #32]
   return(result);
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005902:	633b      	str	r3, [r7, #48]	@ 0x30
 8005904:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e6      	bne.n	80058e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	60fb      	str	r3, [r7, #12]
   return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3308      	adds	r3, #8
 8005934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005936:	61fa      	str	r2, [r7, #28]
 8005938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	617b      	str	r3, [r7, #20]
   return(result);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e5      	bne.n	8005916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e012      	b.n	8005984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3758      	adds	r7, #88	@ 0x58
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599c:	e04f      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a4:	d04b      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a6:	f7fc fe2d 	bl	8002604 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e04e      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d037      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b80      	cmp	r3, #128	@ 0x80
 80059d2:	d034      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b40      	cmp	r3, #64	@ 0x40
 80059d8:	d031      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d110      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2208      	movs	r2, #8
 80059ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f838 	bl	8005a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2208      	movs	r2, #8
 80059fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e029      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a18:	d111      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f81e 	bl	8005a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e00f      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d0a0      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b095      	sub	sp, #84	@ 0x54
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e6      	bne.n	8005a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e3      	bne.n	8005aa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d118      	bne.n	8005b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b26:	bf00      	nop
 8005b28:	3754      	adds	r7, #84	@ 0x54
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_UARTEx_EnableFifoMode+0x16>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e02b      	b.n	8005ba0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	@ 0x24
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005b7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8c3 	bl	8005d14 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_UARTEx_DisableFifoMode+0x16>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e027      	b.n	8005c0e <HAL_UARTEx_DisableFifoMode+0x66>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	@ 0x24
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e02d      	b.n	8005c8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2224      	movs	r2, #36	@ 0x24
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f850 	bl	8005d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e02d      	b.n	8005d0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2224      	movs	r2, #36	@ 0x24
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f812 	bl	8005d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d34:	e031      	b.n	8005d9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d36:	2308      	movs	r3, #8
 8005d38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	0e5b      	lsrs	r3, r3, #25
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	0f5b      	lsrs	r3, r3, #29
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	7b3a      	ldrb	r2, [r7, #12]
 8005d62:	4911      	ldr	r1, [pc, #68]	@ (8005da8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d64:	5c8a      	ldrb	r2, [r1, r2]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d6a:	7b3a      	ldrb	r2, [r7, #12]
 8005d6c:	490f      	ldr	r1, [pc, #60]	@ (8005dac <UARTEx_SetNbDataToProcess+0x98>)
 8005d6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	7b7a      	ldrb	r2, [r7, #13]
 8005d80:	4909      	ldr	r1, [pc, #36]	@ (8005da8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d82:	5c8a      	ldrb	r2, [r1, r2]
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d88:	7b7a      	ldrb	r2, [r7, #13]
 8005d8a:	4908      	ldr	r1, [pc, #32]	@ (8005dac <UARTEx_SetNbDataToProcess+0x98>)
 8005d8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	08006320 	.word	0x08006320
 8005dac:	08006328 	.word	0x08006328

08005db0 <_ZdlPvj>:
 8005db0:	f000 b81a 	b.w	8005de8 <_ZdlPv>

08005db4 <_Znwj>:
 8005db4:	2801      	cmp	r0, #1
 8005db6:	bf38      	it	cc
 8005db8:	2001      	movcc	r0, #1
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f824 	bl	8005e0c <malloc>
 8005dc4:	b100      	cbz	r0, 8005dc8 <_Znwj+0x14>
 8005dc6:	bd10      	pop	{r4, pc}
 8005dc8:	f000 f810 	bl	8005dec <_ZSt15get_new_handlerv>
 8005dcc:	b908      	cbnz	r0, 8005dd2 <_Znwj+0x1e>
 8005dce:	f000 f815 	bl	8005dfc <abort>
 8005dd2:	4780      	blx	r0
 8005dd4:	e7f3      	b.n	8005dbe <_Znwj+0xa>

08005dd6 <_ZSt17__throw_bad_allocv>:
 8005dd6:	b508      	push	{r3, lr}
 8005dd8:	f000 f810 	bl	8005dfc <abort>

08005ddc <_ZSt28__throw_bad_array_new_lengthv>:
 8005ddc:	b508      	push	{r3, lr}
 8005dde:	f000 f80d 	bl	8005dfc <abort>

08005de2 <_ZSt20__throw_length_errorPKc>:
 8005de2:	b508      	push	{r3, lr}
 8005de4:	f000 f80a 	bl	8005dfc <abort>

08005de8 <_ZdlPv>:
 8005de8:	f000 b818 	b.w	8005e1c <free>

08005dec <_ZSt15get_new_handlerv>:
 8005dec:	4b02      	ldr	r3, [pc, #8]	@ (8005df8 <_ZSt15get_new_handlerv+0xc>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f3bf 8f5b 	dmb	ish
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000274 	.word	0x20000274

08005dfc <abort>:
 8005dfc:	b508      	push	{r3, lr}
 8005dfe:	2006      	movs	r0, #6
 8005e00:	f000 f90c 	bl	800601c <raise>
 8005e04:	2001      	movs	r0, #1
 8005e06:	f7fc fb1b 	bl	8002440 <_exit>
	...

08005e0c <malloc>:
 8005e0c:	4b02      	ldr	r3, [pc, #8]	@ (8005e18 <malloc+0xc>)
 8005e0e:	4601      	mov	r1, r0
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	f000 b82d 	b.w	8005e70 <_malloc_r>
 8005e16:	bf00      	nop
 8005e18:	2000000c 	.word	0x2000000c

08005e1c <free>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	@ (8005e28 <free+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f000 b953 	b.w	80060cc <_free_r>
 8005e26:	bf00      	nop
 8005e28:	2000000c 	.word	0x2000000c

08005e2c <sbrk_aligned>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e6c <sbrk_aligned+0x40>)
 8005e30:	460c      	mov	r4, r1
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	4605      	mov	r5, r0
 8005e36:	b911      	cbnz	r1, 8005e3e <sbrk_aligned+0x12>
 8005e38:	f000 f90c 	bl	8006054 <_sbrk_r>
 8005e3c:	6030      	str	r0, [r6, #0]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 f907 	bl	8006054 <_sbrk_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d103      	bne.n	8005e52 <sbrk_aligned+0x26>
 8005e4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	1cc4      	adds	r4, r0, #3
 8005e54:	f024 0403 	bic.w	r4, r4, #3
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d0f8      	beq.n	8005e4e <sbrk_aligned+0x22>
 8005e5c:	1a21      	subs	r1, r4, r0
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 f8f8 	bl	8006054 <_sbrk_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d1f2      	bne.n	8005e4e <sbrk_aligned+0x22>
 8005e68:	e7ef      	b.n	8005e4a <sbrk_aligned+0x1e>
 8005e6a:	bf00      	nop
 8005e6c:	20000278 	.word	0x20000278

08005e70 <_malloc_r>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	1ccd      	adds	r5, r1, #3
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	4606      	mov	r6, r0
 8005e86:	db01      	blt.n	8005e8c <_malloc_r+0x1c>
 8005e88:	42a9      	cmp	r1, r5
 8005e8a:	d904      	bls.n	8005e96 <_malloc_r+0x26>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	2000      	movs	r0, #0
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f6c <_malloc_r+0xfc>
 8005e9a:	f000 f869 	bl	8005f70 <__malloc_lock>
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	bb44      	cbnz	r4, 8005ef8 <_malloc_r+0x88>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ffbf 	bl	8005e2c <sbrk_aligned>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	d158      	bne.n	8005f66 <_malloc_r+0xf6>
 8005eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005eb8:	4627      	mov	r7, r4
 8005eba:	2f00      	cmp	r7, #0
 8005ebc:	d143      	bne.n	8005f46 <_malloc_r+0xd6>
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	d04b      	beq.n	8005f5a <_malloc_r+0xea>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	eb04 0903 	add.w	r9, r4, r3
 8005ecc:	f000 f8c2 	bl	8006054 <_sbrk_r>
 8005ed0:	4581      	cmp	r9, r0
 8005ed2:	d142      	bne.n	8005f5a <_malloc_r+0xea>
 8005ed4:	6821      	ldr	r1, [r4, #0]
 8005ed6:	1a6d      	subs	r5, r5, r1
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ffa6 	bl	8005e2c <sbrk_aligned>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d03a      	beq.n	8005f5a <_malloc_r+0xea>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	442b      	add	r3, r5
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	f8d8 3000 	ldr.w	r3, [r8]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	bb62      	cbnz	r2, 8005f4c <_malloc_r+0xdc>
 8005ef2:	f8c8 7000 	str.w	r7, [r8]
 8005ef6:	e00f      	b.n	8005f18 <_malloc_r+0xa8>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	1b52      	subs	r2, r2, r5
 8005efc:	d420      	bmi.n	8005f40 <_malloc_r+0xd0>
 8005efe:	2a0b      	cmp	r2, #11
 8005f00:	d917      	bls.n	8005f32 <_malloc_r+0xc2>
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	6059      	strne	r1, [r3, #4]
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	bf08      	it	eq
 8005f10:	f8c8 1000 	streq.w	r1, [r8]
 8005f14:	5162      	str	r2, [r4, r5]
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f82f 	bl	8005f7c <__malloc_unlock>
 8005f1e:	f104 000b 	add.w	r0, r4, #11
 8005f22:	1d23      	adds	r3, r4, #4
 8005f24:	f020 0007 	bic.w	r0, r0, #7
 8005f28:	1ac2      	subs	r2, r0, r3
 8005f2a:	bf1c      	itt	ne
 8005f2c:	1a1b      	subne	r3, r3, r0
 8005f2e:	50a3      	strne	r3, [r4, r2]
 8005f30:	e7af      	b.n	8005e92 <_malloc_r+0x22>
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	bf0c      	ite	eq
 8005f38:	f8c8 2000 	streq.w	r2, [r8]
 8005f3c:	605a      	strne	r2, [r3, #4]
 8005f3e:	e7eb      	b.n	8005f18 <_malloc_r+0xa8>
 8005f40:	4623      	mov	r3, r4
 8005f42:	6864      	ldr	r4, [r4, #4]
 8005f44:	e7ae      	b.n	8005ea4 <_malloc_r+0x34>
 8005f46:	463c      	mov	r4, r7
 8005f48:	687f      	ldr	r7, [r7, #4]
 8005f4a:	e7b6      	b.n	8005eba <_malloc_r+0x4a>
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d1fb      	bne.n	8005f4c <_malloc_r+0xdc>
 8005f54:	2300      	movs	r3, #0
 8005f56:	6053      	str	r3, [r2, #4]
 8005f58:	e7de      	b.n	8005f18 <_malloc_r+0xa8>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f80c 	bl	8005f7c <__malloc_unlock>
 8005f64:	e794      	b.n	8005e90 <_malloc_r+0x20>
 8005f66:	6005      	str	r5, [r0, #0]
 8005f68:	e7d6      	b.n	8005f18 <_malloc_r+0xa8>
 8005f6a:	bf00      	nop
 8005f6c:	2000027c 	.word	0x2000027c

08005f70 <__malloc_lock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__malloc_lock+0x8>)
 8005f72:	f000 b8a9 	b.w	80060c8 <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	200003bc 	.word	0x200003bc

08005f7c <__malloc_unlock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	@ (8005f84 <__malloc_unlock+0x8>)
 8005f7e:	f000 b8a4 	b.w	80060ca <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	200003bc 	.word	0x200003bc

08005f88 <memmove>:
 8005f88:	4288      	cmp	r0, r1
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	eb01 0402 	add.w	r4, r1, r2
 8005f90:	d902      	bls.n	8005f98 <memmove+0x10>
 8005f92:	4284      	cmp	r4, r0
 8005f94:	4623      	mov	r3, r4
 8005f96:	d807      	bhi.n	8005fa8 <memmove+0x20>
 8005f98:	1e43      	subs	r3, r0, #1
 8005f9a:	42a1      	cmp	r1, r4
 8005f9c:	d008      	beq.n	8005fb0 <memmove+0x28>
 8005f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa6:	e7f8      	b.n	8005f9a <memmove+0x12>
 8005fa8:	4402      	add	r2, r0
 8005faa:	4601      	mov	r1, r0
 8005fac:	428a      	cmp	r2, r1
 8005fae:	d100      	bne.n	8005fb2 <memmove+0x2a>
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fba:	e7f7      	b.n	8005fac <memmove+0x24>

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <_raise_r>:
 8005fcc:	291f      	cmp	r1, #31
 8005fce:	b538      	push	{r3, r4, r5, lr}
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	d904      	bls.n	8005fe0 <_raise_r+0x14>
 8005fd6:	2316      	movs	r3, #22
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005fe2:	b112      	cbz	r2, 8005fea <_raise_r+0x1e>
 8005fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fe8:	b94b      	cbnz	r3, 8005ffe <_raise_r+0x32>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 f830 	bl	8006050 <_getpid_r>
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ffa:	f000 b817 	b.w	800602c <_kill_r>
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d00a      	beq.n	8006018 <_raise_r+0x4c>
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	d103      	bne.n	800600e <_raise_r+0x42>
 8006006:	2316      	movs	r3, #22
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	2001      	movs	r0, #1
 800600c:	e7e7      	b.n	8005fde <_raise_r+0x12>
 800600e:	2100      	movs	r1, #0
 8006010:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006014:	4620      	mov	r0, r4
 8006016:	4798      	blx	r3
 8006018:	2000      	movs	r0, #0
 800601a:	e7e0      	b.n	8005fde <_raise_r+0x12>

0800601c <raise>:
 800601c:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <raise+0xc>)
 800601e:	4601      	mov	r1, r0
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	f7ff bfd3 	b.w	8005fcc <_raise_r>
 8006026:	bf00      	nop
 8006028:	2000000c 	.word	0x2000000c

0800602c <_kill_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	@ (800604c <_kill_r+0x20>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	f7fc f9f1 	bl	8002420 <_kill>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d102      	bne.n	8006048 <_kill_r+0x1c>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	b103      	cbz	r3, 8006048 <_kill_r+0x1c>
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	bd38      	pop	{r3, r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	200003b8 	.word	0x200003b8

08006050 <_getpid_r>:
 8006050:	f7fc b9de 	b.w	8002410 <_getpid>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	@ (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fc f9fa 	bl	8002458 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	200003b8 	.word	0x200003b8

08006074 <__errno>:
 8006074:	4b01      	ldr	r3, [pc, #4]	@ (800607c <__errno+0x8>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000000c 	.word	0x2000000c

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4d0d      	ldr	r5, [pc, #52]	@ (80060b8 <__libc_init_array+0x38>)
 8006084:	4c0d      	ldr	r4, [pc, #52]	@ (80060bc <__libc_init_array+0x3c>)
 8006086:	1b64      	subs	r4, r4, r5
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	2600      	movs	r6, #0
 800608c:	42a6      	cmp	r6, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	4d0b      	ldr	r5, [pc, #44]	@ (80060c0 <__libc_init_array+0x40>)
 8006092:	4c0c      	ldr	r4, [pc, #48]	@ (80060c4 <__libc_init_array+0x44>)
 8006094:	f000 f864 	bl	8006160 <_init>
 8006098:	1b64      	subs	r4, r4, r5
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	2600      	movs	r6, #0
 800609e:	42a6      	cmp	r6, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a8:	4798      	blx	r3
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b2:	4798      	blx	r3
 80060b4:	3601      	adds	r6, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	08006338 	.word	0x08006338
 80060bc:	08006338 	.word	0x08006338
 80060c0:	08006338 	.word	0x08006338
 80060c4:	0800633c 	.word	0x0800633c

080060c8 <__retarget_lock_acquire_recursive>:
 80060c8:	4770      	bx	lr

080060ca <__retarget_lock_release_recursive>:
 80060ca:	4770      	bx	lr

080060cc <_free_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4605      	mov	r5, r0
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d041      	beq.n	8006158 <_free_r+0x8c>
 80060d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d8:	1f0c      	subs	r4, r1, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfb8      	it	lt
 80060de:	18e4      	addlt	r4, r4, r3
 80060e0:	f7ff ff46 	bl	8005f70 <__malloc_lock>
 80060e4:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <_free_r+0x90>)
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	b933      	cbnz	r3, 80060f8 <_free_r+0x2c>
 80060ea:	6063      	str	r3, [r4, #4]
 80060ec:	6014      	str	r4, [r2, #0]
 80060ee:	4628      	mov	r0, r5
 80060f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f4:	f7ff bf42 	b.w	8005f7c <__malloc_unlock>
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d908      	bls.n	800610e <_free_r+0x42>
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	1821      	adds	r1, r4, r0
 8006100:	428b      	cmp	r3, r1
 8006102:	bf01      	itttt	eq
 8006104:	6819      	ldreq	r1, [r3, #0]
 8006106:	685b      	ldreq	r3, [r3, #4]
 8006108:	1809      	addeq	r1, r1, r0
 800610a:	6021      	streq	r1, [r4, #0]
 800610c:	e7ed      	b.n	80060ea <_free_r+0x1e>
 800610e:	461a      	mov	r2, r3
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	b10b      	cbz	r3, 8006118 <_free_r+0x4c>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d9fa      	bls.n	800610e <_free_r+0x42>
 8006118:	6811      	ldr	r1, [r2, #0]
 800611a:	1850      	adds	r0, r2, r1
 800611c:	42a0      	cmp	r0, r4
 800611e:	d10b      	bne.n	8006138 <_free_r+0x6c>
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	4401      	add	r1, r0
 8006124:	1850      	adds	r0, r2, r1
 8006126:	4283      	cmp	r3, r0
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	d1e0      	bne.n	80060ee <_free_r+0x22>
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	6053      	str	r3, [r2, #4]
 8006132:	4408      	add	r0, r1
 8006134:	6010      	str	r0, [r2, #0]
 8006136:	e7da      	b.n	80060ee <_free_r+0x22>
 8006138:	d902      	bls.n	8006140 <_free_r+0x74>
 800613a:	230c      	movs	r3, #12
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	e7d6      	b.n	80060ee <_free_r+0x22>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	1821      	adds	r1, r4, r0
 8006144:	428b      	cmp	r3, r1
 8006146:	bf04      	itt	eq
 8006148:	6819      	ldreq	r1, [r3, #0]
 800614a:	685b      	ldreq	r3, [r3, #4]
 800614c:	6063      	str	r3, [r4, #4]
 800614e:	bf04      	itt	eq
 8006150:	1809      	addeq	r1, r1, r0
 8006152:	6021      	streq	r1, [r4, #0]
 8006154:	6054      	str	r4, [r2, #4]
 8006156:	e7ca      	b.n	80060ee <_free_r+0x22>
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop
 800615c:	2000027c 	.word	0x2000027c

08006160 <_init>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr

0800616c <_fini>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr
