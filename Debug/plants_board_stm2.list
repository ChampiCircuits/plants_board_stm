
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08007438  08007438  00008438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007774  08007774  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800777c  0800777c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007784  08007784  00008784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007788  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000068  080077f0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080077f0  000094b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdcd  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003596  00000000  00000000  00025e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00029400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001309  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024603  00000000  00000000  0002bf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc20  00000000  00000000  00050564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6ef1  00000000  00000000  0006c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000707c  00000000  00000000  001430b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007420 	.word	0x08007420

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007420 	.word	0x08007420

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
{
}
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	1cf9      	adds	r1, r7, #3
 80005e0:	230a      	movs	r3, #10
 80005e2:	2201      	movs	r2, #1
 80005e4:	f005 f80e 	bl	8005604 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 010f 	add.w	r1, r7, #15
 80005f0:	230a      	movs	r3, #10
 80005f2:	2201      	movs	r2, #1
 80005f4:	f005 f894 	bl	8005720 <HAL_UART_Receive>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000608:	bf00      	nop
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f107 010f 	add.w	r1, r7, #15
 8000612:	2300      	movs	r3, #0
 8000614:	2201      	movs	r2, #1
 8000616:	f005 f883 	bl	8005720 <HAL_UART_Receive>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1ef      	bne.n	800060a <_ZN7SCServo12fflushRevBufEv+0xa>
    return;
 800062a:	bf00      	nop
}
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	460b      	mov	r3, r1
 8000640:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	121b      	asrs	r3, r3, #8
 800064a:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	121b      	asrs	r3, r3, #8
 8000654:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff ffd0 	bl	8000600 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000660:	21ff      	movs	r1, #255	@ 0xff
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f7ff ffb3 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000668:	21ff      	movs	r1, #255	@ 0xff
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff ffaf 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000670:	7afb      	ldrb	r3, [r7, #11]
 8000672:	4619      	mov	r1, r3
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff ffaa 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ffa4 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000686:	2103      	movs	r1, #3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ffa0 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 800068e:	212a      	movs	r1, #42	@ 0x2a
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ff9c 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8000696:	7cfb      	ldrb	r3, [r7, #19]
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f7ff ff97 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(posH);
 80006a0:	7cbb      	ldrb	r3, [r7, #18]
 80006a2:	4619      	mov	r1, r3
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f7ff ff92 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(velL);
 80006aa:	7c7b      	ldrb	r3, [r7, #17]
 80006ac:	4619      	mov	r1, r3
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff8d 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(velH);
 80006b4:	7c3b      	ldrb	r3, [r7, #16]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff88 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	4413      	add	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	7cfb      	ldrb	r3, [r7, #19]
 80006ca:	4413      	add	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	7cbb      	ldrb	r3, [r7, #18]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	7c7b      	ldrb	r3, [r7, #17]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	7c3b      	ldrb	r3, [r7, #16]
 80006dc:	4413      	add	r3, r2
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff6f 	bl	80005ce <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	2b10      	cmp	r3, #16
 80006f4:	d00a      	beq.n	800070c <_ZN7SCServo8WritePosEhiih+0xda>
 80006f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d106      	bne.n	800070c <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 80006fe:	2200      	movs	r2, #0
 8000700:	2106      	movs	r1, #6
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 f807 	bl	8000716 <_ZN7SCServo7ReadBufEtPh>
 8000708:	4603      	mov	r3, r0
 800070a:	e000      	b.n	800070e <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	460b      	mov	r3, r1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	897a      	ldrh	r2, [r7, #10]
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f004 fff6 	bl	8005720 <HAL_UART_Receive>
 8000734:	4603      	mov	r3, r0
 8000736:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 800073e:	897b      	ldrh	r3, [r7, #10]
 8000740:	e001      	b.n	8000746 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_ZN7SCServo16WriteLimitTroqueEhih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WriteLimitTroque(u8 ID, int MaxTroque, u8 ReturnLevel)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	72fb      	strb	r3, [r7, #11]
 800075e:	4613      	mov	r3, r2
 8000760:	72bb      	strb	r3, [r7, #10]
    int messageLength = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	617b      	str	r3, [r7, #20]
    u8 MaxTL = MaxTroque>>8;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	121b      	asrs	r3, r3, #8
 800076a:	74fb      	strb	r3, [r7, #19]
    u8 MaxTH = MaxTroque&0xff;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	74bb      	strb	r3, [r7, #18]

    fflushRevBuf();
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff ff45 	bl	8000600 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000776:	21ff      	movs	r1, #255	@ 0xff
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff ff28 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 800077e:	21ff      	movs	r1, #255	@ 0xff
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff ff24 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	4619      	mov	r1, r3
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f7ff ff1f 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff19 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 800079c:	2103      	movs	r1, #3
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff ff15 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(P_MAX_TORQUE_L);
 80007a4:	2110      	movs	r1, #16
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f7ff ff11 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(MaxTL);
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	4619      	mov	r1, r3
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff ff0c 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(MaxTH);
 80007b6:	7cbb      	ldrb	r3, [r7, #18]
 80007b8:	4619      	mov	r1, r3
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f7ff ff07 	bl	80005ce <_ZN7SCServo6PrintfEh>

    Printf((~(ID + messageLength + INST_WRITE + P_MAX_TORQUE_L + MaxTL + MaxTH))&0xFF);
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	4413      	add	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7cbb      	ldrb	r3, [r7, #18]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	f06f 0313 	mvn.w	r3, #19
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff fef4 	bl	80005ce <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d009      	beq.n	8000800 <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
 80007ec:	7abb      	ldrb	r3, [r7, #10]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d106      	bne.n	8000800 <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
        return ReadBuf(6);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff ff8d 	bl	8000716 <_ZN7SCServo7ReadBufEtPh>
 80007fc:	4603      	mov	r3, r0
 80007fe:	e000      	b.n	8000802 <_ZN7SCServo16WriteLimitTroqueEhih+0xb4>
    return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	460a      	mov	r2, r1
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4613      	mov	r3, r2
 8000818:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fb23 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4313      	orrs	r3, r2
 8000836:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	6039      	str	r1, [r7, #0]
 800084c:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	f240 110f 	movw	r1, #271	@ 0x10f
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fa9e 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4313      	orrs	r3, r2
 8000868:	73fb      	strb	r3, [r7, #15]
	return status;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 800088a:	f107 0209 	add.w	r2, r7, #9
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	21e5      	movs	r1, #229	@ 0xe5
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fabc 	bl	8001e10 <_Z15VL53L4CD_RdBytettPh>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	4313      	orrs	r3, r2
 80008a0:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 80008a2:	7a7b      	ldrb	r3, [r7, #9]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d102      	bne.n	80008ae <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	737b      	strb	r3, [r7, #13]
 80008ac:	e00b      	b.n	80008c6 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 80008ae:	897b      	ldrh	r3, [r7, #10]
 80008b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008b4:	d203      	bcs.n	80008be <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 80008b6:	897b      	ldrh	r3, [r7, #10]
 80008b8:	3301      	adds	r3, #1
 80008ba:	817b      	strh	r3, [r7, #10]
 80008bc:	e003      	b.n	80008c6 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 80008be:	2300      	movs	r3, #0
 80008c0:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 80008c2:	23ff      	movs	r3, #255	@ 0xff
 80008c4:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb5c 	bl	8001f88 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d0d9      	beq.n	800088a <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80008d6:	232d      	movs	r3, #45	@ 0x2d
 80008d8:	73bb      	strb	r3, [r7, #14]
 80008da:	e011      	b.n	8000900 <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	3b2d      	subs	r3, #45	@ 0x2d
 80008e4:	4a44      	ldr	r2, [pc, #272]	@ (80009f8 <_Z19VL53L4CD_SensorInitt+0x184>)
 80008e6:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fac2 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73bb      	strb	r3, [r7, #14]
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	2b87      	cmp	r3, #135	@ 0x87
 8000904:	d9ea      	bls.n	80008dc <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	2240      	movs	r2, #64	@ 0x40
 800090a:	2187      	movs	r1, #135	@ 0x87
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fab1 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4313      	orrs	r3, r2
 800091a:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 800091c:	2300      	movs	r3, #0
 800091e:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8000920:	2301      	movs	r3, #1
 8000922:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8000924:	f107 0209 	add.w	r2, r7, #9
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8c5 	bl	8000abc <_Z26VL53L4CD_CheckForDataReadytPh>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4313      	orrs	r3, r2
 800093a:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 800093c:	7a7b      	ldrb	r3, [r7, #9]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d102      	bne.n	8000948 <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 8000942:	2300      	movs	r3, #0
 8000944:	737b      	strb	r3, [r7, #13]
 8000946:	e00b      	b.n	8000960 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800094e:	d203      	bcs.n	8000958 <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 8000950:	897b      	ldrh	r3, [r7, #10]
 8000952:	3301      	adds	r3, #1
 8000954:	817b      	strh	r3, [r7, #10]
 8000956:	e003      	b.n	8000960 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8000958:	2300      	movs	r3, #0
 800095a:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800095c:	23ff      	movs	r3, #255	@ 0xff
 800095e:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	2101      	movs	r1, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fb0f 	bl	8001f88 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d0d9      	beq.n	8000924 <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f842 	bl	80009fc <_Z23VL53L4CD_ClearInterruptt>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f882 	bl	8000a8e <_Z20VL53L4CD_StopRangingt>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	4313      	orrs	r3, r2
 8000992:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	2209      	movs	r2, #9
 8000998:	2108      	movs	r1, #8
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fa6a 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2200      	movs	r2, #0
 80009ae:	210b      	movs	r1, #11
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa5f 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4313      	orrs	r3, r2
 80009be:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80009c6:	2124      	movs	r1, #36	@ 0x24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fa7b 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	2200      	movs	r2, #0
 80009dc:	2132      	movs	r1, #50	@ 0x32
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f8b0 	bl	8000b44 <_Z23VL53L4CD_SetRangeTimingtmm>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	73fb      	strb	r3, [r7, #15]

	return status;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	080076a4 	.word	0x080076a4

080009fc <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2186      	movs	r1, #134	@ 0x86
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fa2f 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8000a38:	f107 0208 	add.w	r2, r7, #8
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	216c      	movs	r1, #108	@ 0x6c
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f96f 	bl	8001d24 <_Z16VL53L4CD_RdDWordttPm>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10b      	bne.n	8000a6e <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2221      	movs	r2, #33	@ 0x21
 8000a5a:	2187      	movs	r1, #135	@ 0x87
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fa09 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e00a      	b.n	8000a84 <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	2240      	movs	r2, #64	@ 0x40
 8000a72:	2187      	movs	r1, #135	@ 0x87
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f9fd 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2187      	movs	r1, #135	@ 0x87
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f9e6 	bl	8001e74 <_Z15VL53L4CD_WrBytetth>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8000acc:	f107 020d 	add.w	r2, r7, #13
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	2130      	movs	r1, #48	@ 0x30
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 f99b 	bl	8001e10 <_Z15VL53L4CD_RdBytettPh>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8000ae4:	7b7b      	ldrb	r3, [r7, #13]
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 8000aee:	7b7b      	ldrb	r3, [r7, #13]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8000af6:	7b7b      	ldrb	r3, [r7, #13]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d102      	bne.n	8000b02 <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8000b06:	f107 020d 	add.w	r2, r7, #13
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2131      	movs	r1, #49	@ 0x31
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f97e 	bl	8001e10 <_Z15VL53L4CD_RdBytettPh>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 8000b1e:	7b7b      	ldrb	r3, [r7, #13]
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d103      	bne.n	8000b32 <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e002      	b.n	8000b38 <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	@ 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8000b60:	4b84      	ldr	r3, [pc, #528]	@ (8000d74 <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 8000b62:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8000b64:	f107 0214 	add.w	r2, r7, #20
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	2106      	movs	r1, #6
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 f915 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 8000b80:	8abb      	ldrh	r3, [r7, #20]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d012      	beq.n	8000bac <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8000b92:	8abb      	ldrh	r3, [r7, #20]
 8000b94:	461a      	mov	r2, r3
 8000b96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b9a:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	099b      	lsrs	r3, r3, #6
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000baa:	e005      	b.n	8000bb8 <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000bac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb0:	f063 0301 	orn	r3, r3, #1
 8000bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b09      	cmp	r3, #9
 8000bbc:	d906      	bls.n	8000bcc <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bc2:	d803      	bhi.n	8000bcc <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd0:	f063 0301 	orn	r3, r3, #1
 8000bd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bd8:	e05e      	b.n	8000c98 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	2200      	movs	r2, #0
 8000be4:	216c      	movs	r1, #108	@ 0x6c
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f99a 	bl	8001f20 <_Z16VL53L4CD_WrDWordttm>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c02:	e049      	b.n	8000c98 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d93f      	bls.n	8000c8c <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8000c0c:	f107 0216 	add.w	r2, r7, #22
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	21de      	movs	r1, #222	@ 0xde
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 f8c1 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c22:	4313      	orrs	r3, r2
 8000c24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8000c28:	8afb      	ldrh	r3, [r7, #22]
 8000c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c40:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 8000c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c52:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8000c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	ee17 2a90 	vmov	r2, s15
 8000c64:	216c      	movs	r1, #108	@ 0x6c
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f95a 	bl	8001f20 <_Z16VL53L4CD_WrDWordttm>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c74:	4313      	orrs	r3, r2
 8000c76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 8000c80:	3b0c      	subs	r3, #12
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c8a:	e005      	b.n	8000c98 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c90:	f063 0301 	orn	r3, r3, #1
 8000c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8000c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c9e:	d063      	beq.n	8000d68 <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 8000caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	09da      	lsrs	r2, r3, #7
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb6:	441a      	add	r2, r3
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	099b      	lsrs	r3, r3, #6
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000cc4:	e005      	b.n	8000cd2 <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	085b      	lsrs	r3, r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8000ccc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cce:	3301      	adds	r3, #1
 8000cd0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	2bff      	cmp	r3, #255	@ 0xff
 8000cd6:	d8f6      	bhi.n	8000cc6 <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8000cd8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8000cea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	215e      	movs	r1, #94	@ 0x5e
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 f8e7 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8000d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	09da      	lsrs	r2, r3, #7
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	441a      	add	r2, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000d28:	e005      	b.n	8000d36 <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	085b      	lsrs	r3, r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8000d30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d32:	3301      	adds	r3, #1
 8000d34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	2bff      	cmp	r3, #255	@ 0xff
 8000d3a:	d8f6      	bhi.n	8000d2a <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8000d3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8000d4e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	2161      	movs	r1, #97	@ 0x61
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 f8b5 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	@ 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	3f870a3d 	.word	0x3f870a3d

08000d78 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8000d8a:	4b52      	ldr	r3, [pc, #328]	@ (8000ed4 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 8000d8c:	f107 0408 	add.w	r4, r7, #8
 8000d90:	461d      	mov	r5, r3
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d9a:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8000d9e:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2189      	movs	r1, #137	@ 0x89
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 f832 	bl	8001e10 <_Z15VL53L4CD_RdBytettPh>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000db4:	4313      	orrs	r3, r2
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8000dba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 8000dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000dcc:	2b17      	cmp	r3, #23
 8000dce:	d807      	bhi.n	8000de0 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8000dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000dd4:	3328      	adds	r3, #40	@ 0x28
 8000dd6:	443b      	add	r3, r7
 8000dd8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 8000de0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8000de8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	218c      	movs	r1, #140	@ 0x8c
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 ffd3 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8000e04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8000e0e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	218e      	movs	r1, #142	@ 0x8e
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ffc0 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e24:	4313      	orrs	r3, r2
 8000e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8000e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8000e34:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	2190      	movs	r1, #144	@ 0x90
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 ffad 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8000e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8000e5a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2192      	movs	r1, #146	@ 0x92
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ff9a 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e70:	4313      	orrs	r3, r2
 8000e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8000e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8000e80:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	2196      	movs	r1, #150	@ 0x96
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 ff87 	bl	8001d9c <_Z15VL53L4CD_RdWordttPt>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e96:	4313      	orrs	r3, r2
 8000e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8000e9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	899b      	ldrh	r3, [r3, #12]
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	899b      	ldrh	r3, [r3, #12]
 8000ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec0:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	80da      	strh	r2, [r3, #6]

	return status;
 8000ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	08007438 	.word	0x08007438

08000ed8 <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 8000ef2:	89ba      	ldrh	r2, [r7, #12]
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	211e      	movs	r1, #30
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 ffe3 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ffd8 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2200      	movs	r2, #0
 8000f22:	2122      	movs	r1, #34	@ 0x22
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 ffcd 	bl	8001ec4 <_Z15VL53L4CD_WrWordttt>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	761a      	strb	r2, [r3, #24]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f6c:	621a      	str	r2, [r3, #32]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a17      	ldr	r2, [pc, #92]	@ (8000fd0 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t+0x90>)
 8000f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	220a      	movs	r2, #10
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    this->gpio_port_step = gpio_port_step;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8bba      	ldrh	r2, [r7, #28]
 8000fa4:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f001 ff78 	bl	8002ea8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8000fb8:	8bbb      	ldrh	r3, [r7, #28]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	69b8      	ldr	r0, [r7, #24]
 8000fc0:	f001 ff72 	bl	8002ea8 <HAL_GPIO_WritePin>

  }
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	00989680 	.word	0x00989680

08000fd4 <_ZN7Stepper8set_goalEi>:

  void set_goal(int goal) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
    this->goal = goal;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dd01      	ble.n	8000ff8 <_ZN7Stepper8set_goalEi+0x24>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	e001      	b.n	8000ffc <_ZN7Stepper8set_goalEi+0x28>
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001004:	4798      	blx	r3
 8001006:	4602      	mov	r2, r0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6898      	ldr	r0, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8999      	ldrh	r1, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	2b01      	cmp	r3, #1
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	f001 ff3c 	bl	8002ea8 <HAL_GPIO_WritePin>
  }
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	611a      	str	r2, [r3, #16]
  }
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d05b      	beq.n	800111c <_ZN7Stepper9spin_onceEv+0xc8>
      return;
    }

    if (state.state == State::HIGH) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e1b      	ldrb	r3, [r3, #24]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d11b      	bne.n	80010a4 <_ZN7Stepper9spin_onceEv+0x50>
      if (get_time_us() - time_start_high > time_high) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001070:	4798      	blx	r3
 8001072:	4602      	mov	r2, r0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	429a      	cmp	r2, r3
 8001080:	bf8c      	ite	hi
 8001082:	2301      	movhi	r3, #1
 8001084:	2300      	movls	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d03d      	beq.n	8001108 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	889b      	ldrh	r3, [r3, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	f001 ff06 	bl	8002ea8 <HAL_GPIO_WritePin>
        state.state = State::LOW;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	761a      	strb	r2, [r3, #24]
 80010a2:	e031      	b.n	8001108 <_ZN7Stepper9spin_onceEv+0xb4>
      }
    } else if (state.state == State::LOW) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d12d      	bne.n	8001108 <_ZN7Stepper9spin_onceEv+0xb4>
      if (get_time_us() - time_start_step > time_step) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	4798      	blx	r3
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010be:	429a      	cmp	r2, r3
 80010c0:	bf8c      	ite	hi
 80010c2:	2301      	movhi	r3, #1
 80010c4:	2300      	movls	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01d      	beq.n	8001108 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	f001 fee6 	bl	8002ea8 <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e6:	4798      	blx	r3
 80010e8:	4602      	mov	r2, r0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f2:	4798      	blx	r3
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	441a      	add	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	d104      	bne.n	800111e <_ZN7Stepper9spin_onceEv+0xca>
      state.state = State::STOPPED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
 800111a:	e000      	b.n	800111e <_ZN7Stepper9spin_onceEv+0xca>
      return;
 800111c:	bf00      	nop
    }
  }
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
  }
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e00b      	b.n	8001172 <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	1c4b      	adds	r3, r1, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001164:	2201      	movs	r2, #1
 8001166:	4807      	ldr	r0, [pc, #28]	@ (8001184 <_write+0x3c>)
 8001168:	f004 fa4c 	bl	8005604 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	dbef      	blt.n	800115a <_write+0x12>
   return len;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000021c 	.word	0x2000021c

08001188 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001198:	d104      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011a2:	6013      	str	r3, [r2, #0]
  }
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200002b0 	.word	0x200002b0

080011b4 <_Z11get_time_usv>:

unsigned long get_time_us() {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <_Z11get_time_usv+0x28>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_Z11get_time_usv+0x2c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <_Z11get_time_usv+0x30>)
 80011c8:	fb03 f202 	mul.w	r2, r3, r2
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000013c 	.word	0x2000013c
 80011e0:	200002b0 	.word	0x200002b0
 80011e4:	000f4240 	.word	0x000f4240

080011e8 <_Z11setup_laser12LASER_SENSOR>:
LASER_SENSOR sensor_left{};
LASER_SENSOR sensor_right{};


int setup_laser(LASER_SENSOR sensor)
{
 80011e8:	b084      	sub	sp, #16
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	f107 0c10 	add.w	ip, r7, #16
 80011f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint16_t sensor_id;
  uint8_t status;
  printf("SENSOR_PIN: %d\n", sensor.pin);
 80011f8:	8a3b      	ldrh	r3, [r7, #16]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4847      	ldr	r0, [pc, #284]	@ (800131c <_Z11setup_laser12LASER_SENSOR+0x134>)
 80011fe:	f005 fa43 	bl	8006688 <iprintf>

  HAL_Delay(5);
 8001202:	2005      	movs	r0, #5
 8001204:	f001 f9ec 	bl	80025e0 <HAL_Delay>
  // set the pin to high to enable the sensor
  HAL_GPIO_WritePin(sensor.port, sensor.pin, GPIO_PIN_SET);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	8a39      	ldrh	r1, [r7, #16]
 800120c:	2201      	movs	r2, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fe4a 	bl	8002ea8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001214:	2005      	movs	r0, #5
 8001216:	f001 f9e3 	bl	80025e0 <HAL_Delay>

  // set I2C address (other unset addresses XSHUT have to be pull to low before)
  status = VL53L4CD_SetI2CAddress(0x52, sensor.address); // 0x52 is the default address
 800121a:	8b3b      	ldrh	r3, [r7, #24]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	2052      	movs	r0, #82	@ 0x52
 8001222:	f7ff faf2 	bl	800080a <_Z22VL53L4CD_SetI2CAddressth>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if (status)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <_Z11setup_laser12LASER_SENSOR+0x56>
  {
    printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4619      	mov	r1, r3
 8001234:	483a      	ldr	r0, [pc, #232]	@ (8001320 <_Z11setup_laser12LASER_SENSOR+0x138>)
 8001236:	f005 fa27 	bl	8006688 <iprintf>
    return status;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	e066      	b.n	800130c <_Z11setup_laser12LASER_SENSOR+0x124>
  }

  /* (Optional) Check if there is a VL53L4CD sensor connected */
  printf("Checking for laser sensor at address %x\n", sensor.address);
 800123e:	8b3b      	ldrh	r3, [r7, #24]
 8001240:	4619      	mov	r1, r3
 8001242:	4838      	ldr	r0, [pc, #224]	@ (8001324 <_Z11setup_laser12LASER_SENSOR+0x13c>)
 8001244:	f005 fa20 	bl	8006688 <iprintf>
  status = VL53L4CD_GetSensorId(sensor.address, &sensor_id);
 8001248:	8b3b      	ldrh	r3, [r7, #24]
 800124a:	1d3a      	adds	r2, r7, #4
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff faf7 	bl	8000842 <_Z20VL53L4CD_GetSensorIdtPt>
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]

  if (status || (sensor_id != 0xEBAA))
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <_Z11setup_laser12LASER_SENSOR+0x80>
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 8001264:	4293      	cmp	r3, r2
 8001266:	d004      	beq.n	8001272 <_Z11setup_laser12LASER_SENSOR+0x8a>
  {
    printf("VL53L4CD not detected at requested address\n");
 8001268:	482f      	ldr	r0, [pc, #188]	@ (8001328 <_Z11setup_laser12LASER_SENSOR+0x140>)
 800126a:	f005 fa75 	bl	8006758 <puts>
    return status;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	e04c      	b.n	800130c <_Z11setup_laser12LASER_SENSOR+0x124>
  }
  printf("VL53L4CD detected at address %x\n", sensor.address);
 8001272:	8b3b      	ldrh	r3, [r7, #24]
 8001274:	4619      	mov	r1, r3
 8001276:	482d      	ldr	r0, [pc, #180]	@ (800132c <_Z11setup_laser12LASER_SENSOR+0x144>)
 8001278:	f005 fa06 	bl	8006688 <iprintf>

  /* (Mandatory) Init VL53L4CD sensor */
  printf("Initializing laser sensor\n");
 800127c:	482c      	ldr	r0, [pc, #176]	@ (8001330 <_Z11setup_laser12LASER_SENSOR+0x148>)
 800127e:	f005 fa6b 	bl	8006758 <puts>
  status = VL53L4CD_SensorInit(sensor.address);
 8001282:	8b3b      	ldrh	r3, [r7, #24]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff faf5 	bl	8000874 <_Z19VL53L4CD_SensorInitt>
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if (status)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <_Z11setup_laser12LASER_SENSOR+0xb6>
  {
    printf("VL53L4CD ULD Loading failed\n");
 8001294:	4827      	ldr	r0, [pc, #156]	@ (8001334 <_Z11setup_laser12LASER_SENSOR+0x14c>)
 8001296:	f005 fa5f 	bl	8006758 <puts>
    return status;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	e036      	b.n	800130c <_Z11setup_laser12LASER_SENSOR+0x124>
  }

  // set the offsets
  if (sensor.address == SENSOR_LEFT_ADDRESS)
 800129e:	8b3b      	ldrh	r3, [r7, #24]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <_Z11setup_laser12LASER_SENSOR+0xce>
  {
    status = VL53L4CD_SetOffset(sensor.address, SENSOR_LEFT_OFFSET);
 80012a4:	8b3b      	ldrh	r3, [r7, #24]
 80012a6:	f06f 0109 	mvn.w	r1, #9
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe14 	bl	8000ed8 <_Z18VL53L4CD_SetOffsetts>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	e00a      	b.n	80012cc <_Z11setup_laser12LASER_SENSOR+0xe4>
  }
  else if (sensor.address == SENSOR_RIGHT_ADDRESS)
 80012b6:	8b3b      	ldrh	r3, [r7, #24]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d107      	bne.n	80012cc <_Z11setup_laser12LASER_SENSOR+0xe4>
  {
    status = VL53L4CD_SetOffset(sensor.address, SENSOR_RIGHT_OFFSET);
 80012bc:	8b3b      	ldrh	r3, [r7, #24]
 80012be:	f06f 0107 	mvn.w	r1, #7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fe08 	bl	8000ed8 <_Z18VL53L4CD_SetOffsetts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  }
  if (status)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <_Z11setup_laser12LASER_SENSOR+0xf8>
  {
    printf("VL53L4CD_SetOffset failed with status %u\n", status);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4818      	ldr	r0, [pc, #96]	@ (8001338 <_Z11setup_laser12LASER_SENSOR+0x150>)
 80012d8:	f005 f9d6 	bl	8006688 <iprintf>
    return status;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	e015      	b.n	800130c <_Z11setup_laser12LASER_SENSOR+0x124>
  }

  status = VL53L4CD_StartRanging(sensor.address);
 80012e0:	8b3b      	ldrh	r3, [r7, #24]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fba1 	bl	8000a2a <_Z21VL53L4CD_StartRangingt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  if (status)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <_Z11setup_laser12LASER_SENSOR+0x118>
  {
    printf("VL53L4CD_StartRanging failed with status %u\n", status);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4811      	ldr	r0, [pc, #68]	@ (800133c <_Z11setup_laser12LASER_SENSOR+0x154>)
 80012f8:	f005 f9c6 	bl	8006688 <iprintf>
    return status;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	e005      	b.n	800130c <_Z11setup_laser12LASER_SENSOR+0x124>
  }
  printf("VL53L4CD ULD ready at address %x ready\n", sensor.address);
 8001300:	8b3b      	ldrh	r3, [r7, #24]
 8001302:	4619      	mov	r1, r3
 8001304:	480e      	ldr	r0, [pc, #56]	@ (8001340 <_Z11setup_laser12LASER_SENSOR+0x158>)
 8001306:	f005 f9bf 	bl	8006688 <iprintf>

  return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001316:	b004      	add	sp, #16
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	08007460 	.word	0x08007460
 8001320:	08007470 	.word	0x08007470
 8001324:	080074a0 	.word	0x080074a0
 8001328:	080074cc 	.word	0x080074cc
 800132c:	080074f8 	.word	0x080074f8
 8001330:	0800751c 	.word	0x0800751c
 8001334:	08007538 	.word	0x08007538
 8001338:	08007554 	.word	0x08007554
 800133c:	08007580 	.word	0x08007580
 8001340:	080075b0 	.word	0x080075b0

08001344 <_Z15update_distanceR12LASER_SENSOR>:
  }
  printf("end of scan\n\n");
}

int update_distance(LASER_SENSOR &sensor)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  // We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
  static uint32_t last_read_time = 0;
  if (HAL_GetTick() - last_read_time < 5)
 800134c:	f001 f93c 	bl	80025c8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <_Z15update_distanceR12LASER_SENSOR+0x64>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b04      	cmp	r3, #4
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_Z15update_distanceR12LASER_SENSOR+0x26>
  {
    return 0;
 8001366:	2300      	movs	r3, #0
 8001368:	e01a      	b.n	80013a0 <_Z15update_distanceR12LASER_SENSOR+0x5c>
   * Another way can be to wait for HW interrupt raised on PIN 7
   * (GPIO 1) when a new measurement is ready */

  uint8_t isReady;

  uint8_t status = VL53L4CD_CheckForDataReady(sensor.address, &isReady);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	891b      	ldrh	r3, [r3, #8]
 800136e:	f107 020e 	add.w	r2, r7, #14
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fba1 	bl	8000abc <_Z26VL53L4CD_CheckForDataReadytPh>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]

  if (isReady)
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <_Z15update_distanceR12LASER_SENSOR+0x5a>
  {
    /* (Mandatory) Clear HW interrupt to restart measurements */
    VL53L4CD_ClearInterrupt(sensor.address);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	891b      	ldrh	r3, [r3, #8]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb37 	bl	80009fc <_Z23VL53L4CD_ClearInterruptt>

    /* Read measured distance. RangeStatus = 0 means valid data */
    VL53L4CD_GetResult(sensor.address, &sensor.results);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	891a      	ldrh	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	330a      	adds	r3, #10
 8001396:	4619      	mov	r1, r3
 8001398:	4610      	mov	r0, r2
 800139a:	f7ff fced 	bl	8000d78 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
  }

  return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200002ec 	.word	0x200002ec

080013ac <_Z12setup_lasersv>:


int setup_lasers()
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af04      	add	r7, sp, #16

  sensor_left.port = XSHUT_LEFT_GPIO_Port;
 80013b2:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <_Z12setup_lasersv+0xc8>)
 80013b4:	4a30      	ldr	r2, [pc, #192]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 80013b6:	605a      	str	r2, [r3, #4]
  sensor_left.pin = XSHUT_LEFT_Pin;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <_Z12setup_lasersv+0xc8>)
 80013ba:	2210      	movs	r2, #16
 80013bc:	801a      	strh	r2, [r3, #0]
  sensor_left.address = SENSOR_LEFT_ADDRESS;
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <_Z12setup_lasersv+0xc8>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	811a      	strh	r2, [r3, #8]
  sensor_right.port = XSHUT_RIGHT_GPIO_Port;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <_Z12setup_lasersv+0xd0>)
 80013c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 80013c8:	605a      	str	r2, [r3, #4]
  sensor_right.pin = XSHUT_RIGHT_Pin;
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <_Z12setup_lasersv+0xd0>)
 80013cc:	2220      	movs	r2, #32
 80013ce:	801a      	strh	r2, [r3, #0]
  sensor_right.address = SENSOR_RIGHT_ADDRESS;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <_Z12setup_lasersv+0xd0>)
 80013d2:	2205      	movs	r2, #5
 80013d4:	811a      	strh	r2, [r3, #8]

  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 80013dc:	f001 fd64 	bl	8002ea8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2120      	movs	r1, #32
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 80013e6:	f001 fd5f 	bl	8002ea8 <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  printf("SETUP LASER LEFT\n");
 80013ea:	4825      	ldr	r0, [pc, #148]	@ (8001480 <_Z12setup_lasersv+0xd4>)
 80013ec:	f005 f9b4 	bl	8006758 <puts>
  int status = setup_laser(sensor_left);
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <_Z12setup_lasersv+0xc8>)
 80013f2:	466c      	mov	r4, sp
 80013f4:	f103 0210 	add.w	r2, r3, #16
 80013f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001400:	f7ff fef2 	bl	80011e8 <_Z11setup_laser12LASER_SENSOR>
 8001404:	6078      	str	r0, [r7, #4]
  if (status)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <_Z12setup_lasersv+0x74>
  {
    printf("setup_laser at address %x failed with status %u\n", sensor_left.address, status);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <_Z12setup_lasersv+0xc8>)
 800140e:	891b      	ldrh	r3, [r3, #8]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	@ (8001484 <_Z12setup_lasersv+0xd8>)
 8001416:	f005 f937 	bl	8006688 <iprintf>
    return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141e:	e025      	b.n	800146c <_Z12setup_lasersv+0xc0>
  }

  /* Setup the second laser sensor */
  printf("\n\nSETUP LASER RIGHT\n");
 8001420:	4819      	ldr	r0, [pc, #100]	@ (8001488 <_Z12setup_lasersv+0xdc>)
 8001422:	f005 f999 	bl	8006758 <puts>
  status = setup_laser(sensor_right);
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <_Z12setup_lasersv+0xd0>)
 8001428:	466c      	mov	r4, sp
 800142a:	f103 0210 	add.w	r2, r3, #16
 800142e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	f7ff fed7 	bl	80011e8 <_Z11setup_laser12LASER_SENSOR>
 800143a:	6078      	str	r0, [r7, #4]
  if (status)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <_Z12setup_lasersv+0xaa>
  {
    printf("setup_laser at address %x failed with status %u\n", sensor_right.address, status);
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <_Z12setup_lasersv+0xd0>)
 8001444:	891b      	ldrh	r3, [r3, #8]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	480e      	ldr	r0, [pc, #56]	@ (8001484 <_Z12setup_lasersv+0xd8>)
 800144c:	f005 f91c 	bl	8006688 <iprintf>
    return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001454:	e00a      	b.n	800146c <_Z12setup_lasersv+0xc0>
  }
  
  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2110      	movs	r1, #16
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 800145c:	f001 fd24 	bl	8002ea8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2120      	movs	r1, #32
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <_Z12setup_lasersv+0xcc>)
 8001466:	f001 fd1f 	bl	8002ea8 <HAL_GPIO_WritePin>

  return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	200002b4 	.word	0x200002b4
 8001478:	48000400 	.word	0x48000400
 800147c:	200002d0 	.word	0x200002d0
 8001480:	080075e8 	.word	0x080075e8
 8001484:	080075fc 	.word	0x080075fc
 8001488:	08007630 	.word	0x08007630

0800148c <_Z12lift_go_downv>:
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);

SCServo servos = SCServo(&huart1);

void lift_go_down()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_DOWN);
 8001490:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <_Z12lift_go_downv+0x30>)
 8001496:	f7ff fd9d 	bl	8000fd4 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 800149a:	e002      	b.n	80014a2 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <_Z12lift_go_downv+0x30>)
 800149e:	f7ff fdd9 	bl	8001054 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <_Z12lift_go_downv+0x30>)
 80014a4:	f7ff fe3e 	bl	8001124 <_ZN7Stepper10is_stoppedEv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f3      	bne.n	800149c <_Z12lift_go_downv+0x10>
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002f0 	.word	0x200002f0

080014c0 <_Z10lift_go_upv>:

void lift_go_up()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 80014c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80014c8:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <_Z10lift_go_upv+0x30>)
 80014ca:	f7ff fd83 	bl	8000fd4 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 80014ce:	e002      	b.n	80014d6 <_Z10lift_go_upv+0x16>
  {
    stepper_lift.spin_once();
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <_Z10lift_go_upv+0x30>)
 80014d2:	f7ff fdbf 	bl	8001054 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <_Z10lift_go_upv+0x30>)
 80014d8:	f7ff fe24 	bl	8001124 <_ZN7Stepper10is_stoppedEv>
 80014dc:	4603      	mov	r3, r0
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f3      	bne.n	80014d0 <_Z10lift_go_upv+0x10>
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002f0 	.word	0x200002f0

080014f4 <_Z14lift_go_middlev>:

void lift_go_middle()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 80014f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <_Z14lift_go_middlev+0x30>)
 80014fe:	f7ff fd69 	bl	8000fd4 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8001502:	e002      	b.n	800150a <_Z14lift_go_middlev+0x16>
  {
    stepper_lift.spin_once();
 8001504:	4807      	ldr	r0, [pc, #28]	@ (8001524 <_Z14lift_go_middlev+0x30>)
 8001506:	f7ff fda5 	bl	8001054 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <_Z14lift_go_middlev+0x30>)
 800150c:	f7ff fe0a 	bl	8001124 <_ZN7Stepper10is_stoppedEv>
 8001510:	4603      	mov	r3, r0
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f3      	bne.n	8001504 <_Z14lift_go_middlev+0x10>
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002f0 	.word	0x200002f0

08001528 <_Z14grabber_extendv>:

void grabber_extend()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_EXTEND, 500);
 800152e:	2301      	movs	r3, #1
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001536:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800153a:	2108      	movs	r1, #8
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <_Z14grabber_extendv+0x28>)
 800153e:	f7ff f878 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001546:	f001 f84b 	bl	80025e0 <HAL_Delay>
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000360 	.word	0x20000360

08001554 <_Z15grabber_retractb>:


void grabber_retract(bool block=true)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_RETRACT, 500);
 800155e:	2301      	movs	r3, #1
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001566:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800156a:	2108      	movs	r1, #8
 800156c:	4806      	ldr	r0, [pc, #24]	@ (8001588 <_Z15grabber_retractb+0x34>)
 800156e:	f7ff f860 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <_Z15grabber_retractb+0x2c>
 8001578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800157c:	f001 f830 	bl	80025e0 <HAL_Delay>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000360 	.word	0x20000360

0800158c <_Z19lift_go_to_init_posv>:
  stepper_res.set_goal(0);

}

void lift_go_to_init_pos()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  // Here we don't have a sensor. So we just turn the motor for a certain distance. (5 spins at 3200 steps per spin)

  stepper_lift.set_goal(-5*3200);
 8001590:	490e      	ldr	r1, [pc, #56]	@ (80015cc <_Z19lift_go_to_init_posv+0x40>)
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <_Z19lift_go_to_init_posv+0x44>)
 8001594:	f7ff fd1e 	bl	8000fd4 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8001598:	e002      	b.n	80015a0 <_Z19lift_go_to_init_posv+0x14>
  {
    stepper_lift.spin_once();
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <_Z19lift_go_to_init_posv+0x44>)
 800159c:	f7ff fd5a 	bl	8001054 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <_Z19lift_go_to_init_posv+0x44>)
 80015a2:	f7ff fdbf 	bl	8001124 <_ZN7Stepper10is_stoppedEv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f3      	bne.n	800159a <_Z19lift_go_to_init_posv+0xe>
  }
  stepper_lift.set_pos(0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <_Z19lift_go_to_init_posv+0x44>)
 80015b6:	f7ff fd3f 	bl	8001038 <_ZN7Stepper7set_posEi>

  grabber_extend();
 80015ba:	f7ff ffb5 	bl	8001528 <_Z14grabber_extendv>
  grabber_retract();
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ffc8 	bl	8001554 <_Z15grabber_retractb>

  lift_go_down();
 80015c4:	f7ff ff62 	bl	800148c <_Z12lift_go_downv>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	ffffc180 	.word	0xffffc180
 80015d0:	200002f0 	.word	0x200002f0

080015d4 <_Z26servo_horiz_go_to_init_posv>:

void servo_horiz_go_to_init_pos()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af02      	add	r7, sp, #8
  // servos.EnableTorque(SERVO_HORIZ_ID, 1);
  servos.WriteLimitTroque(SERVO_HORIZ_ID, 1023);
 80015da:	2301      	movs	r3, #1
 80015dc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80015e0:	2108      	movs	r1, #8
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <_Z26servo_horiz_go_to_init_posv+0x34>)
 80015e4:	f7ff f8b3 	bl	800074e <_ZN7SCServo16WriteLimitTroqueEhih>
  servos.WritePos(SERVO_HORIZ_ID ,SERVO_HORIZ_POS_RETRACT, 200);
 80015e8:	2301      	movs	r3, #1
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	23c8      	movs	r3, #200	@ 0xc8
 80015ee:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80015f2:	2108      	movs	r1, #8
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <_Z26servo_horiz_go_to_init_posv+0x34>)
 80015f6:	f7ff f81c 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 80015fa:	20c8      	movs	r0, #200	@ 0xc8
 80015fc:	f000 fff0 	bl	80025e0 <HAL_Delay>
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000360 	.word	0x20000360

0800160c <_Z26actuators_go_to_init_posesv>:

void actuators_go_to_init_poses()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  servo_horiz_go_to_init_pos();
 8001610:	f7ff ffe0 	bl	80015d4 <_Z26servo_horiz_go_to_init_posv>
  // reservoir_go_to_init_pos();
  lift_go_to_init_pos();
 8001614:	f7ff ffba 	bl	800158c <_Z19lift_go_to_init_posv>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <_Z13setup_hoppersv>:




void setup_hoppers()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af02      	add	r7, sp, #8
  // Hoppers are servos 7 and 14

  // Close then open
  servos.WritePos(7, HOPPER_LEFT_CLOSE, 500);
 8001622:	2301      	movs	r3, #1
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800162a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800162e:	2107      	movs	r1, #7
 8001630:	4815      	ldr	r0, [pc, #84]	@ (8001688 <_Z13setup_hoppersv+0x6c>)
 8001632:	f7fe fffe 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  servos.WritePos(14, HOPPER_RIGHT_CLOSE, 500);
 8001636:	2301      	movs	r3, #1
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800163e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001642:	210e      	movs	r1, #14
 8001644:	4810      	ldr	r0, [pc, #64]	@ (8001688 <_Z13setup_hoppersv+0x6c>)
 8001646:	f7fe fff4 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 800164a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800164e:	f000 ffc7 	bl	80025e0 <HAL_Delay>
  servos.WritePos(7, HOPPER_LEFT_OPEN, 500);
 8001652:	2301      	movs	r3, #1
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800165a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800165e:	2107      	movs	r1, #7
 8001660:	4809      	ldr	r0, [pc, #36]	@ (8001688 <_Z13setup_hoppersv+0x6c>)
 8001662:	f7fe ffe6 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  servos.WritePos(14, HOPPER_RIGHT_OPEN, 500);
 8001666:	2301      	movs	r3, #1
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800166e:	2200      	movs	r2, #0
 8001670:	210e      	movs	r1, #14
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <_Z13setup_hoppersv+0x6c>)
 8001674:	f7fe ffdd 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 8001678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800167c:	f000 ffb0 	bl	80025e0 <HAL_Delay>


}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000360 	.word	0x20000360

0800168c <_Z36hopper_left_wait_and_close_spin_oncev>:

bool hopper_left_wait_and_close_spin_once()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
  // Check if distance < 50mm for left plant
  if(sensor_left.results.distance_mm < 50)
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <_Z36hopper_left_wait_and_close_spin_oncev+0x2c>)
 8001694:	899b      	ldrh	r3, [r3, #12]
 8001696:	2b31      	cmp	r3, #49	@ 0x31
 8001698:	d80a      	bhi.n	80016b0 <_Z36hopper_left_wait_and_close_spin_oncev+0x24>
  {
    // Close the hopper
    servos.WritePos(7, HOPPER_LEFT_CLOSE, 200);
 800169a:	2301      	movs	r3, #1
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	23c8      	movs	r3, #200	@ 0xc8
 80016a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016a4:	2107      	movs	r1, #7
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <_Z36hopper_left_wait_and_close_spin_oncev+0x30>)
 80016a8:	f7fe ffc3 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
    return true;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <_Z36hopper_left_wait_and_close_spin_oncev+0x26>
  }
  return false;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200002b4 	.word	0x200002b4
 80016bc:	20000360 	.word	0x20000360

080016c0 <_Z37hopper_right_wait_and_close_spin_oncev>:

bool hopper_right_wait_and_close_spin_once()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af02      	add	r7, sp, #8
  // Check if distance < 50mm for left plant
  if(sensor_right.results.distance_mm < 50)
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <_Z37hopper_right_wait_and_close_spin_oncev+0x2c>)
 80016c8:	899b      	ldrh	r3, [r3, #12]
 80016ca:	2b31      	cmp	r3, #49	@ 0x31
 80016cc:	d80a      	bhi.n	80016e4 <_Z37hopper_right_wait_and_close_spin_oncev+0x24>
  {
    // Close the hopper
    servos.WritePos(14, HOPPER_RIGHT_CLOSE, 200);
 80016ce:	2301      	movs	r3, #1
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	23c8      	movs	r3, #200	@ 0xc8
 80016d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016d8:	210e      	movs	r1, #14
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <_Z37hopper_right_wait_and_close_spin_oncev+0x30>)
 80016dc:	f7fe ffa9 	bl	8000632 <_ZN7SCServo8WritePosEhiih>
    return true;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <_Z37hopper_right_wait_and_close_spin_oncev+0x26>
  }
  return false;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200002d0 	.word	0x200002d0
 80016f0:	20000360 	.word	0x20000360

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f000 ff00 	bl	80024fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f857 	bl	80017b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 fa65 	bl	8001bd0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001706:	f000 fa03 	bl	8001b10 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 800170a:	f000 f99f 	bl	8001a4c <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 800170e:	f000 f8a5 	bl	800185c <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8001712:	f000 f8ef 	bl	80018f4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001716:	f000 f93b 	bl	8001990 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 800171a:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <main+0xb0>)
 800171c:	f003 f9ee 	bl	8004afc <HAL_TIM_Base_Start_IT>

  actuators_go_to_init_poses();
 8001720:	f7ff ff74 	bl	800160c <_Z26actuators_go_to_init_posesv>

  setup_lasers();
 8001724:	f7ff fe42 	bl	80013ac <_Z12setup_lasersv>
  setup_hoppers();
 8001728:	f7ff ff78 	bl	800161c <_Z13setup_hoppersv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool left_closed = false;
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
  bool right_closed = false;
 8001730:	2300      	movs	r3, #0
 8001732:	71bb      	strb	r3, [r7, #6]
  bool stored = false;
 8001734:	2300      	movs	r3, #0
 8001736:	717b      	strb	r3, [r7, #5]

    while (1)
    {
      update_distance(sensor_left);
 8001738:	481b      	ldr	r0, [pc, #108]	@ (80017a8 <main+0xb4>)
 800173a:	f7ff fe03 	bl	8001344 <_Z15update_distanceR12LASER_SENSOR>
      update_distance(sensor_right);
 800173e:	481b      	ldr	r0, [pc, #108]	@ (80017ac <main+0xb8>)
 8001740:	f7ff fe00 	bl	8001344 <_Z15update_distanceR12LASER_SENSOR>

      // Print the distances
      // printf("Left: %d mm, Right: %d mm\n", sensor_left.results.distance_mm, sensor_right.results.distance_mm);

      if(!left_closed)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f083 0301 	eor.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <main+0x64>
      {
        left_closed = hopper_left_wait_and_close_spin_once();
 8001750:	f7ff ff9c 	bl	800168c <_Z36hopper_left_wait_and_close_spin_oncev>
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]

      }
      if(!right_closed)
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <main+0x78>
      {
        right_closed = hopper_right_wait_and_close_spin_once();
 8001764:	f7ff ffac 	bl	80016c0 <_Z37hopper_right_wait_and_close_spin_oncev>
 8001768:	4603      	mov	r3, r0
 800176a:	71bb      	strb	r3, [r7, #6]
      }
      if(left_closed && right_closed && !stored)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0e2      	beq.n	8001738 <main+0x44>
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0df      	beq.n	8001738 <main+0x44>
 8001778:	797b      	ldrb	r3, [r7, #5]
 800177a:	f083 0301 	eor.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0d9      	beq.n	8001738 <main+0x44>
      {
        HAL_Delay(500); // Bc hoppers functions are not blocking
 8001784:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001788:	f000 ff2a 	bl	80025e0 <HAL_Delay>
        stored = true;
 800178c:	2301      	movs	r3, #1
 800178e:	717b      	strb	r3, [r7, #5]
        lift_go_up();
 8001790:	f7ff fe96 	bl	80014c0 <_Z10lift_go_upv>
        grabber_extend();
 8001794:	f7ff fec8 	bl	8001528 <_Z14grabber_extendv>
        lift_go_middle();
 8001798:	f7ff feac 	bl	80014f4 <_Z14lift_go_middlev>
        grabber_retract(false);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fed9 	bl	8001554 <_Z15grabber_retractb>
      update_distance(sensor_left);
 80017a2:	e7c9      	b.n	8001738 <main+0x44>
 80017a4:	2000013c 	.word	0x2000013c
 80017a8:	200002b4 	.word	0x200002b4
 80017ac:	200002d0 	.word	0x200002d0

080017b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	@ 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0318 	add.w	r3, r7, #24
 80017ba:	2238      	movs	r2, #56	@ 0x38
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 f8aa 	bl	8006918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f002 f968 	bl	8003aa8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e2:	2340      	movs	r3, #64	@ 0x40
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e6:	2302      	movs	r3, #2
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ea:	2302      	movs	r3, #2
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017ee:	2304      	movs	r3, #4
 80017f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017f2:	2355      	movs	r3, #85	@ 0x55
 80017f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017fe:	2302      	movs	r3, #2
 8001800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fa02 	bl	8003c10 <HAL_RCC_OscConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800181c:	f000 fa3c 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2303      	movs	r3, #3
 8001826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2104      	movs	r1, #4
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fcfb 	bl	8004234 <HAL_RCC_ClockConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800184e:	f000 fa23 	bl	8001c98 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	@ 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001862:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001864:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800188c:	2210      	movs	r2, #16
 800188e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001892:	2201      	movs	r2, #1
 8001894:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001898:	2202      	movs	r2, #2
 800189a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800189e:	2202      	movs	r2, #2
 80018a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80018ce:	f000 ffb9 	bl	8002844 <HAL_FDCAN_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80018e2:	f000 f9d9 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000084 	.word	0x20000084
 80018f0:	40006400 	.word	0x40006400

080018f4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <_ZL12MX_I2C1_Initv+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001900:	4a22      	ldr	r2, [pc, #136]	@ (800198c <_ZL12MX_I2C1_Initv+0x98>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 800190c:	2201      	movs	r2, #1
 800190e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800192e:	4815      	ldr	r0, [pc, #84]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001930:	f001 fad2 	bl	8002ed8 <HAL_I2C_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001944:	f000 f9a8 	bl	8001c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	480e      	ldr	r0, [pc, #56]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 800194c:	f002 f814 	bl	8003978 <HAL_I2CEx_ConfigAnalogFilter>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001960:	f000 f99a 	bl	8001c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001964:	2100      	movs	r1, #0
 8001966:	4807      	ldr	r0, [pc, #28]	@ (8001984 <_ZL12MX_I2C1_Initv+0x90>)
 8001968:	f002 f851 	bl	8003a0e <HAL_I2CEx_ConfigDigitalFilter>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800197c:	f000 f98c 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000e8 	.word	0x200000e8
 8001988:	40005400 	.word	0x40005400
 800198c:	30a0a7fb 	.word	0x30a0a7fb

08001990 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80019b6:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019b8:	2210      	movs	r2, #16
 80019ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019c4:	4a20      	ldr	r2, [pc, #128]	@ (8001a48 <_ZL12MX_TIM2_Initv+0xb8>)
 80019c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d4:	481b      	ldr	r0, [pc, #108]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019d6:	f003 f839 	bl	8004a4c <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80019ea:	f000 f955 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	4812      	ldr	r0, [pc, #72]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 80019fc:	f003 fa38 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001a10:	f000 f942 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4808      	ldr	r0, [pc, #32]	@ (8001a44 <_ZL12MX_TIM2_Initv+0xb4>)
 8001a22:	f003 fc7f 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001a36:	f000 f92f 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000013c 	.word	0x2000013c
 8001a48:	000f4240 	.word	0x000f4240

08001a4c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a50:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a52:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a58:	4a2c      	ldr	r2, [pc, #176]	@ (8001b0c <_ZL19MX_USART1_UART_Initv+0xc0>)
 8001a5a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a70:	220c      	movs	r2, #12
 8001a72:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001a92:	481c      	ldr	r0, [pc, #112]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001a94:	f003 fd5e 	bl	8005554 <HAL_HalfDuplex_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8001aa8:	f000 f8f6 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	4815      	ldr	r0, [pc, #84]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ab0:	f004 fc5d 	bl	800636e <HAL_UARTEx_SetTxFifoThreshold>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8001ac4:	f000 f8e8 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001acc:	f004 fc8d 	bl	80063ea <HAL_UARTEx_SetRxFifoThreshold>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8001ae0:	f000 f8da 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001ae4:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ae6:	f004 fbce 	bl	8006286 <HAL_UARTEx_EnableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8001afa:	f000 f8cd 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000188 	.word	0x20000188
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	000f4240 	.word	0x000f4240

08001b10 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b16:	4a2d      	ldr	r2, [pc, #180]	@ (8001bcc <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b58:	481b      	ldr	r0, [pc, #108]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b5a:	f003 fcab 	bl	80054b4 <HAL_UART_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001b6e:	f000 f893 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4814      	ldr	r0, [pc, #80]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b76:	f004 fbfa 	bl	800636e <HAL_UARTEx_SetTxFifoThreshold>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001b8a:	f000 f885 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001b92:	f004 fc2a 	bl	80063ea <HAL_UARTEx_SetRxFifoThreshold>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001ba6:	f000 f877 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001bac:	f004 fba6 	bl	80062fc <HAL_UARTEx_DisableFifoMode>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001bc0:	f000 f86a 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000021c 	.word	0x2000021c
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	4a29      	ldr	r2, [pc, #164]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	4a23      	ldr	r2, [pc, #140]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <_ZL12MX_GPIO_Initv+0xc0>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2192      	movs	r1, #146	@ 0x92
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1e:	f001 f943 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8001c22:	2200      	movs	r2, #0
 8001c24:	f240 1171 	movw	r1, #369	@ 0x171
 8001c28:	481a      	ldr	r0, [pc, #104]	@ (8001c94 <_ZL12MX_GPIO_Initv+0xc4>)
 8001c2a:	f001 f93d 	bl	8002ea8 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8001c2e:	2392      	movs	r3, #146	@ 0x92
 8001c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f000 ffac 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8001c4c:	f240 1371 	movw	r3, #369	@ 0x171
 8001c50:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <_ZL12MX_GPIO_Initv+0xc4>)
 8001c66:	f000 ff9d 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = FIN_COURSE_RES_Pin;
 8001c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FIN_COURSE_RES_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c82:	f000 ff8f 	bl	8002ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	48000400 	.word	0x48000400

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <Error_Handler+0x8>

08001ca4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d11e      	bne.n	8001cf2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d119      	bne.n	8001cf2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2340      	movs	r3, #64	@ 0x40
 8001cca:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001cce:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001cd0:	f7ff f936 	bl	8000f40 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ce2:	4907      	ldr	r1, [pc, #28]	@ (8001d00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001ce4:	4808      	ldr	r0, [pc, #32]	@ (8001d08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ce6:	f7ff f92b 	bl	8000f40 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001cec:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001cee:	f7fe fc5f 	bl	80005b0 <_ZN7SCServoC1EP20__UART_HandleTypeDef>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	48000400 	.word	0x48000400
 8001d00:	080011b5 	.word	0x080011b5
 8001d04:	200002f0 	.word	0x200002f0
 8001d08:	20000328 	.word	0x20000328
 8001d0c:	20000188 	.word	0x20000188
 8001d10:	20000360 	.word	0x20000360

08001d14 <_GLOBAL__sub_I_hfdcan1>:
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff ffc1 	bl	8001ca4 <_Z41__static_initialization_and_destruction_0ii>
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	603a      	str	r2, [r7, #0]
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	460b      	mov	r3, r1
 8001d32:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001d38:	88bb      	ldrh	r3, [r7, #4]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8001d48:	f107 020c 	add.w	r2, r7, #12
 8001d4c:	88f9      	ldrh	r1, [r7, #6]
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2302      	movs	r3, #2
 8001d54:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8001d56:	f001 f95b 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8001d5e:	f107 0208 	add.w	r2, r7, #8
 8001d62:	88f9      	ldrh	r1, [r7, #6]
 8001d64:	2364      	movs	r3, #100	@ 0x64
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2304      	movs	r3, #4
 8001d6a:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8001d6c:	f001 fa68 	bl	8003240 <HAL_I2C_Master_Receive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8001d74:	7a3b      	ldrb	r3, [r7, #8]
 8001d76:	061a      	lsls	r2, r3, #24
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8001d7e:	7abb      	ldrb	r3, [r7, #10]
 8001d80:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8001d82:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8001d84:	7afa      	ldrb	r2, [r7, #11]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
	return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200000e8 	.word	0x200000e8

08001d9c <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	4603      	mov	r3, r0
 8001da4:	603a      	str	r2, [r7, #0]
 8001da6:	80fb      	strh	r3, [r7, #6]
 8001da8:	460b      	mov	r3, r1
 8001daa:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	88f9      	ldrh	r1, [r7, #6]
 8001dc6:	2364      	movs	r3, #100	@ 0x64
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2302      	movs	r3, #2
 8001dcc:	480f      	ldr	r0, [pc, #60]	@ (8001e0c <_Z15VL53L4CD_RdWordttPt+0x70>)
 8001dce:	f001 f91f 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8001dd6:	f107 0208 	add.w	r2, r7, #8
 8001dda:	88f9      	ldrh	r1, [r7, #6]
 8001ddc:	2364      	movs	r3, #100	@ 0x64
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2302      	movs	r3, #2
 8001de2:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <_Z15VL53L4CD_RdWordttPt+0x70>)
 8001de4:	f001 fa2c 	bl	8003240 <HAL_I2C_Master_Receive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 8001dec:	7a3b      	ldrb	r3, [r7, #8]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	7a7b      	ldrb	r3, [r7, #9]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	801a      	strh	r2, [r3, #0]
	return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000e8 	.word	0x200000e8

08001e10 <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	603a      	str	r2, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8001e34:	f107 020c 	add.w	r2, r7, #12
 8001e38:	88f9      	ldrh	r1, [r7, #6]
 8001e3a:	2364      	movs	r3, #100	@ 0x64
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8001e42:	f001 f8e5 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8001e4a:	f107 0208 	add.w	r2, r7, #8
 8001e4e:	88f9      	ldrh	r1, [r7, #6]
 8001e50:	2364      	movs	r3, #100	@ 0x64
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2301      	movs	r3, #1
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8001e58:	f001 f9f2 	bl	8003240 <HAL_I2C_Master_Receive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8001e60:	7a3a      	ldrb	r2, [r7, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
	return status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200000e8 	.word	0x200000e8

08001e74 <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	80bb      	strh	r3, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8001e9e:	f107 020c 	add.w	r2, r7, #12
 8001ea2:	88f9      	ldrh	r1, [r7, #6]
 8001ea4:	2364      	movs	r3, #100	@ 0x64
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <_Z15VL53L4CD_WrBytetth+0x4c>)
 8001eac:	f001 f8b0 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
	return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000e8 	.word	0x200000e8

08001ec4 <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	80bb      	strh	r3, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8001ee4:	88bb      	ldrh	r3, [r7, #4]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	88f9      	ldrh	r1, [r7, #6]
 8001f00:	2364      	movs	r3, #100	@ 0x64
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2304      	movs	r3, #4
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <_Z15VL53L4CD_WrWordttt+0x58>)
 8001f08:	f001 f882 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200000e8 	.word	0x200000e8

08001f20 <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	4603      	mov	r3, r0
 8001f28:	603a      	str	r2, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001f34:	88bb      	ldrh	r3, [r7, #4]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	0e1b      	lsrs	r3, r3, #24
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	0c1b      	lsrs	r3, r3, #16
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8001f62:	f107 0208 	add.w	r2, r7, #8
 8001f66:	88f9      	ldrh	r1, [r7, #6]
 8001f68:	2364      	movs	r3, #100	@ 0x64
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <_Z16VL53L4CD_WrDWordttm+0x64>)
 8001f70:	f001 f84e 	bl	8003010 <HAL_I2C_Master_Transmit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
	return status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200000e8 	.word	0x200000e8

08001f88 <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f000 fb23 	bl	80025e0 <HAL_Delay>
	return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_MspInit+0x44>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fda:	f001 fe09 	bl	8003bf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b09a      	sub	sp, #104	@ 0x68
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2244      	movs	r2, #68	@ 0x44
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fc83 	bl	8006918 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <HAL_FDCAN_MspInit+0xac>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d139      	bne.n	8002090 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800201c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002020:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002026:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fb1d 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002038:	f7ff fe2e 	bl	8001c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	4a16      	ldr	r2, [pc, #88]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 8002042:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002046:	6593      	str	r3, [r2, #88]	@ 0x58
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002058:	4a10      	ldr	r2, [pc, #64]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_FDCAN_MspInit+0xb0>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800206c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002070:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800207e:	2309      	movs	r3, #9
 8002080:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208c:	f000 fd8a 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3768      	adds	r7, #104	@ 0x68
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40006400 	.word	0x40006400
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09c      	sub	sp, #112	@ 0x70
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	2244      	movs	r2, #68	@ 0x44
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fc29 	bl	8006918 <memset>
  if(hi2c->Instance==I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <HAL_I2C_MspInit+0xe0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d153      	bne.n	8002178 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fac5 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020e8:	f7ff fdd6 	bl	8001c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	4a24      	ldr	r2, [pc, #144]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f8:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002108:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800211c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002122:	2312      	movs	r3, #18
 8002124:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212e:	2304      	movs	r3, #4
 8002130:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213c:	f000 fd32 	bl	8002ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002144:	2312      	movs	r3, #18
 8002146:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002150:	2304      	movs	r3, #4
 8002152:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	@ (8002188 <HAL_I2C_MspInit+0xe8>)
 800215c:	f000 fd22 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216a:	6593      	str	r3, [r2, #88]	@ 0x58
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_I2C_MspInit+0xe4>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3770      	adds	r7, #112	@ 0x70
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40005400 	.word	0x40005400
 8002184:	40021000 	.word	0x40021000
 8002188:	48000400 	.word	0x48000400

0800218c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219c:	d113      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <HAL_TIM_Base_MspInit+0x44>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <HAL_TIM_Base_MspInit+0x44>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_TIM_Base_MspInit+0x44>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	201c      	movs	r0, #28
 80021bc:	f000 fb0d 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c0:	201c      	movs	r0, #28
 80021c2:	f000 fb24 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09c      	sub	sp, #112	@ 0x70
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	2244      	movs	r2, #68	@ 0x44
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 fb8f 	bl	8006918 <memset>
  if(huart->Instance==USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	@ (80022f8 <HAL_UART_MspInit+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d138      	bne.n	8002276 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fa2b 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800221c:	f7ff fd3c 	bl	8001c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002220:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <HAL_UART_MspInit+0x128>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002224:	4a35      	ldr	r2, [pc, #212]	@ (80022fc <HAL_UART_MspInit+0x128>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222a:	6613      	str	r3, [r2, #96]	@ 0x60
 800222c:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_UART_MspInit+0x128>)
 800222e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b30      	ldr	r3, [pc, #192]	@ (80022fc <HAL_UART_MspInit+0x128>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <HAL_UART_MspInit+0x128>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <HAL_UART_MspInit+0x128>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002254:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002262:	2307      	movs	r3, #7
 8002264:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002270:	f000 fc98 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002274:	e03b      	b.n	80022ee <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <HAL_UART_MspInit+0x12c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d136      	bne.n	80022ee <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f002 f9ed 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002298:	f7ff fcfe 	bl	8001c98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_UART_MspInit+0x128>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_UART_MspInit+0x128>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <HAL_UART_MspInit+0x128>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_UART_MspInit+0x128>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b8:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <HAL_UART_MspInit+0x128>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_UART_MspInit+0x128>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80022cc:	230c      	movs	r3, #12
 80022ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022dc:	2307      	movs	r3, #7
 80022de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ea:	f000 fc5b 	bl	8002ba4 <HAL_GPIO_Init>
}
 80022ee:	bf00      	nop
 80022f0:	3770      	adds	r7, #112	@ 0x70
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40004400 	.word	0x40004400

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <NMI_Handler+0x4>

0800230c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <MemManage_Handler+0x4>

0800231c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <UsageFault_Handler+0x4>

0800232c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235a:	f000 f923 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM2_IRQHandler+0x10>)
 800236a:	f002 fc31 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000013c 	.word	0x2000013c

08002378 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
  }

  return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023da:	605a      	str	r2, [r3, #4]
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_isatty>:

int _isatty(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f004 fab2 	bl	80069b4 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20008000 	.word	0x20008000
 800247c:	00000400 	.word	0x00000400
 8002480:	20000364 	.word	0x20000364
 8002484:	200004b8 	.word	0x200004b8

08002488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024ac:	480d      	ldr	r0, [pc, #52]	@ (80024e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 80024b0:	f7ff ffea 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <LoopForever+0xe>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	@ (80024f8 <LoopForever+0x16>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024da:	f004 fa71 	bl	80069c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024de:	f7ff f909 	bl	80016f4 <main>

080024e2 <LoopForever>:

LoopForever:
    b LoopForever
 80024e2:	e7fe      	b.n	80024e2 <LoopForever>
  ldr   r0, =_estack
 80024e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024f0:	08007788 	.word	0x08007788
  ldr r2, =_sbss
 80024f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024f8:	200004b8 	.word	0x200004b8

080024fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC1_2_IRQHandler>

080024fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f000 f95b 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f80e 	bl	8002530 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	e001      	b.n	8002524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002520:	f7ff fd40 	bl	8001fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002524:	79fb      	ldrb	r3, [r7, #7]

}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_InitTick+0x68>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d022      	beq.n	800258a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002544:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_InitTick+0x6c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_InitTick+0x68>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002550:	fbb1 f3f3 	udiv	r3, r1, r3
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f966 	bl	800282a <HAL_SYSTICK_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	d809      	bhi.n	800257e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256a:	2200      	movs	r2, #0
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002572:	f000 f932 	bl	80027da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <HAL_InitTick+0x70>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e007      	b.n	800258e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e004      	b.n	800258e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e001      	b.n	800258e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000008 	.word	0x20000008
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_IncTick+0x1c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_IncTick+0x20>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a03      	ldr	r2, [pc, #12]	@ (80025c0 <HAL_IncTick+0x1c>)
 80025b4:	6013      	str	r3, [r2, #0]
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000368 	.word	0x20000368
 80025c4:	20000008 	.word	0x20000008

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000368 	.word	0x20000368

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f8:	d004      	beq.n	8002604 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_Delay+0x40>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4413      	add	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002604:	bf00      	nop
 8002606:	f7ff ffdf 	bl	80025c8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	429a      	cmp	r2, r3
 8002614:	d8f7      	bhi.n	8002606 <HAL_Delay+0x26>
  {
  }
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000008 	.word	0x20000008

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	@ (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	@ (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	@ (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002790:	d301      	bcc.n	8002796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002792:	2301      	movs	r3, #1
 8002794:	e00f      	b.n	80027b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <SysTick_Config+0x40>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279e:	210f      	movs	r1, #15
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027a4:	f7ff ff8e 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <SysTick_Config+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <SysTick_Config+0x40>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff29 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e8:	f7ff ff40 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff90 	bl	8002718 <NVIC_EncodePriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff5f 	bl	80026c4 <__NVIC_SetPriority>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff33 	bl	8002688 <__NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffa4 	bl	8002780 <SysTick_Config>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e147      	b.n	8002ae6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fbbe 	bl	8001fec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0210 	bic.w	r2, r2, #16
 800287e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002880:	f7ff fea2 	bl	80025c8 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002886:	e012      	b.n	80028ae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002888:	f7ff fe9e 	bl	80025c8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d90b      	bls.n	80028ae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e11b      	b.n	8002ae6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d0e5      	beq.n	8002888 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028cc:	f7ff fe7c 	bl	80025c8 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028d2:	e012      	b.n	80028fa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80028d4:	f7ff fe78 	bl	80025c8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b0a      	cmp	r3, #10
 80028e0:	d90b      	bls.n	80028fa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0f5      	b.n	8002ae6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0e5      	beq.n	80028d4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0202 	orr.w	r2, r2, #2
 8002916:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a74      	ldr	r2, [pc, #464]	@ (8002af0 <HAL_FDCAN_Init+0x2ac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d103      	bne.n	800292a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002922:	4a74      	ldr	r2, [pc, #464]	@ (8002af4 <HAL_FDCAN_Init+0x2b0>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7c1b      	ldrb	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002940:	619a      	str	r2, [r3, #24]
 8002942:	e007      	b.n	8002954 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002952:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7c5b      	ldrb	r3, [r3, #17]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800296a:	619a      	str	r2, [r3, #24]
 800296c:	e007      	b.n	800297e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800297c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7c9b      	ldrb	r3, [r3, #18]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e007      	b.n	80029a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80029cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0210 	bic.w	r2, r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	619a      	str	r2, [r3, #24]
 80029f6:	e02c      	b.n	8002a52 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d01c      	beq.n	8002a42 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a16:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0210 	orr.w	r2, r2, #16
 8002a26:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d110      	bne.n	8002a52 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0220 	orr.w	r2, r2, #32
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e007      	b.n	8002a52 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0220 	orr.w	r2, r2, #32
 8002a50:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a62:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a7a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a7c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a86:	d115      	bne.n	8002ab4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	3b01      	subs	r3, #1
 8002a94:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a96:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ab0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ab2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f814 	bl	8002af8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40006400 	.word	0x40006400
 8002af4:	40006500 	.word	0x40006500

08002af8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b02:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b12:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b38:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b40:	061a      	lsls	r2, r3, #24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e005      	b.n	8002b86 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3f3      	bcc.n	8002b7a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	4000a400 	.word	0x4000a400

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bb2:	e15a      	b.n	8002e6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 814c 	beq.w	8002e64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d005      	beq.n	8002be4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d130      	bne.n	8002c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0201 	and.w	r2, r3, #1
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d017      	beq.n	8002c82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d123      	bne.n	8002cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	6939      	ldr	r1, [r7, #16]
 8002cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0203 	and.w	r2, r3, #3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a6 	beq.w	8002e64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d18:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <HAL_GPIO_Init+0x2e4>)
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e88 <HAL_GPIO_Init+0x2e4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d24:	4b58      	ldr	r3, [pc, #352]	@ (8002e88 <HAL_GPIO_Init+0x2e4>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d30:	4a56      	ldr	r2, [pc, #344]	@ (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d5a:	d01f      	beq.n	8002d9c <HAL_GPIO_Init+0x1f8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d019      	beq.n	8002d98 <HAL_GPIO_Init+0x1f4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4b      	ldr	r2, [pc, #300]	@ (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_GPIO_Init+0x1f0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e98 <HAL_GPIO_Init+0x2f4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00d      	beq.n	8002d90 <HAL_GPIO_Init+0x1ec>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a49      	ldr	r2, [pc, #292]	@ (8002e9c <HAL_GPIO_Init+0x2f8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <HAL_GPIO_Init+0x1e8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_GPIO_Init+0x2fc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_GPIO_Init+0x1e4>
 8002d84:	2305      	movs	r3, #5
 8002d86:	e00a      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d88:	2306      	movs	r3, #6
 8002d8a:	e008      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e006      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d90:	2303      	movs	r3, #3
 8002d92:	e004      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e002      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	f002 0203 	and.w	r2, r2, #3
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	4093      	lsls	r3, r2
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dae:	4937      	ldr	r1, [pc, #220]	@ (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de0:	4a30      	ldr	r2, [pc, #192]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002de6:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f ae9d 	bne.w	8002bb4 <HAL_GPIO_Init+0x10>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	48000400 	.word	0x48000400
 8002e94:	48000800 	.word	0x48000800
 8002e98:	48000c00 	.word	0x48000c00
 8002e9c:	48001000 	.word	0x48001000
 8002ea0:	48001400 	.word	0x48001400
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08d      	b.n	8003006 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff f8ce 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e006      	b.n	8002f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d108      	bne.n	8002f7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	e007      	b.n	8002f8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
 8003020:	4613      	mov	r3, r2
 8003022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	f040 80fd 	bne.w	800322c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x30>
 800303c:	2302      	movs	r3, #2
 800303e:	e0f6      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003048:	f7ff fabe 	bl	80025c8 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	2201      	movs	r2, #1
 8003056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa0a 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e1      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2221      	movs	r2, #33	@ 0x21
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2210      	movs	r2, #16
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	893a      	ldrh	r2, [r7, #8]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2bff      	cmp	r3, #255	@ 0xff
 800309a:	d906      	bls.n	80030aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	22ff      	movs	r2, #255	@ 0xff
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80030a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e007      	b.n	80030ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003238 <HAL_I2C_Master_Transmit+0x228>)
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fc05 	bl	8003914 <I2C_TransferConfig>
 800310a:	e066      	b.n	80031da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	4b48      	ldr	r3, [pc, #288]	@ (8003238 <HAL_I2C_Master_Transmit+0x228>)
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fbfa 	bl	8003914 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003120:	e05b      	b.n	80031da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f9fd 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07b      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d034      	beq.n	80031da <HAL_I2C_Master_Transmit+0x1ca>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d130      	bne.n	80031da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2200      	movs	r2, #0
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f976 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e04d      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2bff      	cmp	r3, #255	@ 0xff
 800319a:	d90e      	bls.n	80031ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	2300      	movs	r3, #0
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fbae 	bl	8003914 <I2C_TransferConfig>
 80031b8:	e00f      	b.n	80031da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fb9d 	bl	8003914 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d19e      	bne.n	8003122 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	6a39      	ldr	r1, [r7, #32]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f9e3 	bl	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01a      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2220      	movs	r2, #32
 80031fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <HAL_I2C_Master_Transmit+0x22c>)
 800320c:	400b      	ands	r3, r1
 800320e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	80002000 	.word	0x80002000
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 80db 	bne.w	8003418 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_Master_Receive+0x30>
 800326c:	2302      	movs	r3, #2
 800326e:	e0d4      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003278:	f7ff f9a6 	bl	80025c8 <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2319      	movs	r3, #25
 8003284:	2201      	movs	r2, #1
 8003286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8f2 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0bf      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2222      	movs	r2, #34	@ 0x22
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2210      	movs	r2, #16
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	893a      	ldrh	r2, [r7, #8]
 80032ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2bff      	cmp	r3, #255	@ 0xff
 80032ca:	d90e      	bls.n	80032ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	22ff      	movs	r2, #255	@ 0xff
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	4b52      	ldr	r3, [pc, #328]	@ (8003424 <HAL_I2C_Master_Receive+0x1e4>)
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fb16 	bl	8003914 <I2C_TransferConfig>
 80032e8:	e06d      	b.n	80033c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	4b49      	ldr	r3, [pc, #292]	@ (8003424 <HAL_I2C_Master_Receive+0x1e4>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fb05 	bl	8003914 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800330a:	e05c      	b.n	80033c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6a39      	ldr	r1, [r7, #32]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f993 	bl	800363c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e07c      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d034      	beq.n	80033c6 <HAL_I2C_Master_Receive+0x186>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d130      	bne.n	80033c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	2200      	movs	r2, #0
 800336c:	2180      	movs	r1, #128	@ 0x80
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f880 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e04d      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	2bff      	cmp	r3, #255	@ 0xff
 8003386:	d90e      	bls.n	80033a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	22ff      	movs	r2, #255	@ 0xff
 800338c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	b2da      	uxtb	r2, r3
 8003394:	8979      	ldrh	r1, [r7, #10]
 8003396:	2300      	movs	r3, #0
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fab8 	bl	8003914 <I2C_TransferConfig>
 80033a4:	e00f      	b.n	80033c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8979      	ldrh	r1, [r7, #10]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 faa7 	bl	8003914 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d19d      	bne.n	800330c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6a39      	ldr	r1, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8ed 	bl	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e01a      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2220      	movs	r2, #32
 80033ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <HAL_I2C_Master_Receive+0x1e8>)
 80033f8:	400b      	ands	r3, r1
 80033fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	80002400 	.word	0x80002400
 8003428:	fe00e800 	.word	0xfe00e800

0800342c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d103      	bne.n	800344a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d007      	beq.n	8003468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	619a      	str	r2, [r3, #24]
  }
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003484:	e03b      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f962 	bl	8003754 <I2C_IsErrorOccurred>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e041      	b.n	800351e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034a0:	d02d      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7ff f891 	bl	80025c8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d122      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d113      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0b4      	beq.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003532:	e033      	b.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f90b 	bl	8003754 <I2C_IsErrorOccurred>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e031      	b.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800354e:	d025      	beq.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003550:	f7ff f83a 	bl	80025c8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	d302      	bcc.n	8003566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11a      	bne.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d013      	beq.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d1c4      	bne.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c0:	e02f      	b.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f8c4 	bl	8003754 <I2C_IsErrorOccurred>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e02d      	b.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe fff7 	bl	80025c8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d013      	beq.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e007      	b.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b20      	cmp	r3, #32
 800362e:	d1c8      	bne.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800364c:	e071      	b.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f87e 	bl	8003754 <I2C_IsErrorOccurred>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d13b      	bne.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d138      	bne.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d105      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b10      	cmp	r3, #16
 800369c:	d121      	bne.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2210      	movs	r2, #16
 80036a4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2204      	movs	r2, #4
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2220      	movs	r2, #32
 80036b2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
 80036e0:	e002      	b.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036e8:	f7fe ff6e 	bl	80025c8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d119      	bne.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00f      	beq.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d002      	beq.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d083      	beq.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fe00e800 	.word	0xfe00e800

08003754 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	@ 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d068      	beq.n	8003852 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2210      	movs	r2, #16
 8003786:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003788:	e049      	b.n	800381e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003790:	d045      	beq.n	800381e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe ff19 	bl	80025c8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_IsErrorOccurred+0x54>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13a      	bne.n	800381e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ca:	d121      	bne.n	8003810 <I2C_IsErrorOccurred+0xbc>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d2:	d01d      	beq.n	8003810 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d01a      	beq.n	8003810 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037ea:	f7fe feed 	bl	80025c8 <HAL_GetTick>
 80037ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	e00e      	b.n	8003810 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037f2:	f7fe fee9 	bl	80025c8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b19      	cmp	r3, #25
 80037fe:	d907      	bls.n	8003810 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f043 0320 	orr.w	r3, r3, #32
 8003806:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800380e:	e006      	b.n	800381e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d1e9      	bne.n	80037f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d003      	beq.n	8003834 <I2C_IsErrorOccurred+0xe0>
 800382c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0aa      	beq.n	800378a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2220      	movs	r2, #32
 8003842:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f043 0304 	orr.w	r3, r3, #4
 800384a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f043 0308 	orr.w	r3, r3, #8
 800388c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003896:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fdaf 	bl	800342c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <I2C_IsErrorOccurred+0x1bc>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003906:	4618      	mov	r0, r3
 8003908:	3728      	adds	r7, #40	@ 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	fe00e800 	.word	0xfe00e800

08003914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	4613      	mov	r3, r2
 8003924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800392c:	7a7b      	ldrb	r3, [r7, #9]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003934:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	4313      	orrs	r3, r2
 800393e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003942:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	0d5b      	lsrs	r3, r3, #21
 800394e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <I2C_TransferConfig+0x60>)
 8003954:	430b      	orrs	r3, r1
 8003956:	43db      	mvns	r3, r3
 8003958:	ea02 0103 	and.w	r1, r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	03ff63ff 	.word	0x03ff63ff

08003978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b20      	cmp	r3, #32
 800398c:	d138      	bne.n	8003a00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003998:	2302      	movs	r3, #2
 800399a:	e032      	b.n	8003a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d139      	bne.n	8003a98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e033      	b.n	8003a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2224      	movs	r2, #36	@ 0x24
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d141      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac2:	d131      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac4:	4b47      	ldr	r3, [pc, #284]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aca:	4a46      	ldr	r2, [pc, #280]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad4:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003adc:	4a41      	ldr	r2, [pc, #260]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2232      	movs	r2, #50	@ 0x32
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a3f      	ldr	r2, [pc, #252]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afa:	e002      	b.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b02:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0e:	d102      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f2      	bne.n	8003afc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b16:	4b33      	ldr	r3, [pc, #204]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b22:	d158      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e057      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b28:	4b2e      	ldr	r3, [pc, #184]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b38:	e04d      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d141      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b42:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d131      	bne.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b50:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b56:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b60:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b68:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2232      	movs	r2, #50	@ 0x32
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9b      	lsrs	r3, r3, #18
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b86:	e002      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f2      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bae:	d112      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e011      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bba:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bc4:	e007      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bce:	4a05      	ldr	r2, [pc, #20]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40007000 	.word	0x40007000
 8003be8:	20000000 	.word	0x20000000
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bfe:	6093      	str	r3, [r2, #8]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e2fe      	b.n	8004220 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2e:	4b97      	ldr	r3, [pc, #604]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c38:	4b94      	ldr	r3, [pc, #592]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d102      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3e>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCC_OscConfig+0x44>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b8d      	ldr	r3, [pc, #564]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e2d9      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x74>
 8003c76:	4b85      	ldr	r3, [pc, #532]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a84      	ldr	r2, [pc, #528]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x98>
 8003c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a7e      	ldr	r2, [pc, #504]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a77      	ldr	r2, [pc, #476]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b75      	ldr	r3, [pc, #468]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a74      	ldr	r2, [pc, #464]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fc7e 	bl	80025c8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fc7a 	bl	80025c8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	@ 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e29e      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fc6a 	bl	80025c8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fc66 	bl	80025c8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e28a      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0a:	4b60      	ldr	r3, [pc, #384]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d26:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d30:	4b56      	ldr	r3, [pc, #344]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_OscConfig+0x136>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d002      	beq.n	8003d4c <HAL_RCC_OscConfig+0x13c>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11f      	bne.n	8003d8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_OscConfig+0x154>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e25d      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b49      	ldr	r3, [pc, #292]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	4946      	ldr	r1, [pc, #280]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d78:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe fbd7 	bl	8002530 <HAL_InitTick>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d043      	beq.n	8003e10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e249      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d023      	beq.n	8003ddc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d94:	4b3d      	ldr	r3, [pc, #244]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3c      	ldr	r2, [pc, #240]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fc12 	bl	80025c8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fe fc0e 	bl	80025c8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e232      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dba:	4b34      	ldr	r3, [pc, #208]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	492d      	ldr	r1, [pc, #180]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
 8003dda:	e01a      	b.n	8003e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003de2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fbee 	bl	80025c8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe fbea 	bl	80025c8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e20e      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e02:	4b22      	ldr	r3, [pc, #136]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1e0>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d041      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2c:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fe fbc7 	bl	80025c8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fbc3 	bl	80025c8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e1e7      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ef      	beq.n	8003e3e <HAL_RCC_OscConfig+0x22e>
 8003e5e:	e020      	b.n	8003ea2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e66:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe fbaa 	bl	80025c8 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e76:	e00d      	b.n	8003e94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe fba6 	bl	80025c8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d906      	bls.n	8003e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1ca      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e94:	4b8c      	ldr	r3, [pc, #560]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ea      	bne.n	8003e78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80a6 	beq.w	8003ffc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb4:	4b84      	ldr	r3, [pc, #528]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x2b4>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x2b6>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	4b7f      	ldr	r3, [pc, #508]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	4a7e      	ldr	r2, [pc, #504]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee6:	4b79      	ldr	r3, [pc, #484]	@ (80040cc <HAL_RCC_OscConfig+0x4bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_RCC_OscConfig+0x4bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_RCC_OscConfig+0x4bc>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fe fb63 	bl	80025c8 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fe fb5f 	bl	80025c8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e183      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_RCC_OscConfig+0x4bc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <HAL_RCC_OscConfig+0x32e>
 8003f2c:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	4a65      	ldr	r2, [pc, #404]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f3c:	e024      	b.n	8003f88 <HAL_RCC_OscConfig+0x378>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d110      	bne.n	8003f68 <HAL_RCC_OscConfig+0x358>
 8003f46:	4b60      	ldr	r3, [pc, #384]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f56:	4b5c      	ldr	r3, [pc, #368]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	4a5a      	ldr	r2, [pc, #360]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f66:	e00f      	b.n	8003f88 <HAL_RCC_OscConfig+0x378>
 8003f68:	4b57      	ldr	r3, [pc, #348]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	4a56      	ldr	r2, [pc, #344]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f78:	4b53      	ldr	r3, [pc, #332]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a52      	ldr	r2, [pc, #328]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d016      	beq.n	8003fbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fe fb1a 	bl	80025c8 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe fb16 	bl	80025c8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e138      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ed      	beq.n	8003f98 <HAL_RCC_OscConfig+0x388>
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fb03 	bl	80025c8 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fe faff 	bl	80025c8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e121      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ed      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b35      	ldr	r3, [pc, #212]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4a34      	ldr	r2, [pc, #208]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d03c      	beq.n	8004082 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01c      	beq.n	800404a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004010:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8004012:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004016:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe fad2 	bl	80025c8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004028:	f7fe face 	bl	80025c8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0f2      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403a:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 800403c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0ef      	beq.n	8004028 <HAL_RCC_OscConfig+0x418>
 8004048:	e01b      	b.n	8004082 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800404a:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe fab5 	bl	80025c8 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004062:	f7fe fab1 	bl	80025c8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0d5      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004074:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ef      	bne.n	8004062 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80c9 	beq.w	800421e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408c:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b0c      	cmp	r3, #12
 8004096:	f000 8083 	beq.w	80041a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d15e      	bne.n	8004160 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a08      	ldr	r2, [pc, #32]	@ (80040c8 <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fe fa8b 	bl	80025c8 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b4:	e00c      	b.n	80040d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fe fa87 	bl	80025c8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d905      	bls.n	80040d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0ab      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d0:	4b55      	ldr	r3, [pc, #340]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ec      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040dc:	4b52      	ldr	r3, [pc, #328]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b52      	ldr	r3, [pc, #328]	@ (800422c <HAL_RCC_OscConfig+0x61c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6a11      	ldr	r1, [r2, #32]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040ec:	3a01      	subs	r2, #1
 80040ee:	0112      	lsls	r2, r2, #4
 80040f0:	4311      	orrs	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040f6:	0212      	lsls	r2, r2, #8
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040fe:	0852      	lsrs	r2, r2, #1
 8004100:	3a01      	subs	r2, #1
 8004102:	0552      	lsls	r2, r2, #21
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800410a:	0852      	lsrs	r2, r2, #1
 800410c:	3a01      	subs	r2, #1
 800410e:	0652      	lsls	r2, r2, #25
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004116:	06d2      	lsls	r2, r2, #27
 8004118:	430a      	orrs	r2, r1
 800411a:	4943      	ldr	r1, [pc, #268]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 800411c:	4313      	orrs	r3, r2
 800411e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b41      	ldr	r3, [pc, #260]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a40      	ldr	r2, [pc, #256]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b3e      	ldr	r3, [pc, #248]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a3d      	ldr	r2, [pc, #244]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fa46 	bl	80025c8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fa42 	bl	80025c8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e066      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x530>
 800415e:	e05e      	b.n	800421e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a30      	ldr	r2, [pc, #192]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fa2c 	bl	80025c8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fa28 	bl	80025c8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04c      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	4b28      	ldr	r3, [pc, #160]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004192:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4924      	ldr	r1, [pc, #144]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 8004198:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <HAL_RCC_OscConfig+0x620>)
 800419a:	4013      	ands	r3, r2
 800419c:	60cb      	str	r3, [r1, #12]
 800419e:	e03e      	b.n	800421e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e039      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <HAL_RCC_OscConfig+0x618>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d12c      	bne.n	800421a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	3b01      	subs	r3, #1
 80041cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d123      	bne.n	800421a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11b      	bne.n	800421a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d113      	bne.n	800421a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d109      	bne.n	800421a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	019f800c 	.word	0x019f800c
 8004230:	feeefffc 	.word	0xfeeefffc

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e11e      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b91      	ldr	r3, [pc, #580]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d910      	bls.n	800427c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b8e      	ldr	r3, [pc, #568]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	498c      	ldr	r1, [pc, #560]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b8a      	ldr	r3, [pc, #552]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e106      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d073      	beq.n	8004370 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d129      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004290:	4b81      	ldr	r3, [pc, #516]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0f4      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042a0:	f000 f99e 	bl	80045e0 <RCC_GetSysClockFreqFromPLLSource>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4a7c      	ldr	r2, [pc, #496]	@ (800449c <HAL_RCC_ClockConfig+0x268>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d93f      	bls.n	800432e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d033      	beq.n	800432e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d12f      	bne.n	800432e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ce:	4b72      	ldr	r3, [pc, #456]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d6:	4a70      	ldr	r2, [pc, #448]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80042d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e024      	b.n	800432e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0c6      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042fc:	4b66      	ldr	r3, [pc, #408]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0be      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800430c:	f000 f8ce 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8004310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a61      	ldr	r2, [pc, #388]	@ (800449c <HAL_RCC_ClockConfig+0x268>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d909      	bls.n	800432e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800431a:	4b5f      	ldr	r3, [pc, #380]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004322:	4a5d      	ldr	r2, [pc, #372]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 8004324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004328:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b5a      	ldr	r3, [pc, #360]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4957      	ldr	r1, [pc, #348]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004340:	f7fe f942 	bl	80025c8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fe f93e 	bl	80025c8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e095      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b4e      	ldr	r3, [pc, #312]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d023      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004388:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a42      	ldr	r2, [pc, #264]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800438e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004392:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b39      	ldr	r3, [pc, #228]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4936      	ldr	r1, [pc, #216]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b80      	cmp	r3, #128	@ 0x80
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043ca:	4b33      	ldr	r3, [pc, #204]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4a32      	ldr	r2, [pc, #200]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 80043d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d21d      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 020f 	bic.w	r2, r3, #15
 80043ec:	4929      	ldr	r1, [pc, #164]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043f4:	f7fe f8e8 	bl	80025c8 <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fe f8e4 	bl	80025c8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e03b      	b.n	800448a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d1ed      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b1a      	ldr	r3, [pc, #104]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4917      	ldr	r1, [pc, #92]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490f      	ldr	r1, [pc, #60]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800445e:	f000 f825 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8004462:	4602      	mov	r2, r0
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <HAL_RCC_ClockConfig+0x264>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	490c      	ldr	r1, [pc, #48]	@ (80044a0 <HAL_RCC_ClockConfig+0x26c>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	fa22 f303 	lsr.w	r3, r2, r3
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <HAL_RCC_ClockConfig+0x270>)
 800447c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_RCC_ClockConfig+0x274>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f854 	bl	8002530 <HAL_InitTick>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40022000 	.word	0x40022000
 8004498:	40021000 	.word	0x40021000
 800449c:	04c4b400 	.word	0x04c4b400
 80044a0:	08007700 	.word	0x08007700
 80044a4:	20000000 	.word	0x20000000
 80044a8:	20000004 	.word	0x20000004

080044ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044be:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	e047      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044c4:	4b27      	ldr	r3, [pc, #156]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d0:	4b26      	ldr	r3, [pc, #152]	@ (800456c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	e03e      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044d6:	4b23      	ldr	r3, [pc, #140]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d136      	bne.n	8004550 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e2:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	3301      	adds	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d10c      	bne.n	800451a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004500:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	4a16      	ldr	r2, [pc, #88]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450a:	68d2      	ldr	r2, [r2, #12]
 800450c:	0a12      	lsrs	r2, r2, #8
 800450e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	617b      	str	r3, [r7, #20]
      break;
 8004518:	e00c      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800451a:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xbc>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	0a12      	lsrs	r2, r2, #8
 8004528:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
      break;
 8004532:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	0e5b      	lsrs	r3, r3, #25
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	e001      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004554:	693b      	ldr	r3, [r7, #16]
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	00f42400 	.word	0x00f42400
 800456c:	007a1200 	.word	0x007a1200

08004570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b03      	ldr	r3, [pc, #12]	@ (8004584 <HAL_RCC_GetHCLKFreq+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000000 	.word	0x20000000

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800458c:	f7ff fff0 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08007710 	.word	0x08007710

080045b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045b8:	f7ff ffda 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0adb      	lsrs	r3, r3, #11
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4904      	ldr	r1, [pc, #16]	@ (80045dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000
 80045dc:	08007710 	.word	0x08007710

080045e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d10c      	bne.n	800461e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004604:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	4a14      	ldr	r2, [pc, #80]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800460e:	68d2      	ldr	r2, [r2, #12]
 8004610:	0a12      	lsrs	r2, r2, #8
 8004612:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
    break;
 800461c:	e00c      	b.n	8004638 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800461e:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	4a0e      	ldr	r2, [pc, #56]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004628:	68d2      	ldr	r2, [r2, #12]
 800462a:	0a12      	lsrs	r2, r2, #8
 800462c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    break;
 8004636:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	0e5b      	lsrs	r3, r3, #25
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	3301      	adds	r3, #1
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004652:	687b      	ldr	r3, [r7, #4]
}
 8004654:	4618      	mov	r0, r3
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	00f42400 	.word	0x00f42400

0800466c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004674:	2300      	movs	r3, #0
 8004676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004678:	2300      	movs	r3, #0
 800467a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8098 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468e:	4b43      	ldr	r3, [pc, #268]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	4b40      	ldr	r3, [pc, #256]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	4a3f      	ldr	r2, [pc, #252]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b6:	4b3a      	ldr	r3, [pc, #232]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a39      	ldr	r2, [pc, #228]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c2:	f7fd ff81 	bl	80025c8 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c8:	e009      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fd ff7d 	bl	80025c8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d902      	bls.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	74fb      	strb	r3, [r7, #19]
        break;
 80046dc:	e005      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046de:	4b30      	ldr	r3, [pc, #192]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ef      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d159      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046f0:	4b2a      	ldr	r3, [pc, #168]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	d019      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800470c:	4b23      	ldr	r3, [pc, #140]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004716:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004718:	4b20      	ldr	r3, [pc, #128]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004728:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd ff3d 	bl	80025c8 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004750:	e00b      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fd ff39 	bl	80025c8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d902      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	74fb      	strb	r3, [r7, #19]
            break;
 8004768:	e006      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ec      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	4903      	ldr	r1, [pc, #12]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	74bb      	strb	r3, [r7, #18]
 800479a:	e005      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a8:	7c7b      	ldrb	r3, [r7, #17]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4ba6      	ldr	r3, [pc, #664]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	4aa5      	ldr	r2, [pc, #660]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c6:	4ba0      	ldr	r3, [pc, #640]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f023 0203 	bic.w	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	499c      	ldr	r1, [pc, #624]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e8:	4b97      	ldr	r3, [pc, #604]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f023 020c 	bic.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4994      	ldr	r1, [pc, #592]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800480a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004810:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	498b      	ldr	r1, [pc, #556]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482c:	4b86      	ldr	r3, [pc, #536]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	4983      	ldr	r1, [pc, #524]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800484e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	497a      	ldr	r1, [pc, #488]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004870:	4b75      	ldr	r3, [pc, #468]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004876:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4972      	ldr	r1, [pc, #456]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004892:	4b6d      	ldr	r3, [pc, #436]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	4969      	ldr	r1, [pc, #420]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b4:	4b64      	ldr	r3, [pc, #400]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4961      	ldr	r1, [pc, #388]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	4958      	ldr	r1, [pc, #352]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	4950      	ldr	r1, [pc, #320]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004916:	d105      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004918:	4b4b      	ldr	r3, [pc, #300]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004922:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004930:	4b45      	ldr	r3, [pc, #276]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004936:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	4942      	ldr	r1, [pc, #264]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800494e:	d105      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004950:	4b3d      	ldr	r3, [pc, #244]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a3c      	ldr	r2, [pc, #240]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004968:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	4934      	ldr	r1, [pc, #208]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004988:	4b2f      	ldr	r3, [pc, #188]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004992:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a0:	4b29      	ldr	r3, [pc, #164]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ae:	4926      	ldr	r1, [pc, #152]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049be:	d105      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a20      	ldr	r2, [pc, #128]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	4918      	ldr	r1, [pc, #96]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049f6:	d105      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f8:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a12      	ldr	r2, [pc, #72]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d015      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a10:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	490a      	ldr	r1, [pc, #40]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000

08004a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e049      	b.n	8004af2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fb8a 	bl	800218c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f000 fb12 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d001      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e04a      	b.n	8004baa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a21      	ldr	r2, [pc, #132]	@ (8004bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d013      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x6c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1d      	ldr	r2, [pc, #116]	@ (8004bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x6c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x6c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x6c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a19      	ldr	r2, [pc, #100]	@ (8004bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d115      	bne.n	8004b94 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b17      	ldr	r3, [pc, #92]	@ (8004bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d015      	beq.n	8004ba6 <HAL_TIM_Base_Start_IT+0xaa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b80:	d011      	beq.n	8004ba6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	e008      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e000      	b.n	8004ba8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40013400 	.word	0x40013400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	00010007 	.word	0x00010007

08004bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0202 	mvn.w	r2, #2
 8004c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa2c 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa1e 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa2f 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0204 	mvn.w	r2, #4
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa06 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9f8 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa09 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0208 	mvn.w	r2, #8
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9e0 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9d2 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9e3 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01b      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0210 	mvn.w	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2208      	movs	r2, #8
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9ba 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9ac 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f9bd 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0201 	mvn.w	r2, #1
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fa26 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00c      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb69 	bl	800543c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fb61 	bl	8005450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f977 	bl	80050a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0220 	mvn.w	r2, #32
 8004dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fb29 	bl	8005428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00c      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fb35 	bl	8005464 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb2d 	bl	8005478 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fb25 	bl	800548c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fb1d 	bl	80054a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_ConfigClockSource+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0de      	b.n	800504a <HAL_TIM_ConfigClockSource+0x1da>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a63      	ldr	r2, [pc, #396]	@ (8005054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f000 80a9 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ecc:	4a61      	ldr	r2, [pc, #388]	@ (8005054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f200 80ae 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ed4:	4a60      	ldr	r2, [pc, #384]	@ (8005058 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f000 80a1 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004edc:	4a5e      	ldr	r2, [pc, #376]	@ (8005058 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f200 80a6 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800505c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	f000 8099 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004eec:	4a5b      	ldr	r2, [pc, #364]	@ (800505c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	f200 809e 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8005060 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	f000 8091 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004efc:	4a58      	ldr	r2, [pc, #352]	@ (8005060 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	f200 8096 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f08:	f000 8089 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004f0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f10:	f200 808e 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f18:	d03e      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0x128>
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f1e:	f200 8087 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	f000 8086 	beq.w	8005036 <HAL_TIM_ConfigClockSource+0x1c6>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2e:	d87f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f30:	2b70      	cmp	r3, #112	@ 0x70
 8004f32:	d01a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0xfa>
 8004f34:	2b70      	cmp	r3, #112	@ 0x70
 8004f36:	d87b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f38:	2b60      	cmp	r3, #96	@ 0x60
 8004f3a:	d050      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x16e>
 8004f3c:	2b60      	cmp	r3, #96	@ 0x60
 8004f3e:	d877      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f40:	2b50      	cmp	r3, #80	@ 0x50
 8004f42:	d03c      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x14e>
 8004f44:	2b50      	cmp	r3, #80	@ 0x50
 8004f46:	d873      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d058      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x18e>
 8004f4c:	2b40      	cmp	r3, #64	@ 0x40
 8004f4e:	d86f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d064      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d86b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d060      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d867      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d05c      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d05a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x1ae>
 8004f68:	e062      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	f000 f9b3 	bl	80052e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
      break;
 8004f96:	e04f      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	f000 f99c 	bl	80052e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fba:	609a      	str	r2, [r3, #8]
      break;
 8004fbc:	e03c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 f90e 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2150      	movs	r1, #80	@ 0x50
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f967 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e02c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 f92d 	bl	800524a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2160      	movs	r1, #96	@ 0x60
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f957 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e01c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	461a      	mov	r2, r3
 800500c:	f000 f8ee 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2140      	movs	r1, #64	@ 0x40
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f947 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 800501c:	e00c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 f93e 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 800502e:	e003      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e000      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	00100070 	.word	0x00100070
 8005058:	00100040 	.word	0x00100040
 800505c:	00100030 	.word	0x00100030
 8005060:	00100020 	.word	0x00100020

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a42      	ldr	r2, [pc, #264]	@ (80051d0 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3f      	ldr	r2, [pc, #252]	@ (80051d4 <TIM_Base_SetConfig+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x38>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3e      	ldr	r2, [pc, #248]	@ (80051d8 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <TIM_Base_SetConfig+0x128>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a33      	ldr	r2, [pc, #204]	@ (80051d0 <TIM_Base_SetConfig+0x11c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01b      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510c:	d017      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a30      	ldr	r2, [pc, #192]	@ (80051d4 <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2f      	ldr	r2, [pc, #188]	@ (80051d8 <TIM_Base_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00f      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2e      	ldr	r2, [pc, #184]	@ (80051dc <TIM_Base_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00b      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2d      	ldr	r2, [pc, #180]	@ (80051e0 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2b      	ldr	r2, [pc, #172]	@ (80051e8 <TIM_Base_SetConfig+0x134>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d108      	bne.n	8005150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a16      	ldr	r2, [pc, #88]	@ (80051d0 <TIM_Base_SetConfig+0x11c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00f      	beq.n	800519c <TIM_Base_SetConfig+0xe8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <TIM_Base_SetConfig+0x128>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00b      	beq.n	800519c <TIM_Base_SetConfig+0xe8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <TIM_Base_SetConfig+0x12c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <TIM_Base_SetConfig+0xe8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a15      	ldr	r2, [pc, #84]	@ (80051e4 <TIM_Base_SetConfig+0x130>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_Base_SetConfig+0xe8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <TIM_Base_SetConfig+0x134>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]
  }
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0210 	bic.w	r2, r3, #16
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e065      	b.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2b      	ldr	r2, [pc, #172]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d108      	bne.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b2:	d013      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a18      	ldr	r2, [pc, #96]	@ (800541c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d10c      	bne.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40014000 	.word	0x40014000

08005428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e042      	b.n	800554c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fc fe7b 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	@ 0x24
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fca2 	bl	8005e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9d3 	bl	80058b0 <UART_SetConfig>
 800550a:	4603      	mov	r3, r0
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e01b      	b.n	800554c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fd21 	bl	8005f8c <UART_CheckIdleState>
 800554a:	4603      	mov	r3, r0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e04a      	b.n	80055fc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fc fe2b 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2224      	movs	r2, #36	@ 0x24
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc52 	bl	8005e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f983 	bl	80058b0 <UART_SetConfig>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e023      	b.n	80055fc <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80055d2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fcc9 	bl	8005f8c <UART_CheckIdleState>
 80055fa:	4603      	mov	r3, r0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	@ 0x28
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	2b20      	cmp	r3, #32
 800561c:	d17b      	bne.n	8005716 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_Transmit+0x26>
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e074      	b.n	8005718 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2221      	movs	r2, #33	@ 0x21
 800563a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563e:	f7fc ffc3 	bl	80025c8 <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565c:	d108      	bne.n	8005670 <HAL_UART_Transmit+0x6c>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e003      	b.n	8005678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005678:	e030      	b.n	80056dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2180      	movs	r1, #128	@ 0x80
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fd2b 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e03d      	b.n	8005718 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3302      	adds	r3, #2
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	e007      	b.n	80056ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1c8      	bne.n	800567a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2200      	movs	r2, #0
 80056f0:	2140      	movs	r1, #64	@ 0x40
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fcf4 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e006      	b.n	8005718 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005736:	2b20      	cmp	r3, #32
 8005738:	f040 80b5 	bne.w	80058a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_Receive+0x28>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0ad      	b.n	80058a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2222      	movs	r2, #34	@ 0x22
 8005758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005762:	f7fc ff31 	bl	80025c8 <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005780:	d10e      	bne.n	80057a0 <HAL_UART_Receive+0x80>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <HAL_UART_Receive+0x76>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005794:	e02d      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	22ff      	movs	r2, #255	@ 0xff
 800579a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800579e:	e028      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10d      	bne.n	80057c4 <HAL_UART_Receive+0xa4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_UART_Receive+0x9a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057b8:	e01b      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	227f      	movs	r2, #127	@ 0x7f
 80057be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057c2:	e016      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057cc:	d10d      	bne.n	80057ea <HAL_UART_Receive+0xca>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <HAL_UART_Receive+0xc0>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	227f      	movs	r2, #127	@ 0x7f
 80057da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057de:	e008      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	223f      	movs	r2, #63	@ 0x3f
 80057e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057e8:	e003      	b.n	80057f2 <HAL_UART_Receive+0xd2>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80057f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005802:	d108      	bne.n	8005816 <HAL_UART_Receive+0xf6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e003      	b.n	800581e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800581e:	e036      	b.n	800588e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	2120      	movs	r1, #32
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fc58 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e032      	b.n	80058a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10c      	bne.n	8005862 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	b29a      	uxth	r2, r3
 8005850:	8a7b      	ldrh	r3, [r7, #18]
 8005852:	4013      	ands	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	3302      	adds	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e00c      	b.n	800587c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8a7b      	ldrh	r3, [r7, #18]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4013      	ands	r3, r2
 8005870:	b2da      	uxtb	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1c2      	bne.n	8005820 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b4:	b08c      	sub	sp, #48	@ 0x30
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4bab      	ldr	r3, [pc, #684]	@ (8005b8c <UART_SetConfig+0x2dc>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4aa0      	ldr	r2, [pc, #640]	@ (8005b90 <UART_SetConfig+0x2e0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005918:	4313      	orrs	r3, r2
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005926:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005930:	430b      	orrs	r3, r1
 8005932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	f023 010f 	bic.w	r1, r3, #15
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a91      	ldr	r2, [pc, #580]	@ (8005b94 <UART_SetConfig+0x2e4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d125      	bne.n	80059a0 <UART_SetConfig+0xf0>
 8005954:	4b90      	ldr	r3, [pc, #576]	@ (8005b98 <UART_SetConfig+0x2e8>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d81a      	bhi.n	8005998 <UART_SetConfig+0xe8>
 8005962:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <UART_SetConfig+0xb8>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	08005979 	.word	0x08005979
 800596c:	08005989 	.word	0x08005989
 8005970:	08005981 	.word	0x08005981
 8005974:	08005991 	.word	0x08005991
 8005978:	2301      	movs	r3, #1
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597e:	e0d6      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005986:	e0d2      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e0ce      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e0ca      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e0c6      	b.n	8005b2e <UART_SetConfig+0x27e>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a7d      	ldr	r2, [pc, #500]	@ (8005b9c <UART_SetConfig+0x2ec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d138      	bne.n	8005a1c <UART_SetConfig+0x16c>
 80059aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005b98 <UART_SetConfig+0x2e8>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d82d      	bhi.n	8005a14 <UART_SetConfig+0x164>
 80059b8:	a201      	add	r2, pc, #4	@ (adr r2, 80059c0 <UART_SetConfig+0x110>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fa:	e098      	b.n	8005b2e <UART_SetConfig+0x27e>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a02:	e094      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	e090      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	e08c      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1a:	e088      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba0 <UART_SetConfig+0x2f0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d125      	bne.n	8005a72 <UART_SetConfig+0x1c2>
 8005a26:	4b5c      	ldr	r3, [pc, #368]	@ (8005b98 <UART_SetConfig+0x2e8>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a30:	2b30      	cmp	r3, #48	@ 0x30
 8005a32:	d016      	beq.n	8005a62 <UART_SetConfig+0x1b2>
 8005a34:	2b30      	cmp	r3, #48	@ 0x30
 8005a36:	d818      	bhi.n	8005a6a <UART_SetConfig+0x1ba>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d00a      	beq.n	8005a52 <UART_SetConfig+0x1a2>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d814      	bhi.n	8005a6a <UART_SetConfig+0x1ba>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <UART_SetConfig+0x19a>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d008      	beq.n	8005a5a <UART_SetConfig+0x1aa>
 8005a48:	e00f      	b.n	8005a6a <UART_SetConfig+0x1ba>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a50:	e06d      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a52:	2302      	movs	r3, #2
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a58:	e069      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a60:	e065      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a62:	2308      	movs	r3, #8
 8005a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a68:	e061      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a70:	e05d      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4b      	ldr	r2, [pc, #300]	@ (8005ba4 <UART_SetConfig+0x2f4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0x218>
 8005a7c:	4b46      	ldr	r3, [pc, #280]	@ (8005b98 <UART_SetConfig+0x2e8>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a88:	d016      	beq.n	8005ab8 <UART_SetConfig+0x208>
 8005a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a8c:	d818      	bhi.n	8005ac0 <UART_SetConfig+0x210>
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d00a      	beq.n	8005aa8 <UART_SetConfig+0x1f8>
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d814      	bhi.n	8005ac0 <UART_SetConfig+0x210>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <UART_SetConfig+0x1f0>
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d008      	beq.n	8005ab0 <UART_SetConfig+0x200>
 8005a9e:	e00f      	b.n	8005ac0 <UART_SetConfig+0x210>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e042      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e03e      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e03a      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e036      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e032      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a30      	ldr	r2, [pc, #192]	@ (8005b90 <UART_SetConfig+0x2e0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d12a      	bne.n	8005b28 <UART_SetConfig+0x278>
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <UART_SetConfig+0x2e8>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae0:	d01a      	beq.n	8005b18 <UART_SetConfig+0x268>
 8005ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0x270>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d00c      	beq.n	8005b08 <UART_SetConfig+0x258>
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af2:	d815      	bhi.n	8005b20 <UART_SetConfig+0x270>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x250>
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afc:	d008      	beq.n	8005b10 <UART_SetConfig+0x260>
 8005afe:	e00f      	b.n	8005b20 <UART_SetConfig+0x270>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b06:	e012      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0e:	e00e      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e00a      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e006      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b26:	e002      	b.n	8005b2e <UART_SetConfig+0x27e>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <UART_SetConfig+0x2e0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	f040 80a8 	bne.w	8005c8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d834      	bhi.n	8005bac <UART_SetConfig+0x2fc>
 8005b42:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <UART_SetConfig+0x298>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005bad 	.word	0x08005bad
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005b7b 	.word	0x08005b7b
 8005b5c:	08005bad 	.word	0x08005bad
 8005b60:	08005bad 	.word	0x08005bad
 8005b64:	08005bad 	.word	0x08005bad
 8005b68:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6c:	f7fe fd0c 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b72:	e021      	b.n	8005bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <UART_SetConfig+0x2f8>)
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b78:	e01e      	b.n	8005bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe fc97 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8005b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b80:	e01a      	b.n	8005bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b88:	e016      	b.n	8005bb8 <UART_SetConfig+0x308>
 8005b8a:	bf00      	nop
 8005b8c:	cfff69f3 	.word	0xcfff69f3
 8005b90:	40008000 	.word	0x40008000
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	40004400 	.word	0x40004400
 8005ba0:	40004800 	.word	0x40004800
 8005ba4:	40004c00 	.word	0x40004c00
 8005ba8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 812a 	beq.w	8005e14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	4a9e      	ldr	r2, [pc, #632]	@ (8005e40 <UART_SetConfig+0x590>)
 8005bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d305      	bcc.n	8005bf0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d903      	bls.n	8005bf8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bf6:	e10d      	b.n	8005e14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	60fa      	str	r2, [r7, #12]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4a8e      	ldr	r2, [pc, #568]	@ (8005e40 <UART_SetConfig+0x590>)
 8005c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c1a:	f7fa fb51 	bl	80002c0 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	020b      	lsls	r3, r1, #8
 8005c30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c34:	0202      	lsls	r2, r0, #8
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	6849      	ldr	r1, [r1, #4]
 8005c3a:	0849      	lsrs	r1, r1, #1
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	4605      	mov	r5, r0
 8005c42:	eb12 0804 	adds.w	r8, r2, r4
 8005c46:	eb43 0905 	adc.w	r9, r3, r5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	469a      	mov	sl, r3
 8005c52:	4693      	mov	fp, r2
 8005c54:	4652      	mov	r2, sl
 8005c56:	465b      	mov	r3, fp
 8005c58:	4640      	mov	r0, r8
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	f7fa fb30 	bl	80002c0 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c6e:	d308      	bcc.n	8005c82 <UART_SetConfig+0x3d2>
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c76:	d204      	bcs.n	8005c82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e0c8      	b.n	8005e14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c88:	e0c4      	b.n	8005e14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c92:	d167      	bne.n	8005d64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005c94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d828      	bhi.n	8005cee <UART_SetConfig+0x43e>
 8005c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x3f4>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	08005cef 	.word	0x08005cef
 8005cb4:	08005cdf 	.word	0x08005cdf
 8005cb8:	08005cef 	.word	0x08005cef
 8005cbc:	08005cef 	.word	0x08005cef
 8005cc0:	08005cef 	.word	0x08005cef
 8005cc4:	08005ce7 	.word	0x08005ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fe fc5e 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cce:	e014      	b.n	8005cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd0:	f7fe fc70 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 8005cd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cd6:	e010      	b.n	8005cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e44 <UART_SetConfig+0x594>)
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cdc:	e00d      	b.n	8005cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cde:	f7fe fbe5 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8005ce2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ce4:	e009      	b.n	8005cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cec:	e005      	b.n	8005cfa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8089 	beq.w	8005e14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	4a4e      	ldr	r2, [pc, #312]	@ (8005e40 <UART_SetConfig+0x590>)
 8005d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d14:	005a      	lsls	r2, r3, #1
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2b0f      	cmp	r3, #15
 8005d2c:	d916      	bls.n	8005d5c <UART_SetConfig+0x4ac>
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d34:	d212      	bcs.n	8005d5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f023 030f 	bic.w	r3, r3, #15
 8005d3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	8bfa      	ldrh	r2, [r7, #30]
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	e05b      	b.n	8005e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d62:	e057      	b.n	8005e14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d828      	bhi.n	8005dbe <UART_SetConfig+0x50e>
 8005d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0x4c4>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fe fbf6 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d9e:	e014      	b.n	8005dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe fc08 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 8005da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <UART_SetConfig+0x594>)
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dac:	e00d      	b.n	8005dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe fb7d 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8005db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005db4:	e009      	b.n	8005dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dbc:	e005      	b.n	8005dca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d021      	beq.n	8005e14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e40 <UART_SetConfig+0x590>)
 8005dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	441a      	add	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d909      	bls.n	8005e0e <UART_SetConfig+0x55e>
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e00:	d205      	bcs.n	8005e0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	e002      	b.n	8005e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	@ 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e3e:	bf00      	nop
 8005e40:	08007718 	.word	0x08007718
 8005e44:	00f42400 	.word	0x00f42400

08005e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f46:	d10a      	bne.n	8005f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b098      	sub	sp, #96	@ 0x60
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f9c:	f7fc fb14 	bl	80025c8 <HAL_GetTick>
 8005fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d12f      	bne.n	8006010 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f88e 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e063      	b.n	80060d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d149      	bne.n	80060b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006026:	2200      	movs	r2, #0
 8006028:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f857 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03c      	beq.n	80060b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	623b      	str	r3, [r7, #32]
   return(result);
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800604c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
 8006058:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800605c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60fb      	str	r3, [r7, #12]
   return(result);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800608a:	61fa      	str	r2, [r7, #28]
 800608c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	69b9      	ldr	r1, [r7, #24]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	617b      	str	r3, [r7, #20]
   return(result);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e012      	b.n	80060d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3758      	adds	r7, #88	@ 0x58
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f0:	e04f      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060f8:	d04b      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fc fa65 	bl	80025c8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <UART_WaitOnFlagUntilTimeout+0x30>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e04e      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d037      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b80      	cmp	r3, #128	@ 0x80
 8006126:	d034      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b40      	cmp	r3, #64	@ 0x40
 800612c:	d031      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d110      	bne.n	800615e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2208      	movs	r2, #8
 8006142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f838 	bl	80061ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2208      	movs	r2, #8
 800614e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e029      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616c:	d111      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f81e 	bl	80061ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00f      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d0a0      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b095      	sub	sp, #84	@ 0x54
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	61fb      	str	r3, [r7, #28]
   return(result);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800621e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e3      	bne.n	80061f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d118      	bne.n	8006266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	60bb      	str	r3, [r7, #8]
   return(result);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	613b      	str	r3, [r7, #16]
   return(result);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e6      	bne.n	8006234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800627a:	bf00      	nop
 800627c:	3754      	adds	r7, #84	@ 0x54
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_EnableFifoMode+0x16>
 8006298:	2302      	movs	r3, #2
 800629a:	e02b      	b.n	80062f4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	@ 0x24
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80062d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8c3 	bl	8006468 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_UARTEx_DisableFifoMode+0x16>
 800630e:	2302      	movs	r3, #2
 8006310:	e027      	b.n	8006362 <HAL_UARTEx_DisableFifoMode+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	@ 0x24
 800631e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006382:	2302      	movs	r3, #2
 8006384:	e02d      	b.n	80063e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2224      	movs	r2, #36	@ 0x24
 8006392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f850 	bl	8006468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063fe:	2302      	movs	r3, #2
 8006400:	e02d      	b.n	800645e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2224      	movs	r2, #36	@ 0x24
 800640e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f812 	bl	8006468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006474:	2b00      	cmp	r3, #0
 8006476:	d108      	bne.n	800648a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006488:	e031      	b.n	80064ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800648a:	2308      	movs	r3, #8
 800648c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800648e:	2308      	movs	r3, #8
 8006490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0e5b      	lsrs	r3, r3, #25
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	0f5b      	lsrs	r3, r3, #29
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	7b3a      	ldrb	r2, [r7, #12]
 80064b6:	4911      	ldr	r1, [pc, #68]	@ (80064fc <UARTEx_SetNbDataToProcess+0x94>)
 80064b8:	5c8a      	ldrb	r2, [r1, r2]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064be:	7b3a      	ldrb	r2, [r7, #12]
 80064c0:	490f      	ldr	r1, [pc, #60]	@ (8006500 <UARTEx_SetNbDataToProcess+0x98>)
 80064c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	7b7a      	ldrb	r2, [r7, #13]
 80064d4:	4909      	ldr	r1, [pc, #36]	@ (80064fc <UARTEx_SetNbDataToProcess+0x94>)
 80064d6:	5c8a      	ldrb	r2, [r1, r2]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064dc:	7b7a      	ldrb	r2, [r7, #13]
 80064de:	4908      	ldr	r1, [pc, #32]	@ (8006500 <UARTEx_SetNbDataToProcess+0x98>)
 80064e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	08007730 	.word	0x08007730
 8006500:	08007738 	.word	0x08007738

08006504 <std>:
 8006504:	2300      	movs	r3, #0
 8006506:	b510      	push	{r4, lr}
 8006508:	4604      	mov	r4, r0
 800650a:	e9c0 3300 	strd	r3, r3, [r0]
 800650e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006512:	6083      	str	r3, [r0, #8]
 8006514:	8181      	strh	r1, [r0, #12]
 8006516:	6643      	str	r3, [r0, #100]	@ 0x64
 8006518:	81c2      	strh	r2, [r0, #14]
 800651a:	6183      	str	r3, [r0, #24]
 800651c:	4619      	mov	r1, r3
 800651e:	2208      	movs	r2, #8
 8006520:	305c      	adds	r0, #92	@ 0x5c
 8006522:	f000 f9f9 	bl	8006918 <memset>
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <std+0x58>)
 8006528:	6263      	str	r3, [r4, #36]	@ 0x24
 800652a:	4b0d      	ldr	r3, [pc, #52]	@ (8006560 <std+0x5c>)
 800652c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <std+0x60>)
 8006530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006532:	4b0d      	ldr	r3, [pc, #52]	@ (8006568 <std+0x64>)
 8006534:	6323      	str	r3, [r4, #48]	@ 0x30
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <std+0x68>)
 8006538:	6224      	str	r4, [r4, #32]
 800653a:	429c      	cmp	r4, r3
 800653c:	d006      	beq.n	800654c <std+0x48>
 800653e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006542:	4294      	cmp	r4, r2
 8006544:	d002      	beq.n	800654c <std+0x48>
 8006546:	33d0      	adds	r3, #208	@ 0xd0
 8006548:	429c      	cmp	r4, r3
 800654a:	d105      	bne.n	8006558 <std+0x54>
 800654c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006554:	f000 ba58 	b.w	8006a08 <__retarget_lock_init_recursive>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop
 800655c:	08006769 	.word	0x08006769
 8006560:	0800678b 	.word	0x0800678b
 8006564:	080067c3 	.word	0x080067c3
 8006568:	080067e7 	.word	0x080067e7
 800656c:	2000036c 	.word	0x2000036c

08006570 <stdio_exit_handler>:
 8006570:	4a02      	ldr	r2, [pc, #8]	@ (800657c <stdio_exit_handler+0xc>)
 8006572:	4903      	ldr	r1, [pc, #12]	@ (8006580 <stdio_exit_handler+0x10>)
 8006574:	4803      	ldr	r0, [pc, #12]	@ (8006584 <stdio_exit_handler+0x14>)
 8006576:	f000 b869 	b.w	800664c <_fwalk_sglue>
 800657a:	bf00      	nop
 800657c:	2000000c 	.word	0x2000000c
 8006580:	080072a9 	.word	0x080072a9
 8006584:	2000001c 	.word	0x2000001c

08006588 <cleanup_stdio>:
 8006588:	6841      	ldr	r1, [r0, #4]
 800658a:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <cleanup_stdio+0x34>)
 800658c:	4299      	cmp	r1, r3
 800658e:	b510      	push	{r4, lr}
 8006590:	4604      	mov	r4, r0
 8006592:	d001      	beq.n	8006598 <cleanup_stdio+0x10>
 8006594:	f000 fe88 	bl	80072a8 <_fflush_r>
 8006598:	68a1      	ldr	r1, [r4, #8]
 800659a:	4b09      	ldr	r3, [pc, #36]	@ (80065c0 <cleanup_stdio+0x38>)
 800659c:	4299      	cmp	r1, r3
 800659e:	d002      	beq.n	80065a6 <cleanup_stdio+0x1e>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fe81 	bl	80072a8 <_fflush_r>
 80065a6:	68e1      	ldr	r1, [r4, #12]
 80065a8:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <cleanup_stdio+0x3c>)
 80065aa:	4299      	cmp	r1, r3
 80065ac:	d004      	beq.n	80065b8 <cleanup_stdio+0x30>
 80065ae:	4620      	mov	r0, r4
 80065b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b4:	f000 be78 	b.w	80072a8 <_fflush_r>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	bf00      	nop
 80065bc:	2000036c 	.word	0x2000036c
 80065c0:	200003d4 	.word	0x200003d4
 80065c4:	2000043c 	.word	0x2000043c

080065c8 <global_stdio_init.part.0>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <global_stdio_init.part.0+0x30>)
 80065cc:	4c0b      	ldr	r4, [pc, #44]	@ (80065fc <global_stdio_init.part.0+0x34>)
 80065ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006600 <global_stdio_init.part.0+0x38>)
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	4620      	mov	r0, r4
 80065d4:	2200      	movs	r2, #0
 80065d6:	2104      	movs	r1, #4
 80065d8:	f7ff ff94 	bl	8006504 <std>
 80065dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065e0:	2201      	movs	r2, #1
 80065e2:	2109      	movs	r1, #9
 80065e4:	f7ff ff8e 	bl	8006504 <std>
 80065e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065ec:	2202      	movs	r2, #2
 80065ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f2:	2112      	movs	r1, #18
 80065f4:	f7ff bf86 	b.w	8006504 <std>
 80065f8:	200004a4 	.word	0x200004a4
 80065fc:	2000036c 	.word	0x2000036c
 8006600:	08006571 	.word	0x08006571

08006604 <__sfp_lock_acquire>:
 8006604:	4801      	ldr	r0, [pc, #4]	@ (800660c <__sfp_lock_acquire+0x8>)
 8006606:	f000 ba00 	b.w	8006a0a <__retarget_lock_acquire_recursive>
 800660a:	bf00      	nop
 800660c:	200004ad 	.word	0x200004ad

08006610 <__sfp_lock_release>:
 8006610:	4801      	ldr	r0, [pc, #4]	@ (8006618 <__sfp_lock_release+0x8>)
 8006612:	f000 b9fb 	b.w	8006a0c <__retarget_lock_release_recursive>
 8006616:	bf00      	nop
 8006618:	200004ad 	.word	0x200004ad

0800661c <__sinit>:
 800661c:	b510      	push	{r4, lr}
 800661e:	4604      	mov	r4, r0
 8006620:	f7ff fff0 	bl	8006604 <__sfp_lock_acquire>
 8006624:	6a23      	ldr	r3, [r4, #32]
 8006626:	b11b      	cbz	r3, 8006630 <__sinit+0x14>
 8006628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662c:	f7ff bff0 	b.w	8006610 <__sfp_lock_release>
 8006630:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <__sinit+0x28>)
 8006632:	6223      	str	r3, [r4, #32]
 8006634:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <__sinit+0x2c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f5      	bne.n	8006628 <__sinit+0xc>
 800663c:	f7ff ffc4 	bl	80065c8 <global_stdio_init.part.0>
 8006640:	e7f2      	b.n	8006628 <__sinit+0xc>
 8006642:	bf00      	nop
 8006644:	08006589 	.word	0x08006589
 8006648:	200004a4 	.word	0x200004a4

0800664c <_fwalk_sglue>:
 800664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006650:	4607      	mov	r7, r0
 8006652:	4688      	mov	r8, r1
 8006654:	4614      	mov	r4, r2
 8006656:	2600      	movs	r6, #0
 8006658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800665c:	f1b9 0901 	subs.w	r9, r9, #1
 8006660:	d505      	bpl.n	800666e <_fwalk_sglue+0x22>
 8006662:	6824      	ldr	r4, [r4, #0]
 8006664:	2c00      	cmp	r4, #0
 8006666:	d1f7      	bne.n	8006658 <_fwalk_sglue+0xc>
 8006668:	4630      	mov	r0, r6
 800666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d907      	bls.n	8006684 <_fwalk_sglue+0x38>
 8006674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006678:	3301      	adds	r3, #1
 800667a:	d003      	beq.n	8006684 <_fwalk_sglue+0x38>
 800667c:	4629      	mov	r1, r5
 800667e:	4638      	mov	r0, r7
 8006680:	47c0      	blx	r8
 8006682:	4306      	orrs	r6, r0
 8006684:	3568      	adds	r5, #104	@ 0x68
 8006686:	e7e9      	b.n	800665c <_fwalk_sglue+0x10>

08006688 <iprintf>:
 8006688:	b40f      	push	{r0, r1, r2, r3}
 800668a:	b507      	push	{r0, r1, r2, lr}
 800668c:	4906      	ldr	r1, [pc, #24]	@ (80066a8 <iprintf+0x20>)
 800668e:	ab04      	add	r3, sp, #16
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	f853 2b04 	ldr.w	r2, [r3], #4
 8006696:	6881      	ldr	r1, [r0, #8]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	f000 fadb 	bl	8006c54 <_vfiprintf_r>
 800669e:	b003      	add	sp, #12
 80066a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr
 80066a8:	20000018 	.word	0x20000018

080066ac <_puts_r>:
 80066ac:	6a03      	ldr	r3, [r0, #32]
 80066ae:	b570      	push	{r4, r5, r6, lr}
 80066b0:	6884      	ldr	r4, [r0, #8]
 80066b2:	4605      	mov	r5, r0
 80066b4:	460e      	mov	r6, r1
 80066b6:	b90b      	cbnz	r3, 80066bc <_puts_r+0x10>
 80066b8:	f7ff ffb0 	bl	800661c <__sinit>
 80066bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066be:	07db      	lsls	r3, r3, #31
 80066c0:	d405      	bmi.n	80066ce <_puts_r+0x22>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	0598      	lsls	r0, r3, #22
 80066c6:	d402      	bmi.n	80066ce <_puts_r+0x22>
 80066c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ca:	f000 f99e 	bl	8006a0a <__retarget_lock_acquire_recursive>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	0719      	lsls	r1, r3, #28
 80066d2:	d502      	bpl.n	80066da <_puts_r+0x2e>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d135      	bne.n	8006746 <_puts_r+0x9a>
 80066da:	4621      	mov	r1, r4
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 f8c5 	bl	800686c <__swsetup_r>
 80066e2:	b380      	cbz	r0, 8006746 <_puts_r+0x9a>
 80066e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80066e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066ea:	07da      	lsls	r2, r3, #31
 80066ec:	d405      	bmi.n	80066fa <_puts_r+0x4e>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	059b      	lsls	r3, r3, #22
 80066f2:	d402      	bmi.n	80066fa <_puts_r+0x4e>
 80066f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066f6:	f000 f989 	bl	8006a0c <__retarget_lock_release_recursive>
 80066fa:	4628      	mov	r0, r5
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da04      	bge.n	800670c <_puts_r+0x60>
 8006702:	69a2      	ldr	r2, [r4, #24]
 8006704:	429a      	cmp	r2, r3
 8006706:	dc17      	bgt.n	8006738 <_puts_r+0x8c>
 8006708:	290a      	cmp	r1, #10
 800670a:	d015      	beq.n	8006738 <_puts_r+0x8c>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	7019      	strb	r1, [r3, #0]
 8006714:	68a3      	ldr	r3, [r4, #8]
 8006716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800671a:	3b01      	subs	r3, #1
 800671c:	60a3      	str	r3, [r4, #8]
 800671e:	2900      	cmp	r1, #0
 8006720:	d1ed      	bne.n	80066fe <_puts_r+0x52>
 8006722:	2b00      	cmp	r3, #0
 8006724:	da11      	bge.n	800674a <_puts_r+0x9e>
 8006726:	4622      	mov	r2, r4
 8006728:	210a      	movs	r1, #10
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f85f 	bl	80067ee <__swbuf_r>
 8006730:	3001      	adds	r0, #1
 8006732:	d0d7      	beq.n	80066e4 <_puts_r+0x38>
 8006734:	250a      	movs	r5, #10
 8006736:	e7d7      	b.n	80066e8 <_puts_r+0x3c>
 8006738:	4622      	mov	r2, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f857 	bl	80067ee <__swbuf_r>
 8006740:	3001      	adds	r0, #1
 8006742:	d1e7      	bne.n	8006714 <_puts_r+0x68>
 8006744:	e7ce      	b.n	80066e4 <_puts_r+0x38>
 8006746:	3e01      	subs	r6, #1
 8006748:	e7e4      	b.n	8006714 <_puts_r+0x68>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	220a      	movs	r2, #10
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e7ee      	b.n	8006734 <_puts_r+0x88>
	...

08006758 <puts>:
 8006758:	4b02      	ldr	r3, [pc, #8]	@ (8006764 <puts+0xc>)
 800675a:	4601      	mov	r1, r0
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	f7ff bfa5 	b.w	80066ac <_puts_r>
 8006762:	bf00      	nop
 8006764:	20000018 	.word	0x20000018

08006768 <__sread>:
 8006768:	b510      	push	{r4, lr}
 800676a:	460c      	mov	r4, r1
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	f000 f8fc 	bl	800696c <_read_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	bfab      	itete	ge
 8006778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800677a:	89a3      	ldrhlt	r3, [r4, #12]
 800677c:	181b      	addge	r3, r3, r0
 800677e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006782:	bfac      	ite	ge
 8006784:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006786:	81a3      	strhlt	r3, [r4, #12]
 8006788:	bd10      	pop	{r4, pc}

0800678a <__swrite>:
 800678a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	461f      	mov	r7, r3
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	05db      	lsls	r3, r3, #23
 8006794:	4605      	mov	r5, r0
 8006796:	460c      	mov	r4, r1
 8006798:	4616      	mov	r6, r2
 800679a:	d505      	bpl.n	80067a8 <__swrite+0x1e>
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	2302      	movs	r3, #2
 80067a2:	2200      	movs	r2, #0
 80067a4:	f000 f8d0 	bl	8006948 <_lseek_r>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	f000 b8e7 	b.w	8006990 <_write_r>

080067c2 <__sseek>:
 80067c2:	b510      	push	{r4, lr}
 80067c4:	460c      	mov	r4, r1
 80067c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ca:	f000 f8bd 	bl	8006948 <_lseek_r>
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	bf15      	itete	ne
 80067d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067de:	81a3      	strheq	r3, [r4, #12]
 80067e0:	bf18      	it	ne
 80067e2:	81a3      	strhne	r3, [r4, #12]
 80067e4:	bd10      	pop	{r4, pc}

080067e6 <__sclose>:
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 b89d 	b.w	8006928 <_close_r>

080067ee <__swbuf_r>:
 80067ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f0:	460e      	mov	r6, r1
 80067f2:	4614      	mov	r4, r2
 80067f4:	4605      	mov	r5, r0
 80067f6:	b118      	cbz	r0, 8006800 <__swbuf_r+0x12>
 80067f8:	6a03      	ldr	r3, [r0, #32]
 80067fa:	b90b      	cbnz	r3, 8006800 <__swbuf_r+0x12>
 80067fc:	f7ff ff0e 	bl	800661c <__sinit>
 8006800:	69a3      	ldr	r3, [r4, #24]
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	071a      	lsls	r2, r3, #28
 8006808:	d501      	bpl.n	800680e <__swbuf_r+0x20>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b943      	cbnz	r3, 8006820 <__swbuf_r+0x32>
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f82b 	bl	800686c <__swsetup_r>
 8006816:	b118      	cbz	r0, 8006820 <__swbuf_r+0x32>
 8006818:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800681c:	4638      	mov	r0, r7
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	6922      	ldr	r2, [r4, #16]
 8006824:	1a98      	subs	r0, r3, r2
 8006826:	6963      	ldr	r3, [r4, #20]
 8006828:	b2f6      	uxtb	r6, r6
 800682a:	4283      	cmp	r3, r0
 800682c:	4637      	mov	r7, r6
 800682e:	dc05      	bgt.n	800683c <__swbuf_r+0x4e>
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f000 fd38 	bl	80072a8 <_fflush_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	d1ed      	bne.n	8006818 <__swbuf_r+0x2a>
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	3b01      	subs	r3, #1
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	701e      	strb	r6, [r3, #0]
 800684a:	6962      	ldr	r2, [r4, #20]
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	429a      	cmp	r2, r3
 8006850:	d004      	beq.n	800685c <__swbuf_r+0x6e>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	07db      	lsls	r3, r3, #31
 8006856:	d5e1      	bpl.n	800681c <__swbuf_r+0x2e>
 8006858:	2e0a      	cmp	r6, #10
 800685a:	d1df      	bne.n	800681c <__swbuf_r+0x2e>
 800685c:	4621      	mov	r1, r4
 800685e:	4628      	mov	r0, r5
 8006860:	f000 fd22 	bl	80072a8 <_fflush_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	d0d9      	beq.n	800681c <__swbuf_r+0x2e>
 8006868:	e7d6      	b.n	8006818 <__swbuf_r+0x2a>
	...

0800686c <__swsetup_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4b29      	ldr	r3, [pc, #164]	@ (8006914 <__swsetup_r+0xa8>)
 8006870:	4605      	mov	r5, r0
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	460c      	mov	r4, r1
 8006876:	b118      	cbz	r0, 8006880 <__swsetup_r+0x14>
 8006878:	6a03      	ldr	r3, [r0, #32]
 800687a:	b90b      	cbnz	r3, 8006880 <__swsetup_r+0x14>
 800687c:	f7ff fece 	bl	800661c <__sinit>
 8006880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006884:	0719      	lsls	r1, r3, #28
 8006886:	d422      	bmi.n	80068ce <__swsetup_r+0x62>
 8006888:	06da      	lsls	r2, r3, #27
 800688a:	d407      	bmi.n	800689c <__swsetup_r+0x30>
 800688c:	2209      	movs	r2, #9
 800688e:	602a      	str	r2, [r5, #0]
 8006890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006894:	81a3      	strh	r3, [r4, #12]
 8006896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800689a:	e033      	b.n	8006904 <__swsetup_r+0x98>
 800689c:	0758      	lsls	r0, r3, #29
 800689e:	d512      	bpl.n	80068c6 <__swsetup_r+0x5a>
 80068a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068a2:	b141      	cbz	r1, 80068b6 <__swsetup_r+0x4a>
 80068a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <__swsetup_r+0x46>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f8af 	bl	8006a10 <_free_r>
 80068b2:	2300      	movs	r3, #0
 80068b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	2300      	movs	r3, #0
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f043 0308 	orr.w	r3, r3, #8
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	b94b      	cbnz	r3, 80068e6 <__swsetup_r+0x7a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068dc:	d003      	beq.n	80068e6 <__swsetup_r+0x7a>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 fd2f 	bl	8007344 <__smakebuf_r>
 80068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ea:	f013 0201 	ands.w	r2, r3, #1
 80068ee:	d00a      	beq.n	8006906 <__swsetup_r+0x9a>
 80068f0:	2200      	movs	r2, #0
 80068f2:	60a2      	str	r2, [r4, #8]
 80068f4:	6962      	ldr	r2, [r4, #20]
 80068f6:	4252      	negs	r2, r2
 80068f8:	61a2      	str	r2, [r4, #24]
 80068fa:	6922      	ldr	r2, [r4, #16]
 80068fc:	b942      	cbnz	r2, 8006910 <__swsetup_r+0xa4>
 80068fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006902:	d1c5      	bne.n	8006890 <__swsetup_r+0x24>
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	0799      	lsls	r1, r3, #30
 8006908:	bf58      	it	pl
 800690a:	6962      	ldrpl	r2, [r4, #20]
 800690c:	60a2      	str	r2, [r4, #8]
 800690e:	e7f4      	b.n	80068fa <__swsetup_r+0x8e>
 8006910:	2000      	movs	r0, #0
 8006912:	e7f7      	b.n	8006904 <__swsetup_r+0x98>
 8006914:	20000018 	.word	0x20000018

08006918 <memset>:
 8006918:	4402      	add	r2, r0
 800691a:	4603      	mov	r3, r0
 800691c:	4293      	cmp	r3, r2
 800691e:	d100      	bne.n	8006922 <memset+0xa>
 8006920:	4770      	bx	lr
 8006922:	f803 1b01 	strb.w	r1, [r3], #1
 8006926:	e7f9      	b.n	800691c <memset+0x4>

08006928 <_close_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d06      	ldr	r5, [pc, #24]	@ (8006944 <_close_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fb fd3d 	bl	80023b2 <_close>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_close_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_close_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	200004a8 	.word	0x200004a8

08006948 <_lseek_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	@ (8006968 <_lseek_r+0x20>)
 800694c:	4604      	mov	r4, r0
 800694e:	4608      	mov	r0, r1
 8006950:	4611      	mov	r1, r2
 8006952:	2200      	movs	r2, #0
 8006954:	602a      	str	r2, [r5, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f7fb fd52 	bl	8002400 <_lseek>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d102      	bne.n	8006966 <_lseek_r+0x1e>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b103      	cbz	r3, 8006966 <_lseek_r+0x1e>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	200004a8 	.word	0x200004a8

0800696c <_read_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d07      	ldr	r5, [pc, #28]	@ (800698c <_read_r+0x20>)
 8006970:	4604      	mov	r4, r0
 8006972:	4608      	mov	r0, r1
 8006974:	4611      	mov	r1, r2
 8006976:	2200      	movs	r2, #0
 8006978:	602a      	str	r2, [r5, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	f7fb fcfc 	bl	8002378 <_read>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_read_r+0x1e>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_read_r+0x1e>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	200004a8 	.word	0x200004a8

08006990 <_write_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4d07      	ldr	r5, [pc, #28]	@ (80069b0 <_write_r+0x20>)
 8006994:	4604      	mov	r4, r0
 8006996:	4608      	mov	r0, r1
 8006998:	4611      	mov	r1, r2
 800699a:	2200      	movs	r2, #0
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fa fbd2 	bl	8001148 <_write>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_write_r+0x1e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_write_r+0x1e>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	200004a8 	.word	0x200004a8

080069b4 <__errno>:
 80069b4:	4b01      	ldr	r3, [pc, #4]	@ (80069bc <__errno+0x8>)
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000018 	.word	0x20000018

080069c0 <__libc_init_array>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4d0d      	ldr	r5, [pc, #52]	@ (80069f8 <__libc_init_array+0x38>)
 80069c4:	4c0d      	ldr	r4, [pc, #52]	@ (80069fc <__libc_init_array+0x3c>)
 80069c6:	1b64      	subs	r4, r4, r5
 80069c8:	10a4      	asrs	r4, r4, #2
 80069ca:	2600      	movs	r6, #0
 80069cc:	42a6      	cmp	r6, r4
 80069ce:	d109      	bne.n	80069e4 <__libc_init_array+0x24>
 80069d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006a00 <__libc_init_array+0x40>)
 80069d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006a04 <__libc_init_array+0x44>)
 80069d4:	f000 fd24 	bl	8007420 <_init>
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	2600      	movs	r6, #0
 80069de:	42a6      	cmp	r6, r4
 80069e0:	d105      	bne.n	80069ee <__libc_init_array+0x2e>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e8:	4798      	blx	r3
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7ee      	b.n	80069cc <__libc_init_array+0xc>
 80069ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f2:	4798      	blx	r3
 80069f4:	3601      	adds	r6, #1
 80069f6:	e7f2      	b.n	80069de <__libc_init_array+0x1e>
 80069f8:	0800777c 	.word	0x0800777c
 80069fc:	0800777c 	.word	0x0800777c
 8006a00:	0800777c 	.word	0x0800777c
 8006a04:	08007784 	.word	0x08007784

08006a08 <__retarget_lock_init_recursive>:
 8006a08:	4770      	bx	lr

08006a0a <__retarget_lock_acquire_recursive>:
 8006a0a:	4770      	bx	lr

08006a0c <__retarget_lock_release_recursive>:
 8006a0c:	4770      	bx	lr
	...

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d041      	beq.n	8006a9c <_free_r+0x8c>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f000 f8e0 	bl	8006be8 <__malloc_lock>
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <_free_r+0x90>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	b933      	cbnz	r3, 8006a3c <_free_r+0x2c>
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	6014      	str	r4, [r2, #0]
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a38:	f000 b8dc 	b.w	8006bf4 <__malloc_unlock>
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d908      	bls.n	8006a52 <_free_r+0x42>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	e7ed      	b.n	8006a2e <_free_r+0x1e>
 8006a52:	461a      	mov	r2, r3
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b10b      	cbz	r3, 8006a5c <_free_r+0x4c>
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d9fa      	bls.n	8006a52 <_free_r+0x42>
 8006a5c:	6811      	ldr	r1, [r2, #0]
 8006a5e:	1850      	adds	r0, r2, r1
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d10b      	bne.n	8006a7c <_free_r+0x6c>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	4401      	add	r1, r0
 8006a68:	1850      	adds	r0, r2, r1
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	d1e0      	bne.n	8006a32 <_free_r+0x22>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	6053      	str	r3, [r2, #4]
 8006a76:	4408      	add	r0, r1
 8006a78:	6010      	str	r0, [r2, #0]
 8006a7a:	e7da      	b.n	8006a32 <_free_r+0x22>
 8006a7c:	d902      	bls.n	8006a84 <_free_r+0x74>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	e7d6      	b.n	8006a32 <_free_r+0x22>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf04      	itt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	bf04      	itt	eq
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	6054      	str	r4, [r2, #4]
 8006a9a:	e7ca      	b.n	8006a32 <_free_r+0x22>
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200004b4 	.word	0x200004b4

08006aa4 <sbrk_aligned>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ae4 <sbrk_aligned+0x40>)
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	6831      	ldr	r1, [r6, #0]
 8006aac:	4605      	mov	r5, r0
 8006aae:	b911      	cbnz	r1, 8006ab6 <sbrk_aligned+0x12>
 8006ab0:	f000 fca6 	bl	8007400 <_sbrk_r>
 8006ab4:	6030      	str	r0, [r6, #0]
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fca1 	bl	8007400 <_sbrk_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d103      	bne.n	8006aca <sbrk_aligned+0x26>
 8006ac2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	1cc4      	adds	r4, r0, #3
 8006acc:	f024 0403 	bic.w	r4, r4, #3
 8006ad0:	42a0      	cmp	r0, r4
 8006ad2:	d0f8      	beq.n	8006ac6 <sbrk_aligned+0x22>
 8006ad4:	1a21      	subs	r1, r4, r0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 fc92 	bl	8007400 <_sbrk_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1f2      	bne.n	8006ac6 <sbrk_aligned+0x22>
 8006ae0:	e7ef      	b.n	8006ac2 <sbrk_aligned+0x1e>
 8006ae2:	bf00      	nop
 8006ae4:	200004b0 	.word	0x200004b0

08006ae8 <_malloc_r>:
 8006ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aec:	1ccd      	adds	r5, r1, #3
 8006aee:	f025 0503 	bic.w	r5, r5, #3
 8006af2:	3508      	adds	r5, #8
 8006af4:	2d0c      	cmp	r5, #12
 8006af6:	bf38      	it	cc
 8006af8:	250c      	movcc	r5, #12
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	4606      	mov	r6, r0
 8006afe:	db01      	blt.n	8006b04 <_malloc_r+0x1c>
 8006b00:	42a9      	cmp	r1, r5
 8006b02:	d904      	bls.n	8006b0e <_malloc_r+0x26>
 8006b04:	230c      	movs	r3, #12
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006be4 <_malloc_r+0xfc>
 8006b12:	f000 f869 	bl	8006be8 <__malloc_lock>
 8006b16:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	bb44      	cbnz	r4, 8006b70 <_malloc_r+0x88>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff ffbf 	bl	8006aa4 <sbrk_aligned>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	4604      	mov	r4, r0
 8006b2a:	d158      	bne.n	8006bde <_malloc_r+0xf6>
 8006b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b30:	4627      	mov	r7, r4
 8006b32:	2f00      	cmp	r7, #0
 8006b34:	d143      	bne.n	8006bbe <_malloc_r+0xd6>
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d04b      	beq.n	8006bd2 <_malloc_r+0xea>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4630      	mov	r0, r6
 8006b40:	eb04 0903 	add.w	r9, r4, r3
 8006b44:	f000 fc5c 	bl	8007400 <_sbrk_r>
 8006b48:	4581      	cmp	r9, r0
 8006b4a:	d142      	bne.n	8006bd2 <_malloc_r+0xea>
 8006b4c:	6821      	ldr	r1, [r4, #0]
 8006b4e:	1a6d      	subs	r5, r5, r1
 8006b50:	4629      	mov	r1, r5
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ffa6 	bl	8006aa4 <sbrk_aligned>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d03a      	beq.n	8006bd2 <_malloc_r+0xea>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	442b      	add	r3, r5
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	f8d8 3000 	ldr.w	r3, [r8]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	bb62      	cbnz	r2, 8006bc4 <_malloc_r+0xdc>
 8006b6a:	f8c8 7000 	str.w	r7, [r8]
 8006b6e:	e00f      	b.n	8006b90 <_malloc_r+0xa8>
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	1b52      	subs	r2, r2, r5
 8006b74:	d420      	bmi.n	8006bb8 <_malloc_r+0xd0>
 8006b76:	2a0b      	cmp	r2, #11
 8006b78:	d917      	bls.n	8006baa <_malloc_r+0xc2>
 8006b7a:	1961      	adds	r1, r4, r5
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	6025      	str	r5, [r4, #0]
 8006b80:	bf18      	it	ne
 8006b82:	6059      	strne	r1, [r3, #4]
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	bf08      	it	eq
 8006b88:	f8c8 1000 	streq.w	r1, [r8]
 8006b8c:	5162      	str	r2, [r4, r5]
 8006b8e:	604b      	str	r3, [r1, #4]
 8006b90:	4630      	mov	r0, r6
 8006b92:	f000 f82f 	bl	8006bf4 <__malloc_unlock>
 8006b96:	f104 000b 	add.w	r0, r4, #11
 8006b9a:	1d23      	adds	r3, r4, #4
 8006b9c:	f020 0007 	bic.w	r0, r0, #7
 8006ba0:	1ac2      	subs	r2, r0, r3
 8006ba2:	bf1c      	itt	ne
 8006ba4:	1a1b      	subne	r3, r3, r0
 8006ba6:	50a3      	strne	r3, [r4, r2]
 8006ba8:	e7af      	b.n	8006b0a <_malloc_r+0x22>
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	bf0c      	ite	eq
 8006bb0:	f8c8 2000 	streq.w	r2, [r8]
 8006bb4:	605a      	strne	r2, [r3, #4]
 8006bb6:	e7eb      	b.n	8006b90 <_malloc_r+0xa8>
 8006bb8:	4623      	mov	r3, r4
 8006bba:	6864      	ldr	r4, [r4, #4]
 8006bbc:	e7ae      	b.n	8006b1c <_malloc_r+0x34>
 8006bbe:	463c      	mov	r4, r7
 8006bc0:	687f      	ldr	r7, [r7, #4]
 8006bc2:	e7b6      	b.n	8006b32 <_malloc_r+0x4a>
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d1fb      	bne.n	8006bc4 <_malloc_r+0xdc>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6053      	str	r3, [r2, #4]
 8006bd0:	e7de      	b.n	8006b90 <_malloc_r+0xa8>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f80c 	bl	8006bf4 <__malloc_unlock>
 8006bdc:	e794      	b.n	8006b08 <_malloc_r+0x20>
 8006bde:	6005      	str	r5, [r0, #0]
 8006be0:	e7d6      	b.n	8006b90 <_malloc_r+0xa8>
 8006be2:	bf00      	nop
 8006be4:	200004b4 	.word	0x200004b4

08006be8 <__malloc_lock>:
 8006be8:	4801      	ldr	r0, [pc, #4]	@ (8006bf0 <__malloc_lock+0x8>)
 8006bea:	f7ff bf0e 	b.w	8006a0a <__retarget_lock_acquire_recursive>
 8006bee:	bf00      	nop
 8006bf0:	200004ac 	.word	0x200004ac

08006bf4 <__malloc_unlock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__malloc_unlock+0x8>)
 8006bf6:	f7ff bf09 	b.w	8006a0c <__retarget_lock_release_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	200004ac 	.word	0x200004ac

08006c00 <__sfputc_r>:
 8006c00:	6893      	ldr	r3, [r2, #8]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	b410      	push	{r4}
 8006c08:	6093      	str	r3, [r2, #8]
 8006c0a:	da08      	bge.n	8006c1e <__sfputc_r+0x1e>
 8006c0c:	6994      	ldr	r4, [r2, #24]
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	db01      	blt.n	8006c16 <__sfputc_r+0x16>
 8006c12:	290a      	cmp	r1, #10
 8006c14:	d103      	bne.n	8006c1e <__sfputc_r+0x1e>
 8006c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c1a:	f7ff bde8 	b.w	80067ee <__swbuf_r>
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	1c58      	adds	r0, r3, #1
 8006c22:	6010      	str	r0, [r2, #0]
 8006c24:	7019      	strb	r1, [r3, #0]
 8006c26:	4608      	mov	r0, r1
 8006c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <__sfputs_r>:
 8006c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	18d5      	adds	r5, r2, r3
 8006c38:	42ac      	cmp	r4, r5
 8006c3a:	d101      	bne.n	8006c40 <__sfputs_r+0x12>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e007      	b.n	8006c50 <__sfputs_r+0x22>
 8006c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c44:	463a      	mov	r2, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ffda 	bl	8006c00 <__sfputc_r>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d1f3      	bne.n	8006c38 <__sfputs_r+0xa>
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c54 <_vfiprintf_r>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	460d      	mov	r5, r1
 8006c5a:	b09d      	sub	sp, #116	@ 0x74
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	4698      	mov	r8, r3
 8006c60:	4606      	mov	r6, r0
 8006c62:	b118      	cbz	r0, 8006c6c <_vfiprintf_r+0x18>
 8006c64:	6a03      	ldr	r3, [r0, #32]
 8006c66:	b90b      	cbnz	r3, 8006c6c <_vfiprintf_r+0x18>
 8006c68:	f7ff fcd8 	bl	800661c <__sinit>
 8006c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c6e:	07d9      	lsls	r1, r3, #31
 8006c70:	d405      	bmi.n	8006c7e <_vfiprintf_r+0x2a>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	059a      	lsls	r2, r3, #22
 8006c76:	d402      	bmi.n	8006c7e <_vfiprintf_r+0x2a>
 8006c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c7a:	f7ff fec6 	bl	8006a0a <__retarget_lock_acquire_recursive>
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	071b      	lsls	r3, r3, #28
 8006c82:	d501      	bpl.n	8006c88 <_vfiprintf_r+0x34>
 8006c84:	692b      	ldr	r3, [r5, #16]
 8006c86:	b99b      	cbnz	r3, 8006cb0 <_vfiprintf_r+0x5c>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff fdee 	bl	800686c <__swsetup_r>
 8006c90:	b170      	cbz	r0, 8006cb0 <_vfiprintf_r+0x5c>
 8006c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c94:	07dc      	lsls	r4, r3, #31
 8006c96:	d504      	bpl.n	8006ca2 <_vfiprintf_r+0x4e>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c9c:	b01d      	add	sp, #116	@ 0x74
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	0598      	lsls	r0, r3, #22
 8006ca6:	d4f7      	bmi.n	8006c98 <_vfiprintf_r+0x44>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006caa:	f7ff feaf 	bl	8006a0c <__retarget_lock_release_recursive>
 8006cae:	e7f3      	b.n	8006c98 <_vfiprintf_r+0x44>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cbe:	2330      	movs	r3, #48	@ 0x30
 8006cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e70 <_vfiprintf_r+0x21c>
 8006cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cc8:	f04f 0901 	mov.w	r9, #1
 8006ccc:	4623      	mov	r3, r4
 8006cce:	469a      	mov	sl, r3
 8006cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cd4:	b10a      	cbz	r2, 8006cda <_vfiprintf_r+0x86>
 8006cd6:	2a25      	cmp	r2, #37	@ 0x25
 8006cd8:	d1f9      	bne.n	8006cce <_vfiprintf_r+0x7a>
 8006cda:	ebba 0b04 	subs.w	fp, sl, r4
 8006cde:	d00b      	beq.n	8006cf8 <_vfiprintf_r+0xa4>
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff ffa1 	bl	8006c2e <__sfputs_r>
 8006cec:	3001      	adds	r0, #1
 8006cee:	f000 80a7 	beq.w	8006e40 <_vfiprintf_r+0x1ec>
 8006cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cf4:	445a      	add	r2, fp
 8006cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 809f 	beq.w	8006e40 <_vfiprintf_r+0x1ec>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d0c:	f10a 0a01 	add.w	sl, sl, #1
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	9307      	str	r3, [sp, #28]
 8006d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d1a:	4654      	mov	r4, sl
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d22:	4853      	ldr	r0, [pc, #332]	@ (8006e70 <_vfiprintf_r+0x21c>)
 8006d24:	f7f9 fa7c 	bl	8000220 <memchr>
 8006d28:	9a04      	ldr	r2, [sp, #16]
 8006d2a:	b9d8      	cbnz	r0, 8006d64 <_vfiprintf_r+0x110>
 8006d2c:	06d1      	lsls	r1, r2, #27
 8006d2e:	bf44      	itt	mi
 8006d30:	2320      	movmi	r3, #32
 8006d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d36:	0713      	lsls	r3, r2, #28
 8006d38:	bf44      	itt	mi
 8006d3a:	232b      	movmi	r3, #43	@ 0x2b
 8006d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d40:	f89a 3000 	ldrb.w	r3, [sl]
 8006d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d46:	d015      	beq.n	8006d74 <_vfiprintf_r+0x120>
 8006d48:	9a07      	ldr	r2, [sp, #28]
 8006d4a:	4654      	mov	r4, sl
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f04f 0c0a 	mov.w	ip, #10
 8006d52:	4621      	mov	r1, r4
 8006d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d58:	3b30      	subs	r3, #48	@ 0x30
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d94b      	bls.n	8006df6 <_vfiprintf_r+0x1a2>
 8006d5e:	b1b0      	cbz	r0, 8006d8e <_vfiprintf_r+0x13a>
 8006d60:	9207      	str	r2, [sp, #28]
 8006d62:	e014      	b.n	8006d8e <_vfiprintf_r+0x13a>
 8006d64:	eba0 0308 	sub.w	r3, r0, r8
 8006d68:	fa09 f303 	lsl.w	r3, r9, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	46a2      	mov	sl, r4
 8006d72:	e7d2      	b.n	8006d1a <_vfiprintf_r+0xc6>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	9103      	str	r1, [sp, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bfbb      	ittet	lt
 8006d80:	425b      	neglt	r3, r3
 8006d82:	f042 0202 	orrlt.w	r2, r2, #2
 8006d86:	9307      	strge	r3, [sp, #28]
 8006d88:	9307      	strlt	r3, [sp, #28]
 8006d8a:	bfb8      	it	lt
 8006d8c:	9204      	strlt	r2, [sp, #16]
 8006d8e:	7823      	ldrb	r3, [r4, #0]
 8006d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d92:	d10a      	bne.n	8006daa <_vfiprintf_r+0x156>
 8006d94:	7863      	ldrb	r3, [r4, #1]
 8006d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d98:	d132      	bne.n	8006e00 <_vfiprintf_r+0x1ac>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	1d1a      	adds	r2, r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	9203      	str	r2, [sp, #12]
 8006da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006da6:	3402      	adds	r4, #2
 8006da8:	9305      	str	r3, [sp, #20]
 8006daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e80 <_vfiprintf_r+0x22c>
 8006dae:	7821      	ldrb	r1, [r4, #0]
 8006db0:	2203      	movs	r2, #3
 8006db2:	4650      	mov	r0, sl
 8006db4:	f7f9 fa34 	bl	8000220 <memchr>
 8006db8:	b138      	cbz	r0, 8006dca <_vfiprintf_r+0x176>
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	eba0 000a 	sub.w	r0, r0, sl
 8006dc0:	2240      	movs	r2, #64	@ 0x40
 8006dc2:	4082      	lsls	r2, r0
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	3401      	adds	r4, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dce:	4829      	ldr	r0, [pc, #164]	@ (8006e74 <_vfiprintf_r+0x220>)
 8006dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dd4:	2206      	movs	r2, #6
 8006dd6:	f7f9 fa23 	bl	8000220 <memchr>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d03f      	beq.n	8006e5e <_vfiprintf_r+0x20a>
 8006dde:	4b26      	ldr	r3, [pc, #152]	@ (8006e78 <_vfiprintf_r+0x224>)
 8006de0:	bb1b      	cbnz	r3, 8006e2a <_vfiprintf_r+0x1d6>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	3307      	adds	r3, #7
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	3308      	adds	r3, #8
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	443b      	add	r3, r7
 8006df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df4:	e76a      	b.n	8006ccc <_vfiprintf_r+0x78>
 8006df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	e7a8      	b.n	8006d52 <_vfiprintf_r+0xfe>
 8006e00:	2300      	movs	r3, #0
 8006e02:	3401      	adds	r4, #1
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	4619      	mov	r1, r3
 8006e08:	f04f 0c0a 	mov.w	ip, #10
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e12:	3a30      	subs	r2, #48	@ 0x30
 8006e14:	2a09      	cmp	r2, #9
 8006e16:	d903      	bls.n	8006e20 <_vfiprintf_r+0x1cc>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0c6      	beq.n	8006daa <_vfiprintf_r+0x156>
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	e7c4      	b.n	8006daa <_vfiprintf_r+0x156>
 8006e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e24:	4604      	mov	r4, r0
 8006e26:	2301      	movs	r3, #1
 8006e28:	e7f0      	b.n	8006e0c <_vfiprintf_r+0x1b8>
 8006e2a:	ab03      	add	r3, sp, #12
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4b12      	ldr	r3, [pc, #72]	@ (8006e7c <_vfiprintf_r+0x228>)
 8006e32:	a904      	add	r1, sp, #16
 8006e34:	4630      	mov	r0, r6
 8006e36:	f3af 8000 	nop.w
 8006e3a:	4607      	mov	r7, r0
 8006e3c:	1c78      	adds	r0, r7, #1
 8006e3e:	d1d6      	bne.n	8006dee <_vfiprintf_r+0x19a>
 8006e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e42:	07d9      	lsls	r1, r3, #31
 8006e44:	d405      	bmi.n	8006e52 <_vfiprintf_r+0x1fe>
 8006e46:	89ab      	ldrh	r3, [r5, #12]
 8006e48:	059a      	lsls	r2, r3, #22
 8006e4a:	d402      	bmi.n	8006e52 <_vfiprintf_r+0x1fe>
 8006e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e4e:	f7ff fddd 	bl	8006a0c <__retarget_lock_release_recursive>
 8006e52:	89ab      	ldrh	r3, [r5, #12]
 8006e54:	065b      	lsls	r3, r3, #25
 8006e56:	f53f af1f 	bmi.w	8006c98 <_vfiprintf_r+0x44>
 8006e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e5c:	e71e      	b.n	8006c9c <_vfiprintf_r+0x48>
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	462a      	mov	r2, r5
 8006e64:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <_vfiprintf_r+0x228>)
 8006e66:	a904      	add	r1, sp, #16
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f000 f879 	bl	8006f60 <_printf_i>
 8006e6e:	e7e4      	b.n	8006e3a <_vfiprintf_r+0x1e6>
 8006e70:	08007740 	.word	0x08007740
 8006e74:	0800774a 	.word	0x0800774a
 8006e78:	00000000 	.word	0x00000000
 8006e7c:	08006c2f 	.word	0x08006c2f
 8006e80:	08007746 	.word	0x08007746

08006e84 <_printf_common>:
 8006e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e88:	4616      	mov	r6, r2
 8006e8a:	4698      	mov	r8, r3
 8006e8c:	688a      	ldr	r2, [r1, #8]
 8006e8e:	690b      	ldr	r3, [r1, #16]
 8006e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bfb8      	it	lt
 8006e98:	4613      	movlt	r3, r2
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	b10a      	cbz	r2, 8006eaa <_printf_common+0x26>
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	0699      	lsls	r1, r3, #26
 8006eae:	bf42      	ittt	mi
 8006eb0:	6833      	ldrmi	r3, [r6, #0]
 8006eb2:	3302      	addmi	r3, #2
 8006eb4:	6033      	strmi	r3, [r6, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	f015 0506 	ands.w	r5, r5, #6
 8006ebc:	d106      	bne.n	8006ecc <_printf_common+0x48>
 8006ebe:	f104 0a19 	add.w	sl, r4, #25
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	6832      	ldr	r2, [r6, #0]
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dc26      	bgt.n	8006f1a <_printf_common+0x96>
 8006ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ed0:	6822      	ldr	r2, [r4, #0]
 8006ed2:	3b00      	subs	r3, #0
 8006ed4:	bf18      	it	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	0692      	lsls	r2, r2, #26
 8006eda:	d42b      	bmi.n	8006f34 <_printf_common+0xb0>
 8006edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c8      	blx	r9
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d01e      	beq.n	8006f28 <_printf_common+0xa4>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	6922      	ldr	r2, [r4, #16]
 8006eee:	f003 0306 	and.w	r3, r3, #6
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	bf02      	ittt	eq
 8006ef6:	68e5      	ldreq	r5, [r4, #12]
 8006ef8:	6833      	ldreq	r3, [r6, #0]
 8006efa:	1aed      	subeq	r5, r5, r3
 8006efc:	68a3      	ldr	r3, [r4, #8]
 8006efe:	bf0c      	ite	eq
 8006f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f04:	2500      	movne	r5, #0
 8006f06:	4293      	cmp	r3, r2
 8006f08:	bfc4      	itt	gt
 8006f0a:	1a9b      	subgt	r3, r3, r2
 8006f0c:	18ed      	addgt	r5, r5, r3
 8006f0e:	2600      	movs	r6, #0
 8006f10:	341a      	adds	r4, #26
 8006f12:	42b5      	cmp	r5, r6
 8006f14:	d11a      	bne.n	8006f4c <_printf_common+0xc8>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e008      	b.n	8006f2c <_printf_common+0xa8>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	4641      	mov	r1, r8
 8006f20:	4638      	mov	r0, r7
 8006f22:	47c8      	blx	r9
 8006f24:	3001      	adds	r0, #1
 8006f26:	d103      	bne.n	8006f30 <_printf_common+0xac>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f30:	3501      	adds	r5, #1
 8006f32:	e7c6      	b.n	8006ec2 <_printf_common+0x3e>
 8006f34:	18e1      	adds	r1, r4, r3
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	2030      	movs	r0, #48	@ 0x30
 8006f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f3e:	4422      	add	r2, r4
 8006f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f48:	3302      	adds	r3, #2
 8006f4a:	e7c7      	b.n	8006edc <_printf_common+0x58>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4641      	mov	r1, r8
 8006f52:	4638      	mov	r0, r7
 8006f54:	47c8      	blx	r9
 8006f56:	3001      	adds	r0, #1
 8006f58:	d0e6      	beq.n	8006f28 <_printf_common+0xa4>
 8006f5a:	3601      	adds	r6, #1
 8006f5c:	e7d9      	b.n	8006f12 <_printf_common+0x8e>
	...

08006f60 <_printf_i>:
 8006f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	7e0f      	ldrb	r7, [r1, #24]
 8006f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f68:	2f78      	cmp	r7, #120	@ 0x78
 8006f6a:	4691      	mov	r9, r2
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	469a      	mov	sl, r3
 8006f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f76:	d807      	bhi.n	8006f88 <_printf_i+0x28>
 8006f78:	2f62      	cmp	r7, #98	@ 0x62
 8006f7a:	d80a      	bhi.n	8006f92 <_printf_i+0x32>
 8006f7c:	2f00      	cmp	r7, #0
 8006f7e:	f000 80d2 	beq.w	8007126 <_printf_i+0x1c6>
 8006f82:	2f58      	cmp	r7, #88	@ 0x58
 8006f84:	f000 80b9 	beq.w	80070fa <_printf_i+0x19a>
 8006f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f90:	e03a      	b.n	8007008 <_printf_i+0xa8>
 8006f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f96:	2b15      	cmp	r3, #21
 8006f98:	d8f6      	bhi.n	8006f88 <_printf_i+0x28>
 8006f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006fa0 <_printf_i+0x40>)
 8006f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fa0:	08006ff9 	.word	0x08006ff9
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	08006f89 	.word	0x08006f89
 8006fac:	08006f89 	.word	0x08006f89
 8006fb0:	08006f89 	.word	0x08006f89
 8006fb4:	08006f89 	.word	0x08006f89
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	08006f89 	.word	0x08006f89
 8006fc0:	08006f89 	.word	0x08006f89
 8006fc4:	08006f89 	.word	0x08006f89
 8006fc8:	08006f89 	.word	0x08006f89
 8006fcc:	0800710d 	.word	0x0800710d
 8006fd0:	08007037 	.word	0x08007037
 8006fd4:	080070c7 	.word	0x080070c7
 8006fd8:	08006f89 	.word	0x08006f89
 8006fdc:	08006f89 	.word	0x08006f89
 8006fe0:	0800712f 	.word	0x0800712f
 8006fe4:	08006f89 	.word	0x08006f89
 8006fe8:	08007037 	.word	0x08007037
 8006fec:	08006f89 	.word	0x08006f89
 8006ff0:	08006f89 	.word	0x08006f89
 8006ff4:	080070cf 	.word	0x080070cf
 8006ff8:	6833      	ldr	r3, [r6, #0]
 8006ffa:	1d1a      	adds	r2, r3, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6032      	str	r2, [r6, #0]
 8007000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007008:	2301      	movs	r3, #1
 800700a:	e09d      	b.n	8007148 <_printf_i+0x1e8>
 800700c:	6833      	ldr	r3, [r6, #0]
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	1d19      	adds	r1, r3, #4
 8007012:	6031      	str	r1, [r6, #0]
 8007014:	0606      	lsls	r6, r0, #24
 8007016:	d501      	bpl.n	800701c <_printf_i+0xbc>
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	e003      	b.n	8007024 <_printf_i+0xc4>
 800701c:	0645      	lsls	r5, r0, #25
 800701e:	d5fb      	bpl.n	8007018 <_printf_i+0xb8>
 8007020:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007024:	2d00      	cmp	r5, #0
 8007026:	da03      	bge.n	8007030 <_printf_i+0xd0>
 8007028:	232d      	movs	r3, #45	@ 0x2d
 800702a:	426d      	negs	r5, r5
 800702c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007030:	4859      	ldr	r0, [pc, #356]	@ (8007198 <_printf_i+0x238>)
 8007032:	230a      	movs	r3, #10
 8007034:	e011      	b.n	800705a <_printf_i+0xfa>
 8007036:	6821      	ldr	r1, [r4, #0]
 8007038:	6833      	ldr	r3, [r6, #0]
 800703a:	0608      	lsls	r0, r1, #24
 800703c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007040:	d402      	bmi.n	8007048 <_printf_i+0xe8>
 8007042:	0649      	lsls	r1, r1, #25
 8007044:	bf48      	it	mi
 8007046:	b2ad      	uxthmi	r5, r5
 8007048:	2f6f      	cmp	r7, #111	@ 0x6f
 800704a:	4853      	ldr	r0, [pc, #332]	@ (8007198 <_printf_i+0x238>)
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	bf14      	ite	ne
 8007050:	230a      	movne	r3, #10
 8007052:	2308      	moveq	r3, #8
 8007054:	2100      	movs	r1, #0
 8007056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800705a:	6866      	ldr	r6, [r4, #4]
 800705c:	60a6      	str	r6, [r4, #8]
 800705e:	2e00      	cmp	r6, #0
 8007060:	bfa2      	ittt	ge
 8007062:	6821      	ldrge	r1, [r4, #0]
 8007064:	f021 0104 	bicge.w	r1, r1, #4
 8007068:	6021      	strge	r1, [r4, #0]
 800706a:	b90d      	cbnz	r5, 8007070 <_printf_i+0x110>
 800706c:	2e00      	cmp	r6, #0
 800706e:	d04b      	beq.n	8007108 <_printf_i+0x1a8>
 8007070:	4616      	mov	r6, r2
 8007072:	fbb5 f1f3 	udiv	r1, r5, r3
 8007076:	fb03 5711 	mls	r7, r3, r1, r5
 800707a:	5dc7      	ldrb	r7, [r0, r7]
 800707c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007080:	462f      	mov	r7, r5
 8007082:	42bb      	cmp	r3, r7
 8007084:	460d      	mov	r5, r1
 8007086:	d9f4      	bls.n	8007072 <_printf_i+0x112>
 8007088:	2b08      	cmp	r3, #8
 800708a:	d10b      	bne.n	80070a4 <_printf_i+0x144>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	07df      	lsls	r7, r3, #31
 8007090:	d508      	bpl.n	80070a4 <_printf_i+0x144>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	6861      	ldr	r1, [r4, #4]
 8007096:	4299      	cmp	r1, r3
 8007098:	bfde      	ittt	le
 800709a:	2330      	movle	r3, #48	@ 0x30
 800709c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80070a4:	1b92      	subs	r2, r2, r6
 80070a6:	6122      	str	r2, [r4, #16]
 80070a8:	f8cd a000 	str.w	sl, [sp]
 80070ac:	464b      	mov	r3, r9
 80070ae:	aa03      	add	r2, sp, #12
 80070b0:	4621      	mov	r1, r4
 80070b2:	4640      	mov	r0, r8
 80070b4:	f7ff fee6 	bl	8006e84 <_printf_common>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d14a      	bne.n	8007152 <_printf_i+0x1f2>
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070c0:	b004      	add	sp, #16
 80070c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	f043 0320 	orr.w	r3, r3, #32
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	4833      	ldr	r0, [pc, #204]	@ (800719c <_printf_i+0x23c>)
 80070d0:	2778      	movs	r7, #120	@ 0x78
 80070d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	6831      	ldr	r1, [r6, #0]
 80070da:	061f      	lsls	r7, r3, #24
 80070dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80070e0:	d402      	bmi.n	80070e8 <_printf_i+0x188>
 80070e2:	065f      	lsls	r7, r3, #25
 80070e4:	bf48      	it	mi
 80070e6:	b2ad      	uxthmi	r5, r5
 80070e8:	6031      	str	r1, [r6, #0]
 80070ea:	07d9      	lsls	r1, r3, #31
 80070ec:	bf44      	itt	mi
 80070ee:	f043 0320 	orrmi.w	r3, r3, #32
 80070f2:	6023      	strmi	r3, [r4, #0]
 80070f4:	b11d      	cbz	r5, 80070fe <_printf_i+0x19e>
 80070f6:	2310      	movs	r3, #16
 80070f8:	e7ac      	b.n	8007054 <_printf_i+0xf4>
 80070fa:	4827      	ldr	r0, [pc, #156]	@ (8007198 <_printf_i+0x238>)
 80070fc:	e7e9      	b.n	80070d2 <_printf_i+0x172>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f023 0320 	bic.w	r3, r3, #32
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	e7f6      	b.n	80070f6 <_printf_i+0x196>
 8007108:	4616      	mov	r6, r2
 800710a:	e7bd      	b.n	8007088 <_printf_i+0x128>
 800710c:	6833      	ldr	r3, [r6, #0]
 800710e:	6825      	ldr	r5, [r4, #0]
 8007110:	6961      	ldr	r1, [r4, #20]
 8007112:	1d18      	adds	r0, r3, #4
 8007114:	6030      	str	r0, [r6, #0]
 8007116:	062e      	lsls	r6, r5, #24
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	d501      	bpl.n	8007120 <_printf_i+0x1c0>
 800711c:	6019      	str	r1, [r3, #0]
 800711e:	e002      	b.n	8007126 <_printf_i+0x1c6>
 8007120:	0668      	lsls	r0, r5, #25
 8007122:	d5fb      	bpl.n	800711c <_printf_i+0x1bc>
 8007124:	8019      	strh	r1, [r3, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	4616      	mov	r6, r2
 800712c:	e7bc      	b.n	80070a8 <_printf_i+0x148>
 800712e:	6833      	ldr	r3, [r6, #0]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	6032      	str	r2, [r6, #0]
 8007134:	681e      	ldr	r6, [r3, #0]
 8007136:	6862      	ldr	r2, [r4, #4]
 8007138:	2100      	movs	r1, #0
 800713a:	4630      	mov	r0, r6
 800713c:	f7f9 f870 	bl	8000220 <memchr>
 8007140:	b108      	cbz	r0, 8007146 <_printf_i+0x1e6>
 8007142:	1b80      	subs	r0, r0, r6
 8007144:	6060      	str	r0, [r4, #4]
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	2300      	movs	r3, #0
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007150:	e7aa      	b.n	80070a8 <_printf_i+0x148>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	4632      	mov	r2, r6
 8007156:	4649      	mov	r1, r9
 8007158:	4640      	mov	r0, r8
 800715a:	47d0      	blx	sl
 800715c:	3001      	adds	r0, #1
 800715e:	d0ad      	beq.n	80070bc <_printf_i+0x15c>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	079b      	lsls	r3, r3, #30
 8007164:	d413      	bmi.n	800718e <_printf_i+0x22e>
 8007166:	68e0      	ldr	r0, [r4, #12]
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	4298      	cmp	r0, r3
 800716c:	bfb8      	it	lt
 800716e:	4618      	movlt	r0, r3
 8007170:	e7a6      	b.n	80070c0 <_printf_i+0x160>
 8007172:	2301      	movs	r3, #1
 8007174:	4632      	mov	r2, r6
 8007176:	4649      	mov	r1, r9
 8007178:	4640      	mov	r0, r8
 800717a:	47d0      	blx	sl
 800717c:	3001      	adds	r0, #1
 800717e:	d09d      	beq.n	80070bc <_printf_i+0x15c>
 8007180:	3501      	adds	r5, #1
 8007182:	68e3      	ldr	r3, [r4, #12]
 8007184:	9903      	ldr	r1, [sp, #12]
 8007186:	1a5b      	subs	r3, r3, r1
 8007188:	42ab      	cmp	r3, r5
 800718a:	dcf2      	bgt.n	8007172 <_printf_i+0x212>
 800718c:	e7eb      	b.n	8007166 <_printf_i+0x206>
 800718e:	2500      	movs	r5, #0
 8007190:	f104 0619 	add.w	r6, r4, #25
 8007194:	e7f5      	b.n	8007182 <_printf_i+0x222>
 8007196:	bf00      	nop
 8007198:	08007751 	.word	0x08007751
 800719c:	08007762 	.word	0x08007762

080071a0 <__sflush_r>:
 80071a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	0716      	lsls	r6, r2, #28
 80071aa:	4605      	mov	r5, r0
 80071ac:	460c      	mov	r4, r1
 80071ae:	d454      	bmi.n	800725a <__sflush_r+0xba>
 80071b0:	684b      	ldr	r3, [r1, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dc02      	bgt.n	80071bc <__sflush_r+0x1c>
 80071b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dd48      	ble.n	800724e <__sflush_r+0xae>
 80071bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071be:	2e00      	cmp	r6, #0
 80071c0:	d045      	beq.n	800724e <__sflush_r+0xae>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071c8:	682f      	ldr	r7, [r5, #0]
 80071ca:	6a21      	ldr	r1, [r4, #32]
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	d030      	beq.n	8007232 <__sflush_r+0x92>
 80071d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	0759      	lsls	r1, r3, #29
 80071d6:	d505      	bpl.n	80071e4 <__sflush_r+0x44>
 80071d8:	6863      	ldr	r3, [r4, #4]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071de:	b10b      	cbz	r3, 80071e4 <__sflush_r+0x44>
 80071e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071e8:	6a21      	ldr	r1, [r4, #32]
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b0      	blx	r6
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	d106      	bne.n	8007202 <__sflush_r+0x62>
 80071f4:	6829      	ldr	r1, [r5, #0]
 80071f6:	291d      	cmp	r1, #29
 80071f8:	d82b      	bhi.n	8007252 <__sflush_r+0xb2>
 80071fa:	4a2a      	ldr	r2, [pc, #168]	@ (80072a4 <__sflush_r+0x104>)
 80071fc:	410a      	asrs	r2, r1
 80071fe:	07d6      	lsls	r6, r2, #31
 8007200:	d427      	bmi.n	8007252 <__sflush_r+0xb2>
 8007202:	2200      	movs	r2, #0
 8007204:	6062      	str	r2, [r4, #4]
 8007206:	04d9      	lsls	r1, r3, #19
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	d504      	bpl.n	8007218 <__sflush_r+0x78>
 800720e:	1c42      	adds	r2, r0, #1
 8007210:	d101      	bne.n	8007216 <__sflush_r+0x76>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b903      	cbnz	r3, 8007218 <__sflush_r+0x78>
 8007216:	6560      	str	r0, [r4, #84]	@ 0x54
 8007218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800721a:	602f      	str	r7, [r5, #0]
 800721c:	b1b9      	cbz	r1, 800724e <__sflush_r+0xae>
 800721e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007222:	4299      	cmp	r1, r3
 8007224:	d002      	beq.n	800722c <__sflush_r+0x8c>
 8007226:	4628      	mov	r0, r5
 8007228:	f7ff fbf2 	bl	8006a10 <_free_r>
 800722c:	2300      	movs	r3, #0
 800722e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007230:	e00d      	b.n	800724e <__sflush_r+0xae>
 8007232:	2301      	movs	r3, #1
 8007234:	4628      	mov	r0, r5
 8007236:	47b0      	blx	r6
 8007238:	4602      	mov	r2, r0
 800723a:	1c50      	adds	r0, r2, #1
 800723c:	d1c9      	bne.n	80071d2 <__sflush_r+0x32>
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0c6      	beq.n	80071d2 <__sflush_r+0x32>
 8007244:	2b1d      	cmp	r3, #29
 8007246:	d001      	beq.n	800724c <__sflush_r+0xac>
 8007248:	2b16      	cmp	r3, #22
 800724a:	d11e      	bne.n	800728a <__sflush_r+0xea>
 800724c:	602f      	str	r7, [r5, #0]
 800724e:	2000      	movs	r0, #0
 8007250:	e022      	b.n	8007298 <__sflush_r+0xf8>
 8007252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007256:	b21b      	sxth	r3, r3
 8007258:	e01b      	b.n	8007292 <__sflush_r+0xf2>
 800725a:	690f      	ldr	r7, [r1, #16]
 800725c:	2f00      	cmp	r7, #0
 800725e:	d0f6      	beq.n	800724e <__sflush_r+0xae>
 8007260:	0793      	lsls	r3, r2, #30
 8007262:	680e      	ldr	r6, [r1, #0]
 8007264:	bf08      	it	eq
 8007266:	694b      	ldreq	r3, [r1, #20]
 8007268:	600f      	str	r7, [r1, #0]
 800726a:	bf18      	it	ne
 800726c:	2300      	movne	r3, #0
 800726e:	eba6 0807 	sub.w	r8, r6, r7
 8007272:	608b      	str	r3, [r1, #8]
 8007274:	f1b8 0f00 	cmp.w	r8, #0
 8007278:	dde9      	ble.n	800724e <__sflush_r+0xae>
 800727a:	6a21      	ldr	r1, [r4, #32]
 800727c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800727e:	4643      	mov	r3, r8
 8007280:	463a      	mov	r2, r7
 8007282:	4628      	mov	r0, r5
 8007284:	47b0      	blx	r6
 8007286:	2800      	cmp	r0, #0
 8007288:	dc08      	bgt.n	800729c <__sflush_r+0xfc>
 800728a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	4407      	add	r7, r0
 800729e:	eba8 0800 	sub.w	r8, r8, r0
 80072a2:	e7e7      	b.n	8007274 <__sflush_r+0xd4>
 80072a4:	dfbffffe 	.word	0xdfbffffe

080072a8 <_fflush_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	690b      	ldr	r3, [r1, #16]
 80072ac:	4605      	mov	r5, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	b913      	cbnz	r3, 80072b8 <_fflush_r+0x10>
 80072b2:	2500      	movs	r5, #0
 80072b4:	4628      	mov	r0, r5
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	b118      	cbz	r0, 80072c2 <_fflush_r+0x1a>
 80072ba:	6a03      	ldr	r3, [r0, #32]
 80072bc:	b90b      	cbnz	r3, 80072c2 <_fflush_r+0x1a>
 80072be:	f7ff f9ad 	bl	800661c <__sinit>
 80072c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f3      	beq.n	80072b2 <_fflush_r+0xa>
 80072ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072cc:	07d0      	lsls	r0, r2, #31
 80072ce:	d404      	bmi.n	80072da <_fflush_r+0x32>
 80072d0:	0599      	lsls	r1, r3, #22
 80072d2:	d402      	bmi.n	80072da <_fflush_r+0x32>
 80072d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072d6:	f7ff fb98 	bl	8006a0a <__retarget_lock_acquire_recursive>
 80072da:	4628      	mov	r0, r5
 80072dc:	4621      	mov	r1, r4
 80072de:	f7ff ff5f 	bl	80071a0 <__sflush_r>
 80072e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072e4:	07da      	lsls	r2, r3, #31
 80072e6:	4605      	mov	r5, r0
 80072e8:	d4e4      	bmi.n	80072b4 <_fflush_r+0xc>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	059b      	lsls	r3, r3, #22
 80072ee:	d4e1      	bmi.n	80072b4 <_fflush_r+0xc>
 80072f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072f2:	f7ff fb8b 	bl	8006a0c <__retarget_lock_release_recursive>
 80072f6:	e7dd      	b.n	80072b4 <_fflush_r+0xc>

080072f8 <__swhatbuf_r>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	460c      	mov	r4, r1
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	2900      	cmp	r1, #0
 8007302:	b096      	sub	sp, #88	@ 0x58
 8007304:	4615      	mov	r5, r2
 8007306:	461e      	mov	r6, r3
 8007308:	da0d      	bge.n	8007326 <__swhatbuf_r+0x2e>
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	bf14      	ite	ne
 8007316:	2340      	movne	r3, #64	@ 0x40
 8007318:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800731c:	2000      	movs	r0, #0
 800731e:	6031      	str	r1, [r6, #0]
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	b016      	add	sp, #88	@ 0x58
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	466a      	mov	r2, sp
 8007328:	f000 f848 	bl	80073bc <_fstat_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	dbec      	blt.n	800730a <__swhatbuf_r+0x12>
 8007330:	9901      	ldr	r1, [sp, #4]
 8007332:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007336:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800733a:	4259      	negs	r1, r3
 800733c:	4159      	adcs	r1, r3
 800733e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007342:	e7eb      	b.n	800731c <__swhatbuf_r+0x24>

08007344 <__smakebuf_r>:
 8007344:	898b      	ldrh	r3, [r1, #12]
 8007346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007348:	079d      	lsls	r5, r3, #30
 800734a:	4606      	mov	r6, r0
 800734c:	460c      	mov	r4, r1
 800734e:	d507      	bpl.n	8007360 <__smakebuf_r+0x1c>
 8007350:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	6123      	str	r3, [r4, #16]
 8007358:	2301      	movs	r3, #1
 800735a:	6163      	str	r3, [r4, #20]
 800735c:	b003      	add	sp, #12
 800735e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007360:	ab01      	add	r3, sp, #4
 8007362:	466a      	mov	r2, sp
 8007364:	f7ff ffc8 	bl	80072f8 <__swhatbuf_r>
 8007368:	9f00      	ldr	r7, [sp, #0]
 800736a:	4605      	mov	r5, r0
 800736c:	4639      	mov	r1, r7
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff fbba 	bl	8006ae8 <_malloc_r>
 8007374:	b948      	cbnz	r0, 800738a <__smakebuf_r+0x46>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	059a      	lsls	r2, r3, #22
 800737c:	d4ee      	bmi.n	800735c <__smakebuf_r+0x18>
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	e7e2      	b.n	8007350 <__smakebuf_r+0xc>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	6020      	str	r0, [r4, #0]
 800738e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800739a:	b15b      	cbz	r3, 80073b4 <__smakebuf_r+0x70>
 800739c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a0:	4630      	mov	r0, r6
 80073a2:	f000 f81d 	bl	80073e0 <_isatty_r>
 80073a6:	b128      	cbz	r0, 80073b4 <__smakebuf_r+0x70>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	431d      	orrs	r5, r3
 80073b8:	81a5      	strh	r5, [r4, #12]
 80073ba:	e7cf      	b.n	800735c <__smakebuf_r+0x18>

080073bc <_fstat_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d07      	ldr	r5, [pc, #28]	@ (80073dc <_fstat_r+0x20>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	f7fa fffe 	bl	80023ca <_fstat>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d102      	bne.n	80073d8 <_fstat_r+0x1c>
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	b103      	cbz	r3, 80073d8 <_fstat_r+0x1c>
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
 80073da:	bf00      	nop
 80073dc:	200004a8 	.word	0x200004a8

080073e0 <_isatty_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d06      	ldr	r5, [pc, #24]	@ (80073fc <_isatty_r+0x1c>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fa fffd 	bl	80023ea <_isatty>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_isatty_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_isatty_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200004a8 	.word	0x200004a8

08007400 <_sbrk_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d06      	ldr	r5, [pc, #24]	@ (800741c <_sbrk_r+0x1c>)
 8007404:	2300      	movs	r3, #0
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7fb f806 	bl	800241c <_sbrk>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_sbrk_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_sbrk_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	200004a8 	.word	0x200004a8

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
