
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800915c  0800915c  0000a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800949c  0800949c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  0800949c  0800949c  0000a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a4  080094a4  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094a4  080094a4  0000a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080094ac  080094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080094b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000068  0800951c  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800951c  0000b4d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026088  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b62  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c4  00000000  00000000  000369d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002483c  00000000  00000000  0003809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d281  00000000  00000000  0005c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df70b  00000000  00000000  00079b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be0  00000000  00000000  001592a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00161e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009144 	.word	0x08009144

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08009144 	.word	0x08009144

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>
#include <cstdio>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
{
}
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	1cf9      	adds	r1, r7, #3
 80005e0:	230a      	movs	r3, #10
 80005e2:	2201      	movs	r2, #1
 80005e4:	f006 fe04 	bl	80071f0 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 010f 	add.w	r1, r7, #15
 80005f0:	230a      	movs	r3, #10
 80005f2:	2201      	movs	r2, #1
 80005f4:	f006 fe8a 	bl	800730c <HAL_UART_Receive>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000608:	bf00      	nop
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f107 010f 	add.w	r1, r7, #15
 8000612:	2300      	movs	r3, #0
 8000614:	2201      	movs	r2, #1
 8000616:	f006 fe79 	bl	800730c <HAL_UART_Receive>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1ef      	bne.n	800060a <_ZN7SCServo12fflushRevBufEv+0xa>
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	607a      	str	r2, [r7, #4]
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	460b      	mov	r3, r1
 8000642:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000644:	2307      	movs	r3, #7
 8000646:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	121b      	asrs	r3, r3, #8
 800064c:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	121b      	asrs	r3, r3, #8
 8000656:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ffcf 	bl	8000600 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000662:	21ff      	movs	r1, #255	@ 0xff
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ffb2 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 800066a:	21ff      	movs	r1, #255	@ 0xff
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f7ff ffae 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f7ff ffa9 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ffa3 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000688:	2103      	movs	r1, #3
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f7ff ff9f 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 8000690:	212a      	movs	r1, #42	@ 0x2a
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f7ff ff9b 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8000698:	7cfb      	ldrb	r3, [r7, #19]
 800069a:	4619      	mov	r1, r3
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff96 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(posH);
 80006a2:	7cbb      	ldrb	r3, [r7, #18]
 80006a4:	4619      	mov	r1, r3
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f7ff ff91 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(velL);
 80006ac:	7c7b      	ldrb	r3, [r7, #17]
 80006ae:	4619      	mov	r1, r3
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff ff8c 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(velH);
 80006b6:	7c3b      	ldrb	r3, [r7, #16]
 80006b8:	4619      	mov	r1, r3
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff ff87 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	7cfb      	ldrb	r3, [r7, #19]
 80006cc:	4413      	add	r3, r2
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	7cbb      	ldrb	r3, [r7, #18]
 80006d2:	4413      	add	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	7c7b      	ldrb	r3, [r7, #17]
 80006d8:	4413      	add	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	7c3b      	ldrb	r3, [r7, #16]
 80006de:	4413      	add	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff ff6e 	bl	80005ce <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	2b10      	cmp	r3, #16
 80006f6:	d00a      	beq.n	800070e <_ZN7SCServo8WritePosEhiih+0xda>
 80006f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d106      	bne.n	800070e <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 8000700:	2200      	movs	r2, #0
 8000702:	2106      	movs	r1, #6
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 f807 	bl	8000718 <_ZN7SCServo7ReadBufEtPh>
 800070a:	4603      	mov	r3, r0
 800070c:	e000      	b.n	8000710 <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	460b      	mov	r3, r1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	897a      	ldrh	r2, [r7, #10]
 800072c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	f006 fdeb 	bl	800730c <HAL_UART_Receive>
 8000736:	4603      	mov	r3, r0
 8000738:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d101      	bne.n	8000744 <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	e001      	b.n	8000748 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 8000744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN7SCServo7ReadPosEh>:

int SCServo::ReadPos(u8 ID)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
    u8 buf[8] = {0};
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
    int size;
    int pos=0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff49 	bl	8000600 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 800076e:	21ff      	movs	r1, #255	@ 0xff
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff2c 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000776:	21ff      	movs	r1, #255	@ 0xff
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff28 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(ID);
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff23 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(4);
 8000788:	2104      	movs	r1, #4
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff1f 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(INST_READ);
 8000790:	2102      	movs	r1, #2
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff1b 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(P_PRESENT_POSITION_L);
 8000798:	2138      	movs	r1, #56	@ 0x38
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff17 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(2);
 80007a0:	2102      	movs	r1, #2
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ff13 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf((~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2))&0xFF);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80007ae:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80007b2:	33bf      	adds	r3, #191	@ 0xbf
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff08 	bl	80005ce <_ZN7SCServo6PrintfEh>
    size = ReadBuf(8, buf);
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	461a      	mov	r2, r3
 80007c4:	2108      	movs	r1, #8
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ffa6 	bl	8000718 <_ZN7SCServo7ReadBufEtPh>
 80007cc:	6138      	str	r0, [r7, #16]
    if(size<8)
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	2b07      	cmp	r3, #7
 80007d2:	dc02      	bgt.n	80007da <_ZN7SCServo7ReadPosEh+0x8a>
        return -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d8:	e00a      	b.n	80007f0 <_ZN7SCServo7ReadPosEh+0xa0>
    pos = buf[5];
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	461a      	mov	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]
    return pos;
 80007ee:	697b      	ldr	r3, [r7, #20]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZN7SCServo16WriteLimitTroqueEhih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WriteLimitTroque(u8 ID, int MaxTroque, u8 ReturnLevel)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	461a      	mov	r2, r3
 8000804:	460b      	mov	r3, r1
 8000806:	72fb      	strb	r3, [r7, #11]
 8000808:	4613      	mov	r3, r2
 800080a:	72bb      	strb	r3, [r7, #10]
    int messageLength = 5;
 800080c:	2305      	movs	r3, #5
 800080e:	617b      	str	r3, [r7, #20]
    u8 MaxTL = MaxTroque>>8;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	121b      	asrs	r3, r3, #8
 8000814:	74fb      	strb	r3, [r7, #19]
    u8 MaxTH = MaxTroque&0xff;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	74bb      	strb	r3, [r7, #18]

    fflushRevBuf();
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff fef0 	bl	8000600 <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000820:	21ff      	movs	r1, #255	@ 0xff
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fed3 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000828:	21ff      	movs	r1, #255	@ 0xff
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff fecf 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000830:	7afb      	ldrb	r3, [r7, #11]
 8000832:	4619      	mov	r1, r3
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff feca 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fec4 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000846:	2103      	movs	r1, #3
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fec0 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(P_MAX_TORQUE_L);
 800084e:	2110      	movs	r1, #16
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff febc 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(MaxTL);
 8000856:	7cfb      	ldrb	r3, [r7, #19]
 8000858:	4619      	mov	r1, r3
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff feb7 	bl	80005ce <_ZN7SCServo6PrintfEh>
    Printf(MaxTH);
 8000860:	7cbb      	ldrb	r3, [r7, #18]
 8000862:	4619      	mov	r1, r3
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff feb2 	bl	80005ce <_ZN7SCServo6PrintfEh>

    Printf((~(ID + messageLength + INST_WRITE + P_MAX_TORQUE_L + MaxTL + MaxTH))&0xFF);
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	4413      	add	r3, r2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	4413      	add	r3, r2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	7cbb      	ldrb	r3, [r7, #18]
 800087c:	4413      	add	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	f06f 0313 	mvn.w	r3, #19
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4619      	mov	r1, r3
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fe9f 	bl	80005ce <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	2b10      	cmp	r3, #16
 8000894:	d009      	beq.n	80008aa <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
 8000896:	7abb      	ldrb	r3, [r7, #10]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d106      	bne.n	80008aa <_ZN7SCServo16WriteLimitTroqueEhih+0xb2>
        return ReadBuf(6);
 800089c:	2200      	movs	r2, #0
 800089e:	2106      	movs	r1, #6
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff ff39 	bl	8000718 <_ZN7SCServo7ReadBufEtPh>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e000      	b.n	80008ac <_ZN7SCServo16WriteLimitTroqueEhih+0xb4>
    return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	80fb      	strh	r3, [r7, #6]
 80008c0:	4613      	mov	r3, r2
 80008c2:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f8a2 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4313      	orrs	r3, r2
 80008e0:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	f240 110f 	movw	r1, #271	@ 0x10f
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f81d 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4313      	orrs	r3, r2
 8000912:	73fb      	strb	r3, [r7, #15]
	return status;
 8000914:	7bfb      	ldrb	r3, [r7, #15]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 8000936:	f107 0209 	add.w	r2, r7, #9
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	21e5      	movs	r1, #229	@ 0xe5
 800093e:	4618      	mov	r0, r3
 8000940:	f003 f83a 	bl	80039b8 <_Z15VL53L4CD_RdBytettPh>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	4313      	orrs	r3, r2
 800094c:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 800094e:	7a7b      	ldrb	r3, [r7, #9]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d102      	bne.n	800095a <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 8000954:	2300      	movs	r3, #0
 8000956:	737b      	strb	r3, [r7, #13]
 8000958:	e00b      	b.n	8000972 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 800095a:	897b      	ldrh	r3, [r7, #10]
 800095c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000960:	d203      	bcs.n	800096a <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 8000962:	897b      	ldrh	r3, [r7, #10]
 8000964:	3301      	adds	r3, #1
 8000966:	817b      	strh	r3, [r7, #10]
 8000968:	e003      	b.n	8000972 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800096e:	23ff      	movs	r3, #255	@ 0xff
 8000970:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2101      	movs	r1, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f003 f8da 	bl	8003b30 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d0d9      	beq.n	8000936 <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8000982:	232d      	movs	r3, #45	@ 0x2d
 8000984:	73bb      	strb	r3, [r7, #14]
 8000986:	e011      	b.n	80009ac <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	3b2d      	subs	r3, #45	@ 0x2d
 8000990:	4a44      	ldr	r2, [pc, #272]	@ (8000aa4 <_Z19VL53L4CD_SensorInitt+0x184>)
 8000992:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	4618      	mov	r0, r3
 8000998:	f003 f840 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	3301      	adds	r3, #1
 80009aa:	73bb      	strb	r3, [r7, #14]
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	2b87      	cmp	r3, #135	@ 0x87
 80009b0:	d9ea      	bls.n	8000988 <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2240      	movs	r2, #64	@ 0x40
 80009b6:	2187      	movs	r1, #135	@ 0x87
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f82f 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80009d0:	f107 0209 	add.w	r2, r7, #9
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f8c5 	bl	8000b68 <_Z26VL53L4CD_CheckForDataReadytPh>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 80009e8:	7a7b      	ldrb	r3, [r7, #9]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d102      	bne.n	80009f4 <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	737b      	strb	r3, [r7, #13]
 80009f2:	e00b      	b.n	8000a0c <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 80009f4:	897b      	ldrh	r3, [r7, #10]
 80009f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009fa:	d203      	bcs.n	8000a04 <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 80009fc:	897b      	ldrh	r3, [r7, #10]
 80009fe:	3301      	adds	r3, #1
 8000a00:	817b      	strh	r3, [r7, #10]
 8000a02:	e003      	b.n	8000a0c <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8000a08:	23ff      	movs	r3, #255	@ 0xff
 8000a0a:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f88d 	bl	8003b30 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 8000a16:	7b7b      	ldrb	r3, [r7, #13]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d0d9      	beq.n	80009d0 <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f842 	bl	8000aa8 <_Z23VL53L4CD_ClearInterruptt>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f882 	bl	8000b3a <_Z20VL53L4CD_StopRangingt>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	2209      	movs	r2, #9
 8000a44:	2108      	movs	r1, #8
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 ffe8 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	210b      	movs	r1, #11
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 ffdd 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000a72:	2124      	movs	r1, #36	@ 0x24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fff9 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2200      	movs	r2, #0
 8000a88:	2132      	movs	r1, #50	@ 0x32
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f8b0 	bl	8000bf0 <_Z23VL53L4CD_SetRangeTimingtmm>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	73fb      	strb	r3, [r7, #15]

	return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	080093cc 	.word	0x080093cc

08000aa8 <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2186      	movs	r1, #134	@ 0x86
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 ffad 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	73fb      	strb	r3, [r7, #15]
	return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	216c      	movs	r1, #108	@ 0x6c
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 feed 	bl	80038cc <_Z16VL53L4CD_RdDWordttPm>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10b      	bne.n	8000b1a <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	2221      	movs	r2, #33	@ 0x21
 8000b06:	2187      	movs	r1, #135	@ 0x87
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 ff87 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e00a      	b.n	8000b30 <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	2187      	movs	r1, #135	@ 0x87
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ff7b 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2187      	movs	r1, #135	@ 0x87
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 ff64 	bl	8003a1c <_Z15VL53L4CD_WrBytetth>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8000b78:	f107 020d 	add.w	r2, r7, #13
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	2130      	movs	r1, #48	@ 0x30
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 ff19 	bl	80039b8 <_Z15VL53L4CD_RdBytettPh>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8000ba2:	7b7b      	ldrb	r3, [r7, #13]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d102      	bne.n	8000bae <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8000bb2:	f107 020d 	add.w	r2, r7, #13
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	2131      	movs	r1, #49	@ 0x31
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fefc 	bl	80039b8 <_Z15VL53L4CD_RdBytettPh>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 8000bca:	7b7b      	ldrb	r3, [r7, #13]
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d103      	bne.n	8000bde <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e002      	b.n	8000be4 <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8000c0c:	4b84      	ldr	r3, [pc, #528]	@ (8000e20 <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 8000c0e:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8000c10:	f107 0214 	add.w	r2, r7, #20
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	2106      	movs	r1, #6
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fe93 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 8000c2c:	8abb      	ldrh	r3, [r7, #20]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8000c3e:	8abb      	ldrh	r3, [r7, #20]
 8000c40:	461a      	mov	r2, r3
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c46:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4413      	add	r3, r2
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	099b      	lsrs	r3, r3, #6
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c56:	e005      	b.n	8000c64 <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000c58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c5c:	f063 0301 	orn	r3, r3, #1
 8000c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b09      	cmp	r3, #9
 8000c68:	d906      	bls.n	8000c78 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c6e:	d803      	bhi.n	8000c78 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 8000c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000c78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c7c:	f063 0301 	orn	r3, r3, #1
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c84:	e05e      	b.n	8000d44 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d111      	bne.n	8000cb0 <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	216c      	movs	r1, #108	@ 0x6c
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 ff18 	bl	8003ac8 <_Z16VL53L4CD_WrDWordttm>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cae:	e049      	b.n	8000d44 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d93f      	bls.n	8000d38 <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8000cb8:	f107 0216 	add.w	r2, r7, #22
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	21de      	movs	r1, #222	@ 0xde
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fe3f 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cec:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8000cf0:	8afb      	ldrh	r3, [r7, #22]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 8000cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfe:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8000d02:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	ee17 2a90 	vmov	r2, s15
 8000d10:	216c      	movs	r1, #108	@ 0x6c
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fed8 	bl	8003ac8 <_Z16VL53L4CD_WrDWordttm>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d20:	4313      	orrs	r3, r2
 8000d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 8000d2c:	3b0c      	subs	r3, #12
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d36:	e005      	b.n	8000d44 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8000d38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d3c:	f063 0301 	orn	r3, r3, #1
 8000d40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8000d44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d48:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d4a:	d063      	beq.n	8000e14 <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	031b      	lsls	r3, r3, #12
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	09da      	lsrs	r2, r3, #7
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	441a      	add	r2, r3
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	099b      	lsrs	r3, r3, #6
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000d70:	e005      	b.n	8000d7e <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8000d78:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	2bff      	cmp	r3, #255	@ 0xff
 8000d82:	d8f6      	bhi.n	8000d72 <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8000d84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8000d92:	4413      	add	r3, r2
 8000d94:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8000d96:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	215e      	movs	r1, #94	@ 0x5e
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fe65 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8000db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	09da      	lsrs	r2, r3, #7
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	441a      	add	r2, r3
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	099b      	lsrs	r3, r3, #6
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000dd4:	e005      	b.n	8000de2 <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8000ddc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dde:	3301      	adds	r3, #1
 8000de0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	2bff      	cmp	r3, #255	@ 0xff
 8000de6:	d8f6      	bhi.n	8000dd6 <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8000de8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8000df6:	4413      	add	r3, r2
 8000df8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8000dfa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	2161      	movs	r1, #97	@ 0x61
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fe33 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 8000e14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3730      	adds	r7, #48	@ 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	3f870a3d 	.word	0x3f870a3d

08000e24 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8000e36:	4b52      	ldr	r3, [pc, #328]	@ (8000f80 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 8000e38:	f107 0408 	add.w	r4, r7, #8
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e46:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8000e4a:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2189      	movs	r1, #137	@ 0x89
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fdb0 	bl	80039b8 <_Z15VL53L4CD_RdBytettPh>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e60:	4313      	orrs	r3, r2
 8000e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8000e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 8000e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e78:	2b17      	cmp	r3, #23
 8000e7a:	d807      	bhi.n	8000e8c <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8000e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e80:	3328      	adds	r3, #40	@ 0x28
 8000e82:	443b      	add	r3, r7
 8000e84:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 8000e8c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8000e94:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	218c      	movs	r1, #140	@ 0x8c
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fd51 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8000eb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8000eba:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	218e      	movs	r1, #142	@ 0x8e
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fd3e 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8000ed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8000ee0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	2190      	movs	r1, #144	@ 0x90
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fd2b 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8000efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8000f06:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	2192      	movs	r1, #146	@ 0x92
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fd18 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8000f22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8000f2c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	2196      	movs	r1, #150	@ 0x96
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fd05 	bl	8003944 <_Z15VL53L4CD_RdWordttPt>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8000f48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	899b      	ldrh	r3, [r3, #12]
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	899b      	ldrh	r3, [r3, #12]
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	80da      	strh	r2, [r3, #6]

	return status;
 8000f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800915c 	.word	0x0800915c

08000f84 <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 8000f9e:	89ba      	ldrh	r2, [r7, #12]
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	211e      	movs	r1, #30
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fd61 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fd56 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2122      	movs	r1, #34	@ 0x22
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fd4b 	bl	8003a6c <_Z15VL53L4CD_WrWordttt>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	73fb      	strb	r3, [r7, #15]
	return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	807b      	strh	r3, [r7, #2]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2201      	movs	r2, #1
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	761a      	strb	r2, [r3, #24]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a17      	ldr	r2, [pc, #92]	@ (800107c <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t+0x90>)
 8001020:	fbb2 f2f3 	udiv	r2, r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	220a      	movs	r2, #10
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
    this->gpio_port_step = gpio_port_step;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8bba      	ldrh	r2, [r7, #28]
 8001050:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f003 fd18 	bl	8004a94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8001064:	8bbb      	ldrh	r3, [r7, #28]
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	69b8      	ldr	r0, [r7, #24]
 800106c:	f003 fd12 	bl	8004a94 <HAL_GPIO_WritePin>

  }
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	00989680 	.word	0x00989680

08001080 <_ZN7Stepper8set_goalEi>:

  void set_goal(int goal) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
    this->goal = goal;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	dd01      	ble.n	80010a4 <_ZN7Stepper8set_goalEi+0x24>
 80010a0:	2201      	movs	r2, #1
 80010a2:	e001      	b.n	80010a8 <_ZN7Stepper8set_goalEi+0x28>
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	4798      	blx	r3
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6898      	ldr	r0, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8999      	ldrh	r1, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	bf14      	ite	ne
 80010d0:	2301      	movne	r3, #1
 80010d2:	2300      	moveq	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f003 fcdc 	bl	8004a94 <HAL_GPIO_WritePin>
  }
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	611a      	str	r2, [r3, #16]
  }
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e1b      	ldrb	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <_ZN7Stepper9spin_onceEv+0xc8>
      return;
    }

    if (state.state == State::HIGH) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d11b      	bne.n	8001150 <_ZN7Stepper9spin_onceEv+0x50>
      if (get_time_us() - time_start_high > time_high) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111c:	4798      	blx	r3
 800111e:	4602      	mov	r2, r0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112a:	429a      	cmp	r2, r3
 800112c:	bf8c      	ite	hi
 800112e:	2301      	movhi	r3, #1
 8001130:	2300      	movls	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03d      	beq.n	80011b4 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	889b      	ldrh	r3, [r3, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f003 fca6 	bl	8004a94 <HAL_GPIO_WritePin>
        state.state = State::LOW;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	761a      	strb	r2, [r3, #24]
 800114e:	e031      	b.n	80011b4 <_ZN7Stepper9spin_onceEv+0xb4>
      }
    } else if (state.state == State::LOW) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e1b      	ldrb	r3, [r3, #24]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d12d      	bne.n	80011b4 <_ZN7Stepper9spin_onceEv+0xb4>
      if (get_time_us() - time_start_step > time_step) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115c:	4798      	blx	r3
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001164:	1ad2      	subs	r2, r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	429a      	cmp	r2, r3
 800116c:	bf8c      	ite	hi
 800116e:	2301      	movhi	r3, #1
 8001170:	2300      	movls	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01d      	beq.n	80011b4 <_ZN7Stepper9spin_onceEv+0xb4>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	f003 fc86 	bl	8004a94 <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001192:	4798      	blx	r3
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	4798      	blx	r3
 80011a0:	4602      	mov	r2, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	441a      	add	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d104      	bne.n	80011ca <_ZN7Stepper9spin_onceEv+0xca>
      state.state = State::STOPPED;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
 80011c6:	e000      	b.n	80011ca <_ZN7Stepper9spin_onceEv+0xca>
      return;
 80011c8:	bf00      	nop
    }
  }
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e1b      	ldrb	r3, [r3, #24]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
  }
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>:
#include "VL53L4CD_api.h"


class LaserSensor {
public:
	LaserSensor(GPIO_TypeDef *port, uint16_t pin, Dev_t address, int16_t offset) : pin(pin), port(port), address(address), offset(offset)
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	4611      	mov	r1, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	80bb      	strh	r3, [r7, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	88ba      	ldrh	r2, [r7, #4]
 8001218:	811a      	strh	r2, [r3, #8]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	330a      	adds	r3, #10
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8b3a      	ldrh	r2, [r7, #24]
 800122c:	835a      	strh	r2, [r3, #26]
	{

	}
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_ZN11LaserSensorD1Ev>:

	// destructor
	~LaserSensor()
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_StopRanging(address);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc76 	bl	8000b3a <_Z20VL53L4CD_StopRangingt>
	}
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN11LaserSensor5setupEv>:

	int setup()
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	{
		uint16_t sensor_id;
		uint8_t status;
		printf("SENSOR_PIN: %d\n", pin);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4845      	ldr	r0, [pc, #276]	@ (800137c <_ZN11LaserSensor5setupEv+0x124>)
 8001268:	f007 f8f0 	bl	800844c <iprintf>

		HAL_Delay(5);
 800126c:	2005      	movs	r0, #5
 800126e:	f002 ffad 	bl	80041cc <HAL_Delay>
		// set the pin to high to enable the sensor
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6858      	ldr	r0, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f003 fc09 	bl	8004a94 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001282:	2005      	movs	r0, #5
 8001284:	f002 ffa2 	bl	80041cc <HAL_Delay>

		// set I2C address (other unset addresses XSHUT have to be pull to low before)
		status = VL53L4CD_SetI2CAddress(0x52, address); // 0x52 is the default address
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	891b      	ldrh	r3, [r3, #8]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	2052      	movs	r0, #82	@ 0x52
 8001292:	f7ff fb0f 	bl	80008b4 <_Z22VL53L4CD_SetI2CAddressth>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
		if (status)
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <_ZN11LaserSensor5setupEv+0x56>
		{
			printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4836      	ldr	r0, [pc, #216]	@ (8001380 <_ZN11LaserSensor5setupEv+0x128>)
 80012a6:	f007 f8d1 	bl	800844c <iprintf>
			return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	e061      	b.n	8001372 <_ZN11LaserSensor5setupEv+0x11a>
		}

		/* (Optional) Check if there is a VL53L4CD sensor connected */
		printf("Checking for laser sensor at address %x\n", address);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	891b      	ldrh	r3, [r3, #8]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4833      	ldr	r0, [pc, #204]	@ (8001384 <_ZN11LaserSensor5setupEv+0x12c>)
 80012b6:	f007 f8c9 	bl	800844c <iprintf>
		status = VL53L4CD_GetSensorId(address, &sensor_id);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	891b      	ldrh	r3, [r3, #8]
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fb11 	bl	80008ec <_Z20VL53L4CD_GetSensorIdtPt>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

		if (status || (sensor_id != 0xEBAA))
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d104      	bne.n	80012de <_ZN11LaserSensor5setupEv+0x86>
 80012d4:	89bb      	ldrh	r3, [r7, #12]
 80012d6:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 80012da:	4293      	cmp	r3, r2
 80012dc:	d004      	beq.n	80012e8 <_ZN11LaserSensor5setupEv+0x90>
		{
			printf("VL53L4CD not detected at requested address\n");
 80012de:	482a      	ldr	r0, [pc, #168]	@ (8001388 <_ZN11LaserSensor5setupEv+0x130>)
 80012e0:	f007 f91c 	bl	800851c <puts>
			return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	e044      	b.n	8001372 <_ZN11LaserSensor5setupEv+0x11a>
		}
		printf("VL53L4CD detected at address %x\n", address);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4827      	ldr	r0, [pc, #156]	@ (800138c <_ZN11LaserSensor5setupEv+0x134>)
 80012f0:	f007 f8ac 	bl	800844c <iprintf>

		/* (Mandatory) Init VL53L4CD sensor */
		printf("Initializing laser sensor\n");
 80012f4:	4826      	ldr	r0, [pc, #152]	@ (8001390 <_ZN11LaserSensor5setupEv+0x138>)
 80012f6:	f007 f911 	bl	800851c <puts>
		status = VL53L4CD_SensorInit(address);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	891b      	ldrh	r3, [r3, #8]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb0e 	bl	8000920 <_Z19VL53L4CD_SensorInitt>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <_ZN11LaserSensor5setupEv+0xc0>
		{
			printf("VL53L4CD ULD Loading failed\n");
 800130e:	4821      	ldr	r0, [pc, #132]	@ (8001394 <_ZN11LaserSensor5setupEv+0x13c>)
 8001310:	f007 f904 	bl	800851c <puts>
			return status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	e02c      	b.n	8001372 <_ZN11LaserSensor5setupEv+0x11a>
		}

		// set the offset
		status = VL53L4CD_SetOffset(address, offset);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	891a      	ldrh	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff fe2d 	bl	8000f84 <_Z18VL53L4CD_SetOffsetts>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
		if (status)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <_ZN11LaserSensor5setupEv+0xea>
		{
			printf("VL53L4CD_SetOffset failed with status %u\n", status);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4619      	mov	r1, r3
 8001338:	4817      	ldr	r0, [pc, #92]	@ (8001398 <_ZN11LaserSensor5setupEv+0x140>)
 800133a:	f007 f887 	bl	800844c <iprintf>
			return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	e017      	b.n	8001372 <_ZN11LaserSensor5setupEv+0x11a>
		}

		status = VL53L4CD_StartRanging(address);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fbc5 	bl	8000ad6 <_Z21VL53L4CD_StartRangingt>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <_ZN11LaserSensor5setupEv+0x10c>
		{
			printf("VL53L4CD_StartRanging failed with status %u\n", status);
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	4619      	mov	r1, r3
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <_ZN11LaserSensor5setupEv+0x144>)
 800135c:	f007 f876 	bl	800844c <iprintf>
			return status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	e006      	b.n	8001372 <_ZN11LaserSensor5setupEv+0x11a>
		}

		printf("VL53L4CD ULD ready at address %x ready\n", address);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	891b      	ldrh	r3, [r3, #8]
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <_ZN11LaserSensor5setupEv+0x148>)
 800136c:	f007 f86e 	bl	800844c <iprintf>
		return 0;
 8001370:	2300      	movs	r3, #0
	}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	08009174 	.word	0x08009174
 8001380:	08009184 	.word	0x08009184
 8001384:	080091b4 	.word	0x080091b4
 8001388:	080091e0 	.word	0x080091e0
 800138c:	0800920c 	.word	0x0800920c
 8001390:	08009230 	.word	0x08009230
 8001394:	0800924c 	.word	0x0800924c
 8001398:	08009268 	.word	0x08009268
 800139c:	08009294 	.word	0x08009294
 80013a0:	080092c4 	.word	0x080092c4

080013a4 <_ZN11LaserSensor11get_dist_mmEv>:


	int get_dist_mm()
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	{
		int status = update_distance();
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f813 	bl	80013d8 <_ZN11LaserSensor15update_distanceEv>
 80013b2:	60f8      	str	r0, [r7, #12]
		if (status)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <_ZN11LaserSensor11get_dist_mmEv+0x24>
		{
			printf("VL53L4CD_GetResult failed with status %u\n", status);
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <_ZN11LaserSensor11get_dist_mmEv+0x30>)
 80013be:	f007 f845 	bl	800844c <iprintf>
			return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013c6:	e001      	b.n	80013cc <_ZN11LaserSensor11get_dist_mmEv+0x28>
		}
		return results.distance_mm;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	899b      	ldrh	r3, [r3, #12]
	}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	080092ec 	.word	0x080092ec

080013d8 <_ZN11LaserSensor15update_distanceEv>:
	VL53L4CD_ResultsData_t results = {};
	int16_t offset;



	int update_distance()
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	{
		// We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
		static uint32_t last_read_time = 0;
		if (HAL_GetTick() - last_read_time < 5)
 80013e0:	f002 fee8 	bl	80041b4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_ZN11LaserSensor15update_distanceEv+0x64>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <_ZN11LaserSensor15update_distanceEv+0x26>
		{
			return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e01a      	b.n	8001434 <_ZN11LaserSensor15update_distanceEv+0x5c>
		/* Use polling function to know when a new measurement is ready.
		 * Another way can be to wait for HW interrupt raised on PIN 7
		 * (GPIO 1) when a new measurement is ready */

		uint8_t isReady;
		uint8_t status = VL53L4CD_CheckForDataReady(address, &isReady);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	891b      	ldrh	r3, [r3, #8]
 8001402:	f107 020e 	add.w	r2, r7, #14
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fbad 	bl	8000b68 <_Z26VL53L4CD_CheckForDataReadytPh>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]

		if (isReady)
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <_ZN11LaserSensor15update_distanceEv+0x5a>
		{
			/* (Mandatory) Clear HW interrupt to restart measurements */
			VL53L4CD_ClearInterrupt(address);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	891b      	ldrh	r3, [r3, #8]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fb43 	bl	8000aa8 <_Z23VL53L4CD_ClearInterruptt>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(address, &results);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	891a      	ldrh	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	330a      	adds	r3, #10
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f7ff fcf9 	bl	8000e24 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
		}

		return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000084 	.word	0x20000084

08001440 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZNSt14_Bit_referenceaSEb>:
    operator bool() const _GLIBCXX_NOEXCEPT
    { return !!(*_M_p & _M_mask); }

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e009      	b.n	80014b8 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
      return *this;
 80014b8:	687b      	ldr	r3, [r7, #4]
    }
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    _GLIBCXX20_CONSTEXPR
    void
    _M_bump_up()
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	1c59      	adds	r1, r3, #1
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6051      	str	r1, [r2, #4]
 80014fe:	2b1f      	cmp	r3, #31
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
	}
    }
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da00      	bge.n	8001548 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001546:	331f      	adds	r3, #31
 8001548:	115b      	asrs	r3, r3, #5
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	441a      	add	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	425a      	negs	r2, r3
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	f002 021f 	and.w	r2, r2, #31
 800155e:	bf58      	it	pl
 8001560:	4253      	negpl	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da07      	bge.n	800157a <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3320      	adds	r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	1f1a      	subs	r2, r3, #4
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]
    }
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff93 	bl	80014c6 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff82 	bl	80014c6 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff36 	bl	8001458 <_ZNSt14_Bit_referenceC1EPmm>
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZNSt13_Bit_iteratorppEv>:

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator++()
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff74 	bl	80014ec <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001604:	687b      	ldr	r3, [r7, #4]
    }
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff83 	bl	8001528 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001622:	687b      	ldr	r3, [r7, #4]
    }
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZStplRKSt13_Bit_iteratori>:
    operator[](difference_type __i) const
    { return *(*this + __i); }

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001640:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ffe1 	bl	800160e <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 800164c:	bf00      	nop
    }
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00b      	b.n	8001682 <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	1c4b      	adds	r3, r1, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001674:	2201      	movs	r2, #1
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <_write+0x3c>)
 8001678:	f005 fdba 	bl	80071f0 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbef      	blt.n	800166a <_write+0x12>
   return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000220 	.word	0x20000220

08001698 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a8:	d104      	bne.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016b2:	6013      	str	r3, [r2, #0]
  }
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	200002b4 	.word	0x200002b4

080016c4 <_Z11get_time_usv>:

unsigned long get_time_us() {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_Z11get_time_usv+0x28>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <_Z11get_time_usv+0x2c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <_Z11get_time_usv+0x30>)
 80016d8:	fb03 f202 	mul.w	r2, r3, r2
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000140 	.word	0x20000140
 80016f0:	200002b4 	.word	0x200002b4
 80016f4:	000f4240 	.word	0x000f4240

080016f8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fd7f 	bl	8002204 <_ZNSaI11LaserSensorED1Ev>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZN11SystemStateC1Ev>:
  hoppers_ids[LEFT],
  hoppers_ids[RIGHT]
};


struct SystemState
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	709a      	strb	r2, [r3, #2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1d1c      	adds	r4, r3, #4
 800172e:	2300      	movs	r3, #0
 8001730:	743b      	strb	r3, [r7, #16]
 8001732:	2300      	movs	r3, #0
 8001734:	747b      	strb	r3, [r7, #17]
 8001736:	2300      	movs	r3, #0
 8001738:	74bb      	strb	r3, [r7, #18]
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	2303      	movs	r3, #3
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fdd1 	bl	80022f0 <_ZNSaIbEC1Ev>
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	f107 0208 	add.w	r2, r7, #8
 8001756:	ca06      	ldmia	r2, {r1, r2}
 8001758:	4620      	mov	r0, r4
 800175a:	f000 fde1 	bl	8002320 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fdd0 	bl	8002308 <_ZNSaIbED1Ev>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
	...

08001774 <_Z11ping_servosv>:


// ================================================ DIAGNOSTIC FUNCTIONS ===============================================

int ping_servos()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
  int res = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	e021      	b.n	80017c8 <_Z11ping_servosv+0x54>
  {
    int id = servo_ids_to_check[i];
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4619      	mov	r1, r3
 8001788:	4818      	ldr	r0, [pc, #96]	@ (80017ec <_Z11ping_servosv+0x78>)
 800178a:	f000 fda1 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 800178e:	4603      	mov	r3, r0
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	607b      	str	r3, [r7, #4]
    int pos = servos.ReadPos(id);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	4815      	ldr	r0, [pc, #84]	@ (80017f0 <_Z11ping_servosv+0x7c>)
 800179c:	f7fe ffd8 	bl	8000750 <_ZN7SCServo7ReadPosEh>
 80017a0:	6038      	str	r0, [r7, #0]

    if(pos == -1)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017a8:	d107      	bne.n	80017ba <_Z11ping_servosv+0x46>
    {
      printf("Error reading servo %d\n", id);
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <_Z11ping_servosv+0x80>)
 80017ae:	f006 fe4d 	bl	800844c <iprintf>
      res = -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e003      	b.n	80017c2 <_Z11ping_servosv+0x4e>
    }
    else
    {
      printf("Servo %d was ping successfully\n", id);
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <_Z11ping_servosv+0x84>)
 80017be:	f006 fe45 	bl	800844c <iprintf>
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4808      	ldr	r0, [pc, #32]	@ (80017ec <_Z11ping_servosv+0x78>)
 80017ca:	f000 fdd7 	bl	800237c <_ZNKSt6vectorIiSaIiEE4sizeEv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	bf8c      	ite	hi
 80017d6:	2301      	movhi	r3, #1
 80017d8:	2300      	movls	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1d1      	bne.n	8001784 <_Z11ping_servosv+0x10>
    }
  }
  return res;
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000035c 	.word	0x2000035c
 80017f0:	20000358 	.word	0x20000358
 80017f4:	08009318 	.word	0x08009318
 80017f8:	08009330 	.word	0x08009330

080017fc <_Z12setup_lasersv>:
 * @brief Setup the distance sensors
 *
 * @return int 0 if all sensors are setup correctly, otherwise the error code
 */
int setup_lasers()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2110      	movs	r1, #16
 8001806:	4819      	ldr	r0, [pc, #100]	@ (800186c <_Z12setup_lasersv+0x70>)
 8001808:	f003 f944 	bl	8004a94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	4816      	ldr	r0, [pc, #88]	@ (800186c <_Z12setup_lasersv+0x70>)
 8001812:	f003 f93f 	bl	8004a94 <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  int status = sensors[LEFT].setup();
 8001816:	2100      	movs	r1, #0
 8001818:	4815      	ldr	r0, [pc, #84]	@ (8001870 <_Z12setup_lasersv+0x74>)
 800181a:	f000 fdbf 	bl	800239c <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 800181e:	4603      	mov	r3, r0
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fd19 	bl	8001258 <_ZN11LaserSensor5setupEv>
 8001826:	6078      	str	r0, [r7, #4]

  if(status)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <_Z12setup_lasersv+0x36>
  {
    return status;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e018      	b.n	8001864 <_Z12setup_lasersv+0x68>
  }

  /* Setup the second laser sensor */
  status = sensors[RIGHT].setup();
 8001832:	2101      	movs	r1, #1
 8001834:	480e      	ldr	r0, [pc, #56]	@ (8001870 <_Z12setup_lasersv+0x74>)
 8001836:	f000 fdb1 	bl	800239c <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd0b 	bl	8001258 <_ZN11LaserSensor5setupEv>
 8001842:	6078      	str	r0, [r7, #4]

  if(status)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <_Z12setup_lasersv+0x52>
  {
    return status;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	e00a      	b.n	8001864 <_Z12setup_lasersv+0x68>
  }

  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2110      	movs	r1, #16
 8001852:	4806      	ldr	r0, [pc, #24]	@ (800186c <_Z12setup_lasersv+0x70>)
 8001854:	f003 f91e 	bl	8004a94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <_Z12setup_lasersv+0x70>)
 800185e:	f003 f919 	bl	8004a94 <HAL_GPIO_WritePin>

  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	48000400 	.word	0x48000400
 8001870:	200002dc 	.word	0x200002dc

08001874 <_Z24lift_initialize_and_testv>:
  stepper_res.set_goal(0);

}

void lift_initialize_and_test()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  // Here we don't have a sensor. So we just turn the motor for a certain distance. (5 spins at 3200 steps per spin)

  stepper_lift.set_goal(-5*3200);
 8001878:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <_Z24lift_initialize_and_testv+0x40>)
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <_Z24lift_initialize_and_testv+0x44>)
 800187c:	f7ff fc00 	bl	8001080 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8001880:	e002      	b.n	8001888 <_Z24lift_initialize_and_testv+0x14>
  {
    stepper_lift.spin_once();
 8001882:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <_Z24lift_initialize_and_testv+0x44>)
 8001884:	f7ff fc3c 	bl	8001100 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8001888:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <_Z24lift_initialize_and_testv+0x44>)
 800188a:	f7ff fca1 	bl	80011d0 <_ZN7Stepper10is_stoppedEv>
 800188e:	4603      	mov	r3, r0
 8001890:	f083 0301 	eor.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f3      	bne.n	8001882 <_Z24lift_initialize_and_testv+0xe>
  }
  stepper_lift.set_pos(0);
 800189a:	2100      	movs	r1, #0
 800189c:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <_Z24lift_initialize_and_testv+0x44>)
 800189e:	f7ff fc21 	bl	80010e4 <_ZN7Stepper7set_posEi>

  grabber_extend();
 80018a2:	f000 f889 	bl	80019b8 <_Z14grabber_extendv>
  grabber_retract();
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f89c 	bl	80019e4 <_Z15grabber_retractb>

  lift_go_down();
 80018ac:	f000 f836 	bl	800191c <_Z12lift_go_downv>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	ffffc180 	.word	0xffffc180
 80018b8:	200002e8 	.word	0x200002e8

080018bc <_Z27grabber_initialize_and_testv>:


void grabber_initialize_and_test()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af02      	add	r7, sp, #8
  // servos.EnableTorque(SERVO_GRABBER_ID, 1);
  servos.WriteLimitTroque(SERVO_GRABBER_ID, 1023);
 80018c2:	2301      	movs	r3, #1
 80018c4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80018c8:	2108      	movs	r1, #8
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <_Z27grabber_initialize_and_testv+0x34>)
 80018cc:	f7fe ff94 	bl	80007f8 <_ZN7SCServo16WriteLimitTroqueEhih>
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 200);
 80018d0:	2301      	movs	r3, #1
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	23c8      	movs	r3, #200	@ 0xc8
 80018d6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80018da:	2108      	movs	r1, #8
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <_Z27grabber_initialize_and_testv+0x34>)
 80018de:	f7fe fea9 	bl	8000634 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 80018e2:	20c8      	movs	r0, #200	@ 0xc8
 80018e4:	f002 fc72 	bl	80041cc <HAL_Delay>
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000358 	.word	0x20000358

080018f4 <_Z27hoppers_initialize_and_testv>:
/**
 * Close then open the hoppers
 *
 */
void hoppers_initialize_and_test()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  hopper_close(LEFT);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 f88f 	bl	8001a1c <_Z12hopper_closei>
  hopper_close(RIGHT);
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 f88c 	bl	8001a1c <_Z12hopper_closei>

  HAL_Delay(500); // Because hoppers functions are not blocking
 8001904:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001908:	f002 fc60 	bl	80041cc <HAL_Delay>

  hopper_open(LEFT);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 f8ab 	bl	8001a68 <_Z11hopper_openi>
  hopper_open(RIGHT);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f8a8 	bl	8001a68 <_Z11hopper_openi>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <_Z12lift_go_downv>:


// ----------------------------------------- LIFT -----------------------------------------

void lift_go_down()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_DOWN);
 8001920:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8001924:	4809      	ldr	r0, [pc, #36]	@ (800194c <_Z12lift_go_downv+0x30>)
 8001926:	f7ff fbab 	bl	8001080 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 800192a:	e002      	b.n	8001932 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 800192c:	4807      	ldr	r0, [pc, #28]	@ (800194c <_Z12lift_go_downv+0x30>)
 800192e:	f7ff fbe7 	bl	8001100 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <_Z12lift_go_downv+0x30>)
 8001934:	f7ff fc4c 	bl	80011d0 <_ZN7Stepper10is_stoppedEv>
 8001938:	4603      	mov	r3, r0
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f3      	bne.n	800192c <_Z12lift_go_downv+0x10>
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002e8 	.word	0x200002e8

08001950 <_Z10lift_go_upv>:


void lift_go_up()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8001954:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001958:	4809      	ldr	r0, [pc, #36]	@ (8001980 <_Z10lift_go_upv+0x30>)
 800195a:	f7ff fb91 	bl	8001080 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 800195e:	e002      	b.n	8001966 <_Z10lift_go_upv+0x16>
  {
    stepper_lift.spin_once();
 8001960:	4807      	ldr	r0, [pc, #28]	@ (8001980 <_Z10lift_go_upv+0x30>)
 8001962:	f7ff fbcd 	bl	8001100 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8001966:	4806      	ldr	r0, [pc, #24]	@ (8001980 <_Z10lift_go_upv+0x30>)
 8001968:	f7ff fc32 	bl	80011d0 <_ZN7Stepper10is_stoppedEv>
 800196c:	4603      	mov	r3, r0
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f3      	bne.n	8001960 <_Z10lift_go_upv+0x10>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002e8 	.word	0x200002e8

08001984 <_Z14lift_go_middlev>:


void lift_go_middle()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 8001988:	f241 3188 	movw	r1, #5000	@ 0x1388
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <_Z14lift_go_middlev+0x30>)
 800198e:	f7ff fb77 	bl	8001080 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8001992:	e002      	b.n	800199a <_Z14lift_go_middlev+0x16>
  {
    stepper_lift.spin_once();
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <_Z14lift_go_middlev+0x30>)
 8001996:	f7ff fbb3 	bl	8001100 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 800199a:	4806      	ldr	r0, [pc, #24]	@ (80019b4 <_Z14lift_go_middlev+0x30>)
 800199c:	f7ff fc18 	bl	80011d0 <_ZN7Stepper10is_stoppedEv>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f083 0301 	eor.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f3      	bne.n	8001994 <_Z14lift_go_middlev+0x10>
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002e8 	.word	0x200002e8

080019b8 <_Z14grabber_extendv>:

// ----------------------------------------- GRABBER -----------------------------------------

void grabber_extend()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_EXTEND, 500);
 80019be:	2301      	movs	r3, #1
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019c6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80019ca:	2108      	movs	r1, #8
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <_Z14grabber_extendv+0x28>)
 80019ce:	f7fe fe31 	bl	8000634 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019d6:	f002 fbf9 	bl	80041cc <HAL_Delay>
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000358 	.word	0x20000358

080019e4 <_Z15grabber_retractb>:


void grabber_retract(bool block)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 500);
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019f6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80019fa:	2108      	movs	r1, #8
 80019fc:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <_Z15grabber_retractb+0x34>)
 80019fe:	f7fe fe19 	bl	8000634 <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <_Z15grabber_retractb+0x2c>
 8001a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a0c:	f002 fbde 	bl	80041cc <HAL_Delay>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000358 	.word	0x20000358

08001a1c <_Z12hopper_closei>:


// ----------------------------------------- HOPPERS -----------------------------------------

void hopper_close(int side)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_close[side], 500);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <_Z12hopper_closei+0x40>)
 8001a2a:	f000 fc51 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b2dc      	uxtb	r4, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <_Z12hopper_closei+0x44>)
 8001a3a:	f000 fc49 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <_Z12hopper_closei+0x48>)
 8001a4e:	f7fe fdf1 	bl	8000634 <_ZN7SCServo8WritePosEhiih>
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200002b8 	.word	0x200002b8
 8001a60:	200002d0 	.word	0x200002d0
 8001a64:	20000358 	.word	0x20000358

08001a68 <_Z11hopper_openi>:


void hopper_open(int side)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_open[side], 500);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <_Z11hopper_openi+0x40>)
 8001a76:	f000 fc2b 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b2dc      	uxtb	r4, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4809      	ldr	r0, [pc, #36]	@ (8001aac <_Z11hopper_openi+0x44>)
 8001a86:	f000 fc23 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a96:	4621      	mov	r1, r4
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <_Z11hopper_openi+0x48>)
 8001a9a:	f7fe fdcb 	bl	8000634 <_ZN7SCServo8WritePosEhiih>
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002b8 	.word	0x200002b8
 8001aac:	200002c4 	.word	0x200002c4
 8001ab0:	20000358 	.word	0x20000358

08001ab4 <_Z31hopper_wait_and_close_spin_oncei>:

// =============================================== HIGH LEVEL ACTIONS =================================================


bool hopper_wait_and_close_spin_once(int side)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  // Check if distance < 50mm for left plant
  if(sensors[side].get_dist_mm() < 50)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <_Z31hopper_wait_and_close_spin_oncei+0x40>)
 8001ac2:	f000 fc6b 	bl	800239c <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc6b 	bl	80013a4 <_ZN11LaserSensor11get_dist_mmEv>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b31      	cmp	r3, #49	@ 0x31
 8001ad2:	bfd4      	ite	le
 8001ad4:	2301      	movle	r3, #1
 8001ad6:	2300      	movgt	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <_Z31hopper_wait_and_close_spin_oncei+0x34>
  {
    // Close the hopper
    hopper_close(side);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ff9c 	bl	8001a1c <_Z12hopper_closei>
    return true;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <_Z31hopper_wait_and_close_spin_oncei+0x36>
  }
  return false;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002dc 	.word	0x200002dc

08001af8 <_Z20request_store_plantsv>:


void request_store_plants()
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  system_state.storing = true;
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <_Z20request_store_plantsv+0x14>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	709a      	strb	r2, [r3, #2]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000368 	.word	0x20000368

08001b10 <_Z22store_plants_spin_oncev>:


// /!\ DELAY IN THIS FUNCTION
void store_plants_spin_once()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  if(!system_state.storing)
 8001b14:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b16:	789b      	ldrb	r3, [r3, #2]
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d142      	bne.n	8001ba8 <_Z22store_plants_spin_oncev+0x98>
  {
    return;
  }

  if(!system_state.hopper_left_closed)
 8001b22:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <_Z22store_plants_spin_oncev+0x2e>
  {
    system_state.hopper_left_closed = hopper_wait_and_close_spin_once(LEFT);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff ffbf 	bl	8001ab4 <_Z31hopper_wait_and_close_spin_oncei>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b3c:	701a      	strb	r2, [r3, #0]
  }

  if(!system_state.hopper_right_closed)
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <_Z22store_plants_spin_oncev+0x4a>
  {
    system_state.hopper_right_closed = hopper_wait_and_close_spin_once(RIGHT);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff ffb1 	bl	8001ab4 <_Z31hopper_wait_and_close_spin_oncei>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  if(system_state.hopper_left_closed && system_state.hopper_right_closed)
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d023      	beq.n	8001baa <_Z22store_plants_spin_oncev+0x9a>
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01f      	beq.n	8001baa <_Z22store_plants_spin_oncev+0x9a>
  {
    HAL_Delay(500); // Because hoppers functions are not blocking // TODO ADD NON BLOCKING DELAY
 8001b6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b6e:	f002 fb2d 	bl	80041cc <HAL_Delay>
    lift_go_up();
 8001b72:	f7ff feed 	bl	8001950 <_Z10lift_go_upv>
    grabber_extend();
 8001b76:	f7ff ff1f 	bl	80019b8 <_Z14grabber_extendv>
    lift_go_middle();
 8001b7a:	f7ff ff03 	bl	8001984 <_Z14lift_go_middlev>
    grabber_retract(false);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff ff30 	bl	80019e4 <_Z15grabber_retractb>
    lift_go_down();
 8001b84:	f7ff feca 	bl	800191c <_Z12lift_go_downv>
    hopper_open(LEFT);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff ff6d 	bl	8001a68 <_Z11hopper_openi>
    hopper_open(RIGHT);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff ff6a 	bl	8001a68 <_Z11hopper_openi>
    system_state.storing = false;
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	709a      	strb	r2, [r3, #2]
    system_state.hopper_left_closed = false;
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    system_state.hopper_right_closed = false;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	@ (8001bac <_Z22store_plants_spin_oncev+0x9c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
 8001ba6:	e000      	b.n	8001baa <_Z22store_plants_spin_oncev+0x9a>
    return;
 8001ba8:	bf00      	nop
  }
}
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000368 	.word	0x20000368

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb4:	f002 fa99 	bl	80040ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb8:	f000 f84a 	bl	8001c50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbc:	f000 fa58 	bl	8002070 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001bc0:	f000 f9f6 	bl	8001fb0 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8001bc4:	f000 f992 	bl	8001eec <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 8001bc8:	f000 f898 	bl	8001cfc <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8001bcc:	f000 f8e2 	bl	8001d94 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001bd0:	f000 f92e 	bl	8001e30 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8001bd4:	481a      	ldr	r0, [pc, #104]	@ (8001c40 <main+0x90>)
 8001bd6:	f004 fd87 	bl	80066e8 <HAL_TIM_Base_Start_IT>

    // Initialize the sensors
  if(setup_lasers() != 0)
 8001bda:	f7ff fe0f 	bl	80017fc <_Z12setup_lasersv>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <main+0x48>
  {
    printf("Error setting up the sensors\n");
 8001bee:	4815      	ldr	r0, [pc, #84]	@ (8001c44 <main+0x94>)
 8001bf0:	f006 fc94 	bl	800851c <puts>
    Error_Handler();
 8001bf4:	f000 faa0 	bl	8002138 <Error_Handler>
  }

  if(ping_servos() != 0)
 8001bf8:	f7ff fdbc 	bl	8001774 <_Z11ping_servosv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <main+0x66>
  {
    printf("Error pinging servos\n");
 8001c0c:	480e      	ldr	r0, [pc, #56]	@ (8001c48 <main+0x98>)
 8001c0e:	f006 fc85 	bl	800851c <puts>
    Error_Handler();
 8001c12:	f000 fa91 	bl	8002138 <Error_Handler>
  }

    // Initialize / move actuators
    hoppers_initialize_and_test();
 8001c16:	f7ff fe6d 	bl	80018f4 <_Z27hoppers_initialize_and_testv>
    grabber_initialize_and_test();
 8001c1a:	f7ff fe4f 	bl	80018bc <_Z27grabber_initialize_and_testv>
    lift_initialize_and_test();
 8001c1e:	f7ff fe29 	bl	8001874 <_Z24lift_initialize_and_testv>


    request_store_plants();
 8001c22:	f7ff ff69 	bl	8001af8 <_Z20request_store_plantsv>


    while (1)
    {

      store_plants_spin_once();
 8001c26:	f7ff ff73 	bl	8001b10 <_Z22store_plants_spin_oncev>
      if(!system_state.storing)
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <main+0x9c>)
 8001c2c:	789b      	ldrb	r3, [r3, #2]
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f6      	beq.n	8001c26 <main+0x76>
      {
        request_store_plants();
 8001c38:	f7ff ff5e 	bl	8001af8 <_Z20request_store_plantsv>
      store_plants_spin_once();
 8001c3c:	e7f3      	b.n	8001c26 <main+0x76>
 8001c3e:	bf00      	nop
 8001c40:	20000140 	.word	0x20000140
 8001c44:	08009350 	.word	0x08009350
 8001c48:	08009370 	.word	0x08009370
 8001c4c:	20000368 	.word	0x20000368

08001c50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b094      	sub	sp, #80	@ 0x50
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	2238      	movs	r2, #56	@ 0x38
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fd56 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f003 fd0e 	bl	8005694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c82:	2340      	movs	r3, #64	@ 0x40
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c92:	2355      	movs	r3, #85	@ 0x55
 8001c94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 0318 	add.w	r3, r7, #24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fda8 	bl	80057fc <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf14      	ite	ne
 8001cb2:	2301      	movne	r3, #1
 8001cb4:	2300      	moveq	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001cbc:	f000 fa3c 	bl	8002138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f8a1 	bl	8005e20 <HAL_RCC_ClockConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001cee:	f000 fa23 	bl	8002138 <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3750      	adds	r7, #80	@ 0x50
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001d04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d3e:	2202      	movs	r2, #2
 8001d40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d6c:	4807      	ldr	r0, [pc, #28]	@ (8001d8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d6e:	f002 fb5f 	bl	8004430 <HAL_FDCAN_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001d82:	f000 f9d9 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000088 	.word	0x20000088
 8001d90:	40006400 	.word	0x40006400

08001d94 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001d9a:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <_ZL12MX_I2C1_Initv+0x94>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001da0:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x98>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dce:	4815      	ldr	r0, [pc, #84]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dd0:	f002 fe78 	bl	8004ac4 <HAL_I2C_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001de4:	f000 f9a8 	bl	8002138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	480e      	ldr	r0, [pc, #56]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001dec:	f003 fbba 	bl	8005564 <HAL_I2CEx_ConfigAnalogFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001e00:	f000 f99a 	bl	8002138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <_ZL12MX_I2C1_Initv+0x90>)
 8001e08:	f003 fbf7 	bl	80055fa <HAL_I2CEx_ConfigDigitalFilter>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001e1c:	f000 f98c 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200000ec 	.word	0x200000ec
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	30a0a7fb 	.word	0x30a0a7fb

08001e30 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e58:	2210      	movs	r2, #16
 8001e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e64:	4a20      	ldr	r2, [pc, #128]	@ (8001ee8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e74:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e76:	f004 fbdf 	bl	8006638 <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e8a:	f000 f955 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e9c:	f004 fdde 	bl	8006a5c <HAL_TIM_ConfigClockSource>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001eb0:	f000 f942 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ec2:	f005 f825 	bl	8006f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001ed6:	f000 f92f 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000140 	.word	0x20000140
 8001ee8:	000f4240 	.word	0x000f4240

08001eec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8001fac <_ZL19MX_USART1_UART_Initv+0xc0>)
 8001efa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efc:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f08:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f10:	220c      	movs	r2, #12
 8001f12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f20:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001f32:	481c      	ldr	r0, [pc, #112]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f34:	f005 f904 	bl	8007140 <HAL_HalfDuplex_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8001f48:	f000 f8f6 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4815      	ldr	r0, [pc, #84]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f50:	f006 f803 	bl	8007f5a <HAL_UARTEx_SetTxFifoThreshold>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8001f64:	f000 f8e8 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	480e      	ldr	r0, [pc, #56]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f6c:	f006 f833 	bl	8007fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8001f80:	f000 f8da 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001f84:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001f86:	f005 ff74 	bl	8007e72 <HAL_UARTEx_EnableFifoMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8001f9a:	f000 f8cd 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000018c 	.word	0x2000018c
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	000f4240 	.word	0x000f4240

08001fb0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff8:	481b      	ldr	r0, [pc, #108]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ffa:	f005 f851 	bl	80070a0 <HAL_UART_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800200e:	f000 f893 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4814      	ldr	r0, [pc, #80]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002016:	f005 ffa0 	bl	8007f5a <HAL_UARTEx_SetTxFifoThreshold>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800202a:	f000 f885 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	480d      	ldr	r0, [pc, #52]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002032:	f005 ffd0 	bl	8007fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8002046:	f000 f877 	bl	8002138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800204a:	4807      	ldr	r0, [pc, #28]	@ (8002068 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800204c:	f005 ff4c 	bl	8007ee8 <HAL_UARTEx_DisableFifoMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002060:	f000 f86a 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000220 	.word	0x20000220
 800206c:	40004400 	.word	0x40004400

08002070 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <_ZL12MX_GPIO_Initv+0xc0>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2192      	movs	r1, #146	@ 0x92
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020be:	f002 fce9 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 80020c2:	2200      	movs	r2, #0
 80020c4:	f240 1171 	movw	r1, #369	@ 0x171
 80020c8:	481a      	ldr	r0, [pc, #104]	@ (8002134 <_ZL12MX_GPIO_Initv+0xc4>)
 80020ca:	f002 fce3 	bl	8004a94 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 80020ce:	2392      	movs	r3, #146	@ 0x92
 80020d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e8:	f002 fb52 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 80020ec:	f240 1371 	movw	r3, #369	@ 0x171
 80020f0:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	4619      	mov	r1, r3
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <_ZL12MX_GPIO_Initv+0xc4>)
 8002106:	f002 fb43 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = FIN_COURSE_RES_Pin;
 800210a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800210e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002114:	2301      	movs	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FIN_COURSE_RES_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002122:	f002 fb35 	bl	8004790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	48000400 	.word	0x48000400

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <Error_Handler+0x8>

08002144 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f938 	bl	80023c2 <_ZNSt15__new_allocatorIiEC1Ev>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f937 	bl	80023d8 <_ZNSt15__new_allocatorIiED1Ev>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	1d38      	adds	r0, r7, #4
 800217e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002182:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f93c 	bl	8002406 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f960 	bl	8002456 <_ZNKSt16initializer_listIiE5beginEv>
 8002196:	4604      	mov	r4, r0
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f967 	bl	800246e <_ZNKSt16initializer_listIiE3endEv>
 80021a0:	4602      	mov	r2, r0
 80021a2:	462b      	mov	r3, r5
 80021a4:	4621      	mov	r1, r4
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f973 	bl	8002492 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdb0      	pop	{r4, r5, r7, pc}

080021b6 <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80021b6:	b5b0      	push	{r4, r5, r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f99b 	bl	8002504 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80021ce:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021d0:	461a      	mov	r2, r3
 80021d2:	4629      	mov	r1, r5
 80021d4:	4620      	mov	r0, r4
 80021d6:	f000 f9a0 	bl	800251a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f921 	bl	8002424 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}

080021ec <_ZNSaI11LaserSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f99e 	bl	8002536 <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZNSaI11LaserSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f99d 	bl	800254c <_ZNSt15__new_allocatorI11LaserSensorED1Ev>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	1d38      	adds	r0, r7, #4
 8002226:	e880 0006 	stmia.w	r0, {r1, r2}
 800222a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f996 	bl	8002562 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f9a1 	bl	8002580 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 800223e:	4604      	mov	r4, r0
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f9a8 	bl	8002598 <_ZNKSt16initializer_listI11LaserSensorE3endEv>
 8002248:	4602      	mov	r2, r0
 800224a:	462b      	mov	r3, r5
 800224c:	4621      	mov	r1, r4
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f9b7 	bl	80025c2 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bdb0      	pop	{r4, r5, r7, pc}

0800225e <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800225e:	b5b0      	push	{r4, r5, r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681c      	ldr	r4, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f9e2 	bl	800263a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002276:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002278:	461a      	mov	r2, r3
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f000 f9e7 	bl	8002650 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>
      }
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f805 	bl	8002294 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bdb0      	pop	{r4, r5, r7, pc}

08002294 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	109b      	asrs	r3, r3, #2
 80022ac:	4a07      	ldr	r2, [pc, #28]	@ (80022cc <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev+0x38>)
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80022b2:	461a      	mov	r2, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f9e7 	bl	8002688 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fa1b 	bl	80016f8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	b6db6db7 	.word	0xb6db6db7

080022d0 <_ZNSt6vectorIiSaIiEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
      }
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZNSaIbEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f9d8 	bl	80026ae <_ZNSt15__new_allocatorIbEC1Ev>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_ZNSaIbED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f9d7 	bl	80026c4 <_ZNSt15__new_allocatorIbED1Ev>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>:
	_M_initialize(__x.size());
	_M_copy_aligned(__x.begin(), __x.end(), begin());
      }

      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<bool> __l,
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	1d38      	adds	r0, r7, #4
 800232a:	e880 0006 	stmia.w	r0, {r1, r2}
 800232e:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f9dc 	bl	80026f2 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>
      {
	_M_initialize_range(__l.begin(), __l.end(),
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa04 	bl	800274a <_ZNKSt16initializer_listIbE5beginEv>
 8002342:	4604      	mov	r4, r0
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fa0b 	bl	8002762 <_ZNKSt16initializer_listIbE3endEv>
 800234c:	4602      	mov	r2, r0
 800234e:	462b      	mov	r3, r5
 8002350:	4621      	mov	r1, r4
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fa16 	bl	8002784 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}

08002362 <_ZNSt6vectorIbSaIbEED1Ev>:
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT { }
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f9dc 	bl	800272a <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	109b      	asrs	r3, r3, #2
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
      }
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff feb0 	bl	800215c <_ZNSaIiED1Ev>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f9d9 	bl	80027cc <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800243c:	461a      	mov	r2, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9d6 	bl	80027f0 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffd1 	bl	80023ee <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffed 	bl	8002456 <_ZNKSt16initializer_listIiE5beginEv>
 800247c:	4604      	mov	r4, r0
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9c9 	bl	8002816 <_ZNKSt16initializer_listIiE4sizeEv>
 8002484:	4603      	mov	r3, r0
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4423      	add	r3, r4
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68b8      	ldr	r0, [r7, #8]
 80024a4:	f000 f9c3 	bl	800282e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80024a8:	4603      	mov	r3, r0
 80024aa:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80024ac:	68fc      	ldr	r4, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f827 	bl	8002504 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4619      	mov	r1, r3
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f000 f9cc 	bl	8002858 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f000 f9ef 	bl	80028a8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f80d 	bl	8002504 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80024ea:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80024ec:	4622      	mov	r2, r4
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68b8      	ldr	r0, [r7, #8]
 80024f2:	f000 f9ed 	bl	80028d0 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 80024f6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
	}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f9e2 	bl	80028f2 <_ZSt8_DestroyIPiEvT_S1_>
    }
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZNSt15__new_allocatorI11LaserSensorED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f9cb 	bl	800290c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>:
      begin() const noexcept { return _M_array; }
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNKSt16initializer_listI11LaserSensorE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffed 	bl	8002580 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 80025a6:	4604      	mov	r4, r0
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9c1 	bl	8002930 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4423      	add	r3, r4
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}

080025c2 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80025c2:	b590      	push	{r4, r7, lr}
 80025c4:	b087      	sub	sp, #28
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	68b8      	ldr	r0, [r7, #8]
 80025d4:	f000 f9b8 	bl	8002948 <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80025d8:	4603      	mov	r3, r0
 80025da:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80025dc:	68fc      	ldr	r4, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f82a 	bl	800263a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f000 f9c0 	bl	8002970 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4619      	mov	r1, r3
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 f9e3 	bl	80029c0 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	18ca      	adds	r2, r1, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f80d 	bl	800263a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002620:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8002622:	4622      	mov	r2, r4
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f000 f9de 	bl	80029e8 <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 800262c:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
	}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}

0800263a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f9d3 	bl	8002a0a <_ZSt8_DestroyIP11LaserSensorEvT_S2_>
    }
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZNSaI11LaserSensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9d3 	bl	8002a24 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	if (__p)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f9cb 	bl	8002a3c <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>
      }
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_ZNSt15__new_allocatorIbEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_ZNSt15__new_allocatorIbED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9c6 	bl	8002a74 <_ZNSaImED1Ev>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>:
      _Bvector_base(const allocator_type& __a)
 80026f2:	b590      	push	{r4, r7, lr}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80026fc:	687c      	ldr	r4, [r7, #4]
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f9a8 	bl	8002a5a <_ZNSaImEC1IbEERKSaIT_E>
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	4619      	mov	r1, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f000 f9bb 	bl	8002a8c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f9aa 	bl	8002a74 <_ZNSaImED1Ev>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}

0800272a <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9bc 	bl	8002ab0 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffcd 	bl	80026da <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZNKSt16initializer_listIbE5beginEv>:
      begin() const noexcept { return _M_array; }
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZNKSt16initializer_listIbE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffed 	bl	800274a <_ZNKSt16initializer_listIbE5beginEv>
 8002770:	4604      	mov	r4, r0
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9c1 	bl	8002afa <_ZNKSt16initializer_listIbE4sizeEv>
 8002778:	4603      	mov	r3, r0
 800277a:	4423      	add	r3, r4
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>:
	}

      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	@ 0x30
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f000 f9bc 	bl	8002b12 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800279a:	4603      	mov	r3, r0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
	  _M_initialize(__n);
 800279e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f9ca 	bl	8002b3a <_ZNSt6vectorIbSaIbEE13_M_initializeEj>
	  std::copy(__first, __last, begin());
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa00 	bl	8002bb2 <_ZNSt6vectorIbSaIbEE5beginEv>
 80027b2:	f107 0014 	add.w	r0, r7, #20
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	f000 fa07 	bl	8002bd2 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>
	}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fa19 	bl	8002c10 <_ZNSaIiEC1ERKS_>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa23 	bl	8002c2c <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	if (__p)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fa23 	bl	8002c54 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800282e:	b5b0      	push	{r4, r5, r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002838:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fa18 	bl	8002c72 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002842:	462a      	mov	r2, r5
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4620      	mov	r0, r4
 8002848:	f000 fa1e 	bl	8002c88 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800284c:	4603      	mov	r3, r0
    }
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002858 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f9d1 	bl	8002c10 <_ZNSaIiEC1ERKS_>
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fa18 	bl	8002ca8 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4293      	cmp	r3, r2
 800287e:	bf8c      	ite	hi
 8002880:	2301      	movhi	r3, #1
 8002882:	2300      	movls	r3, #0
 8002884:	b2dc      	uxtb	r4, r3
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc66 	bl	800215c <_ZNSaIiED1Ev>
 8002890:	2c00      	cmp	r4, #0
 8002892:	d002      	beq.n	800289a <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8002894:	4803      	ldr	r0, [pc, #12]	@ (80028a4 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 8002896:	f005 fc44 	bl	8008122 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800289a:	687b      	ldr	r3, [r7, #4]
      }
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	08009388 	.word	0x08009388

080028a8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa0d 	bl	8002cdc <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 80028c2:	4603      	mov	r3, r0
 80028c4:	e000      	b.n	80028c8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 80028c6:	2300      	movs	r3, #0
      }
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa09 	bl	8002cfa <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 80028e8:	4603      	mov	r3, r0
    }
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80028fc:	6839      	ldr	r1, [r7, #0]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa0f 	bl	8002d22 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002916:	6839      	ldr	r1, [r7, #0]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fea7 	bl	800266c <_ZNSaI11LaserSensorEC1ERKS0_>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa09 	bl	8002d38 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>:
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002952:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fa02 	bl	8002d60 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 800295c:	462a      	mov	r2, r5
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	4620      	mov	r0, r4
 8002962:	f000 fa09 	bl	8002d78 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8002966:	4603      	mov	r3, r0
    }
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bdb0      	pop	{r4, r5, r7, pc}

08002970 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe73 	bl	800266c <_ZNSaI11LaserSensorEC1ERKS0_>
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fa0a 	bl	8002da4 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4293      	cmp	r3, r2
 8002996:	bf8c      	ite	hi
 8002998:	2301      	movhi	r3, #1
 800299a:	2300      	movls	r3, #0
 800299c:	b2dc      	uxtb	r4, r3
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fc2e 	bl	8002204 <_ZNSaI11LaserSensorED1Ev>
 80029a8:	2c00      	cmp	r4, #0
 80029aa:	d002      	beq.n	80029b2 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 80029ac:	4803      	ldr	r0, [pc, #12]	@ (80029bc <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 80029ae:	f005 fbb8 	bl	8008122 <_ZSt20__throw_length_errorPKc>
	return __n;
 80029b2:	687b      	ldr	r3, [r7, #4]
      }
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	08009388 	.word	0x08009388

080029c0 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x1e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fa01 	bl	8002ddc <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>
 80029da:	4603      	mov	r3, r0
 80029dc:	e000      	b.n	80029e0 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x20>
 80029de:	2300      	movs	r3, #0
      }
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f9fd 	bl	8002dfa <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8002a00:	4603      	mov	r3, r0
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_ZSt8_DestroyIP11LaserSensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa03 	bl	8002e22 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>
    }
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa01 	bl	8002e54 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_ZNSaImEC1IbEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fa08 	bl	8002e7a <_ZNSt15__new_allocatorImEC1Ev>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fa07 	bl	8002e90 <_ZNSt15__new_allocatorImED1Ev>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa04 	bl	8002ea6 <_ZNSaImEC1ERKS_>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fa0e 	bl	8002ec2 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
	{ }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa12 	bl	8002eec <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	109b      	asrs	r3, r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8002ad4:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8002ae0:	4413      	add	r3, r2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f000 fa17 	bl	8002f18 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_reset();
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fa22 	bl	8002f36 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>
      }
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_ZNKSt16initializer_listIbE4sizeEv>:
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002b12:	b5b0      	push	{r4, r5, r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002b1c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fa1d 	bl	8002f60 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002b26:	462a      	mov	r2, r5
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 fa23 	bl	8002f76 <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8002b30:	4603      	mov	r3, r0
    }
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}

08002b3a <_ZNSt6vectorIbSaIbEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b089      	sub	sp, #36	@ 0x24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
	if (__n)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02f      	beq.n	8002baa <_ZNSt6vectorIbSaIbEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fa20 	bl	8002f94 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 8002b54:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8002b56:	68b8      	ldr	r0, [r7, #8]
 8002b58:	f000 fa30 	bl	8002fbc <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 8002b68:	69f8      	ldr	r0, [r7, #28]
 8002b6a:	f000 fa34 	bl	8002fd6 <_ZSt11__addressofImEPT_RS0_>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd17 	bl	80015aa <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b88:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	68fc      	ldr	r4, [r7, #12]
 8002b90:	463b      	mov	r3, r7
 8002b92:	f107 0114 	add.w	r1, r7, #20
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fd48 	bl	800162c <_ZStplRKSt13_Bit_iteratori>
 8002b9c:	f104 0308 	add.w	r3, r4, #8
 8002ba0:	463a      	mov	r2, r7
 8002ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ba6:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}

08002bb2 <_ZNSt6vectorIbSaIbEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fcf0 	bl	80015aa <_ZNSt13_Bit_iteratorC1EPmj>
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002be2:	68b8      	ldr	r0, [r7, #8]
 8002be4:	f000 fa02 	bl	8002fec <_ZSt12__miter_baseIPKbET_S2_>
 8002be8:	4604      	mov	r4, r0
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9fe 	bl	8002fec <_ZSt12__miter_baseIPKbET_S2_>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	f000 fa01 	bl	8003002 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8002c00:	bf00      	nop
    }
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c0c:	b002      	add	sp, #8
 8002c0e:	4770      	bx	lr

08002c10 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa21 	bl	8003064 <_ZNSt15__new_allocatorIiEC1ERKS0_>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
	{ }
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fa09 	bl	800307c <_ZNSt15__new_allocatorIiE10deallocateEPij>
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002c7a:	bf00      	nop
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	109b      	asrs	r3, r3, #2
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002cb0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002cb4:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9f0 	bl	800309c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002cc0:	f107 0208 	add.w	r2, r7, #8
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f9f2 	bl	80030b4 <_ZSt3minIjERKT_S2_S2_>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	681b      	ldr	r3, [r3, #0]
      }
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9f6 	bl	80030dc <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa0b 	bl	800312e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8002d18:	4603      	mov	r3, r0
    }
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
	{ }
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002d68:	bf00      	nop
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	109b      	asrs	r3, r3, #2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
    }
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	b6db6db7 	.word	0xb6db6db7

08002da4 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8002dae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f9cc 	bl	800314e <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>
 8002db6:	4603      	mov	r3, r0
 8002db8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002dba:	f107 0208 	add.w	r2, r7, #8
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f975 	bl	80030b4 <_ZSt3minIjERKT_S2_S2_>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	681b      	ldr	r3, [r3, #0]
      }
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	04924924 	.word	0x04924924

08002ddc <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002de6:	2200      	movs	r2, #0
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9bc 	bl	8003168 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f9d6 	bl	80031c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>
 8002e18:	4603      	mov	r3, r0
    }
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002e2c:	e009      	b.n	8002e42 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9d8 	bl	80031e4 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f9df 	bl	80031fa <_ZSt8_DestroyI11LaserSensorEvPT_>
	  for (; __first != __last; ++__first)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	331c      	adds	r3, #28
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d1f1      	bne.n	8002e2e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0xc>
	}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68b8      	ldr	r0, [r7, #8]
 8002e6e:	f005 f93f 	bl	80080f0 <_ZdlPvj>
      }
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_ZNSt15__new_allocatorImEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002eb0:	6839      	ldr	r1, [r7, #0]
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f9ac 	bl	8003210 <_ZNSt15__new_allocatorImEC1ERKS0_>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fb5d 	bl	800158c <_ZNSt13_Bit_iteratorC1Ev>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fb58 	bl	800158c <_ZNSt13_Bit_iteratorC1Ev>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
	{ }
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	3b04      	subs	r3, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f867 	bl	8002fd6 <_ZSt11__addressofImEPT_RS0_>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	e000      	b.n	8002f10 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8002f0e:	2300      	movs	r3, #0
	}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f97d 	bl	8003228 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 8002f36:	b5b0      	push	{r4, r5, r7, lr}
 8002f38:	b088      	sub	sp, #32
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 8002f3e:	f107 030c 	add.w	r3, r7, #12
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ffbd 	bl	8002ec2 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	f107 040c 	add.w	r4, r7, #12
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	bf00      	nop
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bdb0      	pop	{r4, r5, r7, pc}

08002f60 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002f68:	bf00      	nop
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
    }
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 8002f9e:	687c      	ldr	r4, [r7, #4]
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f000 f80b 	bl	8002fbc <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4620      	mov	r0, r4
 8002fac:	f000 f94c 	bl	8003248 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8002fb0:	60f8      	str	r0, [r7, #12]
	return __p;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
      }
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd90      	pop	{r4, r7, pc}

08002fbc <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	331f      	adds	r3, #31
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <_ZSt11__addressofImEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_ZSt12__miter_baseIPKbET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003002:	b082      	sub	sp, #8
 8003004:	b5b0      	push	{r4, r5, r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	637b      	str	r3, [r7, #52]	@ 0x34
      return std::__niter_wrap(__result,
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f000 f927 	bl	8003266 <_ZSt12__niter_baseIPKbET_S2_>
 8003018:	4604      	mov	r4, r0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f923 	bl	8003266 <_ZSt12__niter_baseIPKbET_S2_>
 8003020:	4605      	mov	r5, r0
 8003022:	f107 0010 	add.w	r0, r7, #16
 8003026:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800302a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800302e:	f000 f925 	bl	800327c <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8003032:	f107 0018 	add.w	r0, r7, #24
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	462a      	mov	r2, r5
 800303e:	4621      	mov	r1, r4
 8003040:	f000 f930 	bl	80032a4 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800304a:	f107 0318 	add.w	r3, r7, #24
 800304e:	cb0c      	ldmia	r3, {r2, r3}
 8003050:	f000 f940 	bl	80032d4 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>
					     std::__niter_base(__result)));
 8003054:	bf00      	nop
    }
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003060:	b002      	add	sp, #8
 8003062:	4770      	bx	lr

08003064 <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4619      	mov	r1, r3
 800308e:	68b8      	ldr	r0, [r7, #8]
 8003090:	f005 f82e 	bl	80080f0 <_ZdlPvj>
      }
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f92a 	bl	80032fe <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 80030aa:	4603      	mov	r3, r0
      }
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d201      	bcs.n	80030ce <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	e000      	b.n	80030d0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80030ce:	687b      	ldr	r3, [r7, #4]
    }
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f914 	bl	8003316 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	bf8c      	ite	hi
 80030f6:	2301      	movhi	r3, #1
 80030f8:	2300      	movls	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d301      	bcc.n	8003116 <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003112:	f005 f803 	bl	800811c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003116:	f004 fffe 	bl	8008116 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f004 ffe8 	bl	80080f4 <_Znwj>
 8003124:	4603      	mov	r3, r0
      }
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8f5 	bl	800332e <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8003144:	4603      	mov	r3, r0
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f901 	bl	800335e <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>
 800315c:	4603      	mov	r3, r0
      }
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f8ff 	bl	8003378 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 800317a:	4602      	mov	r2, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4293      	cmp	r3, r2
 8003180:	bf8c      	ite	hi
 8003182:	2301      	movhi	r3, #1
 8003184:	2300      	movls	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x58>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800319e:	f004 ffbd 	bl	800811c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80031a2:	f004 ffb8 	bl	8008116 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 ff9f 	bl	80080f4 <_Znwj>
 80031b6:	4603      	mov	r3, r0
      }
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	09249249 	.word	0x09249249

080031c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8dd 	bl	8003394 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 80031da:	4603      	mov	r3, r0
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_ZSt11__addressofI11LaserSensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <_ZSt8_DestroyI11LaserSensorEvPT_>:
    _Destroy(_Tp* __pointer)
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f81a 	bl	800123c <_ZN11LaserSensorD1Ev>
    }
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_ZNSt15__new_allocatorImEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4619      	mov	r1, r3
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f004 ff58 	bl	80080f0 <_ZdlPvj>
      }
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003252:	2200      	movs	r2, #0
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8bc 	bl	80033d4 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 800325c:	4603      	mov	r3, r0
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_ZSt12__niter_baseIPKbET_S2_>:
    __niter_base(_Iterator __it)
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	461a      	mov	r2, r3
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003294:	e882 0003 	stmia.w	r2, {r0, r1}
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80032a4:	b082      	sub	sp, #8
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af02      	add	r7, sp, #8
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	61fb      	str	r3, [r7, #28]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	f000 f8b1 	bl	8003426 <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 80032c4:	bf00      	nop
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d0:	b002      	add	sp, #8
 80032d2:	4770      	bx	lr

080032d4 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	4639      	mov	r1, r7
 80032e0:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __res; }
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	461a      	mov	r2, r3
 80032e8:	463b      	mov	r3, r7
 80032ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f805 	bl	8003316 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 800330c:	4603      	mov	r3, r0
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800331e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800332e:	b590      	push	{r4, r7, lr}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f88b 	bl	8003456 <_ZSt12__miter_baseIPKiET_S2_>
 8003340:	4604      	mov	r4, r0
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f000 f887 	bl	8003456 <_ZSt12__miter_baseIPKiET_S2_>
 8003348:	4603      	mov	r3, r0
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4619      	mov	r1, r3
 800334e:	4620      	mov	r0, r4
 8003350:	f000 f88c 	bl	800346c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8003354:	4603      	mov	r3, r0
    }
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}

0800335e <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f806 	bl	8003378 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv+0x18>)
      }
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	04924924 	.word	0x04924924

08003394 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80033a4:	e00d      	b.n	80033c2 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff1c 	bl	80031e4 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 80033ac:	4603      	mov	r3, r0
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f87e 	bl	80034b2 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	331c      	adds	r3, #28
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	331c      	adds	r3, #28
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d1ed      	bne.n	80033a6 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x12>
	  return __cur;
 80033ca:	697b      	ldr	r3, [r7, #20]
    }
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f880 	bl	80034e6 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bf8c      	ite	hi
 80033ee:	2301      	movhi	r3, #1
 80033f0:	2300      	movls	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003408:	d301      	bcc.n	800340e <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800340a:	f004 fe87 	bl	800811c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800340e:	f004 fe82 	bl	8008116 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f004 fe6c 	bl	80080f4 <_Znwj>
 800341c:	4603      	mov	r3, r0
      }
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003426:	b082      	sub	sp, #8
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	61fb      	str	r3, [r7, #28]
			      _Category>::__copy_m(__first, __last, __result);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	f000 f85c 	bl	80034fe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>
 8003446:	bf00      	nop
    }
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003452:	b002      	add	sp, #8
 8003454:	4770      	bx	lr

08003456 <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f87a 	bl	8003572 <_ZSt12__niter_baseIPKiET_S2_>
 800347e:	4604      	mov	r4, r0
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f000 f876 	bl	8003572 <_ZSt12__niter_baseIPKiET_S2_>
 8003486:	4605      	mov	r5, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f87c 	bl	8003588 <_ZSt12__niter_baseIPiET_S1_>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	4629      	mov	r1, r5
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f881 	bl	800359e <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 800349c:	4602      	mov	r2, r0
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f88b 	bl	80035be <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 80034a8:	4603      	mov	r3, r0
    }
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bdb0      	pop	{r4, r5, r7, pc}

080034b2 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80034b2:	b5b0      	push	{r4, r5, r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4619      	mov	r1, r3
 80034c0:	201c      	movs	r0, #28
 80034c2:	f7fd ffbd 	bl	8001440 <_ZnwjPv>
 80034c6:	4604      	mov	r4, r0
 80034c8:	6838      	ldr	r0, [r7, #0]
 80034ca:	f000 f884 	bl	80035d6 <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461d      	mov	r5, r3
 80034d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bdb0      	pop	{r4, r5, r7, pc}

080034e6 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80034ee:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80034fe:	b082      	sub	sp, #8
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e01a      	b.n	800354e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x50>
	      *__result = *__first;
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f852 	bl	80015cc <_ZNKSt13_Bit_iteratordeEv>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd ffa3 	bl	800147e <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3301      	adds	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
	      ++__result;
 800353e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe f856 	bl	80015f4 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3b01      	subs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dce1      	bgt.n	8003518 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x1a>
	  return __result;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800355c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003560:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800356e:	b002      	add	sp, #8
 8003570:	4770      	bx	lr

08003572 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
    { return __it; }
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f81c 	bl	80035ec <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f805 	bl	800360c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8003602:	4603      	mov	r3, r0
    }
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	109b      	asrs	r3, r3, #2
 8003620:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f005 f853 	bl	80086dc <memmove>
	  return __result + _Num;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
	}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_ZN11SystemStateD1Ev>:
struct SystemState
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fe85 	bl	8002362 <_ZNSt6vectorIbSaIbEED1Ev>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b0ab      	sub	sp, #172	@ 0xac
 8003668:	af02      	add	r7, sp, #8
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 80e0 	bne.w	8003836 <_Z41__static_initialization_and_destruction_0ii+0x1d2>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800367c:	4293      	cmp	r3, r2
 800367e:	f040 80da 	bne.w	8003836 <_Z41__static_initialization_and_destruction_0ii+0x1d2>
std::vector<int> hoppers_ids = {7, 14};
 8003682:	4a7c      	ldr	r2, [pc, #496]	@ (8003874 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800368c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	2302      	movs	r3, #2
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	f107 0318 	add.w	r3, r7, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fd50 	bl	8002144 <_ZNSaIiEC1Ev>
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	f107 0208 	add.w	r2, r7, #8
 80036ac:	ca06      	ldmia	r2, {r1, r2}
 80036ae:	4872      	ldr	r0, [pc, #456]	@ (8003878 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80036b0:	f7fe fd60 	bl	8002174 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 80036b4:	f107 0318 	add.w	r3, r7, #24
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fd4f 	bl	800215c <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 80036be:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c4:	2300      	movs	r3, #0
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fd34 	bl	8002144 <_ZNSaIiEC1Ev>
 80036dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036e0:	f107 021c 	add.w	r2, r7, #28
 80036e4:	ca06      	ldmia	r2, {r1, r2}
 80036e6:	4865      	ldr	r0, [pc, #404]	@ (800387c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80036e8:	f7fe fd44 	bl	8002174 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 80036ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fd33 	bl	800215c <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_close = {500, 500};
 80036f6:	4a62      	ldr	r2, [pc, #392]	@ (8003880 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80036f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003700:	e883 0003 	stmia.w	r3, {r0, r1}
 8003704:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003708:	633b      	str	r3, [r7, #48]	@ 0x30
 800370a:	2302      	movs	r3, #2
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
 800370e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fd16 	bl	8002144 <_ZNSaIiEC1Ev>
 8003718:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800371c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003720:	ca06      	ldmia	r2, {r1, r2}
 8003722:	4858      	ldr	r0, [pc, #352]	@ (8003884 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003724:	f7fe fd26 	bl	8002174 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8003728:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fd15 	bl	800215c <_ZNSaIiED1Ev>
auto sensors = std::vector<LaserSensor>({
 8003732:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003736:	f06f 0309 	mvn.w	r3, #9
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2301      	movs	r3, #1
 800373e:	2210      	movs	r2, #16
 8003740:	4951      	ldr	r1, [pc, #324]	@ (8003888 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003742:	f7fd fd56 	bl	80011f2 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 8003746:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800374a:	f103 001c 	add.w	r0, r3, #28
 800374e:	f06f 0307 	mvn.w	r3, #7
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2305      	movs	r3, #5
 8003756:	2220      	movs	r2, #32
 8003758:	494b      	ldr	r1, [pc, #300]	@ (8003888 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800375a:	f7fd fd4a 	bl	80011f2 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 800375e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003762:	647b      	str	r3, [r7, #68]	@ 0x44
 8003764:	2302      	movs	r3, #2
 8003766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003768:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fd3d 	bl	80021ec <_ZNSaI11LaserSensorEC1Ev>
 8003772:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003776:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800377a:	ca06      	ldmia	r2, {r1, r2}
 800377c:	4843      	ldr	r0, [pc, #268]	@ (800388c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800377e:	f7fe fd4d 	bl	800221c <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 8003782:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fd3c 	bl	8002204 <_ZNSaI11LaserSensorED1Ev>
});
 800378c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003790:	3438      	adds	r4, #56	@ 0x38
auto sensors = std::vector<LaserSensor>({
 8003792:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003796:	429c      	cmp	r4, r3
 8003798:	d004      	beq.n	80037a4 <_Z41__static_initialization_and_destruction_0ii+0x140>
});
 800379a:	3c1c      	subs	r4, #28
 800379c:	4620      	mov	r0, r4
 800379e:	f7fd fd4d 	bl	800123c <_ZN11LaserSensorD1Ev>
auto sensors = std::vector<LaserSensor>({
 80037a2:	e7f6      	b.n	8003792 <_Z41__static_initialization_and_destruction_0ii+0x12e>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2340      	movs	r3, #64	@ 0x40
 80037b0:	4a35      	ldr	r2, [pc, #212]	@ (8003888 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80037b2:	4937      	ldr	r1, [pc, #220]	@ (8003890 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80037b4:	4837      	ldr	r0, [pc, #220]	@ (8003894 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80037b6:	f7fd fc19 	bl	8000fec <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 80037ba:	2301      	movs	r3, #1
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2302      	movs	r3, #2
 80037c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80037c8:	4931      	ldr	r1, [pc, #196]	@ (8003890 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80037ca:	4833      	ldr	r0, [pc, #204]	@ (8003898 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80037cc:	f7fd fc0e 	bl	8000fec <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 80037d0:	4932      	ldr	r1, [pc, #200]	@ (800389c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80037d2:	4833      	ldr	r0, [pc, #204]	@ (80038a0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80037d4:	f7fc feec 	bl	80005b0 <_ZN7SCServoC1EP20__UART_HandleTypeDef>
std::vector<int> servo_ids_to_check = {
 80037d8:	2308      	movs	r3, #8
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  hoppers_ids[LEFT],
 80037de:	2100      	movs	r1, #0
 80037e0:	4825      	ldr	r0, [pc, #148]	@ (8003878 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80037e2:	f7fe fd75 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 80037e6:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  hoppers_ids[RIGHT]
 80037ee:	2101      	movs	r1, #1
 80037f0:	4821      	ldr	r0, [pc, #132]	@ (8003878 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80037f2:	f7fe fd6d 	bl	80022d0 <_ZNSt6vectorIiSaIiEEixEj>
 80037f6:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037fe:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003806:	2303      	movs	r3, #3
 8003808:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800380c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fc97 	bl	8002144 <_ZNSaIiEC1Ev>
 8003816:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800381a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800381e:	ca06      	ldmia	r2, {r1, r2}
 8003820:	4820      	ldr	r0, [pc, #128]	@ (80038a4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003822:	f7fe fca7 	bl	8002174 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8003826:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fc96 	bl	800215c <_ZNSaIiED1Ev>
} system_state;
 8003830:	481d      	ldr	r0, [pc, #116]	@ (80038a8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003832:	f7fd ff6d 	bl	8001710 <_ZN11SystemStateC1Ev>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <_Z41__static_initialization_and_destruction_0ii+0x206>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003842:	4293      	cmp	r3, r2
 8003844:	d111      	bne.n	800386a <_Z41__static_initialization_and_destruction_0ii+0x206>
 8003846:	4818      	ldr	r0, [pc, #96]	@ (80038a8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003848:	f7ff fefd 	bl	8003646 <_ZN11SystemStateD1Ev>
std::vector<int> servo_ids_to_check = {
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800384e:	f7fe fcb2 	bl	80021b6 <_ZNSt6vectorIiSaIiEED1Ev>
auto sensors = std::vector<LaserSensor>({
 8003852:	480e      	ldr	r0, [pc, #56]	@ (800388c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003854:	f7fe fd03 	bl	800225e <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>
std::vector<int> hoppers_pos_close = {500, 500};
 8003858:	480a      	ldr	r0, [pc, #40]	@ (8003884 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800385a:	f7fe fcac 	bl	80021b6 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 800385e:	4807      	ldr	r0, [pc, #28]	@ (800387c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003860:	f7fe fca9 	bl	80021b6 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_ids = {7, 14};
 8003864:	4804      	ldr	r0, [pc, #16]	@ (8003878 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003866:	f7fe fca6 	bl	80021b6 <_ZNSt6vectorIiSaIiEED1Ev>
}
 800386a:	bf00      	nop
 800386c:	37a4      	adds	r7, #164	@ 0xa4
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	080093bc 	.word	0x080093bc
 8003878:	200002b8 	.word	0x200002b8
 800387c:	200002c4 	.word	0x200002c4
 8003880:	080093c4 	.word	0x080093c4
 8003884:	200002d0 	.word	0x200002d0
 8003888:	48000400 	.word	0x48000400
 800388c:	200002dc 	.word	0x200002dc
 8003890:	080016c5 	.word	0x080016c5
 8003894:	200002e8 	.word	0x200002e8
 8003898:	20000320 	.word	0x20000320
 800389c:	2000018c 	.word	0x2000018c
 80038a0:	20000358 	.word	0x20000358
 80038a4:	2000035c 	.word	0x2000035c
 80038a8:	20000368 	.word	0x20000368

080038ac <_GLOBAL__sub_I_hfdcan1>:
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038b4:	2001      	movs	r0, #1
 80038b6:	f7ff fed5 	bl	8003664 <_Z41__static_initialization_and_destruction_0ii>
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_GLOBAL__sub_D_hfdcan1>:
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
 80038c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7ff fecd 	bl	8003664 <_Z41__static_initialization_and_destruction_0ii>
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	4603      	mov	r3, r0
 80038d4:	603a      	str	r2, [r7, #0]
 80038d6:	80fb      	strh	r3, [r7, #6]
 80038d8:	460b      	mov	r3, r1
 80038da:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80038e0:	88bb      	ldrh	r3, [r7, #4]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80038ea:	88bb      	ldrh	r3, [r7, #4]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80038f0:	f107 020c 	add.w	r2, r7, #12
 80038f4:	88f9      	ldrh	r1, [r7, #6]
 80038f6:	2364      	movs	r3, #100	@ 0x64
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	2302      	movs	r3, #2
 80038fc:	4810      	ldr	r0, [pc, #64]	@ (8003940 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 80038fe:	f001 f97d 	bl	8004bfc <HAL_I2C_Master_Transmit>
 8003902:	4603      	mov	r3, r0
 8003904:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8003906:	f107 0208 	add.w	r2, r7, #8
 800390a:	88f9      	ldrh	r1, [r7, #6]
 800390c:	2364      	movs	r3, #100	@ 0x64
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2304      	movs	r3, #4
 8003912:	480b      	ldr	r0, [pc, #44]	@ (8003940 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8003914:	f001 fa8a 	bl	8004e2c <HAL_I2C_Master_Receive>
 8003918:	4603      	mov	r3, r0
 800391a:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800391c:	7a3b      	ldrb	r3, [r7, #8]
 800391e:	061a      	lsls	r2, r3, #24
 8003920:	7a7b      	ldrb	r3, [r7, #9]
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8003926:	7abb      	ldrb	r3, [r7, #10]
 8003928:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800392a:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 800392c:	7afa      	ldrb	r2, [r7, #11]
 800392e:	4313      	orrs	r3, r2
 8003930:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]
	return status;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200000ec 	.word	0x200000ec

08003944 <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	4603      	mov	r3, r0
 800394c:	603a      	str	r2, [r7, #0]
 800394e:	80fb      	strh	r3, [r7, #6]
 8003950:	460b      	mov	r3, r1
 8003952:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003958:	88bb      	ldrh	r3, [r7, #4]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b29b      	uxth	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8003968:	f107 020c 	add.w	r2, r7, #12
 800396c:	88f9      	ldrh	r1, [r7, #6]
 800396e:	2364      	movs	r3, #100	@ 0x64
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2302      	movs	r3, #2
 8003974:	480f      	ldr	r0, [pc, #60]	@ (80039b4 <_Z15VL53L4CD_RdWordttPt+0x70>)
 8003976:	f001 f941 	bl	8004bfc <HAL_I2C_Master_Transmit>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 800397e:	f107 0208 	add.w	r2, r7, #8
 8003982:	88f9      	ldrh	r1, [r7, #6]
 8003984:	2364      	movs	r3, #100	@ 0x64
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2302      	movs	r3, #2
 800398a:	480a      	ldr	r0, [pc, #40]	@ (80039b4 <_Z15VL53L4CD_RdWordttPt+0x70>)
 800398c:	f001 fa4e 	bl	8004e2c <HAL_I2C_Master_Receive>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 8003994:	7a3b      	ldrb	r3, [r7, #8]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	b21a      	sxth	r2, r3
 800399a:	7a7b      	ldrb	r3, [r7, #9]
 800399c:	b21b      	sxth	r3, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	801a      	strh	r2, [r3, #0]
	return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200000ec 	.word	0x200000ec

080039b8 <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	4603      	mov	r3, r0
 80039c0:	603a      	str	r2, [r7, #0]
 80039c2:	80fb      	strh	r3, [r7, #6]
 80039c4:	460b      	mov	r3, r1
 80039c6:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80039cc:	88bb      	ldrh	r3, [r7, #4]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80039d6:	88bb      	ldrh	r3, [r7, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80039dc:	f107 020c 	add.w	r2, r7, #12
 80039e0:	88f9      	ldrh	r1, [r7, #6]
 80039e2:	2364      	movs	r3, #100	@ 0x64
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2302      	movs	r3, #2
 80039e8:	480b      	ldr	r0, [pc, #44]	@ (8003a18 <_Z15VL53L4CD_RdBytettPh+0x60>)
 80039ea:	f001 f907 	bl	8004bfc <HAL_I2C_Master_Transmit>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 80039f2:	f107 0208 	add.w	r2, r7, #8
 80039f6:	88f9      	ldrh	r1, [r7, #6]
 80039f8:	2364      	movs	r3, #100	@ 0x64
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2301      	movs	r3, #1
 80039fe:	4806      	ldr	r0, [pc, #24]	@ (8003a18 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8003a00:	f001 fa14 	bl	8004e2c <HAL_I2C_Master_Receive>
 8003a04:	4603      	mov	r3, r0
 8003a06:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8003a08:	7a3a      	ldrb	r2, [r7, #8]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	701a      	strb	r2, [r3, #0]
	return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200000ec 	.word	0x200000ec

08003a1c <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
 8003a26:	460b      	mov	r3, r1
 8003a28:	80bb      	strh	r3, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003a32:	88bb      	ldrh	r3, [r7, #4]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8003a3c:	88bb      	ldrh	r3, [r7, #4]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8003a46:	f107 020c 	add.w	r2, r7, #12
 8003a4a:	88f9      	ldrh	r1, [r7, #6]
 8003a4c:	2364      	movs	r3, #100	@ 0x64
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	4805      	ldr	r0, [pc, #20]	@ (8003a68 <_Z15VL53L4CD_WrBytetth+0x4c>)
 8003a54:	f001 f8d2 	bl	8004bfc <HAL_I2C_Master_Transmit>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
	return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200000ec 	.word	0x200000ec

08003a6c <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	4603      	mov	r3, r0
 8003a74:	80fb      	strh	r3, [r7, #6]
 8003a76:	460b      	mov	r3, r1
 8003a78:	80bb      	strh	r3, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003a82:	88bb      	ldrh	r3, [r7, #4]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8003a8c:	88bb      	ldrh	r3, [r7, #4]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8003aa2:	f107 0208 	add.w	r2, r7, #8
 8003aa6:	88f9      	ldrh	r1, [r7, #6]
 8003aa8:	2364      	movs	r3, #100	@ 0x64
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2304      	movs	r3, #4
 8003aae:	4805      	ldr	r0, [pc, #20]	@ (8003ac4 <_Z15VL53L4CD_WrWordttt+0x58>)
 8003ab0:	f001 f8a4 	bl	8004bfc <HAL_I2C_Master_Transmit>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]
	return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200000ec 	.word	0x200000ec

08003ac8 <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	4603      	mov	r3, r0
 8003ad0:	603a      	str	r2, [r7, #0]
 8003ad2:	80fb      	strh	r3, [r7, #6]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003adc:	88bb      	ldrh	r3, [r7, #4]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8003ae6:	88bb      	ldrh	r3, [r7, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	0e1b      	lsrs	r3, r3, #24
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8003b0a:	f107 0208 	add.w	r2, r7, #8
 8003b0e:	88f9      	ldrh	r1, [r7, #6]
 8003b10:	2364      	movs	r3, #100	@ 0x64
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2306      	movs	r3, #6
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <_Z16VL53L4CD_WrDWordttm+0x64>)
 8003b18:	f001 f870 	bl	8004bfc <HAL_I2C_Master_Transmit>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
	return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200000ec 	.word	0x200000ec

08003b30 <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f000 fb45 	bl	80041cc <HAL_Delay>
	return 0;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	4a08      	ldr	r2, [pc, #32]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_MspInit+0x44>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b82:	f001 fe2b 	bl	80057dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b09a      	sub	sp, #104	@ 0x68
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	2244      	movs	r2, #68	@ 0x44
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 fdab 	bl	8008710 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <HAL_FDCAN_MspInit+0xac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d139      	bne.n	8003c38 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bce:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bd0:	f107 0310 	add.w	r3, r7, #16
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f002 fb3f 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003be0:	f7fe faaa 	bl	8002138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003be4:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003bea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf0:	4b14      	ldr	r3, [pc, #80]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c00:	4a10      	ldr	r2, [pc, #64]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <HAL_FDCAN_MspInit+0xb0>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c18:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c26:	2309      	movs	r3, #9
 8003c28:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c34:	f000 fdac 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003c38:	bf00      	nop
 8003c3a:	3768      	adds	r7, #104	@ 0x68
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40006400 	.word	0x40006400
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b09c      	sub	sp, #112	@ 0x70
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c60:	f107 0318 	add.w	r3, r7, #24
 8003c64:	2244      	movs	r2, #68	@ 0x44
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 fd51 	bl	8008710 <memset>
  if(hi2c->Instance==I2C1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2d      	ldr	r2, [pc, #180]	@ (8003d28 <HAL_I2C_MspInit+0xe0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d153      	bne.n	8003d20 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c78:	2340      	movs	r3, #64	@ 0x40
 8003c7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c80:	f107 0318 	add.w	r3, r7, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fae7 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c90:	f7fe fa52 	bl	8002138 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c94:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c98:	4a24      	ldr	r2, [pc, #144]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca0:	4b22      	ldr	r3, [pc, #136]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cca:	2312      	movs	r3, #18
 8003ccc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce4:	f000 fd54 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ce8:	2380      	movs	r3, #128	@ 0x80
 8003cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cec:	2312      	movs	r3, #18
 8003cee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003d00:	4619      	mov	r1, r3
 8003d02:	480b      	ldr	r0, [pc, #44]	@ (8003d30 <HAL_I2C_MspInit+0xe8>)
 8003d04:	f000 fd44 	bl	8004790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d08:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0c:	4a07      	ldr	r2, [pc, #28]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003d0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_I2C_MspInit+0xe4>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d20:	bf00      	nop
 8003d22:	3770      	adds	r7, #112	@ 0x70
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40005400 	.word	0x40005400
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	48000400 	.word	0x48000400

08003d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d113      	bne.n	8003d6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d46:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <HAL_TIM_Base_MspInit+0x44>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d78 <HAL_TIM_Base_MspInit+0x44>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d52:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_TIM_Base_MspInit+0x44>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	201c      	movs	r0, #28
 8003d64:	f000 fb2f 	bl	80043c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d68:	201c      	movs	r0, #28
 8003d6a:	f000 fb46 	bl	80043fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000

08003d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b09c      	sub	sp, #112	@ 0x70
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d94:	f107 0318 	add.w	r3, r7, #24
 8003d98:	2244      	movs	r2, #68	@ 0x44
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f004 fcb7 	bl	8008710 <memset>
  if(huart->Instance==USART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea0 <HAL_UART_MspInit+0x124>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d138      	bne.n	8003e1e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003db4:	f107 0318 	add.w	r3, r7, #24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 fa4d 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003dc4:	f7fe f9b8 	bl	8002138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de0:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dfe:	2312      	movs	r3, #18
 8003e00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e06:	2303      	movs	r3, #3
 8003e08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e18:	f000 fcba 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e1c:	e03b      	b.n	8003e96 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	@ (8003ea8 <HAL_UART_MspInit+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d136      	bne.n	8003e96 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e30:	f107 0318 	add.w	r3, r7, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f002 fa0f 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003e40:	f7fe f97a 	bl	8002138 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e44:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e48:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e50:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e60:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <HAL_UART_MspInit+0x128>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003e74:	230c      	movs	r3, #12
 8003e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e84:	2307      	movs	r3, #7
 8003e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e92:	f000 fc7d 	bl	8004790 <HAL_GPIO_Init>
}
 8003e96:	bf00      	nop
 8003e98:	3770      	adds	r7, #112	@ 0x70
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40004400 	.word	0x40004400

08003eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <NMI_Handler+0x4>

08003eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <HardFault_Handler+0x4>

08003ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <MemManage_Handler+0x4>

08003ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <BusFault_Handler+0x4>

08003ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <UsageFault_Handler+0x4>

08003ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f02:	f000 f945 	bl	8004190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f10:	4802      	ldr	r0, [pc, #8]	@ (8003f1c <TIM2_IRQHandler+0x10>)
 8003f12:	f002 fc53 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000140 	.word	0x20000140

08003f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return 1;
 8003f24:	2301      	movs	r3, #1
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_kill>:

int _kill(int pid, int sig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f3a:	f004 fc8b 	bl	8008854 <__errno>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2216      	movs	r2, #22
 8003f42:	601a      	str	r2, [r3, #0]
  return -1;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_exit>:

void _exit (int status)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffe7 	bl	8003f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <_exit+0x12>

08003f66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e00a      	b.n	8003f8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f78:	f3af 8000 	nop.w
 8003f7c:	4601      	mov	r1, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	60ba      	str	r2, [r7, #8]
 8003f84:	b2ca      	uxtb	r2, r1
 8003f86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	dbf0      	blt.n	8003f78 <_read+0x12>
  }

  return len;
 8003f96:	687b      	ldr	r3, [r7, #4]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_isatty>:

int _isatty(int file)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fe0:	2301      	movs	r3, #1
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004010:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <_sbrk+0x5c>)
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <_sbrk+0x60>)
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800401c:	4b13      	ldr	r3, [pc, #76]	@ (800406c <_sbrk+0x64>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <_sbrk+0x64>)
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <_sbrk+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <_sbrk+0x64>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d207      	bcs.n	8004048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004038:	f004 fc0c 	bl	8008854 <__errno>
 800403c:	4603      	mov	r3, r0
 800403e:	220c      	movs	r2, #12
 8004040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004046:	e009      	b.n	800405c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004048:	4b08      	ldr	r3, [pc, #32]	@ (800406c <_sbrk+0x64>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <_sbrk+0x64>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	4a05      	ldr	r2, [pc, #20]	@ (800406c <_sbrk+0x64>)
 8004058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20008000 	.word	0x20008000
 8004068:	00000400 	.word	0x00000400
 800406c:	20000380 	.word	0x20000380
 8004070:	200004d8 	.word	0x200004d8

08004074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <SystemInit+0x20>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <SystemInit+0x20>)
 8004080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004098:	480d      	ldr	r0, [pc, #52]	@ (80040d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800409a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 800409c:	f7ff ffea 	bl	8004074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	@ (80040d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <LoopForever+0xe>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	@ (80040e4 <LoopForever+0x16>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80040c6:	f004 fbcb 	bl	8008860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040ca:	f7fd fd71 	bl	8001bb0 <main>

080040ce <LoopForever>:

LoopForever:
    b LoopForever
 80040ce:	e7fe      	b.n	80040ce <LoopForever>
  ldr   r0, =_estack
 80040d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80040dc:	080094b4 	.word	0x080094b4
  ldr r2, =_sbss
 80040e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80040e4:	200004d8 	.word	0x200004d8

080040e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC1_2_IRQHandler>

080040ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f4:	2003      	movs	r0, #3
 80040f6:	f000 f95b 	bl	80043b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 f80e 	bl	800411c <HAL_InitTick>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	71fb      	strb	r3, [r7, #7]
 800410a:	e001      	b.n	8004110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800410c:	f7ff fd1e 	bl	8003b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004110:	79fb      	ldrb	r3, [r7, #7]

}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004128:	4b16      	ldr	r3, [pc, #88]	@ (8004184 <HAL_InitTick+0x68>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d022      	beq.n	8004176 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004130:	4b15      	ldr	r3, [pc, #84]	@ (8004188 <HAL_InitTick+0x6c>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b13      	ldr	r3, [pc, #76]	@ (8004184 <HAL_InitTick+0x68>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800413c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f966 	bl	8004416 <HAL_SYSTICK_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b0f      	cmp	r3, #15
 8004154:	d809      	bhi.n	800416a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004156:	2200      	movs	r2, #0
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800415e:	f000 f932 	bl	80043c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <HAL_InitTick+0x70>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e007      	b.n	800417a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e004      	b.n	800417a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
 8004174:	e001      	b.n	800417a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000008 	.word	0x20000008
 8004188:	20000000 	.word	0x20000000
 800418c:	20000004 	.word	0x20000004

08004190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_IncTick+0x1c>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <HAL_IncTick+0x20>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4413      	add	r3, r2
 800419e:	4a03      	ldr	r2, [pc, #12]	@ (80041ac <HAL_IncTick+0x1c>)
 80041a0:	6013      	str	r3, [r2, #0]
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000384 	.word	0x20000384
 80041b0:	20000008 	.word	0x20000008

080041b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTick;
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_GetTick+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000384 	.word	0x20000384

080041cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d4:	f7ff ffee 	bl	80041b4 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e4:	d004      	beq.n	80041f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_Delay+0x40>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041f0:	bf00      	nop
 80041f2:	f7ff ffdf 	bl	80041b4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d8f7      	bhi.n	80041f2 <HAL_Delay+0x26>
  {
  }
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000008 	.word	0x20000008

08004210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800423c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <__NVIC_GetPriorityGrouping+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0307 	and.w	r3, r3, #7
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db0b      	blt.n	800429e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	4907      	ldr	r1, [pc, #28]	@ (80042ac <__NVIC_EnableIRQ+0x38>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2001      	movs	r0, #1
 8004296:	fa00 f202 	lsl.w	r2, r0, r2
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db0a      	blt.n	80042da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	490c      	ldr	r1, [pc, #48]	@ (80042fc <__NVIC_SetPriority+0x4c>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	440b      	add	r3, r1
 80042d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d8:	e00a      	b.n	80042f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4908      	ldr	r1, [pc, #32]	@ (8004300 <__NVIC_SetPriority+0x50>)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	3b04      	subs	r3, #4
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	440b      	add	r3, r1
 80042ee:	761a      	strb	r2, [r3, #24]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000e100 	.word	0xe000e100
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	@ 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f1c3 0307 	rsb	r3, r3, #7
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf28      	it	cs
 8004322:	2304      	movcs	r3, #4
 8004324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3304      	adds	r3, #4
 800432a:	2b06      	cmp	r3, #6
 800432c:	d902      	bls.n	8004334 <NVIC_EncodePriority+0x30>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3b03      	subs	r3, #3
 8004332:	e000      	b.n	8004336 <NVIC_EncodePriority+0x32>
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	401a      	ands	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800434c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	43d9      	mvns	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	4313      	orrs	r3, r2
         );
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	@ 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800437c:	d301      	bcc.n	8004382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800437e:	2301      	movs	r3, #1
 8004380:	e00f      	b.n	80043a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004382:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <SysTick_Config+0x40>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3b01      	subs	r3, #1
 8004388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438a:	210f      	movs	r1, #15
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004390:	f7ff ff8e 	bl	80042b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <SysTick_Config+0x40>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439a:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <SysTick_Config+0x40>)
 800439c:	2207      	movs	r2, #7
 800439e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	e000e010 	.word	0xe000e010

080043b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff29 	bl	8004210 <__NVIC_SetPriorityGrouping>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d4:	f7ff ff40 	bl	8004258 <__NVIC_GetPriorityGrouping>
 80043d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7ff ff90 	bl	8004304 <NVIC_EncodePriority>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff5f 	bl	80042b0 <__NVIC_SetPriority>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff33 	bl	8004274 <__NVIC_EnableIRQ>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffa4 	bl	800436c <SysTick_Config>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e147      	b.n	80046d2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fb9c 	bl	8003b94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0210 	bic.w	r2, r2, #16
 800446a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800446c:	f7ff fea2 	bl	80041b4 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004472:	e012      	b.n	800449a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004474:	f7ff fe9e 	bl	80041b4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b0a      	cmp	r3, #10
 8004480:	d90b      	bls.n	800449a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2203      	movs	r2, #3
 8004492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e11b      	b.n	80046d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d0e5      	beq.n	8004474 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b8:	f7ff fe7c 	bl	80041b4 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044be:	e012      	b.n	80044e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044c0:	f7ff fe78 	bl	80041b4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d90b      	bls.n	80044e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0f5      	b.n	80046d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0e5      	beq.n	80044c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0202 	orr.w	r2, r2, #2
 8004502:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a74      	ldr	r2, [pc, #464]	@ (80046dc <HAL_FDCAN_Init+0x2ac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d103      	bne.n	8004516 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800450e:	4a74      	ldr	r2, [pc, #464]	@ (80046e0 <HAL_FDCAN_Init+0x2b0>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7c1b      	ldrb	r3, [r3, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d108      	bne.n	8004530 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699a      	ldr	r2, [r3, #24]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800452c:	619a      	str	r2, [r3, #24]
 800452e:	e007      	b.n	8004540 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800453e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7c5b      	ldrb	r3, [r3, #17]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004556:	619a      	str	r2, [r3, #24]
 8004558:	e007      	b.n	800456a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004568:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7c9b      	ldrb	r3, [r3, #18]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d108      	bne.n	8004584 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	e007      	b.n	8004594 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004592:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80045b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0210 	bic.w	r2, r2, #16
 80045c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d108      	bne.n	80045e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0204 	orr.w	r2, r2, #4
 80045e0:	619a      	str	r2, [r3, #24]
 80045e2:	e02c      	b.n	800463e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d028      	beq.n	800463e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d01c      	beq.n	800462e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004602:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0210 	orr.w	r2, r2, #16
 8004612:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d110      	bne.n	800463e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0220 	orr.w	r2, r2, #32
 800462a:	619a      	str	r2, [r3, #24]
 800462c:	e007      	b.n	800463e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0220 	orr.w	r2, r2, #32
 800463c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	3b01      	subs	r3, #1
 8004644:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	3b01      	subs	r3, #1
 800464c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800464e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004656:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	3b01      	subs	r3, #1
 8004660:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004666:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004668:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004672:	d115      	bne.n	80046a0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	3b01      	subs	r3, #1
 8004680:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004682:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	3b01      	subs	r3, #1
 800468a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800468c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	3b01      	subs	r3, #1
 8004696:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800469c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800469e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f814 	bl	80046e4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40006400 	.word	0x40006400
 80046e0:	40006500 	.word	0x40006500

080046e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80046ec:	4b27      	ldr	r3, [pc, #156]	@ (800478c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80046ee:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	041a      	lsls	r2, r3, #16
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004724:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	061a      	lsls	r2, r3, #24
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e005      	b.n	8004772 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3304      	adds	r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3f3      	bcc.n	8004766 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	4000a400 	.word	0x4000a400

08004790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800479e:	e15a      	b.n	8004a56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 814c 	beq.w	8004a50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d005      	beq.n	80047d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d130      	bne.n	8004832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004806:	2201      	movs	r2, #1
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0201 	and.w	r2, r3, #1
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b03      	cmp	r3, #3
 800483c:	d017      	beq.n	800486e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	2203      	movs	r2, #3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d123      	bne.n	80048c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	08da      	lsrs	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	08da      	lsrs	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3208      	adds	r2, #8
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2203      	movs	r2, #3
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0203 	and.w	r2, r3, #3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a6 	beq.w	8004a50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004904:	4b5b      	ldr	r3, [pc, #364]	@ (8004a74 <HAL_GPIO_Init+0x2e4>)
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	4a5a      	ldr	r2, [pc, #360]	@ (8004a74 <HAL_GPIO_Init+0x2e4>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004910:	4b58      	ldr	r3, [pc, #352]	@ (8004a74 <HAL_GPIO_Init+0x2e4>)
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800491c:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_GPIO_Init+0x2e8>)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	220f      	movs	r2, #15
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004946:	d01f      	beq.n	8004988 <HAL_GPIO_Init+0x1f8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a7c <HAL_GPIO_Init+0x2ec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d019      	beq.n	8004984 <HAL_GPIO_Init+0x1f4>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a4b      	ldr	r2, [pc, #300]	@ (8004a80 <HAL_GPIO_Init+0x2f0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_GPIO_Init+0x1f0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a4a      	ldr	r2, [pc, #296]	@ (8004a84 <HAL_GPIO_Init+0x2f4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00d      	beq.n	800497c <HAL_GPIO_Init+0x1ec>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a49      	ldr	r2, [pc, #292]	@ (8004a88 <HAL_GPIO_Init+0x2f8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <HAL_GPIO_Init+0x1e8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a48      	ldr	r2, [pc, #288]	@ (8004a8c <HAL_GPIO_Init+0x2fc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <HAL_GPIO_Init+0x1e4>
 8004970:	2305      	movs	r3, #5
 8004972:	e00a      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 8004974:	2306      	movs	r3, #6
 8004976:	e008      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 8004978:	2304      	movs	r3, #4
 800497a:	e006      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 800497c:	2303      	movs	r3, #3
 800497e:	e004      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 8004980:	2302      	movs	r3, #2
 8004982:	e002      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_GPIO_Init+0x1fa>
 8004988:	2300      	movs	r3, #0
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	f002 0203 	and.w	r2, r2, #3
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	4093      	lsls	r3, r2
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800499a:	4937      	ldr	r1, [pc, #220]	@ (8004a78 <HAL_GPIO_Init+0x2e8>)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a8:	4b39      	ldr	r3, [pc, #228]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049cc:	4a30      	ldr	r2, [pc, #192]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049f6:	4a26      	ldr	r2, [pc, #152]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80049fc:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a20:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a4a:	4a11      	ldr	r2, [pc, #68]	@ (8004a90 <HAL_GPIO_Init+0x300>)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f ae9d 	bne.w	80047a0 <HAL_GPIO_Init+0x10>
  }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	48000400 	.word	0x48000400
 8004a80:	48000800 	.word	0x48000800
 8004a84:	48000c00 	.word	0x48000c00
 8004a88:	48001000 	.word	0x48001000
 8004a8c:	48001400 	.word	0x48001400
 8004a90:	40010400 	.word	0x40010400

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e08d      	b.n	8004bf2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff f8ac 	bl	8003c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	@ 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e006      	b.n	8004b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d108      	bne.n	8004b66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	e007      	b.n	8004b76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	461a      	mov	r2, r3
 8004c08:	460b      	mov	r3, r1
 8004c0a:	817b      	strh	r3, [r7, #10]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	f040 80fd 	bne.w	8004e18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0x30>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0f6      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c34:	f7ff fabe 	bl	80041b4 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2319      	movs	r3, #25
 8004c40:	2201      	movs	r2, #1
 8004c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa0a 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0e1      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	@ 0x21
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2210      	movs	r2, #16
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	893a      	ldrh	r2, [r7, #8]
 8004c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2bff      	cmp	r3, #255	@ 0xff
 8004c86:	d906      	bls.n	8004c96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	22ff      	movs	r2, #255	@ 0xff
 8004c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e007      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ca4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d024      	beq.n	8004cf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	4b4e      	ldr	r3, [pc, #312]	@ (8004e24 <HAL_I2C_Master_Transmit+0x228>)
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fc05 	bl	8005500 <I2C_TransferConfig>
 8004cf6:	e066      	b.n	8004dc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	8979      	ldrh	r1, [r7, #10]
 8004d00:	4b48      	ldr	r3, [pc, #288]	@ (8004e24 <HAL_I2C_Master_Transmit+0x228>)
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fbfa 	bl	8005500 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d0c:	e05b      	b.n	8004dc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	6a39      	ldr	r1, [r7, #32]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f9fd 	bl	8005112 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07b      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d034      	beq.n	8004dc6 <HAL_I2C_Master_Transmit+0x1ca>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d130      	bne.n	8004dc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2180      	movs	r1, #128	@ 0x80
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f976 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e04d      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2bff      	cmp	r3, #255	@ 0xff
 8004d86:	d90e      	bls.n	8004da6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	22ff      	movs	r2, #255	@ 0xff
 8004d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	8979      	ldrh	r1, [r7, #10]
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fbae 	bl	8005500 <I2C_TransferConfig>
 8004da4:	e00f      	b.n	8004dc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	8979      	ldrh	r1, [r7, #10]
 8004db8:	2300      	movs	r3, #0
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fb9d 	bl	8005500 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d19e      	bne.n	8004d0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	6a39      	ldr	r1, [r7, #32]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f9e3 	bl	80051a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e01a      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2220      	movs	r2, #32
 8004dea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_I2C_Master_Transmit+0x22c>)
 8004df8:	400b      	ands	r3, r1
 8004dfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	80002000 	.word	0x80002000
 8004e28:	fe00e800 	.word	0xfe00e800

08004e2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	461a      	mov	r2, r3
 8004e38:	460b      	mov	r3, r1
 8004e3a:	817b      	strh	r3, [r7, #10]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	f040 80db 	bne.w	8005004 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_I2C_Master_Receive+0x30>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e0d4      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e64:	f7ff f9a6 	bl	80041b4 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2319      	movs	r3, #25
 8004e70:	2201      	movs	r2, #1
 8004e72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f8f2 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0bf      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2222      	movs	r2, #34	@ 0x22
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2210      	movs	r2, #16
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	893a      	ldrh	r2, [r7, #8]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2bff      	cmp	r3, #255	@ 0xff
 8004eb6:	d90e      	bls.n	8004ed6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	22ff      	movs	r2, #255	@ 0xff
 8004ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	8979      	ldrh	r1, [r7, #10]
 8004ec6:	4b52      	ldr	r3, [pc, #328]	@ (8005010 <HAL_I2C_Master_Receive+0x1e4>)
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fb16 	bl	8005500 <I2C_TransferConfig>
 8004ed4:	e06d      	b.n	8004fb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	8979      	ldrh	r1, [r7, #10]
 8004ee8:	4b49      	ldr	r3, [pc, #292]	@ (8005010 <HAL_I2C_Master_Receive+0x1e4>)
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fb05 	bl	8005500 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ef6:	e05c      	b.n	8004fb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	6a39      	ldr	r1, [r7, #32]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f993 	bl	8005228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e07c      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d034      	beq.n	8004fb2 <HAL_I2C_Master_Receive+0x186>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d130      	bne.n	8004fb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2180      	movs	r1, #128	@ 0x80
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f880 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e04d      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2bff      	cmp	r3, #255	@ 0xff
 8004f72:	d90e      	bls.n	8004f92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	22ff      	movs	r2, #255	@ 0xff
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	8979      	ldrh	r1, [r7, #10]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fab8 	bl	8005500 <I2C_TransferConfig>
 8004f90:	e00f      	b.n	8004fb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	8979      	ldrh	r1, [r7, #10]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 faa7 	bl	8005500 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d19d      	bne.n	8004ef8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f8ed 	bl	80051a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e01a      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <HAL_I2C_Master_Receive+0x1e8>)
 8004fe4:	400b      	ands	r3, r1
 8004fe6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	80002400 	.word	0x80002400
 8005014:	fe00e800 	.word	0xfe00e800

08005018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d103      	bne.n	8005036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d007      	beq.n	8005054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	619a      	str	r2, [r3, #24]
  }
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005070:	e03b      	b.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f962 	bl	8005340 <I2C_IsErrorOccurred>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800508c:	d02d      	beq.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7ff f891 	bl	80041b4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d122      	bne.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d113      	bne.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e00f      	b.n	800510a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d0b4      	beq.n	8005072 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800511e:	e033      	b.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f90b 	bl	8005340 <I2C_IsErrorOccurred>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e031      	b.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800513a:	d025      	beq.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	f7ff f83a 	bl	80041b4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d302      	bcc.n	8005152 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11a      	bne.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d013      	beq.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e007      	b.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d1c4      	bne.n	8005120 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ac:	e02f      	b.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f8c4 	bl	8005340 <I2C_IsErrorOccurred>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e02d      	b.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe fff7 	bl	80041b4 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11a      	bne.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d013      	beq.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e007      	b.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b20      	cmp	r3, #32
 800521a:	d1c8      	bne.n	80051ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005238:	e071      	b.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f87e 	bl	8005340 <I2C_IsErrorOccurred>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b20      	cmp	r3, #32
 800525a:	d13b      	bne.n	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d138      	bne.n	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d105      	bne.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b10      	cmp	r3, #16
 8005288:	d121      	bne.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2210      	movs	r2, #16
 8005290:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2204      	movs	r2, #4
 8005296:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2220      	movs	r2, #32
 800529e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b24      	ldr	r3, [pc, #144]	@ (800533c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80052ac:	400b      	ands	r3, r1
 80052ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
 80052cc:	e002      	b.n	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80052d4:	f7fe ff6e 	bl	80041b4 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d119      	bne.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d00f      	beq.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d002      	beq.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d083      	beq.n	800523a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	fe00e800 	.word	0xfe00e800

08005340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d068      	beq.n	800543e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005374:	e049      	b.n	800540a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800537c:	d045      	beq.n	800540a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fe ff19 	bl	80041b4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_IsErrorOccurred+0x54>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d13a      	bne.n	800540a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b6:	d121      	bne.n	80053fc <I2C_IsErrorOccurred+0xbc>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053be:	d01d      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d01a      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053d6:	f7fe feed 	bl	80041b4 <HAL_GetTick>
 80053da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053dc:	e00e      	b.n	80053fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053de:	f7fe fee9 	bl	80041b4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b19      	cmp	r3, #25
 80053ea:	d907      	bls.n	80053fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f043 0320 	orr.w	r3, r3, #32
 80053f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053fa:	e006      	b.n	800540a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d1e9      	bne.n	80053de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d003      	beq.n	8005420 <I2C_IsErrorOccurred+0xe0>
 8005418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0aa      	beq.n	8005376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01c      	beq.n	80054ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fdaf 	bl	8005018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <I2C_IsErrorOccurred+0x1bc>)
 80054c6:	400b      	ands	r3, r1
 80054c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3728      	adds	r7, #40	@ 0x28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	fe00e800 	.word	0xfe00e800

08005500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	4613      	mov	r3, r2
 8005510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005518:	7a7b      	ldrb	r3, [r7, #9]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005520:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4313      	orrs	r3, r2
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	0d5b      	lsrs	r3, r3, #21
 800553a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <I2C_TransferConfig+0x60>)
 8005540:	430b      	orrs	r3, r1
 8005542:	43db      	mvns	r3, r3
 8005544:	ea02 0103 	and.w	r1, r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	03ff63ff 	.word	0x03ff63ff

08005564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	d138      	bne.n	80055ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005584:	2302      	movs	r3, #2
 8005586:	e032      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	@ 0x24
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d139      	bne.n	8005684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800561a:	2302      	movs	r3, #2
 800561c:	e033      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	@ 0x24
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800564c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d141      	bne.n	8005726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056a2:	4b4b      	ldr	r3, [pc, #300]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ae:	d131      	bne.n	8005714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056b0:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056b6:	4a46      	ldr	r2, [pc, #280]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c0:	4b43      	ldr	r3, [pc, #268]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056c8:	4a41      	ldr	r2, [pc, #260]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056d0:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2232      	movs	r2, #50	@ 0x32
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	4a3f      	ldr	r2, [pc, #252]	@ (80057d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	0c9b      	lsrs	r3, r3, #18
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e6:	e002      	b.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ee:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d102      	bne.n	8005702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f2      	bne.n	80056e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005702:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	d158      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e057      	b.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005714:	4b2e      	ldr	r3, [pc, #184]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571a:	4a2d      	ldr	r2, [pc, #180]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005724:	e04d      	b.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	d141      	bne.n	80057b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800572e:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573a:	d131      	bne.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800573c:	4b24      	ldr	r3, [pc, #144]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005742:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005754:	4a1e      	ldr	r2, [pc, #120]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800575a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2232      	movs	r2, #50	@ 0x32
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	0c9b      	lsrs	r3, r3, #18
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005772:	e002      	b.n	800577a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800577a:	4b15      	ldr	r3, [pc, #84]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d102      	bne.n	800578e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f2      	bne.n	8005774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800578e:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d112      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e011      	b.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a6:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057b0:	e007      	b.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057ba:	4a05      	ldr	r2, [pc, #20]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40007000 	.word	0x40007000
 80057d4:	20000000 	.word	0x20000000
 80057d8:	431bde83 	.word	0x431bde83

080057dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ea:	6093      	str	r3, [r2, #8]
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40007000 	.word	0x40007000

080057fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e2fe      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d075      	beq.n	8005906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581a:	4b97      	ldr	r3, [pc, #604]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005824:	4b94      	ldr	r3, [pc, #592]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d102      	bne.n	800583a <HAL_RCC_OscConfig+0x3e>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d002      	beq.n	8005840 <HAL_RCC_OscConfig+0x44>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d10b      	bne.n	8005858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005840:	4b8d      	ldr	r3, [pc, #564]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05b      	beq.n	8005904 <HAL_RCC_OscConfig+0x108>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d157      	bne.n	8005904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e2d9      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x74>
 8005862:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a84      	ldr	r2, [pc, #528]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e01d      	b.n	80058ac <HAL_RCC_OscConfig+0xb0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0x98>
 800587a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b7c      	ldr	r3, [pc, #496]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e00b      	b.n	80058ac <HAL_RCC_OscConfig+0xb0>
 8005894:	4b78      	ldr	r3, [pc, #480]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a77      	ldr	r2, [pc, #476]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b75      	ldr	r3, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a74      	ldr	r2, [pc, #464]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d013      	beq.n	80058dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fe fc7e 	bl	80041b4 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058bc:	f7fe fc7a 	bl	80041b4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e29e      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0xc0>
 80058da:	e014      	b.n	8005906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe fc6a 	bl	80041b4 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fe fc66 	bl	80041b4 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	@ 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e28a      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058f6:	4b60      	ldr	r3, [pc, #384]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0xe8>
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d075      	beq.n	80059fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591c:	4b56      	ldr	r3, [pc, #344]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d102      	bne.n	8005932 <HAL_RCC_OscConfig+0x136>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d002      	beq.n	8005938 <HAL_RCC_OscConfig+0x13c>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11f      	bne.n	8005978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005938:	4b4f      	ldr	r3, [pc, #316]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_OscConfig+0x154>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e25d      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b49      	ldr	r3, [pc, #292]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	4946      	ldr	r1, [pc, #280]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005964:	4b45      	ldr	r3, [pc, #276]	@ (8005a7c <HAL_RCC_OscConfig+0x280>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fbd7 	bl	800411c <HAL_InitTick>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d043      	beq.n	80059fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e249      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d023      	beq.n	80059c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b3d      	ldr	r3, [pc, #244]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3c      	ldr	r2, [pc, #240]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fe fc12 	bl	80041b4 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005994:	f7fe fc0e 	bl	80041b4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e232      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	492d      	ldr	r1, [pc, #180]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
 80059c6:	e01a      	b.n	80059fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fbee 	bl	80041b4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fe fbea 	bl	80041b4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e20e      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ee:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1e0>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d041      	beq.n	8005a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01c      	beq.n	8005a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a12:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a18:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fe fbc7 	bl	80041b4 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fe fbc3 	bl	80041b4 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1e7      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ef      	beq.n	8005a2a <HAL_RCC_OscConfig+0x22e>
 8005a4a:	e020      	b.n	8005a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fe fbaa 	bl	80041b4 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a62:	e00d      	b.n	8005a80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a64:	f7fe fba6 	bl	80041b4 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d906      	bls.n	8005a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e1ca      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a80:	4b8c      	ldr	r3, [pc, #560]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ea      	bne.n	8005a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80a6 	beq.w	8005be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aa0:	4b84      	ldr	r3, [pc, #528]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x2b4>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_RCC_OscConfig+0x2b6>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad2:	4b79      	ldr	r3, [pc, #484]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d118      	bne.n	8005b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ade:	4b76      	ldr	r3, [pc, #472]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a75      	ldr	r2, [pc, #468]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aea:	f7fe fb63 	bl	80041b4 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fe fb5f 	bl	80041b4 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e183      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b04:	4b6c      	ldr	r3, [pc, #432]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d108      	bne.n	8005b2a <HAL_RCC_OscConfig+0x32e>
 8005b18:	4b66      	ldr	r3, [pc, #408]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1e:	4a65      	ldr	r2, [pc, #404]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b28:	e024      	b.n	8005b74 <HAL_RCC_OscConfig+0x378>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d110      	bne.n	8005b54 <HAL_RCC_OscConfig+0x358>
 8005b32:	4b60      	ldr	r3, [pc, #384]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b42:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	4a5a      	ldr	r2, [pc, #360]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b52:	e00f      	b.n	8005b74 <HAL_RCC_OscConfig+0x378>
 8005b54:	4b57      	ldr	r3, [pc, #348]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5a:	4a56      	ldr	r2, [pc, #344]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d016      	beq.n	8005baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fe fb1a 	bl	80041b4 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b84:	f7fe fb16 	bl	80041b4 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e138      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9a:	4b46      	ldr	r3, [pc, #280]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ed      	beq.n	8005b84 <HAL_RCC_OscConfig+0x388>
 8005ba8:	e015      	b.n	8005bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fe fb03 	bl	80041b4 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fe faff 	bl	80041b4 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e121      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ed      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d105      	bne.n	8005be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bdc:	4b35      	ldr	r3, [pc, #212]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be0:	4a34      	ldr	r2, [pc, #208]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d03c      	beq.n	8005c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01c      	beq.n	8005c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c02:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fe fad2 	bl	80041b4 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c14:	f7fe face 	bl	80041b4 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0f2      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c26:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ef      	beq.n	8005c14 <HAL_RCC_OscConfig+0x418>
 8005c34:	e01b      	b.n	8005c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c36:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fe fab5 	bl	80041b4 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c4e:	f7fe fab1 	bl	80041b4 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0d5      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c60:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ef      	bne.n	8005c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80c9 	beq.w	8005e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c78:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 030c 	and.w	r3, r3, #12
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	f000 8083 	beq.w	8005d8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d15e      	bne.n	8005d4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a08      	ldr	r2, [pc, #32]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fe fa8b 	bl	80041b4 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca0:	e00c      	b.n	8005cbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca2:	f7fe fa87 	bl	80041b4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d905      	bls.n	8005cbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0ab      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cbc:	4b55      	ldr	r3, [pc, #340]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ec      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc8:	4b52      	ldr	r3, [pc, #328]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	4b52      	ldr	r3, [pc, #328]	@ (8005e18 <HAL_RCC_OscConfig+0x61c>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6a11      	ldr	r1, [r2, #32]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	0112      	lsls	r2, r2, #4
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ce2:	0212      	lsls	r2, r2, #8
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cea:	0852      	lsrs	r2, r2, #1
 8005cec:	3a01      	subs	r2, #1
 8005cee:	0552      	lsls	r2, r2, #21
 8005cf0:	4311      	orrs	r1, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cf6:	0852      	lsrs	r2, r2, #1
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0652      	lsls	r2, r2, #25
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d02:	06d2      	lsls	r2, r2, #27
 8005d04:	430a      	orrs	r2, r1
 8005d06:	4943      	ldr	r1, [pc, #268]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0c:	4b41      	ldr	r3, [pc, #260]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a40      	ldr	r2, [pc, #256]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d18:	4b3e      	ldr	r3, [pc, #248]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe fa46 	bl	80041b4 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fe fa42 	bl	80041b4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e066      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3e:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x530>
 8005d4a:	e05e      	b.n	8005e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4c:	4b31      	ldr	r3, [pc, #196]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a30      	ldr	r2, [pc, #192]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fe fa2c 	bl	80041b4 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fe fa28 	bl	80041b4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e04c      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d72:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d7e:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	4924      	ldr	r1, [pc, #144]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d84:	4b25      	ldr	r3, [pc, #148]	@ (8005e1c <HAL_RCC_OscConfig+0x620>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	60cb      	str	r3, [r1, #12]
 8005d8a:	e03e      	b.n	8005e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e039      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0203 	and.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d12c      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	3b01      	subs	r3, #1
 8005db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d123      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d11b      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d113      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	3b01      	subs	r3, #1
 8005dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	019f800c 	.word	0x019f800c
 8005e1c:	feeefffc 	.word	0xfeeefffc

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e11e      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e38:	4b91      	ldr	r3, [pc, #580]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d910      	bls.n	8005e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b8e      	ldr	r3, [pc, #568]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 020f 	bic.w	r2, r3, #15
 8005e4e:	498c      	ldr	r1, [pc, #560]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e56:	4b8a      	ldr	r3, [pc, #552]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e106      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d073      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d129      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7c:	4b81      	ldr	r3, [pc, #516]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0f4      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e8c:	f000 f99e 	bl	80061cc <RCC_GetSysClockFreqFromPLLSource>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4a7c      	ldr	r2, [pc, #496]	@ (8006088 <HAL_RCC_ClockConfig+0x268>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d93f      	bls.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d12f      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eba:	4b72      	ldr	r3, [pc, #456]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec2:	4a70      	ldr	r2, [pc, #448]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e024      	b.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d107      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0c6      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee8:	4b66      	ldr	r3, [pc, #408]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0be      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ef8:	f000 f8ce 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4a61      	ldr	r2, [pc, #388]	@ (8006088 <HAL_RCC_ClockConfig+0x268>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d909      	bls.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f06:	4b5f      	ldr	r3, [pc, #380]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f16:	2380      	movs	r3, #128	@ 0x80
 8005f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0203 	bic.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4957      	ldr	r1, [pc, #348]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fe f942 	bl	80041b4 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f34:	f7fe f93e 	bl	80041b4 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e095      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 020c 	and.w	r2, r3, #12
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1eb      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f74:	4b43      	ldr	r3, [pc, #268]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a42      	ldr	r2, [pc, #264]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f94:	4a3b      	ldr	r2, [pc, #236]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9c:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4936      	ldr	r1, [pc, #216]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b80      	cmp	r3, #128	@ 0x80
 8005fb4:	d105      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fb6:	4b33      	ldr	r3, [pc, #204]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4a32      	ldr	r2, [pc, #200]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d21d      	bcs.n	800600c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 020f 	bic.w	r2, r3, #15
 8005fd8:	4929      	ldr	r1, [pc, #164]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fe0:	f7fe f8e8 	bl	80041b4 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe8:	f7fe f8e4 	bl	80041b4 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e03b      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d1ed      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4917      	ldr	r1, [pc, #92]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006036:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	490f      	ldr	r1, [pc, #60]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800604a:	f000 f825 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800604e:	4602      	mov	r2, r0
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	490c      	ldr	r1, [pc, #48]	@ (800608c <HAL_RCC_ClockConfig+0x26c>)
 800605c:	5ccb      	ldrb	r3, [r1, r3]
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <HAL_RCC_ClockConfig+0x270>)
 8006068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800606a:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <HAL_RCC_ClockConfig+0x274>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f854 	bl	800411c <HAL_InitTick>
 8006074:	4603      	mov	r3, r0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40022000 	.word	0x40022000
 8006084:	40021000 	.word	0x40021000
 8006088:	04c4b400 	.word	0x04c4b400
 800608c:	08009428 	.word	0x08009428
 8006090:	20000000 	.word	0x20000000
 8006094:	20000004 	.word	0x20000004

08006098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800609e:	4b2c      	ldr	r3, [pc, #176]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d102      	bne.n	80060b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	e047      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060b0:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d102      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060bc:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e03e      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060c2:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d136      	bne.n	800613c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ce:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3301      	adds	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d10c      	bne.n	8006106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060f6:	68d2      	ldr	r2, [r2, #12]
 80060f8:	0a12      	lsrs	r2, r2, #8
 80060fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	617b      	str	r3, [r7, #20]
      break;
 8006104:	e00c      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006106:	4a13      	ldr	r2, [pc, #76]	@ (8006154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	4a10      	ldr	r2, [pc, #64]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	0a12      	lsrs	r2, r2, #8
 8006114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]
      break;
 800611e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	0e5b      	lsrs	r3, r3, #25
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e001      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006140:	693b      	ldr	r3, [r7, #16]
}
 8006142:	4618      	mov	r0, r3
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40021000 	.word	0x40021000
 8006154:	00f42400 	.word	0x00f42400
 8006158:	007a1200 	.word	0x007a1200

0800615c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006160:	4b03      	ldr	r3, [pc, #12]	@ (8006170 <HAL_RCC_GetHCLKFreq+0x14>)
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000000 	.word	0x20000000

08006174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006178:	f7ff fff0 	bl	800615c <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4904      	ldr	r1, [pc, #16]	@ (800619c <HAL_RCC_GetPCLK1Freq+0x28>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40021000 	.word	0x40021000
 800619c:	08009438 	.word	0x08009438

080061a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061a4:	f7ff ffda 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	0adb      	lsrs	r3, r3, #11
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4904      	ldr	r1, [pc, #16]	@ (80061c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000
 80061c8:	08009438 	.word	0x08009438

080061cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061d2:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061dc:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d10c      	bne.n	800620a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061f0:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	4a14      	ldr	r2, [pc, #80]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061fa:	68d2      	ldr	r2, [r2, #12]
 80061fc:	0a12      	lsrs	r2, r2, #8
 80061fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	617b      	str	r3, [r7, #20]
    break;
 8006208:	e00c      	b.n	8006224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800620a:	4a12      	ldr	r2, [pc, #72]	@ (8006254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006212:	4a0e      	ldr	r2, [pc, #56]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006214:	68d2      	ldr	r2, [r2, #12]
 8006216:	0a12      	lsrs	r2, r2, #8
 8006218:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]
    break;
 8006222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006224:	4b09      	ldr	r3, [pc, #36]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	0e5b      	lsrs	r3, r3, #25
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	3301      	adds	r3, #1
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800623e:	687b      	ldr	r3, [r7, #4]
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40021000 	.word	0x40021000
 8006250:	007a1200 	.word	0x007a1200
 8006254:	00f42400 	.word	0x00f42400

08006258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006260:	2300      	movs	r3, #0
 8006262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006264:	2300      	movs	r3, #0
 8006266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8098 	beq.w	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006276:	2300      	movs	r3, #0
 8006278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627a:	4b43      	ldr	r3, [pc, #268]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10d      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006286:	4b40      	ldr	r3, [pc, #256]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	4a3f      	ldr	r2, [pc, #252]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006290:	6593      	str	r3, [r2, #88]	@ 0x58
 8006292:	4b3d      	ldr	r3, [pc, #244]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800629e:	2301      	movs	r3, #1
 80062a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062a2:	4b3a      	ldr	r3, [pc, #232]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a39      	ldr	r2, [pc, #228]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ae:	f7fd ff81 	bl	80041b4 <HAL_GetTick>
 80062b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b4:	e009      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b6:	f7fd ff7d 	bl	80041b4 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d902      	bls.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	74fb      	strb	r3, [r7, #19]
        break;
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ca:	4b30      	ldr	r3, [pc, #192]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0ef      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062d6:	7cfb      	ldrb	r3, [r7, #19]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d159      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01e      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d019      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062f8:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006304:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006314:	4b1c      	ldr	r3, [pc, #112]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631a:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006324:	4a18      	ldr	r2, [pc, #96]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006336:	f7fd ff3d 	bl	80041b4 <HAL_GetTick>
 800633a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800633c:	e00b      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633e:	f7fd ff39 	bl	80041b4 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634c:	4293      	cmp	r3, r2
 800634e:	d902      	bls.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	74fb      	strb	r3, [r7, #19]
            break;
 8006354:	e006      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006356:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ec      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800636a:	4b07      	ldr	r3, [pc, #28]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	4903      	ldr	r1, [pc, #12]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006380:	e008      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006382:	7cfb      	ldrb	r3, [r7, #19]
 8006384:	74bb      	strb	r3, [r7, #18]
 8006386:	e005      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006388:	40021000 	.word	0x40021000
 800638c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006394:	7c7b      	ldrb	r3, [r7, #17]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639a:	4ba6      	ldr	r3, [pc, #664]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	4aa5      	ldr	r2, [pc, #660]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063b2:	4ba0      	ldr	r3, [pc, #640]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b8:	f023 0203 	bic.w	r2, r3, #3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	499c      	ldr	r1, [pc, #624]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063d4:	4b97      	ldr	r3, [pc, #604]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 020c 	bic.w	r2, r3, #12
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	4994      	ldr	r1, [pc, #592]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	498b      	ldr	r1, [pc, #556]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006418:	4b86      	ldr	r3, [pc, #536]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	4983      	ldr	r1, [pc, #524]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800643a:	4b7e      	ldr	r3, [pc, #504]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	497a      	ldr	r1, [pc, #488]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800645c:	4b75      	ldr	r3, [pc, #468]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	4972      	ldr	r1, [pc, #456]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800647e:	4b6d      	ldr	r3, [pc, #436]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4969      	ldr	r1, [pc, #420]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a0:	4b64      	ldr	r3, [pc, #400]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4961      	ldr	r1, [pc, #388]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	4958      	ldr	r1, [pc, #352]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e4:	4b53      	ldr	r3, [pc, #332]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	4950      	ldr	r1, [pc, #320]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b4b      	ldr	r3, [pc, #300]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a4a      	ldr	r2, [pc, #296]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800651c:	4b45      	ldr	r3, [pc, #276]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652a:	4942      	ldr	r1, [pc, #264]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b3d      	ldr	r3, [pc, #244]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a3c      	ldr	r2, [pc, #240]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006554:	4b37      	ldr	r3, [pc, #220]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	4934      	ldr	r1, [pc, #208]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b2f      	ldr	r3, [pc, #188]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a2e      	ldr	r2, [pc, #184]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800658c:	4b29      	ldr	r3, [pc, #164]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659a:	4926      	ldr	r1, [pc, #152]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a20      	ldr	r2, [pc, #128]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d2:	4918      	ldr	r1, [pc, #96]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b13      	ldr	r3, [pc, #76]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d015      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	490a      	ldr	r1, [pc, #40]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800661a:	d105      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4a04      	ldr	r2, [pc, #16]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006626:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006628:	7cbb      	ldrb	r3, [r7, #18]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40021000 	.word	0x40021000

08006638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e049      	b.n	80066de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fd fb68 	bl	8003d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f000 fb12 	bl	8006ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e04a      	b.n	8006796 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a21      	ldr	r2, [pc, #132]	@ (80067a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672a:	d013      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <HAL_TIM_Base_Start_IT+0xc4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1a      	ldr	r2, [pc, #104]	@ (80067b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a19      	ldr	r2, [pc, #100]	@ (80067b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d115      	bne.n	8006780 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d015      	beq.n	8006792 <HAL_TIM_Base_Start_IT+0xaa>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d011      	beq.n	8006792 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677e:	e008      	b.n	8006792 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e000      	b.n	8006794 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40013400 	.word	0x40013400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	00010007 	.word	0x00010007

080067bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d020      	beq.n	8006820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0202 	mvn.w	r2, #2
 80067f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa2c 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa1e 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa2f 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01b      	beq.n	800686c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0204 	mvn.w	r2, #4
 800683c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa06 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9f8 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa09 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d020      	beq.n	80068b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0208 	mvn.w	r2, #8
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9e0 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9d2 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f9e3 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0210 	mvn.w	r2, #16
 80068d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2208      	movs	r2, #8
 80068da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f9ba 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 80068f0:	e005      	b.n	80068fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9ac 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f9bd 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d007      	beq.n	8006928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0201 	mvn.w	r2, #1
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fa feb8 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800694e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fb69 	bl	8007028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb61 	bl	800703c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f977 	bl	8006c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0220 	mvn.w	r2, #32
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb29 	bl	8007014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb35 	bl	8007050 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fb2d 	bl	8007064 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fb25 	bl	8007078 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb1d 	bl	800708c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIM_ConfigClockSource+0x1c>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e0de      	b.n	8006c36 <HAL_TIM_ConfigClockSource+0x1da>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006a96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a63      	ldr	r2, [pc, #396]	@ (8006c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f000 80a9 	beq.w	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab8:	4a61      	ldr	r2, [pc, #388]	@ (8006c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f200 80ae 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ac0:	4a60      	ldr	r2, [pc, #384]	@ (8006c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	f000 80a1 	beq.w	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	f200 80a6 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8006c48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f000 8099 	beq.w	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8006c48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f200 809e 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8006c4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	f000 8091 	beq.w	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae8:	4a58      	ldr	r2, [pc, #352]	@ (8006c4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f200 8096 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006af0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006af4:	f000 8089 	beq.w	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006af8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006afc:	f200 808e 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b04:	d03e      	beq.n	8006b84 <HAL_TIM_ConfigClockSource+0x128>
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b0a:	f200 8087 	bhi.w	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b12:	f000 8086 	beq.w	8006c22 <HAL_TIM_ConfigClockSource+0x1c6>
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b1a:	d87f      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b1c:	2b70      	cmp	r3, #112	@ 0x70
 8006b1e:	d01a      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0xfa>
 8006b20:	2b70      	cmp	r3, #112	@ 0x70
 8006b22:	d87b      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b24:	2b60      	cmp	r3, #96	@ 0x60
 8006b26:	d050      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x16e>
 8006b28:	2b60      	cmp	r3, #96	@ 0x60
 8006b2a:	d877      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b2c:	2b50      	cmp	r3, #80	@ 0x50
 8006b2e:	d03c      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x14e>
 8006b30:	2b50      	cmp	r3, #80	@ 0x50
 8006b32:	d873      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b34:	2b40      	cmp	r3, #64	@ 0x40
 8006b36:	d058      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x18e>
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	d86f      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b3c:	2b30      	cmp	r3, #48	@ 0x30
 8006b3e:	d064      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b40:	2b30      	cmp	r3, #48	@ 0x30
 8006b42:	d86b      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d060      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d867      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05c      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b50:	2b10      	cmp	r3, #16
 8006b52:	d05a      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b54:	e062      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b66:	f000 f9b3 	bl	8006ed0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	609a      	str	r2, [r3, #8]
      break;
 8006b82:	e04f      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b94:	f000 f99c 	bl	8006ed0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ba6:	609a      	str	r2, [r3, #8]
      break;
 8006ba8:	e03c      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 f90e 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2150      	movs	r1, #80	@ 0x50
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f967 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e02c      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 f92d 	bl	8006e36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2160      	movs	r1, #96	@ 0x60
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f957 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006be8:	e01c      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 f8ee 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2140      	movs	r1, #64	@ 0x40
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f947 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c08:	e00c      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f000 f93e 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c1a:	e003      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c20:	e000      	b.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	00100070 	.word	0x00100070
 8006c44:	00100040 	.word	0x00100040
 8006c48:	00100030 	.word	0x00100030
 8006c4c:	00100020 	.word	0x00100020

08006c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a42      	ldr	r2, [pc, #264]	@ (8006dbc <TIM_Base_SetConfig+0x11c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc0 <TIM_Base_SetConfig+0x120>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc4 <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8006dc8 <TIM_Base_SetConfig+0x128>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d108      	bne.n	8006cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a33      	ldr	r2, [pc, #204]	@ (8006dbc <TIM_Base_SetConfig+0x11c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	@ (8006dc0 <TIM_Base_SetConfig+0x120>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc4 <TIM_Base_SetConfig+0x124>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc8 <TIM_Base_SetConfig+0x128>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a2d      	ldr	r2, [pc, #180]	@ (8006dcc <TIM_Base_SetConfig+0x12c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd0 <TIM_Base_SetConfig+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd4 <TIM_Base_SetConfig+0x134>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a16      	ldr	r2, [pc, #88]	@ (8006dbc <TIM_Base_SetConfig+0x11c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0xe8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	@ (8006dc8 <TIM_Base_SetConfig+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0xe8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <TIM_Base_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0xe8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <TIM_Base_SetConfig+0x130>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0xe8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a14      	ldr	r2, [pc, #80]	@ (8006dd4 <TIM_Base_SetConfig+0x134>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d105      	bne.n	8006dae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	611a      	str	r2, [r3, #16]
  }
}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 030a 	bic.w	r3, r3, #10
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f023 0210 	bic.w	r2, r3, #16
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f043 0307 	orr.w	r3, r3, #7
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e065      	b.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2b      	ldr	r2, [pc, #172]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d108      	bne.n	8006f6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1b      	ldr	r2, [pc, #108]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9e:	d013      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a17      	ldr	r2, [pc, #92]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a12      	ldr	r2, [pc, #72]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a13      	ldr	r2, [pc, #76]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40013400 	.word	0x40013400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40014000 	.word	0x40014000

08007014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e042      	b.n	8007138 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fc fe59 	bl	8003d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2224      	movs	r2, #36	@ 0x24
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fca2 	bl	8007a34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9d3 	bl	800749c <UART_SetConfig>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e01b      	b.n	8007138 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800710e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800711e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fd21 	bl	8007b78 <UART_CheckIdleState>
 8007136:	4603      	mov	r3, r0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e04a      	b.n	80071e8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fc fe09 	bl	8003d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2224      	movs	r2, #36	@ 0x24
 800716e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fc52 	bl	8007a34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f983 	bl	800749c <UART_SetConfig>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e023      	b.n	80071e8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80071be:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0208 	orr.w	r2, r2, #8
 80071ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fcc9 	bl	8007b78 <UART_CheckIdleState>
 80071e6:	4603      	mov	r3, r0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007206:	2b20      	cmp	r3, #32
 8007208:	d17b      	bne.n	8007302 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_UART_Transmit+0x26>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e074      	b.n	8007304 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2221      	movs	r2, #33	@ 0x21
 8007226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722a:	f7fc ffc3 	bl	80041b4 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007248:	d108      	bne.n	800725c <HAL_UART_Transmit+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e003      	b.n	8007264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007264:	e030      	b.n	80072c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	2180      	movs	r1, #128	@ 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fd2b 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e03d      	b.n	8007304 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3302      	adds	r3, #2
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	e007      	b.n	80072b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1c8      	bne.n	8007266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	2140      	movs	r1, #64	@ 0x40
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fcf4 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e006      	b.n	8007304 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	@ 0x28
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007322:	2b20      	cmp	r3, #32
 8007324:	f040 80b5 	bne.w	8007492 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Receive+0x28>
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e0ad      	b.n	8007494 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2222      	movs	r2, #34	@ 0x22
 8007344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800734e:	f7fc ff31 	bl	80041b4 <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736c:	d10e      	bne.n	800738c <HAL_UART_Receive+0x80>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d105      	bne.n	8007382 <HAL_UART_Receive+0x76>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800737c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007380:	e02d      	b.n	80073de <HAL_UART_Receive+0xd2>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	22ff      	movs	r2, #255	@ 0xff
 8007386:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800738a:	e028      	b.n	80073de <HAL_UART_Receive+0xd2>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10d      	bne.n	80073b0 <HAL_UART_Receive+0xa4>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_UART_Receive+0x9a>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	22ff      	movs	r2, #255	@ 0xff
 80073a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073a4:	e01b      	b.n	80073de <HAL_UART_Receive+0xd2>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	227f      	movs	r2, #127	@ 0x7f
 80073aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073ae:	e016      	b.n	80073de <HAL_UART_Receive+0xd2>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073b8:	d10d      	bne.n	80073d6 <HAL_UART_Receive+0xca>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <HAL_UART_Receive+0xc0>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	227f      	movs	r2, #127	@ 0x7f
 80073c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073ca:	e008      	b.n	80073de <HAL_UART_Receive+0xd2>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	223f      	movs	r2, #63	@ 0x3f
 80073d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073d4:	e003      	b.n	80073de <HAL_UART_Receive+0xd2>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ee:	d108      	bne.n	8007402 <HAL_UART_Receive+0xf6>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	e003      	b.n	800740a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800740a:	e036      	b.n	800747a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	2120      	movs	r1, #32
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fc58 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e032      	b.n	8007494 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10c      	bne.n	800744e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	b29a      	uxth	r2, r3
 800743c:	8a7b      	ldrh	r3, [r7, #18]
 800743e:	4013      	ands	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3302      	adds	r3, #2
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e00c      	b.n	8007468 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	b2da      	uxtb	r2, r3
 8007456:	8a7b      	ldrh	r3, [r7, #18]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4013      	ands	r3, r2
 800745c:	b2da      	uxtb	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1c2      	bne.n	800740c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e000      	b.n	8007494 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800749c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074a0:	b08c      	sub	sp, #48	@ 0x30
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4bab      	ldr	r3, [pc, #684]	@ (8007778 <UART_SetConfig+0x2dc>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4aa0      	ldr	r2, [pc, #640]	@ (800777c <UART_SetConfig+0x2e0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007504:	4313      	orrs	r3, r2
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007512:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800751c:	430b      	orrs	r3, r1
 800751e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	f023 010f 	bic.w	r1, r3, #15
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a91      	ldr	r2, [pc, #580]	@ (8007780 <UART_SetConfig+0x2e4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d125      	bne.n	800758c <UART_SetConfig+0xf0>
 8007540:	4b90      	ldr	r3, [pc, #576]	@ (8007784 <UART_SetConfig+0x2e8>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b03      	cmp	r3, #3
 800754c:	d81a      	bhi.n	8007584 <UART_SetConfig+0xe8>
 800754e:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <UART_SetConfig+0xb8>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	08007565 	.word	0x08007565
 8007558:	08007575 	.word	0x08007575
 800755c:	0800756d 	.word	0x0800756d
 8007560:	0800757d 	.word	0x0800757d
 8007564:	2301      	movs	r3, #1
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756a:	e0d6      	b.n	800771a <UART_SetConfig+0x27e>
 800756c:	2302      	movs	r3, #2
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007572:	e0d2      	b.n	800771a <UART_SetConfig+0x27e>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e0ce      	b.n	800771a <UART_SetConfig+0x27e>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e0ca      	b.n	800771a <UART_SetConfig+0x27e>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e0c6      	b.n	800771a <UART_SetConfig+0x27e>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a7d      	ldr	r2, [pc, #500]	@ (8007788 <UART_SetConfig+0x2ec>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d138      	bne.n	8007608 <UART_SetConfig+0x16c>
 8007596:	4b7b      	ldr	r3, [pc, #492]	@ (8007784 <UART_SetConfig+0x2e8>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b0c      	cmp	r3, #12
 80075a2:	d82d      	bhi.n	8007600 <UART_SetConfig+0x164>
 80075a4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <UART_SetConfig+0x110>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075e1 	.word	0x080075e1
 80075b0:	08007601 	.word	0x08007601
 80075b4:	08007601 	.word	0x08007601
 80075b8:	08007601 	.word	0x08007601
 80075bc:	080075f1 	.word	0x080075f1
 80075c0:	08007601 	.word	0x08007601
 80075c4:	08007601 	.word	0x08007601
 80075c8:	08007601 	.word	0x08007601
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	08007601 	.word	0x08007601
 80075d4:	08007601 	.word	0x08007601
 80075d8:	08007601 	.word	0x08007601
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e6:	e098      	b.n	800771a <UART_SetConfig+0x27e>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ee:	e094      	b.n	800771a <UART_SetConfig+0x27e>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	e090      	b.n	800771a <UART_SetConfig+0x27e>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fe:	e08c      	b.n	800771a <UART_SetConfig+0x27e>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007606:	e088      	b.n	800771a <UART_SetConfig+0x27e>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a5f      	ldr	r2, [pc, #380]	@ (800778c <UART_SetConfig+0x2f0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d125      	bne.n	800765e <UART_SetConfig+0x1c2>
 8007612:	4b5c      	ldr	r3, [pc, #368]	@ (8007784 <UART_SetConfig+0x2e8>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007618:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800761c:	2b30      	cmp	r3, #48	@ 0x30
 800761e:	d016      	beq.n	800764e <UART_SetConfig+0x1b2>
 8007620:	2b30      	cmp	r3, #48	@ 0x30
 8007622:	d818      	bhi.n	8007656 <UART_SetConfig+0x1ba>
 8007624:	2b20      	cmp	r3, #32
 8007626:	d00a      	beq.n	800763e <UART_SetConfig+0x1a2>
 8007628:	2b20      	cmp	r3, #32
 800762a:	d814      	bhi.n	8007656 <UART_SetConfig+0x1ba>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <UART_SetConfig+0x19a>
 8007630:	2b10      	cmp	r3, #16
 8007632:	d008      	beq.n	8007646 <UART_SetConfig+0x1aa>
 8007634:	e00f      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007636:	2300      	movs	r3, #0
 8007638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763c:	e06d      	b.n	800771a <UART_SetConfig+0x27e>
 800763e:	2302      	movs	r3, #2
 8007640:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007644:	e069      	b.n	800771a <UART_SetConfig+0x27e>
 8007646:	2304      	movs	r3, #4
 8007648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764c:	e065      	b.n	800771a <UART_SetConfig+0x27e>
 800764e:	2308      	movs	r3, #8
 8007650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007654:	e061      	b.n	800771a <UART_SetConfig+0x27e>
 8007656:	2310      	movs	r3, #16
 8007658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765c:	e05d      	b.n	800771a <UART_SetConfig+0x27e>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a4b      	ldr	r2, [pc, #300]	@ (8007790 <UART_SetConfig+0x2f4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d125      	bne.n	80076b4 <UART_SetConfig+0x218>
 8007668:	4b46      	ldr	r3, [pc, #280]	@ (8007784 <UART_SetConfig+0x2e8>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007672:	2bc0      	cmp	r3, #192	@ 0xc0
 8007674:	d016      	beq.n	80076a4 <UART_SetConfig+0x208>
 8007676:	2bc0      	cmp	r3, #192	@ 0xc0
 8007678:	d818      	bhi.n	80076ac <UART_SetConfig+0x210>
 800767a:	2b80      	cmp	r3, #128	@ 0x80
 800767c:	d00a      	beq.n	8007694 <UART_SetConfig+0x1f8>
 800767e:	2b80      	cmp	r3, #128	@ 0x80
 8007680:	d814      	bhi.n	80076ac <UART_SetConfig+0x210>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <UART_SetConfig+0x1f0>
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d008      	beq.n	800769c <UART_SetConfig+0x200>
 800768a:	e00f      	b.n	80076ac <UART_SetConfig+0x210>
 800768c:	2300      	movs	r3, #0
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007692:	e042      	b.n	800771a <UART_SetConfig+0x27e>
 8007694:	2302      	movs	r3, #2
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769a:	e03e      	b.n	800771a <UART_SetConfig+0x27e>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a2:	e03a      	b.n	800771a <UART_SetConfig+0x27e>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e036      	b.n	800771a <UART_SetConfig+0x27e>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	e032      	b.n	800771a <UART_SetConfig+0x27e>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a30      	ldr	r2, [pc, #192]	@ (800777c <UART_SetConfig+0x2e0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d12a      	bne.n	8007714 <UART_SetConfig+0x278>
 80076be:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <UART_SetConfig+0x2e8>)
 80076c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076cc:	d01a      	beq.n	8007704 <UART_SetConfig+0x268>
 80076ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076d2:	d81b      	bhi.n	800770c <UART_SetConfig+0x270>
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d8:	d00c      	beq.n	80076f4 <UART_SetConfig+0x258>
 80076da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076de:	d815      	bhi.n	800770c <UART_SetConfig+0x270>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <UART_SetConfig+0x250>
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e8:	d008      	beq.n	80076fc <UART_SetConfig+0x260>
 80076ea:	e00f      	b.n	800770c <UART_SetConfig+0x270>
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f2:	e012      	b.n	800771a <UART_SetConfig+0x27e>
 80076f4:	2302      	movs	r3, #2
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fa:	e00e      	b.n	800771a <UART_SetConfig+0x27e>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007702:	e00a      	b.n	800771a <UART_SetConfig+0x27e>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e006      	b.n	800771a <UART_SetConfig+0x27e>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007712:	e002      	b.n	800771a <UART_SetConfig+0x27e>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a17      	ldr	r2, [pc, #92]	@ (800777c <UART_SetConfig+0x2e0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	f040 80a8 	bne.w	8007876 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007726:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800772a:	2b08      	cmp	r3, #8
 800772c:	d834      	bhi.n	8007798 <UART_SetConfig+0x2fc>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <UART_SetConfig+0x298>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007759 	.word	0x08007759
 8007738:	08007799 	.word	0x08007799
 800773c:	08007761 	.word	0x08007761
 8007740:	08007799 	.word	0x08007799
 8007744:	08007767 	.word	0x08007767
 8007748:	08007799 	.word	0x08007799
 800774c:	08007799 	.word	0x08007799
 8007750:	08007799 	.word	0x08007799
 8007754:	0800776f 	.word	0x0800776f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007758:	f7fe fd0c 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 800775c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800775e:	e021      	b.n	80077a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007760:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <UART_SetConfig+0x2f8>)
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007764:	e01e      	b.n	80077a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007766:	f7fe fc97 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800776a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800776c:	e01a      	b.n	80077a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007774:	e016      	b.n	80077a4 <UART_SetConfig+0x308>
 8007776:	bf00      	nop
 8007778:	cfff69f3 	.word	0xcfff69f3
 800777c:	40008000 	.word	0x40008000
 8007780:	40013800 	.word	0x40013800
 8007784:	40021000 	.word	0x40021000
 8007788:	40004400 	.word	0x40004400
 800778c:	40004800 	.word	0x40004800
 8007790:	40004c00 	.word	0x40004c00
 8007794:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 812a 	beq.w	8007a00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	4a9e      	ldr	r2, [pc, #632]	@ (8007a2c <UART_SetConfig+0x590>)
 80077b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80077be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d305      	bcc.n	80077dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d903      	bls.n	80077e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077e2:	e10d      	b.n	8007a00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	2200      	movs	r2, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	60fa      	str	r2, [r7, #12]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	4a8e      	ldr	r2, [pc, #568]	@ (8007a2c <UART_SetConfig+0x590>)
 80077f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2200      	movs	r2, #0
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007806:	f7f8 fd5b 	bl	80002c0 <__aeabi_uldivmod>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4610      	mov	r0, r2
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	020b      	lsls	r3, r1, #8
 800781c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007820:	0202      	lsls	r2, r0, #8
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	6849      	ldr	r1, [r1, #4]
 8007826:	0849      	lsrs	r1, r1, #1
 8007828:	2000      	movs	r0, #0
 800782a:	460c      	mov	r4, r1
 800782c:	4605      	mov	r5, r0
 800782e:	eb12 0804 	adds.w	r8, r2, r4
 8007832:	eb43 0905 	adc.w	r9, r3, r5
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	469a      	mov	sl, r3
 800783e:	4693      	mov	fp, r2
 8007840:	4652      	mov	r2, sl
 8007842:	465b      	mov	r3, fp
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f8 fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4613      	mov	r3, r2
 8007852:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800785a:	d308      	bcc.n	800786e <UART_SetConfig+0x3d2>
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007862:	d204      	bcs.n	800786e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	60da      	str	r2, [r3, #12]
 800786c:	e0c8      	b.n	8007a00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007874:	e0c4      	b.n	8007a00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800787e:	d167      	bne.n	8007950 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007880:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007884:	2b08      	cmp	r3, #8
 8007886:	d828      	bhi.n	80078da <UART_SetConfig+0x43e>
 8007888:	a201      	add	r2, pc, #4	@ (adr r2, 8007890 <UART_SetConfig+0x3f4>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b4:	f7fe fc5e 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 80078b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078ba:	e014      	b.n	80078e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fe fc70 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 80078c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078c2:	e010      	b.n	80078e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a30 <UART_SetConfig+0x594>)
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078c8:	e00d      	b.n	80078e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fe fbe5 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80078ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078d0:	e009      	b.n	80078e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078d8:	e005      	b.n	80078e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8089 	beq.w	8007a00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f2:	4a4e      	ldr	r2, [pc, #312]	@ (8007a2c <UART_SetConfig+0x590>)
 80078f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007900:	005a      	lsls	r2, r3, #1
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	441a      	add	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d916      	bls.n	8007948 <UART_SetConfig+0x4ac>
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007920:	d212      	bcs.n	8007948 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f023 030f 	bic.w	r3, r3, #15
 800792a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	b29a      	uxth	r2, r3
 8007938:	8bfb      	ldrh	r3, [r7, #30]
 800793a:	4313      	orrs	r3, r2
 800793c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	8bfa      	ldrh	r2, [r7, #30]
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	e05b      	b.n	8007a00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800794e:	e057      	b.n	8007a00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007950:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007954:	2b08      	cmp	r3, #8
 8007956:	d828      	bhi.n	80079aa <UART_SetConfig+0x50e>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <UART_SetConfig+0x4c4>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007985 	.word	0x08007985
 8007964:	0800798d 	.word	0x0800798d
 8007968:	08007995 	.word	0x08007995
 800796c:	080079ab 	.word	0x080079ab
 8007970:	0800799b 	.word	0x0800799b
 8007974:	080079ab 	.word	0x080079ab
 8007978:	080079ab 	.word	0x080079ab
 800797c:	080079ab 	.word	0x080079ab
 8007980:	080079a3 	.word	0x080079a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007984:	f7fe fbf6 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 8007988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800798a:	e014      	b.n	80079b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800798c:	f7fe fc08 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 8007990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007992:	e010      	b.n	80079b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007994:	4b26      	ldr	r3, [pc, #152]	@ (8007a30 <UART_SetConfig+0x594>)
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007998:	e00d      	b.n	80079b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800799a:	f7fe fb7d 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800799e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079a0:	e009      	b.n	80079b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079a8:	e005      	b.n	80079b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079b4:	bf00      	nop
    }

    if (pclk != 0U)
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d021      	beq.n	8007a00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	4a1a      	ldr	r2, [pc, #104]	@ (8007a2c <UART_SetConfig+0x590>)
 80079c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	441a      	add	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	fbb2 f3f3 	udiv	r3, r2, r3
 80079de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	d909      	bls.n	80079fa <UART_SetConfig+0x55e>
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ec:	d205      	bcs.n	80079fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
 80079f8:	e002      	b.n	8007a00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2200      	movs	r2, #0
 8007a14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3730      	adds	r7, #48	@ 0x30
 8007a24:	46bd      	mov	sp, r7
 8007a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08009440 	.word	0x08009440
 8007a30:	00f42400 	.word	0x00f42400

08007a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01a      	beq.n	8007b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b32:	d10a      	bne.n	8007b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b098      	sub	sp, #96	@ 0x60
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b88:	f7fc fb14 	bl	80041b4 <HAL_GetTick>
 8007b8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d12f      	bne.n	8007bfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f88e 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d022      	beq.n	8007bfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e6      	bne.n	8007bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e063      	b.n	8007cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d149      	bne.n	8007c9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c12:	2200      	movs	r2, #0
 8007c14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f857 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d03c      	beq.n	8007c9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	623b      	str	r3, [r7, #32]
   return(result);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c76:	61fa      	str	r2, [r7, #28]
 8007c78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	69b9      	ldr	r1, [r7, #24]
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	617b      	str	r3, [r7, #20]
   return(result);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e012      	b.n	8007cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3758      	adds	r7, #88	@ 0x58
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	e04f      	b.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ce4:	d04b      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fc fa65 	bl	80041b4 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e04e      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d037      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b80      	cmp	r3, #128	@ 0x80
 8007d12:	d034      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b40      	cmp	r3, #64	@ 0x40
 8007d18:	d031      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d110      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f838 	bl	8007da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e029      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d58:	d111      	bne.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f81e 	bl	8007da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e00f      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4013      	ands	r3, r2
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d0a0      	beq.n	8007cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b095      	sub	sp, #84	@ 0x54
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e6      	bne.n	8007dae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e3      	bne.n	8007de0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d118      	bne.n	8007e52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f023 0310 	bic.w	r3, r3, #16
 8007e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e66:	bf00      	nop
 8007e68:	3754      	adds	r7, #84	@ 0x54
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_UARTEx_EnableFifoMode+0x16>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e02b      	b.n	8007ee0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	@ 0x24
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007eb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007ebe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f8c3 	bl	8008054 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d101      	bne.n	8007efe <HAL_UARTEx_DisableFifoMode+0x16>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e027      	b.n	8007f4e <HAL_UARTEx_DisableFifoMode+0x66>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2224      	movs	r2, #36	@ 0x24
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e02d      	b.n	8007fce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2224      	movs	r2, #36	@ 0x24
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0201 	bic.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f850 	bl	8008054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e02d      	b.n	800804a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2224      	movs	r2, #36	@ 0x24
 8007ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f812 	bl	8008054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008060:	2b00      	cmp	r3, #0
 8008062:	d108      	bne.n	8008076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008074:	e031      	b.n	80080da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008076:	2308      	movs	r3, #8
 8008078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800807a:	2308      	movs	r3, #8
 800807c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0e5b      	lsrs	r3, r3, #25
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	0f5b      	lsrs	r3, r3, #29
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	7b3a      	ldrb	r2, [r7, #12]
 80080a2:	4911      	ldr	r1, [pc, #68]	@ (80080e8 <UARTEx_SetNbDataToProcess+0x94>)
 80080a4:	5c8a      	ldrb	r2, [r1, r2]
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080aa:	7b3a      	ldrb	r2, [r7, #12]
 80080ac:	490f      	ldr	r1, [pc, #60]	@ (80080ec <UARTEx_SetNbDataToProcess+0x98>)
 80080ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	7b7a      	ldrb	r2, [r7, #13]
 80080c0:	4909      	ldr	r1, [pc, #36]	@ (80080e8 <UARTEx_SetNbDataToProcess+0x94>)
 80080c2:	5c8a      	ldrb	r2, [r1, r2]
 80080c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080c8:	7b7a      	ldrb	r2, [r7, #13]
 80080ca:	4908      	ldr	r1, [pc, #32]	@ (80080ec <UARTEx_SetNbDataToProcess+0x98>)
 80080cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080da:	bf00      	nop
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	08009458 	.word	0x08009458
 80080ec:	08009460 	.word	0x08009460

080080f0 <_ZdlPvj>:
 80080f0:	f000 b81a 	b.w	8008128 <_ZdlPv>

080080f4 <_Znwj>:
 80080f4:	2801      	cmp	r0, #1
 80080f6:	bf38      	it	cc
 80080f8:	2001      	movcc	r0, #1
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4604      	mov	r4, r0
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f824 	bl	800814c <malloc>
 8008104:	b100      	cbz	r0, 8008108 <_Znwj+0x14>
 8008106:	bd10      	pop	{r4, pc}
 8008108:	f000 f810 	bl	800812c <_ZSt15get_new_handlerv>
 800810c:	b908      	cbnz	r0, 8008112 <_Znwj+0x1e>
 800810e:	f000 f815 	bl	800813c <abort>
 8008112:	4780      	blx	r0
 8008114:	e7f3      	b.n	80080fe <_Znwj+0xa>

08008116 <_ZSt17__throw_bad_allocv>:
 8008116:	b508      	push	{r3, lr}
 8008118:	f000 f810 	bl	800813c <abort>

0800811c <_ZSt28__throw_bad_array_new_lengthv>:
 800811c:	b508      	push	{r3, lr}
 800811e:	f000 f80d 	bl	800813c <abort>

08008122 <_ZSt20__throw_length_errorPKc>:
 8008122:	b508      	push	{r3, lr}
 8008124:	f000 f80a 	bl	800813c <abort>

08008128 <_ZdlPv>:
 8008128:	f000 b818 	b.w	800815c <free>

0800812c <_ZSt15get_new_handlerv>:
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <_ZSt15get_new_handlerv+0xc>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f3bf 8f5b 	dmb	ish
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000388 	.word	0x20000388

0800813c <abort>:
 800813c:	b508      	push	{r3, lr}
 800813e:	2006      	movs	r0, #6
 8008140:	f000 fb16 	bl	8008770 <raise>
 8008144:	2001      	movs	r0, #1
 8008146:	f7fb ff03 	bl	8003f50 <_exit>
	...

0800814c <malloc>:
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <malloc+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f000 b82d 	b.w	80081b0 <_malloc_r>
 8008156:	bf00      	nop
 8008158:	20000018 	.word	0x20000018

0800815c <free>:
 800815c:	4b02      	ldr	r3, [pc, #8]	@ (8008168 <free+0xc>)
 800815e:	4601      	mov	r1, r0
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	f000 bba5 	b.w	80088b0 <_free_r>
 8008166:	bf00      	nop
 8008168:	20000018 	.word	0x20000018

0800816c <sbrk_aligned>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4e0f      	ldr	r6, [pc, #60]	@ (80081ac <sbrk_aligned+0x40>)
 8008170:	460c      	mov	r4, r1
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	4605      	mov	r5, r0
 8008176:	b911      	cbnz	r1, 800817e <sbrk_aligned+0x12>
 8008178:	f000 fb4a 	bl	8008810 <_sbrk_r>
 800817c:	6030      	str	r0, [r6, #0]
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fb45 	bl	8008810 <_sbrk_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d103      	bne.n	8008192 <sbrk_aligned+0x26>
 800818a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800818e:	4620      	mov	r0, r4
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	1cc4      	adds	r4, r0, #3
 8008194:	f024 0403 	bic.w	r4, r4, #3
 8008198:	42a0      	cmp	r0, r4
 800819a:	d0f8      	beq.n	800818e <sbrk_aligned+0x22>
 800819c:	1a21      	subs	r1, r4, r0
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fb36 	bl	8008810 <_sbrk_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d1f2      	bne.n	800818e <sbrk_aligned+0x22>
 80081a8:	e7ef      	b.n	800818a <sbrk_aligned+0x1e>
 80081aa:	bf00      	nop
 80081ac:	2000038c 	.word	0x2000038c

080081b0 <_malloc_r>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	1ccd      	adds	r5, r1, #3
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	4606      	mov	r6, r0
 80081c6:	db01      	blt.n	80081cc <_malloc_r+0x1c>
 80081c8:	42a9      	cmp	r1, r5
 80081ca:	d904      	bls.n	80081d6 <_malloc_r+0x26>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082ac <_malloc_r+0xfc>
 80081da:	f000 f869 	bl	80082b0 <__malloc_lock>
 80081de:	f8d8 3000 	ldr.w	r3, [r8]
 80081e2:	461c      	mov	r4, r3
 80081e4:	bb44      	cbnz	r4, 8008238 <_malloc_r+0x88>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff ffbf 	bl	800816c <sbrk_aligned>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	4604      	mov	r4, r0
 80081f2:	d158      	bne.n	80082a6 <_malloc_r+0xf6>
 80081f4:	f8d8 4000 	ldr.w	r4, [r8]
 80081f8:	4627      	mov	r7, r4
 80081fa:	2f00      	cmp	r7, #0
 80081fc:	d143      	bne.n	8008286 <_malloc_r+0xd6>
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d04b      	beq.n	800829a <_malloc_r+0xea>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	4639      	mov	r1, r7
 8008206:	4630      	mov	r0, r6
 8008208:	eb04 0903 	add.w	r9, r4, r3
 800820c:	f000 fb00 	bl	8008810 <_sbrk_r>
 8008210:	4581      	cmp	r9, r0
 8008212:	d142      	bne.n	800829a <_malloc_r+0xea>
 8008214:	6821      	ldr	r1, [r4, #0]
 8008216:	1a6d      	subs	r5, r5, r1
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ffa6 	bl	800816c <sbrk_aligned>
 8008220:	3001      	adds	r0, #1
 8008222:	d03a      	beq.n	800829a <_malloc_r+0xea>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	442b      	add	r3, r5
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	f8d8 3000 	ldr.w	r3, [r8]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	bb62      	cbnz	r2, 800828c <_malloc_r+0xdc>
 8008232:	f8c8 7000 	str.w	r7, [r8]
 8008236:	e00f      	b.n	8008258 <_malloc_r+0xa8>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	1b52      	subs	r2, r2, r5
 800823c:	d420      	bmi.n	8008280 <_malloc_r+0xd0>
 800823e:	2a0b      	cmp	r2, #11
 8008240:	d917      	bls.n	8008272 <_malloc_r+0xc2>
 8008242:	1961      	adds	r1, r4, r5
 8008244:	42a3      	cmp	r3, r4
 8008246:	6025      	str	r5, [r4, #0]
 8008248:	bf18      	it	ne
 800824a:	6059      	strne	r1, [r3, #4]
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	bf08      	it	eq
 8008250:	f8c8 1000 	streq.w	r1, [r8]
 8008254:	5162      	str	r2, [r4, r5]
 8008256:	604b      	str	r3, [r1, #4]
 8008258:	4630      	mov	r0, r6
 800825a:	f000 f82f 	bl	80082bc <__malloc_unlock>
 800825e:	f104 000b 	add.w	r0, r4, #11
 8008262:	1d23      	adds	r3, r4, #4
 8008264:	f020 0007 	bic.w	r0, r0, #7
 8008268:	1ac2      	subs	r2, r0, r3
 800826a:	bf1c      	itt	ne
 800826c:	1a1b      	subne	r3, r3, r0
 800826e:	50a3      	strne	r3, [r4, r2]
 8008270:	e7af      	b.n	80081d2 <_malloc_r+0x22>
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	42a3      	cmp	r3, r4
 8008276:	bf0c      	ite	eq
 8008278:	f8c8 2000 	streq.w	r2, [r8]
 800827c:	605a      	strne	r2, [r3, #4]
 800827e:	e7eb      	b.n	8008258 <_malloc_r+0xa8>
 8008280:	4623      	mov	r3, r4
 8008282:	6864      	ldr	r4, [r4, #4]
 8008284:	e7ae      	b.n	80081e4 <_malloc_r+0x34>
 8008286:	463c      	mov	r4, r7
 8008288:	687f      	ldr	r7, [r7, #4]
 800828a:	e7b6      	b.n	80081fa <_malloc_r+0x4a>
 800828c:	461a      	mov	r2, r3
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	42a3      	cmp	r3, r4
 8008292:	d1fb      	bne.n	800828c <_malloc_r+0xdc>
 8008294:	2300      	movs	r3, #0
 8008296:	6053      	str	r3, [r2, #4]
 8008298:	e7de      	b.n	8008258 <_malloc_r+0xa8>
 800829a:	230c      	movs	r3, #12
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 f80c 	bl	80082bc <__malloc_unlock>
 80082a4:	e794      	b.n	80081d0 <_malloc_r+0x20>
 80082a6:	6005      	str	r5, [r0, #0]
 80082a8:	e7d6      	b.n	8008258 <_malloc_r+0xa8>
 80082aa:	bf00      	nop
 80082ac:	20000390 	.word	0x20000390

080082b0 <__malloc_lock>:
 80082b0:	4801      	ldr	r0, [pc, #4]	@ (80082b8 <__malloc_lock+0x8>)
 80082b2:	f000 bafa 	b.w	80088aa <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	200004d4 	.word	0x200004d4

080082bc <__malloc_unlock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	@ (80082c4 <__malloc_unlock+0x8>)
 80082be:	f000 baf5 	b.w	80088ac <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	200004d4 	.word	0x200004d4

080082c8 <std>:
 80082c8:	2300      	movs	r3, #0
 80082ca:	b510      	push	{r4, lr}
 80082cc:	4604      	mov	r4, r0
 80082ce:	e9c0 3300 	strd	r3, r3, [r0]
 80082d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082d6:	6083      	str	r3, [r0, #8]
 80082d8:	8181      	strh	r1, [r0, #12]
 80082da:	6643      	str	r3, [r0, #100]	@ 0x64
 80082dc:	81c2      	strh	r2, [r0, #14]
 80082de:	6183      	str	r3, [r0, #24]
 80082e0:	4619      	mov	r1, r3
 80082e2:	2208      	movs	r2, #8
 80082e4:	305c      	adds	r0, #92	@ 0x5c
 80082e6:	f000 fa13 	bl	8008710 <memset>
 80082ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008320 <std+0x58>)
 80082ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80082ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <std+0x5c>)
 80082f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <std+0x60>)
 80082f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <std+0x64>)
 80082f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <std+0x68>)
 80082fc:	6224      	str	r4, [r4, #32]
 80082fe:	429c      	cmp	r4, r3
 8008300:	d006      	beq.n	8008310 <std+0x48>
 8008302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008306:	4294      	cmp	r4, r2
 8008308:	d002      	beq.n	8008310 <std+0x48>
 800830a:	33d0      	adds	r3, #208	@ 0xd0
 800830c:	429c      	cmp	r4, r3
 800830e:	d105      	bne.n	800831c <std+0x54>
 8008310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	f000 bac6 	b.w	80088a8 <__retarget_lock_init_recursive>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	bf00      	nop
 8008320:	0800852d 	.word	0x0800852d
 8008324:	0800854f 	.word	0x0800854f
 8008328:	08008587 	.word	0x08008587
 800832c:	080085ab 	.word	0x080085ab
 8008330:	20000394 	.word	0x20000394

08008334 <stdio_exit_handler>:
 8008334:	4a02      	ldr	r2, [pc, #8]	@ (8008340 <stdio_exit_handler+0xc>)
 8008336:	4903      	ldr	r1, [pc, #12]	@ (8008344 <stdio_exit_handler+0x10>)
 8008338:	4803      	ldr	r0, [pc, #12]	@ (8008348 <stdio_exit_handler+0x14>)
 800833a:	f000 b869 	b.w	8008410 <_fwalk_sglue>
 800833e:	bf00      	nop
 8008340:	2000000c 	.word	0x2000000c
 8008344:	08008fed 	.word	0x08008fed
 8008348:	2000001c 	.word	0x2000001c

0800834c <cleanup_stdio>:
 800834c:	6841      	ldr	r1, [r0, #4]
 800834e:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <cleanup_stdio+0x34>)
 8008350:	4299      	cmp	r1, r3
 8008352:	b510      	push	{r4, lr}
 8008354:	4604      	mov	r4, r0
 8008356:	d001      	beq.n	800835c <cleanup_stdio+0x10>
 8008358:	f000 fe48 	bl	8008fec <_fflush_r>
 800835c:	68a1      	ldr	r1, [r4, #8]
 800835e:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <cleanup_stdio+0x38>)
 8008360:	4299      	cmp	r1, r3
 8008362:	d002      	beq.n	800836a <cleanup_stdio+0x1e>
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fe41 	bl	8008fec <_fflush_r>
 800836a:	68e1      	ldr	r1, [r4, #12]
 800836c:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <cleanup_stdio+0x3c>)
 800836e:	4299      	cmp	r1, r3
 8008370:	d004      	beq.n	800837c <cleanup_stdio+0x30>
 8008372:	4620      	mov	r0, r4
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008378:	f000 be38 	b.w	8008fec <_fflush_r>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	bf00      	nop
 8008380:	20000394 	.word	0x20000394
 8008384:	200003fc 	.word	0x200003fc
 8008388:	20000464 	.word	0x20000464

0800838c <global_stdio_init.part.0>:
 800838c:	b510      	push	{r4, lr}
 800838e:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <global_stdio_init.part.0+0x30>)
 8008390:	4c0b      	ldr	r4, [pc, #44]	@ (80083c0 <global_stdio_init.part.0+0x34>)
 8008392:	4a0c      	ldr	r2, [pc, #48]	@ (80083c4 <global_stdio_init.part.0+0x38>)
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	4620      	mov	r0, r4
 8008398:	2200      	movs	r2, #0
 800839a:	2104      	movs	r1, #4
 800839c:	f7ff ff94 	bl	80082c8 <std>
 80083a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083a4:	2201      	movs	r2, #1
 80083a6:	2109      	movs	r1, #9
 80083a8:	f7ff ff8e 	bl	80082c8 <std>
 80083ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083b0:	2202      	movs	r2, #2
 80083b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b6:	2112      	movs	r1, #18
 80083b8:	f7ff bf86 	b.w	80082c8 <std>
 80083bc:	200004cc 	.word	0x200004cc
 80083c0:	20000394 	.word	0x20000394
 80083c4:	08008335 	.word	0x08008335

080083c8 <__sfp_lock_acquire>:
 80083c8:	4801      	ldr	r0, [pc, #4]	@ (80083d0 <__sfp_lock_acquire+0x8>)
 80083ca:	f000 ba6e 	b.w	80088aa <__retarget_lock_acquire_recursive>
 80083ce:	bf00      	nop
 80083d0:	200004d5 	.word	0x200004d5

080083d4 <__sfp_lock_release>:
 80083d4:	4801      	ldr	r0, [pc, #4]	@ (80083dc <__sfp_lock_release+0x8>)
 80083d6:	f000 ba69 	b.w	80088ac <__retarget_lock_release_recursive>
 80083da:	bf00      	nop
 80083dc:	200004d5 	.word	0x200004d5

080083e0 <__sinit>:
 80083e0:	b510      	push	{r4, lr}
 80083e2:	4604      	mov	r4, r0
 80083e4:	f7ff fff0 	bl	80083c8 <__sfp_lock_acquire>
 80083e8:	6a23      	ldr	r3, [r4, #32]
 80083ea:	b11b      	cbz	r3, 80083f4 <__sinit+0x14>
 80083ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f0:	f7ff bff0 	b.w	80083d4 <__sfp_lock_release>
 80083f4:	4b04      	ldr	r3, [pc, #16]	@ (8008408 <__sinit+0x28>)
 80083f6:	6223      	str	r3, [r4, #32]
 80083f8:	4b04      	ldr	r3, [pc, #16]	@ (800840c <__sinit+0x2c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f5      	bne.n	80083ec <__sinit+0xc>
 8008400:	f7ff ffc4 	bl	800838c <global_stdio_init.part.0>
 8008404:	e7f2      	b.n	80083ec <__sinit+0xc>
 8008406:	bf00      	nop
 8008408:	0800834d 	.word	0x0800834d
 800840c:	200004cc 	.word	0x200004cc

08008410 <_fwalk_sglue>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	4607      	mov	r7, r0
 8008416:	4688      	mov	r8, r1
 8008418:	4614      	mov	r4, r2
 800841a:	2600      	movs	r6, #0
 800841c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008420:	f1b9 0901 	subs.w	r9, r9, #1
 8008424:	d505      	bpl.n	8008432 <_fwalk_sglue+0x22>
 8008426:	6824      	ldr	r4, [r4, #0]
 8008428:	2c00      	cmp	r4, #0
 800842a:	d1f7      	bne.n	800841c <_fwalk_sglue+0xc>
 800842c:	4630      	mov	r0, r6
 800842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d907      	bls.n	8008448 <_fwalk_sglue+0x38>
 8008438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800843c:	3301      	adds	r3, #1
 800843e:	d003      	beq.n	8008448 <_fwalk_sglue+0x38>
 8008440:	4629      	mov	r1, r5
 8008442:	4638      	mov	r0, r7
 8008444:	47c0      	blx	r8
 8008446:	4306      	orrs	r6, r0
 8008448:	3568      	adds	r5, #104	@ 0x68
 800844a:	e7e9      	b.n	8008420 <_fwalk_sglue+0x10>

0800844c <iprintf>:
 800844c:	b40f      	push	{r0, r1, r2, r3}
 800844e:	b507      	push	{r0, r1, r2, lr}
 8008450:	4906      	ldr	r1, [pc, #24]	@ (800846c <iprintf+0x20>)
 8008452:	ab04      	add	r3, sp, #16
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	f853 2b04 	ldr.w	r2, [r3], #4
 800845a:	6881      	ldr	r1, [r0, #8]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f000 fa9b 	bl	8008998 <_vfiprintf_r>
 8008462:	b003      	add	sp, #12
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b004      	add	sp, #16
 800846a:	4770      	bx	lr
 800846c:	20000018 	.word	0x20000018

08008470 <_puts_r>:
 8008470:	6a03      	ldr	r3, [r0, #32]
 8008472:	b570      	push	{r4, r5, r6, lr}
 8008474:	6884      	ldr	r4, [r0, #8]
 8008476:	4605      	mov	r5, r0
 8008478:	460e      	mov	r6, r1
 800847a:	b90b      	cbnz	r3, 8008480 <_puts_r+0x10>
 800847c:	f7ff ffb0 	bl	80083e0 <__sinit>
 8008480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008482:	07db      	lsls	r3, r3, #31
 8008484:	d405      	bmi.n	8008492 <_puts_r+0x22>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	0598      	lsls	r0, r3, #22
 800848a:	d402      	bmi.n	8008492 <_puts_r+0x22>
 800848c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800848e:	f000 fa0c 	bl	80088aa <__retarget_lock_acquire_recursive>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	0719      	lsls	r1, r3, #28
 8008496:	d502      	bpl.n	800849e <_puts_r+0x2e>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d135      	bne.n	800850a <_puts_r+0x9a>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f8c5 	bl	8008630 <__swsetup_r>
 80084a6:	b380      	cbz	r0, 800850a <_puts_r+0x9a>
 80084a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80084ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084ae:	07da      	lsls	r2, r3, #31
 80084b0:	d405      	bmi.n	80084be <_puts_r+0x4e>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	059b      	lsls	r3, r3, #22
 80084b6:	d402      	bmi.n	80084be <_puts_r+0x4e>
 80084b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ba:	f000 f9f7 	bl	80088ac <__retarget_lock_release_recursive>
 80084be:	4628      	mov	r0, r5
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da04      	bge.n	80084d0 <_puts_r+0x60>
 80084c6:	69a2      	ldr	r2, [r4, #24]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	dc17      	bgt.n	80084fc <_puts_r+0x8c>
 80084cc:	290a      	cmp	r1, #10
 80084ce:	d015      	beq.n	80084fc <_puts_r+0x8c>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	6022      	str	r2, [r4, #0]
 80084d6:	7019      	strb	r1, [r3, #0]
 80084d8:	68a3      	ldr	r3, [r4, #8]
 80084da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084de:	3b01      	subs	r3, #1
 80084e0:	60a3      	str	r3, [r4, #8]
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d1ed      	bne.n	80084c2 <_puts_r+0x52>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	da11      	bge.n	800850e <_puts_r+0x9e>
 80084ea:	4622      	mov	r2, r4
 80084ec:	210a      	movs	r1, #10
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f85f 	bl	80085b2 <__swbuf_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d0d7      	beq.n	80084a8 <_puts_r+0x38>
 80084f8:	250a      	movs	r5, #10
 80084fa:	e7d7      	b.n	80084ac <_puts_r+0x3c>
 80084fc:	4622      	mov	r2, r4
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 f857 	bl	80085b2 <__swbuf_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d1e7      	bne.n	80084d8 <_puts_r+0x68>
 8008508:	e7ce      	b.n	80084a8 <_puts_r+0x38>
 800850a:	3e01      	subs	r6, #1
 800850c:	e7e4      	b.n	80084d8 <_puts_r+0x68>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	220a      	movs	r2, #10
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	e7ee      	b.n	80084f8 <_puts_r+0x88>
	...

0800851c <puts>:
 800851c:	4b02      	ldr	r3, [pc, #8]	@ (8008528 <puts+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f7ff bfa5 	b.w	8008470 <_puts_r>
 8008526:	bf00      	nop
 8008528:	20000018 	.word	0x20000018

0800852c <__sread>:
 800852c:	b510      	push	{r4, lr}
 800852e:	460c      	mov	r4, r1
 8008530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008534:	f000 f946 	bl	80087c4 <_read_r>
 8008538:	2800      	cmp	r0, #0
 800853a:	bfab      	itete	ge
 800853c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800853e:	89a3      	ldrhlt	r3, [r4, #12]
 8008540:	181b      	addge	r3, r3, r0
 8008542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008546:	bfac      	ite	ge
 8008548:	6563      	strge	r3, [r4, #84]	@ 0x54
 800854a:	81a3      	strhlt	r3, [r4, #12]
 800854c:	bd10      	pop	{r4, pc}

0800854e <__swrite>:
 800854e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008552:	461f      	mov	r7, r3
 8008554:	898b      	ldrh	r3, [r1, #12]
 8008556:	05db      	lsls	r3, r3, #23
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	4616      	mov	r6, r2
 800855e:	d505      	bpl.n	800856c <__swrite+0x1e>
 8008560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008564:	2302      	movs	r3, #2
 8008566:	2200      	movs	r2, #0
 8008568:	f000 f91a 	bl	80087a0 <_lseek_r>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008572:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	4632      	mov	r2, r6
 800857a:	463b      	mov	r3, r7
 800857c:	4628      	mov	r0, r5
 800857e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008582:	f000 b955 	b.w	8008830 <_write_r>

08008586 <__sseek>:
 8008586:	b510      	push	{r4, lr}
 8008588:	460c      	mov	r4, r1
 800858a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858e:	f000 f907 	bl	80087a0 <_lseek_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	bf15      	itete	ne
 8008598:	6560      	strne	r0, [r4, #84]	@ 0x54
 800859a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800859e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085a2:	81a3      	strheq	r3, [r4, #12]
 80085a4:	bf18      	it	ne
 80085a6:	81a3      	strhne	r3, [r4, #12]
 80085a8:	bd10      	pop	{r4, pc}

080085aa <__sclose>:
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	f000 b8e7 	b.w	8008780 <_close_r>

080085b2 <__swbuf_r>:
 80085b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b4:	460e      	mov	r6, r1
 80085b6:	4614      	mov	r4, r2
 80085b8:	4605      	mov	r5, r0
 80085ba:	b118      	cbz	r0, 80085c4 <__swbuf_r+0x12>
 80085bc:	6a03      	ldr	r3, [r0, #32]
 80085be:	b90b      	cbnz	r3, 80085c4 <__swbuf_r+0x12>
 80085c0:	f7ff ff0e 	bl	80083e0 <__sinit>
 80085c4:	69a3      	ldr	r3, [r4, #24]
 80085c6:	60a3      	str	r3, [r4, #8]
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	071a      	lsls	r2, r3, #28
 80085cc:	d501      	bpl.n	80085d2 <__swbuf_r+0x20>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	b943      	cbnz	r3, 80085e4 <__swbuf_r+0x32>
 80085d2:	4621      	mov	r1, r4
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f82b 	bl	8008630 <__swsetup_r>
 80085da:	b118      	cbz	r0, 80085e4 <__swbuf_r+0x32>
 80085dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80085e0:	4638      	mov	r0, r7
 80085e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	6922      	ldr	r2, [r4, #16]
 80085e8:	1a98      	subs	r0, r3, r2
 80085ea:	6963      	ldr	r3, [r4, #20]
 80085ec:	b2f6      	uxtb	r6, r6
 80085ee:	4283      	cmp	r3, r0
 80085f0:	4637      	mov	r7, r6
 80085f2:	dc05      	bgt.n	8008600 <__swbuf_r+0x4e>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fcf8 	bl	8008fec <_fflush_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1ed      	bne.n	80085dc <__swbuf_r+0x2a>
 8008600:	68a3      	ldr	r3, [r4, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	60a3      	str	r3, [r4, #8]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	6022      	str	r2, [r4, #0]
 800860c:	701e      	strb	r6, [r3, #0]
 800860e:	6962      	ldr	r2, [r4, #20]
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	429a      	cmp	r2, r3
 8008614:	d004      	beq.n	8008620 <__swbuf_r+0x6e>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	07db      	lsls	r3, r3, #31
 800861a:	d5e1      	bpl.n	80085e0 <__swbuf_r+0x2e>
 800861c:	2e0a      	cmp	r6, #10
 800861e:	d1df      	bne.n	80085e0 <__swbuf_r+0x2e>
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fce2 	bl	8008fec <_fflush_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	d0d9      	beq.n	80085e0 <__swbuf_r+0x2e>
 800862c:	e7d6      	b.n	80085dc <__swbuf_r+0x2a>
	...

08008630 <__swsetup_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4b29      	ldr	r3, [pc, #164]	@ (80086d8 <__swsetup_r+0xa8>)
 8008634:	4605      	mov	r5, r0
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	460c      	mov	r4, r1
 800863a:	b118      	cbz	r0, 8008644 <__swsetup_r+0x14>
 800863c:	6a03      	ldr	r3, [r0, #32]
 800863e:	b90b      	cbnz	r3, 8008644 <__swsetup_r+0x14>
 8008640:	f7ff fece 	bl	80083e0 <__sinit>
 8008644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008648:	0719      	lsls	r1, r3, #28
 800864a:	d422      	bmi.n	8008692 <__swsetup_r+0x62>
 800864c:	06da      	lsls	r2, r3, #27
 800864e:	d407      	bmi.n	8008660 <__swsetup_r+0x30>
 8008650:	2209      	movs	r2, #9
 8008652:	602a      	str	r2, [r5, #0]
 8008654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800865e:	e033      	b.n	80086c8 <__swsetup_r+0x98>
 8008660:	0758      	lsls	r0, r3, #29
 8008662:	d512      	bpl.n	800868a <__swsetup_r+0x5a>
 8008664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008666:	b141      	cbz	r1, 800867a <__swsetup_r+0x4a>
 8008668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800866c:	4299      	cmp	r1, r3
 800866e:	d002      	beq.n	8008676 <__swsetup_r+0x46>
 8008670:	4628      	mov	r0, r5
 8008672:	f000 f91d 	bl	80088b0 <_free_r>
 8008676:	2300      	movs	r3, #0
 8008678:	6363      	str	r3, [r4, #52]	@ 0x34
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	2300      	movs	r3, #0
 8008684:	6063      	str	r3, [r4, #4]
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f043 0308 	orr.w	r3, r3, #8
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	b94b      	cbnz	r3, 80086aa <__swsetup_r+0x7a>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800869c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a0:	d003      	beq.n	80086aa <__swsetup_r+0x7a>
 80086a2:	4621      	mov	r1, r4
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 fcef 	bl	8009088 <__smakebuf_r>
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	f013 0201 	ands.w	r2, r3, #1
 80086b2:	d00a      	beq.n	80086ca <__swsetup_r+0x9a>
 80086b4:	2200      	movs	r2, #0
 80086b6:	60a2      	str	r2, [r4, #8]
 80086b8:	6962      	ldr	r2, [r4, #20]
 80086ba:	4252      	negs	r2, r2
 80086bc:	61a2      	str	r2, [r4, #24]
 80086be:	6922      	ldr	r2, [r4, #16]
 80086c0:	b942      	cbnz	r2, 80086d4 <__swsetup_r+0xa4>
 80086c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086c6:	d1c5      	bne.n	8008654 <__swsetup_r+0x24>
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
 80086ca:	0799      	lsls	r1, r3, #30
 80086cc:	bf58      	it	pl
 80086ce:	6962      	ldrpl	r2, [r4, #20]
 80086d0:	60a2      	str	r2, [r4, #8]
 80086d2:	e7f4      	b.n	80086be <__swsetup_r+0x8e>
 80086d4:	2000      	movs	r0, #0
 80086d6:	e7f7      	b.n	80086c8 <__swsetup_r+0x98>
 80086d8:	20000018 	.word	0x20000018

080086dc <memmove>:
 80086dc:	4288      	cmp	r0, r1
 80086de:	b510      	push	{r4, lr}
 80086e0:	eb01 0402 	add.w	r4, r1, r2
 80086e4:	d902      	bls.n	80086ec <memmove+0x10>
 80086e6:	4284      	cmp	r4, r0
 80086e8:	4623      	mov	r3, r4
 80086ea:	d807      	bhi.n	80086fc <memmove+0x20>
 80086ec:	1e43      	subs	r3, r0, #1
 80086ee:	42a1      	cmp	r1, r4
 80086f0:	d008      	beq.n	8008704 <memmove+0x28>
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086fa:	e7f8      	b.n	80086ee <memmove+0x12>
 80086fc:	4402      	add	r2, r0
 80086fe:	4601      	mov	r1, r0
 8008700:	428a      	cmp	r2, r1
 8008702:	d100      	bne.n	8008706 <memmove+0x2a>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800870a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800870e:	e7f7      	b.n	8008700 <memmove+0x24>

08008710 <memset>:
 8008710:	4402      	add	r2, r0
 8008712:	4603      	mov	r3, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <_raise_r>:
 8008720:	291f      	cmp	r1, #31
 8008722:	b538      	push	{r3, r4, r5, lr}
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
 8008728:	d904      	bls.n	8008734 <_raise_r+0x14>
 800872a:	2316      	movs	r3, #22
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008736:	b112      	cbz	r2, 800873e <_raise_r+0x1e>
 8008738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800873c:	b94b      	cbnz	r3, 8008752 <_raise_r+0x32>
 800873e:	4628      	mov	r0, r5
 8008740:	f000 f864 	bl	800880c <_getpid_r>
 8008744:	4622      	mov	r2, r4
 8008746:	4601      	mov	r1, r0
 8008748:	4628      	mov	r0, r5
 800874a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874e:	f000 b84b 	b.w	80087e8 <_kill_r>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00a      	beq.n	800876c <_raise_r+0x4c>
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	d103      	bne.n	8008762 <_raise_r+0x42>
 800875a:	2316      	movs	r3, #22
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	2001      	movs	r0, #1
 8008760:	e7e7      	b.n	8008732 <_raise_r+0x12>
 8008762:	2100      	movs	r1, #0
 8008764:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008768:	4620      	mov	r0, r4
 800876a:	4798      	blx	r3
 800876c:	2000      	movs	r0, #0
 800876e:	e7e0      	b.n	8008732 <_raise_r+0x12>

08008770 <raise>:
 8008770:	4b02      	ldr	r3, [pc, #8]	@ (800877c <raise+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f7ff bfd3 	b.w	8008720 <_raise_r>
 800877a:	bf00      	nop
 800877c:	20000018 	.word	0x20000018

08008780 <_close_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d06      	ldr	r5, [pc, #24]	@ (800879c <_close_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f7fb fc08 	bl	8003fa0 <_close>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_close_r+0x1a>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_close_r+0x1a>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	200004d0 	.word	0x200004d0

080087a0 <_lseek_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4d07      	ldr	r5, [pc, #28]	@ (80087c0 <_lseek_r+0x20>)
 80087a4:	4604      	mov	r4, r0
 80087a6:	4608      	mov	r0, r1
 80087a8:	4611      	mov	r1, r2
 80087aa:	2200      	movs	r2, #0
 80087ac:	602a      	str	r2, [r5, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	f7fb fc1d 	bl	8003fee <_lseek>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_lseek_r+0x1e>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_lseek_r+0x1e>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	200004d0 	.word	0x200004d0

080087c4 <_read_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	@ (80087e4 <_read_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7fb fbc7 	bl	8003f66 <_read>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_read_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_read_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	200004d0 	.word	0x200004d0

080087e8 <_kill_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	@ (8008808 <_kill_r+0x20>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	f7fb fb9b 	bl	8003f30 <_kill>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	d102      	bne.n	8008804 <_kill_r+0x1c>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	b103      	cbz	r3, 8008804 <_kill_r+0x1c>
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	bd38      	pop	{r3, r4, r5, pc}
 8008806:	bf00      	nop
 8008808:	200004d0 	.word	0x200004d0

0800880c <_getpid_r>:
 800880c:	f7fb bb88 	b.w	8003f20 <_getpid>

08008810 <_sbrk_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	@ (800882c <_sbrk_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7fb fbf4 	bl	8004008 <_sbrk>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_sbrk_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_sbrk_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200004d0 	.word	0x200004d0

08008830 <_write_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	@ (8008850 <_write_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7f8 ff0a 	bl	8001658 <_write>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_write_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_write_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200004d0 	.word	0x200004d0

08008854 <__errno>:
 8008854:	4b01      	ldr	r3, [pc, #4]	@ (800885c <__errno+0x8>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20000018 	.word	0x20000018

08008860 <__libc_init_array>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4d0d      	ldr	r5, [pc, #52]	@ (8008898 <__libc_init_array+0x38>)
 8008864:	4c0d      	ldr	r4, [pc, #52]	@ (800889c <__libc_init_array+0x3c>)
 8008866:	1b64      	subs	r4, r4, r5
 8008868:	10a4      	asrs	r4, r4, #2
 800886a:	2600      	movs	r6, #0
 800886c:	42a6      	cmp	r6, r4
 800886e:	d109      	bne.n	8008884 <__libc_init_array+0x24>
 8008870:	4d0b      	ldr	r5, [pc, #44]	@ (80088a0 <__libc_init_array+0x40>)
 8008872:	4c0c      	ldr	r4, [pc, #48]	@ (80088a4 <__libc_init_array+0x44>)
 8008874:	f000 fc66 	bl	8009144 <_init>
 8008878:	1b64      	subs	r4, r4, r5
 800887a:	10a4      	asrs	r4, r4, #2
 800887c:	2600      	movs	r6, #0
 800887e:	42a6      	cmp	r6, r4
 8008880:	d105      	bne.n	800888e <__libc_init_array+0x2e>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	f855 3b04 	ldr.w	r3, [r5], #4
 8008888:	4798      	blx	r3
 800888a:	3601      	adds	r6, #1
 800888c:	e7ee      	b.n	800886c <__libc_init_array+0xc>
 800888e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008892:	4798      	blx	r3
 8008894:	3601      	adds	r6, #1
 8008896:	e7f2      	b.n	800887e <__libc_init_array+0x1e>
 8008898:	080094a4 	.word	0x080094a4
 800889c:	080094a4 	.word	0x080094a4
 80088a0:	080094a4 	.word	0x080094a4
 80088a4:	080094ac 	.word	0x080094ac

080088a8 <__retarget_lock_init_recursive>:
 80088a8:	4770      	bx	lr

080088aa <__retarget_lock_acquire_recursive>:
 80088aa:	4770      	bx	lr

080088ac <__retarget_lock_release_recursive>:
 80088ac:	4770      	bx	lr
	...

080088b0 <_free_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4605      	mov	r5, r0
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d041      	beq.n	800893c <_free_r+0x8c>
 80088b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088bc:	1f0c      	subs	r4, r1, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfb8      	it	lt
 80088c2:	18e4      	addlt	r4, r4, r3
 80088c4:	f7ff fcf4 	bl	80082b0 <__malloc_lock>
 80088c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <_free_r+0x90>)
 80088ca:	6813      	ldr	r3, [r2, #0]
 80088cc:	b933      	cbnz	r3, 80088dc <_free_r+0x2c>
 80088ce:	6063      	str	r3, [r4, #4]
 80088d0:	6014      	str	r4, [r2, #0]
 80088d2:	4628      	mov	r0, r5
 80088d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d8:	f7ff bcf0 	b.w	80082bc <__malloc_unlock>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d908      	bls.n	80088f2 <_free_r+0x42>
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	1821      	adds	r1, r4, r0
 80088e4:	428b      	cmp	r3, r1
 80088e6:	bf01      	itttt	eq
 80088e8:	6819      	ldreq	r1, [r3, #0]
 80088ea:	685b      	ldreq	r3, [r3, #4]
 80088ec:	1809      	addeq	r1, r1, r0
 80088ee:	6021      	streq	r1, [r4, #0]
 80088f0:	e7ed      	b.n	80088ce <_free_r+0x1e>
 80088f2:	461a      	mov	r2, r3
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	b10b      	cbz	r3, 80088fc <_free_r+0x4c>
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d9fa      	bls.n	80088f2 <_free_r+0x42>
 80088fc:	6811      	ldr	r1, [r2, #0]
 80088fe:	1850      	adds	r0, r2, r1
 8008900:	42a0      	cmp	r0, r4
 8008902:	d10b      	bne.n	800891c <_free_r+0x6c>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	4401      	add	r1, r0
 8008908:	1850      	adds	r0, r2, r1
 800890a:	4283      	cmp	r3, r0
 800890c:	6011      	str	r1, [r2, #0]
 800890e:	d1e0      	bne.n	80088d2 <_free_r+0x22>
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	6053      	str	r3, [r2, #4]
 8008916:	4408      	add	r0, r1
 8008918:	6010      	str	r0, [r2, #0]
 800891a:	e7da      	b.n	80088d2 <_free_r+0x22>
 800891c:	d902      	bls.n	8008924 <_free_r+0x74>
 800891e:	230c      	movs	r3, #12
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	e7d6      	b.n	80088d2 <_free_r+0x22>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	1821      	adds	r1, r4, r0
 8008928:	428b      	cmp	r3, r1
 800892a:	bf04      	itt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	bf04      	itt	eq
 8008934:	1809      	addeq	r1, r1, r0
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	6054      	str	r4, [r2, #4]
 800893a:	e7ca      	b.n	80088d2 <_free_r+0x22>
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	20000390 	.word	0x20000390

08008944 <__sfputc_r>:
 8008944:	6893      	ldr	r3, [r2, #8]
 8008946:	3b01      	subs	r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	b410      	push	{r4}
 800894c:	6093      	str	r3, [r2, #8]
 800894e:	da08      	bge.n	8008962 <__sfputc_r+0x1e>
 8008950:	6994      	ldr	r4, [r2, #24]
 8008952:	42a3      	cmp	r3, r4
 8008954:	db01      	blt.n	800895a <__sfputc_r+0x16>
 8008956:	290a      	cmp	r1, #10
 8008958:	d103      	bne.n	8008962 <__sfputc_r+0x1e>
 800895a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800895e:	f7ff be28 	b.w	80085b2 <__swbuf_r>
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	1c58      	adds	r0, r3, #1
 8008966:	6010      	str	r0, [r2, #0]
 8008968:	7019      	strb	r1, [r3, #0]
 800896a:	4608      	mov	r0, r1
 800896c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008970:	4770      	bx	lr

08008972 <__sfputs_r>:
 8008972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008974:	4606      	mov	r6, r0
 8008976:	460f      	mov	r7, r1
 8008978:	4614      	mov	r4, r2
 800897a:	18d5      	adds	r5, r2, r3
 800897c:	42ac      	cmp	r4, r5
 800897e:	d101      	bne.n	8008984 <__sfputs_r+0x12>
 8008980:	2000      	movs	r0, #0
 8008982:	e007      	b.n	8008994 <__sfputs_r+0x22>
 8008984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008988:	463a      	mov	r2, r7
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffda 	bl	8008944 <__sfputc_r>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d1f3      	bne.n	800897c <__sfputs_r+0xa>
 8008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008998 <_vfiprintf_r>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	460d      	mov	r5, r1
 800899e:	b09d      	sub	sp, #116	@ 0x74
 80089a0:	4614      	mov	r4, r2
 80089a2:	4698      	mov	r8, r3
 80089a4:	4606      	mov	r6, r0
 80089a6:	b118      	cbz	r0, 80089b0 <_vfiprintf_r+0x18>
 80089a8:	6a03      	ldr	r3, [r0, #32]
 80089aa:	b90b      	cbnz	r3, 80089b0 <_vfiprintf_r+0x18>
 80089ac:	f7ff fd18 	bl	80083e0 <__sinit>
 80089b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089b2:	07d9      	lsls	r1, r3, #31
 80089b4:	d405      	bmi.n	80089c2 <_vfiprintf_r+0x2a>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	059a      	lsls	r2, r3, #22
 80089ba:	d402      	bmi.n	80089c2 <_vfiprintf_r+0x2a>
 80089bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089be:	f7ff ff74 	bl	80088aa <__retarget_lock_acquire_recursive>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	071b      	lsls	r3, r3, #28
 80089c6:	d501      	bpl.n	80089cc <_vfiprintf_r+0x34>
 80089c8:	692b      	ldr	r3, [r5, #16]
 80089ca:	b99b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x5c>
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff fe2e 	bl	8008630 <__swsetup_r>
 80089d4:	b170      	cbz	r0, 80089f4 <_vfiprintf_r+0x5c>
 80089d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089d8:	07dc      	lsls	r4, r3, #31
 80089da:	d504      	bpl.n	80089e6 <_vfiprintf_r+0x4e>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e0:	b01d      	add	sp, #116	@ 0x74
 80089e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	0598      	lsls	r0, r3, #22
 80089ea:	d4f7      	bmi.n	80089dc <_vfiprintf_r+0x44>
 80089ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089ee:	f7ff ff5d 	bl	80088ac <__retarget_lock_release_recursive>
 80089f2:	e7f3      	b.n	80089dc <_vfiprintf_r+0x44>
 80089f4:	2300      	movs	r3, #0
 80089f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80089f8:	2320      	movs	r3, #32
 80089fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a02:	2330      	movs	r3, #48	@ 0x30
 8008a04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bb4 <_vfiprintf_r+0x21c>
 8008a08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a0c:	f04f 0901 	mov.w	r9, #1
 8008a10:	4623      	mov	r3, r4
 8008a12:	469a      	mov	sl, r3
 8008a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a18:	b10a      	cbz	r2, 8008a1e <_vfiprintf_r+0x86>
 8008a1a:	2a25      	cmp	r2, #37	@ 0x25
 8008a1c:	d1f9      	bne.n	8008a12 <_vfiprintf_r+0x7a>
 8008a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a22:	d00b      	beq.n	8008a3c <_vfiprintf_r+0xa4>
 8008a24:	465b      	mov	r3, fp
 8008a26:	4622      	mov	r2, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ffa1 	bl	8008972 <__sfputs_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	f000 80a7 	beq.w	8008b84 <_vfiprintf_r+0x1ec>
 8008a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a38:	445a      	add	r2, fp
 8008a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 809f 	beq.w	8008b84 <_vfiprintf_r+0x1ec>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a50:	f10a 0a01 	add.w	sl, sl, #1
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	9307      	str	r3, [sp, #28]
 8008a58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a5e:	4654      	mov	r4, sl
 8008a60:	2205      	movs	r2, #5
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4853      	ldr	r0, [pc, #332]	@ (8008bb4 <_vfiprintf_r+0x21c>)
 8008a68:	f7f7 fbda 	bl	8000220 <memchr>
 8008a6c:	9a04      	ldr	r2, [sp, #16]
 8008a6e:	b9d8      	cbnz	r0, 8008aa8 <_vfiprintf_r+0x110>
 8008a70:	06d1      	lsls	r1, r2, #27
 8008a72:	bf44      	itt	mi
 8008a74:	2320      	movmi	r3, #32
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a7a:	0713      	lsls	r3, r2, #28
 8008a7c:	bf44      	itt	mi
 8008a7e:	232b      	movmi	r3, #43	@ 0x2b
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a84:	f89a 3000 	ldrb.w	r3, [sl]
 8008a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8a:	d015      	beq.n	8008ab8 <_vfiprintf_r+0x120>
 8008a8c:	9a07      	ldr	r2, [sp, #28]
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2000      	movs	r0, #0
 8008a92:	f04f 0c0a 	mov.w	ip, #10
 8008a96:	4621      	mov	r1, r4
 8008a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9c:	3b30      	subs	r3, #48	@ 0x30
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d94b      	bls.n	8008b3a <_vfiprintf_r+0x1a2>
 8008aa2:	b1b0      	cbz	r0, 8008ad2 <_vfiprintf_r+0x13a>
 8008aa4:	9207      	str	r2, [sp, #28]
 8008aa6:	e014      	b.n	8008ad2 <_vfiprintf_r+0x13a>
 8008aa8:	eba0 0308 	sub.w	r3, r0, r8
 8008aac:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	46a2      	mov	sl, r4
 8008ab6:	e7d2      	b.n	8008a5e <_vfiprintf_r+0xc6>
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	1d19      	adds	r1, r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bfbb      	ittet	lt
 8008ac4:	425b      	neglt	r3, r3
 8008ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8008aca:	9307      	strge	r3, [sp, #28]
 8008acc:	9307      	strlt	r3, [sp, #28]
 8008ace:	bfb8      	it	lt
 8008ad0:	9204      	strlt	r2, [sp, #16]
 8008ad2:	7823      	ldrb	r3, [r4, #0]
 8008ad4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ad6:	d10a      	bne.n	8008aee <_vfiprintf_r+0x156>
 8008ad8:	7863      	ldrb	r3, [r4, #1]
 8008ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8008adc:	d132      	bne.n	8008b44 <_vfiprintf_r+0x1ac>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	1d1a      	adds	r2, r3, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	9203      	str	r2, [sp, #12]
 8008ae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aea:	3402      	adds	r4, #2
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bc4 <_vfiprintf_r+0x22c>
 8008af2:	7821      	ldrb	r1, [r4, #0]
 8008af4:	2203      	movs	r2, #3
 8008af6:	4650      	mov	r0, sl
 8008af8:	f7f7 fb92 	bl	8000220 <memchr>
 8008afc:	b138      	cbz	r0, 8008b0e <_vfiprintf_r+0x176>
 8008afe:	9b04      	ldr	r3, [sp, #16]
 8008b00:	eba0 000a 	sub.w	r0, r0, sl
 8008b04:	2240      	movs	r2, #64	@ 0x40
 8008b06:	4082      	lsls	r2, r0
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	3401      	adds	r4, #1
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	4829      	ldr	r0, [pc, #164]	@ (8008bb8 <_vfiprintf_r+0x220>)
 8008b14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b18:	2206      	movs	r2, #6
 8008b1a:	f7f7 fb81 	bl	8000220 <memchr>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d03f      	beq.n	8008ba2 <_vfiprintf_r+0x20a>
 8008b22:	4b26      	ldr	r3, [pc, #152]	@ (8008bbc <_vfiprintf_r+0x224>)
 8008b24:	bb1b      	cbnz	r3, 8008b6e <_vfiprintf_r+0x1d6>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	3308      	adds	r3, #8
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b34:	443b      	add	r3, r7
 8008b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b38:	e76a      	b.n	8008a10 <_vfiprintf_r+0x78>
 8008b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b3e:	460c      	mov	r4, r1
 8008b40:	2001      	movs	r0, #1
 8008b42:	e7a8      	b.n	8008a96 <_vfiprintf_r+0xfe>
 8008b44:	2300      	movs	r3, #0
 8008b46:	3401      	adds	r4, #1
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4620      	mov	r0, r4
 8008b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b56:	3a30      	subs	r2, #48	@ 0x30
 8008b58:	2a09      	cmp	r2, #9
 8008b5a:	d903      	bls.n	8008b64 <_vfiprintf_r+0x1cc>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0c6      	beq.n	8008aee <_vfiprintf_r+0x156>
 8008b60:	9105      	str	r1, [sp, #20]
 8008b62:	e7c4      	b.n	8008aee <_vfiprintf_r+0x156>
 8008b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b68:	4604      	mov	r4, r0
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7f0      	b.n	8008b50 <_vfiprintf_r+0x1b8>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <_vfiprintf_r+0x228>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f3af 8000 	nop.w
 8008b7e:	4607      	mov	r7, r0
 8008b80:	1c78      	adds	r0, r7, #1
 8008b82:	d1d6      	bne.n	8008b32 <_vfiprintf_r+0x19a>
 8008b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	d405      	bmi.n	8008b96 <_vfiprintf_r+0x1fe>
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	059a      	lsls	r2, r3, #22
 8008b8e:	d402      	bmi.n	8008b96 <_vfiprintf_r+0x1fe>
 8008b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b92:	f7ff fe8b 	bl	80088ac <__retarget_lock_release_recursive>
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	065b      	lsls	r3, r3, #25
 8008b9a:	f53f af1f 	bmi.w	80089dc <_vfiprintf_r+0x44>
 8008b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ba0:	e71e      	b.n	80089e0 <_vfiprintf_r+0x48>
 8008ba2:	ab03      	add	r3, sp, #12
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	462a      	mov	r2, r5
 8008ba8:	4b05      	ldr	r3, [pc, #20]	@ (8008bc0 <_vfiprintf_r+0x228>)
 8008baa:	a904      	add	r1, sp, #16
 8008bac:	4630      	mov	r0, r6
 8008bae:	f000 f879 	bl	8008ca4 <_printf_i>
 8008bb2:	e7e4      	b.n	8008b7e <_vfiprintf_r+0x1e6>
 8008bb4:	08009468 	.word	0x08009468
 8008bb8:	08009472 	.word	0x08009472
 8008bbc:	00000000 	.word	0x00000000
 8008bc0:	08008973 	.word	0x08008973
 8008bc4:	0800946e 	.word	0x0800946e

08008bc8 <_printf_common>:
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	4616      	mov	r6, r2
 8008bce:	4698      	mov	r8, r3
 8008bd0:	688a      	ldr	r2, [r1, #8]
 8008bd2:	690b      	ldr	r3, [r1, #16]
 8008bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bfb8      	it	lt
 8008bdc:	4613      	movlt	r3, r2
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008be4:	4607      	mov	r7, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b10a      	cbz	r2, 8008bee <_printf_common+0x26>
 8008bea:	3301      	adds	r3, #1
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	0699      	lsls	r1, r3, #26
 8008bf2:	bf42      	ittt	mi
 8008bf4:	6833      	ldrmi	r3, [r6, #0]
 8008bf6:	3302      	addmi	r3, #2
 8008bf8:	6033      	strmi	r3, [r6, #0]
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	f015 0506 	ands.w	r5, r5, #6
 8008c00:	d106      	bne.n	8008c10 <_printf_common+0x48>
 8008c02:	f104 0a19 	add.w	sl, r4, #25
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	6832      	ldr	r2, [r6, #0]
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	dc26      	bgt.n	8008c5e <_printf_common+0x96>
 8008c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	3b00      	subs	r3, #0
 8008c18:	bf18      	it	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	0692      	lsls	r2, r2, #26
 8008c1e:	d42b      	bmi.n	8008c78 <_printf_common+0xb0>
 8008c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c24:	4641      	mov	r1, r8
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c8      	blx	r9
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d01e      	beq.n	8008c6c <_printf_common+0xa4>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	f003 0306 	and.w	r3, r3, #6
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	bf02      	ittt	eq
 8008c3a:	68e5      	ldreq	r5, [r4, #12]
 8008c3c:	6833      	ldreq	r3, [r6, #0]
 8008c3e:	1aed      	subeq	r5, r5, r3
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	bf0c      	ite	eq
 8008c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c48:	2500      	movne	r5, #0
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bfc4      	itt	gt
 8008c4e:	1a9b      	subgt	r3, r3, r2
 8008c50:	18ed      	addgt	r5, r5, r3
 8008c52:	2600      	movs	r6, #0
 8008c54:	341a      	adds	r4, #26
 8008c56:	42b5      	cmp	r5, r6
 8008c58:	d11a      	bne.n	8008c90 <_printf_common+0xc8>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e008      	b.n	8008c70 <_printf_common+0xa8>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4652      	mov	r2, sl
 8008c62:	4641      	mov	r1, r8
 8008c64:	4638      	mov	r0, r7
 8008c66:	47c8      	blx	r9
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d103      	bne.n	8008c74 <_printf_common+0xac>
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	3501      	adds	r5, #1
 8008c76:	e7c6      	b.n	8008c06 <_printf_common+0x3e>
 8008c78:	18e1      	adds	r1, r4, r3
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	2030      	movs	r0, #48	@ 0x30
 8008c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c82:	4422      	add	r2, r4
 8008c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	e7c7      	b.n	8008c20 <_printf_common+0x58>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4622      	mov	r2, r4
 8008c94:	4641      	mov	r1, r8
 8008c96:	4638      	mov	r0, r7
 8008c98:	47c8      	blx	r9
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d0e6      	beq.n	8008c6c <_printf_common+0xa4>
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7d9      	b.n	8008c56 <_printf_common+0x8e>
	...

08008ca4 <_printf_i>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	7e0f      	ldrb	r7, [r1, #24]
 8008caa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cac:	2f78      	cmp	r7, #120	@ 0x78
 8008cae:	4691      	mov	r9, r2
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	469a      	mov	sl, r3
 8008cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cba:	d807      	bhi.n	8008ccc <_printf_i+0x28>
 8008cbc:	2f62      	cmp	r7, #98	@ 0x62
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x32>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	f000 80d2 	beq.w	8008e6a <_printf_i+0x1c6>
 8008cc6:	2f58      	cmp	r7, #88	@ 0x58
 8008cc8:	f000 80b9 	beq.w	8008e3e <_printf_i+0x19a>
 8008ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cd4:	e03a      	b.n	8008d4c <_printf_i+0xa8>
 8008cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cda:	2b15      	cmp	r3, #21
 8008cdc:	d8f6      	bhi.n	8008ccc <_printf_i+0x28>
 8008cde:	a101      	add	r1, pc, #4	@ (adr r1, 8008ce4 <_printf_i+0x40>)
 8008ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008ccd 	.word	0x08008ccd
 8008cf0:	08008ccd 	.word	0x08008ccd
 8008cf4:	08008ccd 	.word	0x08008ccd
 8008cf8:	08008ccd 	.word	0x08008ccd
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008ccd 	.word	0x08008ccd
 8008d04:	08008ccd 	.word	0x08008ccd
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008e51 	.word	0x08008e51
 8008d14:	08008d7b 	.word	0x08008d7b
 8008d18:	08008e0b 	.word	0x08008e0b
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e73 	.word	0x08008e73
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008d7b 	.word	0x08008d7b
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e13 	.word	0x08008e13
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6032      	str	r2, [r6, #0]
 8008d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e09d      	b.n	8008e8c <_printf_i+0x1e8>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	1d19      	adds	r1, r3, #4
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	0606      	lsls	r6, r0, #24
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0xbc>
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <_printf_i+0xc4>
 8008d60:	0645      	lsls	r5, r0, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0xb8>
 8008d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	da03      	bge.n	8008d74 <_printf_i+0xd0>
 8008d6c:	232d      	movs	r3, #45	@ 0x2d
 8008d6e:	426d      	negs	r5, r5
 8008d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d74:	4859      	ldr	r0, [pc, #356]	@ (8008edc <_printf_i+0x238>)
 8008d76:	230a      	movs	r3, #10
 8008d78:	e011      	b.n	8008d9e <_printf_i+0xfa>
 8008d7a:	6821      	ldr	r1, [r4, #0]
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	0608      	lsls	r0, r1, #24
 8008d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d84:	d402      	bmi.n	8008d8c <_printf_i+0xe8>
 8008d86:	0649      	lsls	r1, r1, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2ad      	uxthmi	r5, r5
 8008d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d8e:	4853      	ldr	r0, [pc, #332]	@ (8008edc <_printf_i+0x238>)
 8008d90:	6033      	str	r3, [r6, #0]
 8008d92:	bf14      	ite	ne
 8008d94:	230a      	movne	r3, #10
 8008d96:	2308      	moveq	r3, #8
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d9e:	6866      	ldr	r6, [r4, #4]
 8008da0:	60a6      	str	r6, [r4, #8]
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	bfa2      	ittt	ge
 8008da6:	6821      	ldrge	r1, [r4, #0]
 8008da8:	f021 0104 	bicge.w	r1, r1, #4
 8008dac:	6021      	strge	r1, [r4, #0]
 8008dae:	b90d      	cbnz	r5, 8008db4 <_printf_i+0x110>
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d04b      	beq.n	8008e4c <_printf_i+0x1a8>
 8008db4:	4616      	mov	r6, r2
 8008db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dba:	fb03 5711 	mls	r7, r3, r1, r5
 8008dbe:	5dc7      	ldrb	r7, [r0, r7]
 8008dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc4:	462f      	mov	r7, r5
 8008dc6:	42bb      	cmp	r3, r7
 8008dc8:	460d      	mov	r5, r1
 8008dca:	d9f4      	bls.n	8008db6 <_printf_i+0x112>
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d10b      	bne.n	8008de8 <_printf_i+0x144>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	07df      	lsls	r7, r3, #31
 8008dd4:	d508      	bpl.n	8008de8 <_printf_i+0x144>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	bfde      	ittt	le
 8008dde:	2330      	movle	r3, #48	@ 0x30
 8008de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008de8:	1b92      	subs	r2, r2, r6
 8008dea:	6122      	str	r2, [r4, #16]
 8008dec:	f8cd a000 	str.w	sl, [sp]
 8008df0:	464b      	mov	r3, r9
 8008df2:	aa03      	add	r2, sp, #12
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7ff fee6 	bl	8008bc8 <_printf_common>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d14a      	bne.n	8008e96 <_printf_i+0x1f2>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e04:	b004      	add	sp, #16
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	4833      	ldr	r0, [pc, #204]	@ (8008ee0 <_printf_i+0x23c>)
 8008e14:	2778      	movs	r7, #120	@ 0x78
 8008e16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	6831      	ldr	r1, [r6, #0]
 8008e1e:	061f      	lsls	r7, r3, #24
 8008e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e24:	d402      	bmi.n	8008e2c <_printf_i+0x188>
 8008e26:	065f      	lsls	r7, r3, #25
 8008e28:	bf48      	it	mi
 8008e2a:	b2ad      	uxthmi	r5, r5
 8008e2c:	6031      	str	r1, [r6, #0]
 8008e2e:	07d9      	lsls	r1, r3, #31
 8008e30:	bf44      	itt	mi
 8008e32:	f043 0320 	orrmi.w	r3, r3, #32
 8008e36:	6023      	strmi	r3, [r4, #0]
 8008e38:	b11d      	cbz	r5, 8008e42 <_printf_i+0x19e>
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	e7ac      	b.n	8008d98 <_printf_i+0xf4>
 8008e3e:	4827      	ldr	r0, [pc, #156]	@ (8008edc <_printf_i+0x238>)
 8008e40:	e7e9      	b.n	8008e16 <_printf_i+0x172>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	e7f6      	b.n	8008e3a <_printf_i+0x196>
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	e7bd      	b.n	8008dcc <_printf_i+0x128>
 8008e50:	6833      	ldr	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	6961      	ldr	r1, [r4, #20]
 8008e56:	1d18      	adds	r0, r3, #4
 8008e58:	6030      	str	r0, [r6, #0]
 8008e5a:	062e      	lsls	r6, r5, #24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0x1c0>
 8008e60:	6019      	str	r1, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0x1c6>
 8008e64:	0668      	lsls	r0, r5, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0x1bc>
 8008e68:	8019      	strh	r1, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	4616      	mov	r6, r2
 8008e70:	e7bc      	b.n	8008dec <_printf_i+0x148>
 8008e72:	6833      	ldr	r3, [r6, #0]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	6032      	str	r2, [r6, #0]
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7f7 f9ce 	bl	8000220 <memchr>
 8008e84:	b108      	cbz	r0, 8008e8a <_printf_i+0x1e6>
 8008e86:	1b80      	subs	r0, r0, r6
 8008e88:	6060      	str	r0, [r4, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e94:	e7aa      	b.n	8008dec <_printf_i+0x148>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	47d0      	blx	sl
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d0ad      	beq.n	8008e00 <_printf_i+0x15c>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	079b      	lsls	r3, r3, #30
 8008ea8:	d413      	bmi.n	8008ed2 <_printf_i+0x22e>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bfb8      	it	lt
 8008eb2:	4618      	movlt	r0, r3
 8008eb4:	e7a6      	b.n	8008e04 <_printf_i+0x160>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d09d      	beq.n	8008e00 <_printf_i+0x15c>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dcf2      	bgt.n	8008eb6 <_printf_i+0x212>
 8008ed0:	e7eb      	b.n	8008eaa <_printf_i+0x206>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f104 0619 	add.w	r6, r4, #25
 8008ed8:	e7f5      	b.n	8008ec6 <_printf_i+0x222>
 8008eda:	bf00      	nop
 8008edc:	08009479 	.word	0x08009479
 8008ee0:	0800948a 	.word	0x0800948a

08008ee4 <__sflush_r>:
 8008ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eec:	0716      	lsls	r6, r2, #28
 8008eee:	4605      	mov	r5, r0
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	d454      	bmi.n	8008f9e <__sflush_r+0xba>
 8008ef4:	684b      	ldr	r3, [r1, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dc02      	bgt.n	8008f00 <__sflush_r+0x1c>
 8008efa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd48      	ble.n	8008f92 <__sflush_r+0xae>
 8008f00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d045      	beq.n	8008f92 <__sflush_r+0xae>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f0c:	682f      	ldr	r7, [r5, #0]
 8008f0e:	6a21      	ldr	r1, [r4, #32]
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	d030      	beq.n	8008f76 <__sflush_r+0x92>
 8008f14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	0759      	lsls	r1, r3, #29
 8008f1a:	d505      	bpl.n	8008f28 <__sflush_r+0x44>
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f22:	b10b      	cbz	r3, 8008f28 <__sflush_r+0x44>
 8008f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f2c:	6a21      	ldr	r1, [r4, #32]
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b0      	blx	r6
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	d106      	bne.n	8008f46 <__sflush_r+0x62>
 8008f38:	6829      	ldr	r1, [r5, #0]
 8008f3a:	291d      	cmp	r1, #29
 8008f3c:	d82b      	bhi.n	8008f96 <__sflush_r+0xb2>
 8008f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe8 <__sflush_r+0x104>)
 8008f40:	410a      	asrs	r2, r1
 8008f42:	07d6      	lsls	r6, r2, #31
 8008f44:	d427      	bmi.n	8008f96 <__sflush_r+0xb2>
 8008f46:	2200      	movs	r2, #0
 8008f48:	6062      	str	r2, [r4, #4]
 8008f4a:	04d9      	lsls	r1, r3, #19
 8008f4c:	6922      	ldr	r2, [r4, #16]
 8008f4e:	6022      	str	r2, [r4, #0]
 8008f50:	d504      	bpl.n	8008f5c <__sflush_r+0x78>
 8008f52:	1c42      	adds	r2, r0, #1
 8008f54:	d101      	bne.n	8008f5a <__sflush_r+0x76>
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	b903      	cbnz	r3, 8008f5c <__sflush_r+0x78>
 8008f5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f5e:	602f      	str	r7, [r5, #0]
 8008f60:	b1b9      	cbz	r1, 8008f92 <__sflush_r+0xae>
 8008f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d002      	beq.n	8008f70 <__sflush_r+0x8c>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f7ff fca0 	bl	80088b0 <_free_r>
 8008f70:	2300      	movs	r3, #0
 8008f72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f74:	e00d      	b.n	8008f92 <__sflush_r+0xae>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	1c50      	adds	r0, r2, #1
 8008f80:	d1c9      	bne.n	8008f16 <__sflush_r+0x32>
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c6      	beq.n	8008f16 <__sflush_r+0x32>
 8008f88:	2b1d      	cmp	r3, #29
 8008f8a:	d001      	beq.n	8008f90 <__sflush_r+0xac>
 8008f8c:	2b16      	cmp	r3, #22
 8008f8e:	d11e      	bne.n	8008fce <__sflush_r+0xea>
 8008f90:	602f      	str	r7, [r5, #0]
 8008f92:	2000      	movs	r0, #0
 8008f94:	e022      	b.n	8008fdc <__sflush_r+0xf8>
 8008f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9a:	b21b      	sxth	r3, r3
 8008f9c:	e01b      	b.n	8008fd6 <__sflush_r+0xf2>
 8008f9e:	690f      	ldr	r7, [r1, #16]
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	d0f6      	beq.n	8008f92 <__sflush_r+0xae>
 8008fa4:	0793      	lsls	r3, r2, #30
 8008fa6:	680e      	ldr	r6, [r1, #0]
 8008fa8:	bf08      	it	eq
 8008faa:	694b      	ldreq	r3, [r1, #20]
 8008fac:	600f      	str	r7, [r1, #0]
 8008fae:	bf18      	it	ne
 8008fb0:	2300      	movne	r3, #0
 8008fb2:	eba6 0807 	sub.w	r8, r6, r7
 8008fb6:	608b      	str	r3, [r1, #8]
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	dde9      	ble.n	8008f92 <__sflush_r+0xae>
 8008fbe:	6a21      	ldr	r1, [r4, #32]
 8008fc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fc2:	4643      	mov	r3, r8
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b0      	blx	r6
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	dc08      	bgt.n	8008fe0 <__sflush_r+0xfc>
 8008fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	4407      	add	r7, r0
 8008fe2:	eba8 0800 	sub.w	r8, r8, r0
 8008fe6:	e7e7      	b.n	8008fb8 <__sflush_r+0xd4>
 8008fe8:	dfbffffe 	.word	0xdfbffffe

08008fec <_fflush_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	690b      	ldr	r3, [r1, #16]
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b913      	cbnz	r3, 8008ffc <_fflush_r+0x10>
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	b118      	cbz	r0, 8009006 <_fflush_r+0x1a>
 8008ffe:	6a03      	ldr	r3, [r0, #32]
 8009000:	b90b      	cbnz	r3, 8009006 <_fflush_r+0x1a>
 8009002:	f7ff f9ed 	bl	80083e0 <__sinit>
 8009006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f3      	beq.n	8008ff6 <_fflush_r+0xa>
 800900e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009010:	07d0      	lsls	r0, r2, #31
 8009012:	d404      	bmi.n	800901e <_fflush_r+0x32>
 8009014:	0599      	lsls	r1, r3, #22
 8009016:	d402      	bmi.n	800901e <_fflush_r+0x32>
 8009018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800901a:	f7ff fc46 	bl	80088aa <__retarget_lock_acquire_recursive>
 800901e:	4628      	mov	r0, r5
 8009020:	4621      	mov	r1, r4
 8009022:	f7ff ff5f 	bl	8008ee4 <__sflush_r>
 8009026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009028:	07da      	lsls	r2, r3, #31
 800902a:	4605      	mov	r5, r0
 800902c:	d4e4      	bmi.n	8008ff8 <_fflush_r+0xc>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	059b      	lsls	r3, r3, #22
 8009032:	d4e1      	bmi.n	8008ff8 <_fflush_r+0xc>
 8009034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009036:	f7ff fc39 	bl	80088ac <__retarget_lock_release_recursive>
 800903a:	e7dd      	b.n	8008ff8 <_fflush_r+0xc>

0800903c <__swhatbuf_r>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	460c      	mov	r4, r1
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	2900      	cmp	r1, #0
 8009046:	b096      	sub	sp, #88	@ 0x58
 8009048:	4615      	mov	r5, r2
 800904a:	461e      	mov	r6, r3
 800904c:	da0d      	bge.n	800906a <__swhatbuf_r+0x2e>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	bf14      	ite	ne
 800905a:	2340      	movne	r3, #64	@ 0x40
 800905c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009060:	2000      	movs	r0, #0
 8009062:	6031      	str	r1, [r6, #0]
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	b016      	add	sp, #88	@ 0x58
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	466a      	mov	r2, sp
 800906c:	f000 f848 	bl	8009100 <_fstat_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	dbec      	blt.n	800904e <__swhatbuf_r+0x12>
 8009074:	9901      	ldr	r1, [sp, #4]
 8009076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800907a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800907e:	4259      	negs	r1, r3
 8009080:	4159      	adcs	r1, r3
 8009082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009086:	e7eb      	b.n	8009060 <__swhatbuf_r+0x24>

08009088 <__smakebuf_r>:
 8009088:	898b      	ldrh	r3, [r1, #12]
 800908a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800908c:	079d      	lsls	r5, r3, #30
 800908e:	4606      	mov	r6, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d507      	bpl.n	80090a4 <__smakebuf_r+0x1c>
 8009094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	2301      	movs	r3, #1
 800909e:	6163      	str	r3, [r4, #20]
 80090a0:	b003      	add	sp, #12
 80090a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a4:	ab01      	add	r3, sp, #4
 80090a6:	466a      	mov	r2, sp
 80090a8:	f7ff ffc8 	bl	800903c <__swhatbuf_r>
 80090ac:	9f00      	ldr	r7, [sp, #0]
 80090ae:	4605      	mov	r5, r0
 80090b0:	4639      	mov	r1, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff f87c 	bl	80081b0 <_malloc_r>
 80090b8:	b948      	cbnz	r0, 80090ce <__smakebuf_r+0x46>
 80090ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090be:	059a      	lsls	r2, r3, #22
 80090c0:	d4ee      	bmi.n	80090a0 <__smakebuf_r+0x18>
 80090c2:	f023 0303 	bic.w	r3, r3, #3
 80090c6:	f043 0302 	orr.w	r3, r3, #2
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	e7e2      	b.n	8009094 <__smakebuf_r+0xc>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	6020      	str	r0, [r4, #0]
 80090d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090de:	b15b      	cbz	r3, 80090f8 <__smakebuf_r+0x70>
 80090e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 f81d 	bl	8009124 <_isatty_r>
 80090ea:	b128      	cbz	r0, 80090f8 <__smakebuf_r+0x70>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	431d      	orrs	r5, r3
 80090fc:	81a5      	strh	r5, [r4, #12]
 80090fe:	e7cf      	b.n	80090a0 <__smakebuf_r+0x18>

08009100 <_fstat_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_fstat_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f7fa ff53 	bl	8003fb8 <_fstat>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_fstat_r+0x1c>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	b103      	cbz	r3, 800911c <_fstat_r+0x1c>
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	200004d0 	.word	0x200004d0

08009124 <_isatty_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_isatty_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7fa ff52 	bl	8003fd8 <_isatty>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_isatty_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_isatty_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	200004d0 	.word	0x200004d0

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
