
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a618  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800a7f8  0800a7f8  0000b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acdc  0800acdc  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace4  0800ace4  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ace4  0800ace4  0000bce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800acec  0800acec  0000bcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800acf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000068  0800ad5c  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800ad5c  0000c820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000345f7  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bea  00000000  00000000  0004068f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001862  00000000  00000000  00047200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025748  00000000  00000000  00048a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201f4  00000000  00000000  0006e1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1684  00000000  00000000  0008e39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017fa22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a83c  00000000  00000000  0017fa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7e0 	.word	0x0800a7e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800a7e0 	.word	0x0800a7e0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3308      	adds	r3, #8
 8000be6:	2224      	movs	r2, #36	@ 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f009 f8aa 	bl	8009d44 <memset>

	handle_fdcan_ = handle_fdcan;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
	tx_header_.MessageMarker = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800abe4 	.word	0x0800abe4

08000c30 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <_ZN9ChampiCanC1Ev+0x2c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3308      	adds	r3, #8
 8000c48:	2224      	movs	r2, #36	@ 0x24
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f009 f879 	bl	8009d44 <memset>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800abe4 	.word	0x0800abe4

08000c60 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 ff07 	bl	8005a80 <HAL_FDCAN_Start>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e011      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 ff1e 	bl	8005ad0 <HAL_FDCAN_ActivateNotification>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <_ZN9ChampiCanD1Ev>:
    msg_number = (msg_number + 1) % 4;
    return 0;
}


ChampiCan::~ChampiCan() = default;
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <_ZN9ChampiCanD1Ev+0x1c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	0800abe4 	.word	0x0800abe4

08000cd4 <_ZN9ChampiCanD0Ev>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffe9 	bl	8000cb4 <_ZN9ChampiCanD1Ev>
 8000ce2:	212c      	movs	r1, #44	@ 0x2c
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f008 fcf7 	bl	80096d8 <_ZdlPvj>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_ZN11ChampiStateC1Ev>:
 *      Author: arusso
 */

#include <ChampiState.h>

ChampiState::ChampiState() = default;
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <_ZN11ChampiStateC1Ev+0x28>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3330      	adds	r3, #48	@ 0x30
 8000d06:	2278      	movs	r2, #120	@ 0x78
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f009 f81a 	bl	8009d44 <memset>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	0800abf4 	.word	0x0800abf4

08000d20 <_ZN11ChampiStateD1Ev>:
    champi_can_interface_ = champi_can_interface;
    tx_period_ms_ = tx_period_ms;
    last_tx_time_ms_ = 0;
}

ChampiState::~ChampiState() = default;
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <_ZN11ChampiStateD1Ev+0x1c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	0800abf4 	.word	0x0800abf4

08000d40 <_ZN11ChampiStateD0Ev>:
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffe9 	bl	8000d20 <_ZN11ChampiStateD1Ev>
 8000d4e:	21a8      	movs	r1, #168	@ 0xa8
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f008 fcc1 	bl	80096d8 <_ZdlPvj>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <_ZN17MessageRecomposerC1Ev+0x3c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3324      	adds	r3, #36	@ 0x24
 8000d72:	2413      	movs	r4, #19
 8000d74:	461d      	mov	r5, r3
 8000d76:	e004      	b.n	8000d82 <_ZN17MessageRecomposerC1Ev+0x22>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f008 fcda 	bl	8009732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000d7e:	3c01      	subs	r4, #1
 8000d80:	3518      	adds	r5, #24
 8000d82:	2c00      	cmp	r4, #0
 8000d84:	daf8      	bge.n	8000d78 <_ZN17MessageRecomposerC1Ev+0x18>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 fcd0 	bl	8009732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9c:	0800ac04 	.word	0x0800ac04

08000da0 <_ZN17MessageRecomposerD1Ev>:
std::string MessageRecomposer::get_full_msg() {
    full_msg_received_ = false;
    return full_msg_;
}

MessageRecomposer::~MessageRecomposer() {
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <_ZN17MessageRecomposerD1Ev+0x48>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 fcc3 	bl	8009740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MessageRecomposer::~MessageRecomposer() {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3324      	adds	r3, #36	@ 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00c      	beq.n	8000ddc <_ZN17MessageRecomposerD1Ev+0x3c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3324      	adds	r3, #36	@ 0x24
 8000dc6:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3324      	adds	r3, #36	@ 0x24
}
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	d004      	beq.n	8000ddc <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8000dd2:	3c18      	subs	r4, #24
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f008 fcb3 	bl	8009740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000dda:	e7f6      	b.n	8000dca <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 8000ddc:	bf00      	nop
}
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	0800ac04 	.word	0x0800ac04

08000dec <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
}
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffd3 	bl	8000da0 <_ZN17MessageRecomposerD1Ev>
 8000dfa:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f008 fc6a 	bl	80096d8 <_ZdlPvj>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>
#include <cstdio>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
{
}
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	1cf9      	adds	r1, r7, #3
 8000e3e:	230a      	movs	r3, #10
 8000e40:	2201      	movs	r2, #1
 8000e42:	f007 fcc9 	bl	80087d8 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	230a      	movs	r3, #10
 8000e50:	2201      	movs	r2, #1
 8000e52:	f007 fd4f 	bl	80088f4 <HAL_UART_Receive>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf()
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000e66:	bf00      	nop
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	f107 010f 	add.w	r1, r7, #15
 8000e70:	2300      	movs	r3, #0
 8000e72:	2201      	movs	r2, #1
 8000e74:	f007 fd3e 	bl	80088f4 <HAL_UART_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1ef      	bne.n	8000e68 <_ZN7SCServo12fflushRevBufEv+0xa>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	121b      	asrs	r3, r3, #8
 8000eb4:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff ffcf 	bl	8000e5e <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000ec0:	21ff      	movs	r1, #255	@ 0xff
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ffb2 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000ec8:	21ff      	movs	r1, #255	@ 0xff
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ffae 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ffa9 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f7ff ffa3 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f7ff ff9f 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 8000eee:	212a      	movs	r1, #42	@ 0x2a
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ff9b 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8000ef6:	7cfb      	ldrb	r3, [r7, #19]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff ff96 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(posH);
 8000f00:	7cbb      	ldrb	r3, [r7, #18]
 8000f02:	4619      	mov	r1, r3
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff ff91 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(velL);
 8000f0a:	7c7b      	ldrb	r3, [r7, #17]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff ff8c 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(velH);
 8000f14:	7c3b      	ldrb	r3, [r7, #16]
 8000f16:	4619      	mov	r1, r3
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ff87 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	7cfb      	ldrb	r3, [r7, #19]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	7cbb      	ldrb	r3, [r7, #18]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	7c7b      	ldrb	r3, [r7, #17]
 8000f36:	4413      	add	r3, r2
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	7c3b      	ldrb	r3, [r7, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff6e 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d00a      	beq.n	8000f6c <_ZN7SCServo8WritePosEhiih+0xda>
 8000f56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d106      	bne.n	8000f6c <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2106      	movs	r1, #6
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f807 	bl	8000f76 <_ZN7SCServo7ReadBufEtPh>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	e000      	b.n	8000f6e <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	897a      	ldrh	r2, [r7, #10]
 8000f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f007 fcb0 	bl	80088f4 <HAL_UART_Receive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 8000f9e:	897b      	ldrh	r3, [r7, #10]
 8000fa0:	e001      	b.n	8000fa6 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN7SCServo7ReadPosEh>:

int SCServo::ReadPos(u8 ID)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
    u8 buf[8] = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
    int size;
    int pos=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff49 	bl	8000e5e <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000fcc:	21ff      	movs	r1, #255	@ 0xff
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff2c 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000fd4:	21ff      	movs	r1, #255	@ 0xff
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff28 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff23 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(4);
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff1f 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(INST_READ);
 8000fee:	2102      	movs	r1, #2
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff1b 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(P_PRESENT_POSITION_L);
 8000ff6:	2138      	movs	r1, #56	@ 0x38
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff17 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf(2);
 8000ffe:	2102      	movs	r1, #2
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff13 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    Printf((~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2))&0xFF);
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800100c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001010:	33bf      	adds	r3, #191	@ 0xbf
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4619      	mov	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff08 	bl	8000e2c <_ZN7SCServo6PrintfEh>
    size = ReadBuf(8, buf);
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	461a      	mov	r2, r3
 8001022:	2108      	movs	r1, #8
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffa6 	bl	8000f76 <_ZN7SCServo7ReadBufEtPh>
 800102a:	6138      	str	r0, [r7, #16]
    if(size<8)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b07      	cmp	r3, #7
 8001030:	dc02      	bgt.n	8001038 <_ZN7SCServo7ReadPosEh+0x8a>
        return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001036:	e00a      	b.n	800104e <_ZN7SCServo7ReadPosEh+0xa0>
    pos = buf[5];
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	461a      	mov	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
    return pos;
 800104c:	697b      	ldr	r3, [r7, #20]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	460a      	mov	r2, r1
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	4613      	mov	r3, r2
 8001064:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	085b      	lsrs	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	2101      	movs	r1, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fe9f 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4313      	orrs	r3, r2
 8001082:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	6039      	str	r1, [r7, #0]
 8001098:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	f240 110f 	movw	r1, #271	@ 0x10f
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fe1a 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	73fb      	strb	r3, [r7, #15]
	return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 80010d6:	f107 0209 	add.w	r2, r7, #9
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	21e5      	movs	r1, #229	@ 0xe5
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fe38 	bl	8004d54 <_Z15VL53L4CD_RdBytettPh>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 80010ee:	7a7b      	ldrb	r3, [r7, #9]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d102      	bne.n	80010fa <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	737b      	strb	r3, [r7, #13]
 80010f8:	e00b      	b.n	8001112 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 80010fa:	897b      	ldrh	r3, [r7, #10]
 80010fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001100:	d203      	bcs.n	800110a <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 8001102:	897b      	ldrh	r3, [r7, #10]
 8001104:	3301      	adds	r3, #1
 8001106:	817b      	strh	r3, [r7, #10]
 8001108:	e003      	b.n	8001112 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 800110a:	2300      	movs	r3, #0
 800110c:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800110e:	23ff      	movs	r3, #255	@ 0xff
 8001110:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fed8 	bl	8004ecc <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d0d9      	beq.n	80010d6 <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8001122:	232d      	movs	r3, #45	@ 0x2d
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e011      	b.n	800114c <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	3b2d      	subs	r3, #45	@ 0x2d
 8001130:	4a44      	ldr	r2, [pc, #272]	@ (8001244 <_Z19VL53L4CD_SensorInitt+0x184>)
 8001132:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fe3e 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	4313      	orrs	r3, r2
 8001144:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	3301      	adds	r3, #1
 800114a:	73bb      	strb	r3, [r7, #14]
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	2b87      	cmp	r3, #135	@ 0x87
 8001150:	d9ea      	bls.n	8001128 <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2240      	movs	r2, #64	@ 0x40
 8001156:	2187      	movs	r1, #135	@ 0x87
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fe2d 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	4313      	orrs	r3, r2
 8001166:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 8001168:	2300      	movs	r3, #0
 800116a:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 800116c:	2301      	movs	r3, #1
 800116e:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8001170:	f107 0209 	add.w	r2, r7, #9
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f8c5 	bl	8001308 <_Z26VL53L4CD_CheckForDataReadytPh>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4313      	orrs	r3, r2
 8001186:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d102      	bne.n	8001194 <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 800118e:	2300      	movs	r3, #0
 8001190:	737b      	strb	r3, [r7, #13]
 8001192:	e00b      	b.n	80011ac <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8001194:	897b      	ldrh	r3, [r7, #10]
 8001196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119a:	d203      	bcs.n	80011a4 <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	3301      	adds	r3, #1
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	e003      	b.n	80011ac <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 80011a8:	23ff      	movs	r3, #255	@ 0xff
 80011aa:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fe8b 	bl	8004ecc <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d0d9      	beq.n	8001170 <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f842 	bl	8001248 <_Z23VL53L4CD_ClearInterruptt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f882 	bl	80012da <_Z20VL53L4CD_StopRangingt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4313      	orrs	r3, r2
 80011de:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	2209      	movs	r2, #9
 80011e4:	2108      	movs	r1, #8
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fde6 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2200      	movs	r2, #0
 80011fa:	210b      	movs	r1, #11
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fddb 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4313      	orrs	r3, r2
 800120a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001212:	2124      	movs	r1, #36	@ 0x24
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fdf7 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4313      	orrs	r3, r2
 8001222:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	2200      	movs	r2, #0
 8001228:	2132      	movs	r1, #50	@ 0x32
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8b0 	bl	8001390 <_Z23VL53L4CD_SetRangeTimingtmm>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	4313      	orrs	r3, r2
 8001238:	73fb      	strb	r3, [r7, #15]

	return status;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0800ac0c 	.word	0x0800ac0c

08001248 <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2201      	movs	r2, #1
 800125a:	2186      	movs	r1, #134	@ 0x86
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fdab 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	4313      	orrs	r3, r2
 800126a:	73fb      	strb	r3, [r7, #15]
	return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8001284:	f107 0208 	add.w	r2, r7, #8
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	216c      	movs	r1, #108	@ 0x6c
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fceb 	bl	8004c68 <_Z16VL53L4CD_RdDWordttPm>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4313      	orrs	r3, r2
 800129a:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	2221      	movs	r2, #33	@ 0x21
 80012a6:	2187      	movs	r1, #135	@ 0x87
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fd85 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e00a      	b.n	80012d0 <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2240      	movs	r2, #64	@ 0x40
 80012be:	2187      	movs	r1, #135	@ 0x87
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fd79 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2200      	movs	r2, #0
 80012ec:	2187      	movs	r1, #135	@ 0x87
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fd62 	bl	8004db8 <_Z15VL53L4CD_WrBytetth>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	73fb      	strb	r3, [r7, #15]
	return status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8001318:	f107 020d 	add.w	r2, r7, #13
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	2130      	movs	r1, #48	@ 0x30
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fd17 	bl	8004d54 <_Z15VL53L4CD_RdBytettPh>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	4313      	orrs	r3, r2
 800132e:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8001330:	7b7b      	ldrb	r3, [r7, #13]
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	b2db      	uxtb	r3, r3
 8001338:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8001342:	7b7b      	ldrb	r3, [r7, #13]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8001352:	f107 020d 	add.w	r2, r7, #13
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2131      	movs	r1, #49	@ 0x31
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fcfa 	bl	8004d54 <_Z15VL53L4CD_RdBytettPh>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	4313      	orrs	r3, r2
 8001368:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 800136a:	7b7b      	ldrb	r3, [r7, #13]
 800136c:	f003 0201 	and.w	r2, r3, #1
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	429a      	cmp	r2, r3
 8001374:	d103      	bne.n	800137e <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e002      	b.n	8001384 <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001384:	7bbb      	ldrb	r3, [r7, #14]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 80013ac:	4b84      	ldr	r3, [pc, #528]	@ (80015c0 <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 80013ae:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 80013b0:	f107 0214 	add.w	r2, r7, #20
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	2106      	movs	r1, #6
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fc91 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 80013cc:	8abb      	ldrh	r3, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 80013de:	8abb      	ldrh	r3, [r7, #20]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e6:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013f6:	e005      	b.n	8001404 <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80013f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013fc:	f063 0301 	orn	r3, r3, #1
 8001400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b09      	cmp	r3, #9
 8001408:	d906      	bls.n	8001418 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2bc8      	cmp	r3, #200	@ 0xc8
 800140e:	d803      	bhi.n	8001418 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 8001410:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001418:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800141c:	f063 0301 	orn	r3, r3, #1
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001424:	e05e      	b.n	80014e4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	2200      	movs	r2, #0
 8001430:	216c      	movs	r1, #108	@ 0x6c
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fd16 	bl	8004e64 <_Z16VL53L4CD_WrDWordttm>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001440:	4313      	orrs	r3, r2
 8001442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
 800144e:	e049      	b.n	80014e4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	429a      	cmp	r2, r3
 8001456:	d93f      	bls.n	80014d8 <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8001458:	f107 0216 	add.w	r2, r7, #22
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	21de      	movs	r1, #222	@ 0xde
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fc3d 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800146e:	4313      	orrs	r3, r2
 8001470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800147a:	b29b      	uxth	r3, r3
 800147c:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001488:	edd7 7a07 	vldr	s15, [r7, #28]
 800148c:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8001490:	8afb      	ldrh	r3, [r7, #22]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 80014a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	ee17 2a90 	vmov	r2, s15
 80014b0:	216c      	movs	r1, #108	@ 0x6c
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fcd6 	bl	8004e64 <_Z16VL53L4CD_WrDWordttm>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c0:	4313      	orrs	r3, r2
 80014c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 80014cc:	3b0c      	subs	r3, #12
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	085b      	lsrs	r3, r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	e005      	b.n	80014e4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80014d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014dc:	f063 0301 	orn	r3, r3, #1
 80014e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80014ea:	d063      	beq.n	80015b4 <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	09da      	lsrs	r2, r3, #7
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	441a      	add	r2, r3
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	099b      	lsrs	r3, r3, #6
 8001508:	fbb2 f3f3 	udiv	r3, r2, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001510:	e005      	b.n	800151e <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001518:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800151a:	3301      	adds	r3, #1
 800151c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	2bff      	cmp	r3, #255	@ 0xff
 8001522:	d8f6      	bhi.n	8001512 <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001524:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001532:	4413      	add	r3, r2
 8001534:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8001536:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	215e      	movs	r1, #94	@ 0x5e
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fc63 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800154a:	4313      	orrs	r3, r2
 800154c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8001554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	09da      	lsrs	r2, r3, #7
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	441a      	add	r2, r3
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	099b      	lsrs	r3, r3, #6
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001574:	e005      	b.n	8001582 <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 800157c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800157e:	3301      	adds	r3, #1
 8001580:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	2bff      	cmp	r3, #255	@ 0xff
 8001586:	d8f6      	bhi.n	8001576 <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001588:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001596:	4413      	add	r3, r2
 8001598:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 800159a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	2161      	movs	r1, #97	@ 0x61
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fc31 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 80015b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3730      	adds	r7, #48	@ 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	3f870a3d 	.word	0x3f870a3d

080015c4 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 80015d6:	4b52      	ldr	r3, [pc, #328]	@ (8001720 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 80015d8:	f107 0408 	add.w	r4, r7, #8
 80015dc:	461d      	mov	r5, r3
 80015de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015e6:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 80015ea:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	2189      	movs	r1, #137	@ 0x89
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fbae 	bl	8004d54 <_Z15VL53L4CD_RdBytettPh>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001600:	4313      	orrs	r3, r2
 8001602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8001606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 8001614:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001618:	2b17      	cmp	r3, #23
 800161a:	d807      	bhi.n	800162c <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 800161c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001620:	3328      	adds	r3, #40	@ 0x28
 8001622:	443b      	add	r3, r7
 8001624:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 800162c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8001634:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	218c      	movs	r1, #140	@ 0x8c
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fb4f 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800164a:	4313      	orrs	r3, r2
 800164c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8001650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29a      	uxth	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 800165a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	218e      	movs	r1, #142	@ 0x8e
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fb3c 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001670:	4313      	orrs	r3, r2
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8001676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	b29a      	uxth	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8001680:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2190      	movs	r1, #144	@ 0x90
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fb29 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001696:	4313      	orrs	r3, r2
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 800169c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80016a6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2192      	movs	r1, #146	@ 0x92
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fb16 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016bc:	4313      	orrs	r3, r2
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 80016c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 80016cc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	2196      	movs	r1, #150	@ 0x96
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fb03 	bl	8004ce0 <_Z15VL53L4CD_RdWordttPt>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 80016e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	899b      	ldrh	r3, [r3, #12]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	899b      	ldrh	r3, [r3, #12]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	80da      	strh	r2, [r3, #6]

	return status;
 8001712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001716:	4618      	mov	r0, r3
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	0800a7f8 	.word	0x0800a7f8

08001724 <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	4613      	mov	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 800173e:	89ba      	ldrh	r2, [r7, #12]
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	211e      	movs	r1, #30
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fb5f 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4313      	orrs	r3, r2
 8001752:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	2200      	movs	r2, #0
 8001758:	2120      	movs	r1, #32
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fb54 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	4313      	orrs	r3, r2
 8001768:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	2200      	movs	r2, #0
 800176e:	2122      	movs	r1, #34	@ 0x22
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fb49 	bl	8004e08 <_Z15VL53L4CD_WrWordttt>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4313      	orrs	r3, r2
 800177e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	761a      	strb	r2, [r3, #24]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    this->gpio_port_step = gpio_port_step;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8bba      	ldrh	r2, [r7, #28]
 80017f4:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f004 fc3a 	bl	800607c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8001808:	8bbb      	ldrh	r3, [r7, #28]
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f004 fc34 	bl	800607c <HAL_GPIO_WritePin>

  }
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <_ZN7Stepper9set_speedEm>:

  void set_speed(unsigned long speed) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    this->speed = speed;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	621a      	str	r2, [r3, #32]
    time_step = 10000000 / speed;
 8001830:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <_ZN7Stepper9set_speedEm+0x28>)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	fbb2 f2f3 	udiv	r2, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	00989680 	.word	0x00989680

0800184c <_ZN7Stepper8set_goalEib>:

  void set_goal(int goal, bool keep_previous_speed = false) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	71fb      	strb	r3, [r7, #7]

    this->goal = goal;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	dd01      	ble.n	8001874 <_ZN7Stepper8set_goalEib+0x28>
 8001870:	2201      	movs	r2, #1
 8001872:	e001      	b.n	8001878 <_ZN7Stepper8set_goalEib+0x2c>
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	4798      	blx	r3
 8001882:	4602      	mov	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8999      	ldrh	r1, [r3, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	f004 fbe8 	bl	800607c <HAL_GPIO_WritePin>

    if (keep_previous_speed) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <_ZN7Stepper8set_goalEib+0x70>
      current_speed = speed_when_stopped;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
      current_speed = 0;
    }
  }
 80018ba:	e002      	b.n	80018c2 <_ZN7Stepper8set_goalEib+0x76>
      current_speed = 0;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  }
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	611a      	str	r2, [r3, #16]
  }
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7e1b      	ldrb	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d065      	beq.n	80019c2 <_ZN7Stepper9spin_onceEv+0xdc>
      return;
    }

    compute_time_step();
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f87a 	bl	80019f0 <_ZN7Stepper17compute_time_stepEv>

    if (state.state == State::HIGH) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d11b      	bne.n	800193c <_ZN7Stepper9spin_onceEv+0x56>
      if (get_time_us() - time_start_high > time_high) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4798      	blx	r3
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	1ad2      	subs	r2, r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	429a      	cmp	r2, r3
 8001918:	bf8c      	ite	hi
 800191a:	2301      	movhi	r3, #1
 800191c:	2300      	movls	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03d      	beq.n	80019a0 <_ZN7Stepper9spin_onceEv+0xba>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	f004 fba4 	bl	800607c <HAL_GPIO_WritePin>
        state.state = State::LOW;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	761a      	strb	r2, [r3, #24]
 800193a:	e031      	b.n	80019a0 <_ZN7Stepper9spin_onceEv+0xba>
      }
    } else if (state.state == State::LOW) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d12d      	bne.n	80019a0 <_ZN7Stepper9spin_onceEv+0xba>
      if (get_time_us() - time_start_step > time_step) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4798      	blx	r3
 800194a:	4602      	mov	r2, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	429a      	cmp	r2, r3
 8001958:	bf8c      	ite	hi
 800195a:	2301      	movhi	r3, #1
 800195c:	2300      	movls	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01d      	beq.n	80019a0 <_ZN7Stepper9spin_onceEv+0xba>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	4619      	mov	r1, r3
 8001970:	f004 fb84 	bl	800607c <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4798      	blx	r3
 8001980:	4602      	mov	r2, r0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4798      	blx	r3
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	441a      	add	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10b      	bne.n	80019c4 <_ZN7Stepper9spin_onceEv+0xde>
      state.state = State::STOPPED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	761a      	strb	r2, [r3, #24]
      speed_when_stopped = current_speed;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38
      current_speed = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c0:	e000      	b.n	80019c4 <_ZN7Stepper9spin_onceEv+0xde>
      return;
 80019c2:	bf00      	nop
    }
  }
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e1b      	ldrb	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
  }
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	0000      	movs	r0, r0
	...

080019f0 <_ZN7Stepper17compute_time_stepEv>:

  void compute_time_step() {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

    // We compute the new speed every 5ms (return if we are not there yet)
    static unsigned long last_time = 0;
    if (get_time_us() - last_time < 5000 && last_time != 0) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	4798      	blx	r3
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d805      	bhi.n	8001a1a <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001a0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <_ZN7Stepper17compute_time_stepEv+0x2c>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d152      	bne.n	8001ac6 <_ZN7Stepper17compute_time_stepEv+0xd6>
      return;
    }
    last_time = get_time_us();
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	4798      	blx	r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae0 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001a2a:	6013      	str	r3, [r2, #0]


    if (current_speed == speed) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d047      	beq.n	8001aca <_ZN7Stepper17compute_time_stepEv+0xda>
      return;
    }

    if (current_speed < speed) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3e:	461a      	mov	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d222      	bcs.n	8001a8e <_ZN7Stepper17compute_time_stepEv+0x9e>
      current_speed += (long) (((double) max_acceleration) * 0.005); // 5ms (0.005s
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe feb1 	bl	80007b8 <__aeabi_i2d>
 8001a56:	a320      	add	r3, pc, #128	@ (adr r3, 8001ad8 <_ZN7Stepper17compute_time_stepEv+0xe8>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fc30 	bl	80002c0 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7fe ff10 	bl	800088c <__aeabi_d2iz>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	18e2      	adds	r2, r4, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed > speed) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d918      	bls.n	8001ab4 <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8c:	e012      	b.n	8001ab4 <_ZN7Stepper17compute_time_stepEv+0xc4>
      }
    } else {
      current_speed -= max_acceleration;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a96:	1ad2      	subs	r2, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed < speed) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d204      	bcs.n	8001ab4 <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	635a      	str	r2, [r3, #52]	@ 0x34
      }
    }

    time_step = 10000000 / current_speed;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <_ZN7Stepper17compute_time_stepEv+0xf4>)
 8001aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ac4:	e002      	b.n	8001acc <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 8001aca:	bf00      	nop
  }
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	47ae147b 	.word	0x47ae147b
 8001adc:	3f747ae1 	.word	0x3f747ae1
 8001ae0:	20000084 	.word	0x20000084
 8001ae4:	00989680 	.word	0x00989680

08001ae8 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>:
#include "VL53L4CD_api.h"


class LaserSensor {
public:
	LaserSensor(GPIO_TypeDef *port, uint16_t pin, Dev_t address, int16_t offset) : pin(pin), port(port), address(address), offset(offset)
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	460b      	mov	r3, r1
 8001af8:	80fb      	strh	r3, [r7, #6]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80bb      	strh	r3, [r7, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	88fa      	ldrh	r2, [r7, #6]
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	811a      	strh	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	330a      	adds	r3, #10
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8b3a      	ldrh	r2, [r7, #24]
 8001b22:	835a      	strh	r2, [r3, #26]
	{

	}
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_ZN11LaserSensorD1Ev>:

	// destructor
	~LaserSensor()
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_StopRanging(address);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	891b      	ldrh	r3, [r3, #8]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fbcb 	bl	80012da <_Z20VL53L4CD_StopRangingt>
	}
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <_ZN11LaserSensor5setupEv>:

	int setup()
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	{
		uint16_t sensor_id;
		uint8_t status;
		printf("SENSOR_PIN: %d\n", pin);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4845      	ldr	r0, [pc, #276]	@ (8001c74 <_ZN11LaserSensor5setupEv+0x124>)
 8001b60:	f007 ff86 	bl	8009a70 <iprintf>

		HAL_Delay(5);
 8001b64:	2005      	movs	r0, #5
 8001b66:	f003 fcff 	bl	8005568 <HAL_Delay>
		// set the pin to high to enable the sensor
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6858      	ldr	r0, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	f004 fa81 	bl	800607c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001b7a:	2005      	movs	r0, #5
 8001b7c:	f003 fcf4 	bl	8005568 <HAL_Delay>

		// set I2C address (other unset addresses XSHUT have to be pull to low before)
		status = VL53L4CD_SetI2CAddress(0x52, address); // 0x52 is the default address
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	891b      	ldrh	r3, [r3, #8]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	2052      	movs	r0, #82	@ 0x52
 8001b8a:	f7ff fa64 	bl	8001056 <_Z22VL53L4CD_SetI2CAddressth>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <_ZN11LaserSensor5setupEv+0x56>
		{
			printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4836      	ldr	r0, [pc, #216]	@ (8001c78 <_ZN11LaserSensor5setupEv+0x128>)
 8001b9e:	f007 ff67 	bl	8009a70 <iprintf>
			return status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	e061      	b.n	8001c6a <_ZN11LaserSensor5setupEv+0x11a>
		}

		/* (Optional) Check if there is a VL53L4CD sensor connected */
		printf("Checking for laser sensor at address %x\n", address);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	891b      	ldrh	r3, [r3, #8]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4833      	ldr	r0, [pc, #204]	@ (8001c7c <_ZN11LaserSensor5setupEv+0x12c>)
 8001bae:	f007 ff5f 	bl	8009a70 <iprintf>
		status = VL53L4CD_GetSensorId(address, &sensor_id);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	891b      	ldrh	r3, [r3, #8]
 8001bb6:	f107 020c 	add.w	r2, r7, #12
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fa66 	bl	800108e <_Z20VL53L4CD_GetSensorIdtPt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]

		if (status || (sensor_id != 0xEBAA))
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <_ZN11LaserSensor5setupEv+0x86>
 8001bcc:	89bb      	ldrh	r3, [r7, #12]
 8001bce:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <_ZN11LaserSensor5setupEv+0x90>
		{
			printf("VL53L4CD not detected at requested address\n");
 8001bd6:	482a      	ldr	r0, [pc, #168]	@ (8001c80 <_ZN11LaserSensor5setupEv+0x130>)
 8001bd8:	f007 ffba 	bl	8009b50 <puts>
			return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e044      	b.n	8001c6a <_ZN11LaserSensor5setupEv+0x11a>
		}
		printf("VL53L4CD detected at address %x\n", address);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	891b      	ldrh	r3, [r3, #8]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4827      	ldr	r0, [pc, #156]	@ (8001c84 <_ZN11LaserSensor5setupEv+0x134>)
 8001be8:	f007 ff42 	bl	8009a70 <iprintf>

		/* (Mandatory) Init VL53L4CD sensor */
		printf("Initializing laser sensor\n");
 8001bec:	4826      	ldr	r0, [pc, #152]	@ (8001c88 <_ZN11LaserSensor5setupEv+0x138>)
 8001bee:	f007 ffaf 	bl	8009b50 <puts>
		status = VL53L4CD_SensorInit(address);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fa62 	bl	80010c0 <_Z19VL53L4CD_SensorInitt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <_ZN11LaserSensor5setupEv+0xc0>
		{
			printf("VL53L4CD ULD Loading failed\n");
 8001c06:	4821      	ldr	r0, [pc, #132]	@ (8001c8c <_ZN11LaserSensor5setupEv+0x13c>)
 8001c08:	f007 ffa2 	bl	8009b50 <puts>
			return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	e02c      	b.n	8001c6a <_ZN11LaserSensor5setupEv+0x11a>
		}

		// set the offset
		status = VL53L4CD_SetOffset(address, offset);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	891a      	ldrh	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f7ff fd81 	bl	8001724 <_Z18VL53L4CD_SetOffsetts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <_ZN11LaserSensor5setupEv+0xea>
		{
			printf("VL53L4CD_SetOffset failed with status %u\n", status);
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4817      	ldr	r0, [pc, #92]	@ (8001c90 <_ZN11LaserSensor5setupEv+0x140>)
 8001c32:	f007 ff1d 	bl	8009a70 <iprintf>
			return status;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	e017      	b.n	8001c6a <_ZN11LaserSensor5setupEv+0x11a>
		}

		status = VL53L4CD_StartRanging(address);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	891b      	ldrh	r3, [r3, #8]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fb19 	bl	8001276 <_Z21VL53L4CD_StartRangingt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <_ZN11LaserSensor5setupEv+0x10c>
		{
			printf("VL53L4CD_StartRanging failed with status %u\n", status);
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4810      	ldr	r0, [pc, #64]	@ (8001c94 <_ZN11LaserSensor5setupEv+0x144>)
 8001c54:	f007 ff0c 	bl	8009a70 <iprintf>
			return status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	e006      	b.n	8001c6a <_ZN11LaserSensor5setupEv+0x11a>
		}

		printf("VL53L4CD ULD ready at address %x ready\n", address);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	891b      	ldrh	r3, [r3, #8]
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <_ZN11LaserSensor5setupEv+0x148>)
 8001c64:	f007 ff04 	bl	8009a70 <iprintf>
		return 0;
 8001c68:	2300      	movs	r3, #0
	}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800a810 	.word	0x0800a810
 8001c78:	0800a820 	.word	0x0800a820
 8001c7c:	0800a850 	.word	0x0800a850
 8001c80:	0800a87c 	.word	0x0800a87c
 8001c84:	0800a8a8 	.word	0x0800a8a8
 8001c88:	0800a8cc 	.word	0x0800a8cc
 8001c8c:	0800a8e8 	.word	0x0800a8e8
 8001c90:	0800a904 	.word	0x0800a904
 8001c94:	0800a930 	.word	0x0800a930
 8001c98:	0800a960 	.word	0x0800a960

08001c9c <_ZN11LaserSensor11get_dist_mmEv>:


	int get_dist_mm()
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	{
		int status = update_distance();
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f821 	bl	8001cec <_ZN11LaserSensor15update_distanceEv>
 8001caa:	60f8      	str	r0, [r7, #12]
		if (status)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <_ZN11LaserSensor11get_dist_mmEv+0x24>
		{
			printf("VL53L4CD_GetResult failed with status %u\n", status);
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <_ZN11LaserSensor11get_dist_mmEv+0x30>)
 8001cb6:	f007 fedb 	bl	8009a70 <iprintf>
			return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cbe:	e001      	b.n	8001cc4 <_ZN11LaserSensor11get_dist_mmEv+0x28>
		}
		return results.distance_mm;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	899b      	ldrh	r3, [r3, #12]
	}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0800a988 	.word	0x0800a988

08001cd0 <_ZN11LaserSensor15clear_interruptEv>:


	void clear_interrupt()
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_ClearInterrupt(address);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fab3 	bl	8001248 <_Z23VL53L4CD_ClearInterruptt>
	}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <_ZN11LaserSensor15update_distanceEv>:
	VL53L4CD_ResultsData_t results = {};
	int16_t offset;



	int update_distance()
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	{
		// We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
		static uint32_t last_read_time = 0;
		if (HAL_GetTick() - last_read_time < 5)
 8001cf4:	f003 fc2c 	bl	8005550 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_ZN11LaserSensor15update_distanceEv+0x64>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <_ZN11LaserSensor15update_distanceEv+0x26>
		{
			return 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e01a      	b.n	8001d48 <_ZN11LaserSensor15update_distanceEv+0x5c>
		/* Use polling function to know when a new measurement is ready.
		 * Another way can be to wait for HW interrupt raised on PIN 7
		 * (GPIO 1) when a new measurement is ready */

		uint8_t isReady;
		uint8_t status = VL53L4CD_CheckForDataReady(address, &isReady);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	891b      	ldrh	r3, [r3, #8]
 8001d16:	f107 020e 	add.w	r2, r7, #14
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff faf3 	bl	8001308 <_Z26VL53L4CD_CheckForDataReadytPh>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]

		if (isReady)
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <_ZN11LaserSensor15update_distanceEv+0x5a>
		{
			/* (Mandatory) Clear HW interrupt to restart measurements */
			VL53L4CD_ClearInterrupt(address);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	891b      	ldrh	r3, [r3, #8]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fa89 	bl	8001248 <_Z23VL53L4CD_ClearInterruptt>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(address, &results);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	891a      	ldrh	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7ff fc3f 	bl	80015c4 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
		}

		return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000088 	.word	0x20000088

08001d54 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_ZNKSt14_Bit_referencecvbEv>:
#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    operator bool() const _GLIBCXX_NOEXCEPT
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZNSt14_Bit_referenceaSEb>:

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e009      	b.n	8001df6 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
      return *this;
 8001df6:	687b      	ldr	r3, [r7, #4]
    }
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    _GLIBCXX20_CONSTEXPR
    void
    _M_bump_up()
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6051      	str	r1, [r2, #4]
 8001e3c:	2b1f      	cmp	r3, #31
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1d1a      	adds	r2, r3, #4
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
	}
    }
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da00      	bge.n	8001e86 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001e84:	331f      	adds	r3, #31
 8001e86:	115b      	asrs	r3, r3, #5
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	441a      	add	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	425a      	negs	r2, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	bf58      	it	pl
 8001e9e:	4253      	negpl	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da07      	bge.n	8001eb8 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3320      	adds	r3, #32
 8001eac:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1f1a      	subs	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	605a      	str	r2, [r3, #4]
    }
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_ZStmiRKSt18_Bit_iterator_baseS1_>:
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }
#endif // three-way comparison

    friend _GLIBCXX20_CONSTEXPR ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
    {
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	461a      	mov	r2, r3
	      + __x._M_offset - __y._M_offset);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
    }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff7b 	bl	8001e04 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff6a 	bl	8001e04 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff09 	bl	8001d6c <_ZNSt14_Bit_referenceC1EPmm>
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_ZNSt13_Bit_iteratorppEv>:

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator++()
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5c 	bl	8001e2a <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001f72:	687b      	ldr	r3, [r7, #4]
    }
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff6b 	bl	8001e66 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001f90:	687b      	ldr	r3, [r7, #4]
    }
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_ZNKSt13_Bit_iteratorixEi>:
      return *this;
    }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator[](difference_type __i) const
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f80b 	bl	8001fca <_ZStplRKSt13_Bit_iteratori>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ffbc 	bl	8001f3a <_ZNKSt13_Bit_iteratordeEv>
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZStplRKSt13_Bit_iteratori>:

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fde:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ffc9 	bl	8001f7c <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001fea:	bf00      	nop
    }
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZNSt19_Bit_const_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fefc 	bl	8001e04 <_ZNSt18_Bit_iterator_baseC1EPmj>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(const _Bit_iterator& __x)
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	f7ff feea 	bl	8001e04 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e00b      	b.n	8002066 <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	1c4b      	adds	r3, r1, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002058:	2201      	movs	r2, #1
 800205a:	4807      	ldr	r0, [pc, #28]	@ (8002078 <_write+0x3c>)
 800205c:	f006 fbbc 	bl	80087d8 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbef      	blt.n	800204e <_write+0x12>
   return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000224 	.word	0x20000224

0800207c <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d104      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a03      	ldr	r2, [pc, #12]	@ (80020a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002096:	6013      	str	r3, [r2, #0]
  }
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	200002b8 	.word	0x200002b8

080020a8 <_Z11get_time_usv>:

unsigned long get_time_us() {
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_Z11get_time_usv+0x28>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <_Z11get_time_usv+0x2c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <_Z11get_time_usv+0x30>)
 80020bc:	fb03 f202 	mul.w	r2, r3, r2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20000144 	.word	0x20000144
 80020d4:	200002b8 	.word	0x200002b8
 80020d8:	000f4240 	.word	0x000f4240

080020dc <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 f9d3 	bl	8003490 <_ZNSaI11LaserSensorED1Ev>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZN11SystemStateC1Ev>:
  SERVO_CIRCLE_PLANT_ID,
  SERVO_PUSH_PLANT_ID
};


struct SystemState
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	705a      	strb	r2, [r3, #1]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	709a      	strb	r2, [r3, #2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	1d1c      	adds	r4, r3, #4
 8002112:	2300      	movs	r3, #0
 8002114:	743b      	strb	r3, [r7, #16]
 8002116:	2300      	movs	r3, #0
 8002118:	747b      	strb	r3, [r7, #17]
 800211a:	2300      	movs	r3, #0
 800211c:	74bb      	strb	r3, [r7, #18]
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	2303      	movs	r3, #3
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fa25 	bl	800357c <_ZNSaIbEC1Ev>
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	f107 0208 	add.w	r2, r7, #8
 800213a:	ca06      	ldmia	r2, {r1, r2}
 800213c:	4620      	mov	r0, r4
 800213e:	f001 fa35 	bl	80035ac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fa24 	bl	8003594 <_ZNSaIbED1Ev>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <_ZN14ReservoirStateC1Ev>:
  bool storing = false;
  std::vector<bool> servos_ok = {false, false, false};

} system_state;

struct ReservoirState
 8002156:	b590      	push	{r4, r7, lr}
 8002158:	b08b      	sub	sp, #44	@ 0x2c
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	687c      	ldr	r4, [r7, #4]
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	f8c3 200b 	str.w	r2, [r3, #11]
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	230f      	movs	r3, #15
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f001 f9fc 	bl	800357c <_ZNSaIbEC1Ev>
 8002184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002188:	f107 020c 	add.w	r2, r7, #12
 800218c:	ca06      	ldmia	r2, {r1, r2}
 800218e:	4620      	mov	r0, r4
 8002190:	f001 fa0c 	bl	80035ac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 8002194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002198:	4618      	mov	r0, r3
 800219a:	f001 f9fb 	bl	8003594 <_ZNSaIbED1Ev>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	372c      	adds	r7, #44	@ 0x2c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <_Z15print_reservoirv>:
  int head = 0;
  int nb_stored = 0;
} reservoir_state;

void print_reservoir()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
  // print reservoir state
  printf("\n");
 80021ba:	200a      	movs	r0, #10
 80021bc:	f007 fc6a 	bl	8009a94 <putchar>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e016      	b.n	80021f4 <_Z15print_reservoirv+0x40>
  {
    printf("%s", reservoir_state.slots[i] ? "1" : "0");
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	491a      	ldr	r1, [pc, #104]	@ (8002234 <_Z15print_reservoirv+0x80>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 fa38 	bl	8003642 <_ZNSt6vectorIbSaIbEEixEj>
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fddc 	bl	8001d92 <_ZNKSt14_Bit_referencecvbEv>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_Z15print_reservoirv+0x30>
 80021e0:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <_Z15print_reservoirv+0x84>)
 80021e2:	e000      	b.n	80021e6 <_Z15print_reservoirv+0x32>
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <_Z15print_reservoirv+0x88>)
 80021e6:	4619      	mov	r1, r3
 80021e8:	4815      	ldr	r0, [pc, #84]	@ (8002240 <_Z15print_reservoirv+0x8c>)
 80021ea:	f007 fc41 	bl	8009a70 <iprintf>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	480f      	ldr	r0, [pc, #60]	@ (8002234 <_Z15print_reservoirv+0x80>)
 80021f6:	f001 fa07 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	429a      	cmp	r2, r3
 8002200:	bf8c      	ite	hi
 8002202:	2301      	movhi	r3, #1
 8002204:	2300      	movls	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1dc      	bne.n	80021c6 <_Z15print_reservoirv+0x12>

  }
  printf("nb stored: %d\n", reservoir_state.nb_stored);
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <_Z15print_reservoirv+0x80>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4619      	mov	r1, r3
 8002212:	480c      	ldr	r0, [pc, #48]	@ (8002244 <_Z15print_reservoirv+0x90>)
 8002214:	f007 fc2c 	bl	8009a70 <iprintf>
  printf("head: %d\n", reservoir_state.head);
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <_Z15print_reservoirv+0x80>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4619      	mov	r1, r3
 800221e:	480a      	ldr	r0, [pc, #40]	@ (8002248 <_Z15print_reservoirv+0x94>)
 8002220:	f007 fc26 	bl	8009a70 <iprintf>
  printf("\n");
 8002224:	200a      	movs	r0, #10
 8002226:	f007 fc35 	bl	8009a94 <putchar>
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200006ac 	.word	0x200006ac
 8002238:	0800a9b4 	.word	0x0800a9b4
 800223c:	0800a9b8 	.word	0x0800a9b8
 8002240:	0800a9bc 	.word	0x0800a9bc
 8002244:	0800a9c0 	.word	0x0800a9c0
 8002248:	0800a9d0 	.word	0x0800a9d0

0800224c <_Z11ping_servosv>:

// ================================================ DIAGNOSTIC FUNCTIONS ===============================================

int ping_servos()
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
  int res = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	e021      	b.n	80022a0 <_Z11ping_servosv+0x54>
  {
    int id = servo_ids_to_check[i];
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4619      	mov	r1, r3
 8002260:	4818      	ldr	r0, [pc, #96]	@ (80022c4 <_Z11ping_servosv+0x78>)
 8002262:	f001 f97b 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 8002266:	4603      	mov	r3, r0
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	607b      	str	r3, [r7, #4]
    int pos = servos.ReadPos(id);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	4815      	ldr	r0, [pc, #84]	@ (80022c8 <_Z11ping_servosv+0x7c>)
 8002274:	f7fe fe9b 	bl	8000fae <_ZN7SCServo7ReadPosEh>
 8002278:	6038      	str	r0, [r7, #0]

    if(pos == -1)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002280:	d107      	bne.n	8002292 <_Z11ping_servosv+0x46>
    {
      printf("Error reading servo %d\n", id);
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4811      	ldr	r0, [pc, #68]	@ (80022cc <_Z11ping_servosv+0x80>)
 8002286:	f007 fbf3 	bl	8009a70 <iprintf>
      res = -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e003      	b.n	800229a <_Z11ping_servosv+0x4e>
    }
    else
    {
      printf("Servo %d was ping successfully\n", id);
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	480e      	ldr	r0, [pc, #56]	@ (80022d0 <_Z11ping_servosv+0x84>)
 8002296:	f007 fbeb 	bl	8009a70 <iprintf>
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3301      	adds	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <_Z11ping_servosv+0x78>)
 80022a2:	f001 f9e6 	bl	8003672 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	bf8c      	ite	hi
 80022ae:	2301      	movhi	r3, #1
 80022b0:	2300      	movls	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1d1      	bne.n	800225c <_Z11ping_servosv+0x10>
    }
  }
  return res;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000688 	.word	0x20000688
 80022c8:	20000684 	.word	0x20000684
 80022cc:	0800a9dc 	.word	0x0800a9dc
 80022d0:	0800a9f4 	.word	0x0800a9f4

080022d4 <_Z12setup_lasersv>:
 * @brief Setup the distance sensors
 *
 * @return int 0 if all sensors are setup correctly, otherwise the error code
 */
int setup_lasers()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	2110      	movs	r1, #16
 80022de:	4819      	ldr	r0, [pc, #100]	@ (8002344 <_Z12setup_lasersv+0x70>)
 80022e0:	f003 fecc 	bl	800607c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	4816      	ldr	r0, [pc, #88]	@ (8002344 <_Z12setup_lasersv+0x70>)
 80022ea:	f003 fec7 	bl	800607c <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  int status = sensors[LEFT].setup();
 80022ee:	2100      	movs	r1, #0
 80022f0:	4815      	ldr	r0, [pc, #84]	@ (8002348 <_Z12setup_lasersv+0x74>)
 80022f2:	f001 f9ce 	bl	8003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fc29 	bl	8001b50 <_ZN11LaserSensor5setupEv>
 80022fe:	6078      	str	r0, [r7, #4]

  if(status)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <_Z12setup_lasersv+0x36>
  {
    return status;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	e018      	b.n	800233c <_Z12setup_lasersv+0x68>
  }

  /* Setup the second laser sensor */
  status = sensors[RIGHT].setup();
 800230a:	2101      	movs	r1, #1
 800230c:	480e      	ldr	r0, [pc, #56]	@ (8002348 <_Z12setup_lasersv+0x74>)
 800230e:	f001 f9c0 	bl	8003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002312:	4603      	mov	r3, r0
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fc1b 	bl	8001b50 <_ZN11LaserSensor5setupEv>
 800231a:	6078      	str	r0, [r7, #4]

  if(status)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <_Z12setup_lasersv+0x52>
  {
    return status;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	e00a      	b.n	800233c <_Z12setup_lasersv+0x68>
  }

  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	2110      	movs	r1, #16
 800232a:	4806      	ldr	r0, [pc, #24]	@ (8002344 <_Z12setup_lasersv+0x70>)
 800232c:	f003 fea6 	bl	800607c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	2120      	movs	r1, #32
 8002334:	4803      	ldr	r0, [pc, #12]	@ (8002344 <_Z12setup_lasersv+0x70>)
 8002336:	f003 fea1 	bl	800607c <HAL_GPIO_WritePin>

  return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	48000400 	.word	0x48000400
 8002348:	200005f0 	.word	0x200005f0

0800234c <_Z29reservoir_initialize_and_testv>:


void reservoir_initialize_and_test()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  reservoir_rotate(2);
 8002350:	2002      	movs	r0, #2
 8002352:	f000 f9d5 	bl	8002700 <_Z16reservoir_rotatei>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <_Z24lift_initialize_and_testv>:

void lift_initialize_and_test()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  // Initialization steps:
  // 1. If button pressed, move up a little
  // 2. Move down until button is pressed

  stepper_lift.set_pos(0);
 8002360:	2100      	movs	r1, #0
 8002362:	4814      	ldr	r0, [pc, #80]	@ (80023b4 <_Z24lift_initialize_and_testv+0x58>)
 8002364:	f7ff fab1 	bl	80018ca <_ZN7Stepper7set_posEi>

  // 1
  if(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_RESET)
 8002368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800236c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002370:	f003 fe6c 	bl	800604c <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d012      	beq.n	80023aa <_Z24lift_initialize_and_testv+0x4e>
  {
    stepper_lift.set_goal(3200);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800238a:	480a      	ldr	r0, [pc, #40]	@ (80023b4 <_Z24lift_initialize_and_testv+0x58>)
 800238c:	f7ff fa5e 	bl	800184c <_ZN7Stepper8set_goalEib>
    while(!stepper_lift.is_stopped())
 8002390:	e002      	b.n	8002398 <_Z24lift_initialize_and_testv+0x3c>
    {
      stepper_lift.spin_once();
 8002392:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <_Z24lift_initialize_and_testv+0x58>)
 8002394:	f7ff faa7 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
    while(!stepper_lift.is_stopped())
 8002398:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <_Z24lift_initialize_and_testv+0x58>)
 800239a:	f7ff fb16 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 800239e:	4603      	mov	r3, r0
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f3      	bne.n	8002392 <_Z24lift_initialize_and_testv+0x36>
    }
  }

  // 2
  lift_go_down();
 80023aa:	f000 f819 	bl	80023e0 <_Z12lift_go_downv>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200005fc 	.word	0x200005fc

080023b8 <_Z27hoppers_initialize_and_testv>:
/**
 * Close then open the hoppers
 *
 */
void hoppers_initialize_and_test()
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  hopper_close(LEFT);
 80023bc:	2000      	movs	r0, #0
 80023be:	f000 f8af 	bl	8002520 <_Z12hopper_closei>
  hopper_close(RIGHT);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 f8ac 	bl	8002520 <_Z12hopper_closei>

  HAL_Delay(1000); // Because hoppers functions are not blocking
 80023c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023cc:	f003 f8cc 	bl	8005568 <HAL_Delay>

  hopper_open(LEFT);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 f8cb 	bl	800256c <_Z11hopper_openi>
  hopper_open(RIGHT);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f000 f8c8 	bl	800256c <_Z11hopper_openi>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_Z12lift_go_downv>:


// ----------------------------------------- LIFT -----------------------------------------

void lift_go_down()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(-100000);
 80023e4:	2200      	movs	r2, #0
 80023e6:	4919      	ldr	r1, [pc, #100]	@ (800244c <_Z12lift_go_downv+0x6c>)
 80023e8:	4819      	ldr	r0, [pc, #100]	@ (8002450 <_Z12lift_go_downv+0x70>)
 80023ea:	f7ff fa2f 	bl	800184c <_ZN7Stepper8set_goalEib>
  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 80023ee:	e002      	b.n	80023f6 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 80023f0:	4817      	ldr	r0, [pc, #92]	@ (8002450 <_Z12lift_go_downv+0x70>)
 80023f2:	f7ff fa78 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 80023f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fe:	f003 fe25 	bl	800604c <HAL_GPIO_ReadPin>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ee      	bne.n	80023f0 <_Z12lift_go_downv+0x10>
  }

  // Turn (offset)
  stepper_lift.set_pos(0);
 8002412:	2100      	movs	r1, #0
 8002414:	480e      	ldr	r0, [pc, #56]	@ (8002450 <_Z12lift_go_downv+0x70>)
 8002416:	f7ff fa58 	bl	80018ca <_ZN7Stepper7set_posEi>
  stepper_lift.set_goal(LIFT_OFFSET_FROM_BUTTON, true);
 800241a:	2201      	movs	r2, #1
 800241c:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <_Z12lift_go_downv+0x70>)
 8002422:	f7ff fa13 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002426:	e002      	b.n	800242e <_Z12lift_go_downv+0x4e>
  {
    stepper_lift.spin_once();
 8002428:	4809      	ldr	r0, [pc, #36]	@ (8002450 <_Z12lift_go_downv+0x70>)
 800242a:	f7ff fa5c 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 800242e:	4808      	ldr	r0, [pc, #32]	@ (8002450 <_Z12lift_go_downv+0x70>)
 8002430:	f7ff facb 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 8002434:	4603      	mov	r3, r0
 8002436:	f083 0301 	eor.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f3      	bne.n	8002428 <_Z12lift_go_downv+0x48>
  }

  stepper_lift.set_pos(0);
 8002440:	2100      	movs	r1, #0
 8002442:	4803      	ldr	r0, [pc, #12]	@ (8002450 <_Z12lift_go_downv+0x70>)
 8002444:	f7ff fa41 	bl	80018ca <_ZN7Stepper7set_posEi>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffe7960 	.word	0xfffe7960
 8002450:	200005fc 	.word	0x200005fc

08002454 <_Z10lift_go_upv>:


void lift_go_up()
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 800245e:	4809      	ldr	r0, [pc, #36]	@ (8002484 <_Z10lift_go_upv+0x30>)
 8002460:	f7ff f9f4 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002464:	e002      	b.n	800246c <_Z10lift_go_upv+0x18>
  {
    stepper_lift.spin_once();
 8002466:	4807      	ldr	r0, [pc, #28]	@ (8002484 <_Z10lift_go_upv+0x30>)
 8002468:	f7ff fa3d 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <_Z10lift_go_upv+0x30>)
 800246e:	f7ff faac 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 8002472:	4603      	mov	r3, r0
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f3      	bne.n	8002466 <_Z10lift_go_upv+0x12>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200005fc 	.word	0x200005fc

08002488 <_Z14lift_go_middlev>:


void lift_go_middle()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002492:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <_Z14lift_go_middlev+0x30>)
 8002494:	f7ff f9da 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002498:	e002      	b.n	80024a0 <_Z14lift_go_middlev+0x18>
  {
    stepper_lift.spin_once();
 800249a:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <_Z14lift_go_middlev+0x30>)
 800249c:	f7ff fa23 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 80024a0:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <_Z14lift_go_middlev+0x30>)
 80024a2:	f7ff fa92 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f3      	bne.n	800249a <_Z14lift_go_middlev+0x12>
  }
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200005fc 	.word	0x200005fc

080024bc <_Z14grabber_extendv>:

// ----------------------------------------- GRABBER -----------------------------------------

void grabber_extend()
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_EXTEND, 1000);
 80024c2:	2301      	movs	r3, #1
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ca:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80024ce:	2108      	movs	r1, #8
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <_Z14grabber_extendv+0x28>)
 80024d2:	f7fe fcde 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 80024d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024da:	f003 f845 	bl	8005568 <HAL_Delay>
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000684 	.word	0x20000684

080024e8 <_Z15grabber_retractb>:


void grabber_retract(bool block)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 500);
 80024f2:	2301      	movs	r3, #1
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024fa:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80024fe:	2108      	movs	r1, #8
 8002500:	4806      	ldr	r0, [pc, #24]	@ (800251c <_Z15grabber_retractb+0x34>)
 8002502:	f7fe fcc6 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <_Z15grabber_retractb+0x2c>
 800250c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002510:	f003 f82a 	bl	8005568 <HAL_Delay>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000684 	.word	0x20000684

08002520 <_Z12hopper_closei>:


// ----------------------------------------- HOPPERS -----------------------------------------

void hopper_close(int side)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_close[side], 1000);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <_Z12hopper_closei+0x40>)
 800252e:	f001 f815 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 8002532:	4603      	mov	r3, r0
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b2dc      	uxtb	r4, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	4809      	ldr	r0, [pc, #36]	@ (8002564 <_Z12hopper_closei+0x44>)
 800253e:	f001 f80d 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 8002542:	4603      	mov	r3, r0
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254e:	4621      	mov	r1, r4
 8002550:	4805      	ldr	r0, [pc, #20]	@ (8002568 <_Z12hopper_closei+0x48>)
 8002552:	f7fe fc9e 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bd90      	pop	{r4, r7, pc}
 800255e:	bf00      	nop
 8002560:	200005cc 	.word	0x200005cc
 8002564:	200005e4 	.word	0x200005e4
 8002568:	20000684 	.word	0x20000684

0800256c <_Z11hopper_openi>:


void hopper_open(int side)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_open[side], 500);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4619      	mov	r1, r3
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <_Z11hopper_openi+0x40>)
 800257a:	f000 ffef 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 800257e:	4603      	mov	r3, r0
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b2dc      	uxtb	r4, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4619      	mov	r1, r3
 8002588:	4809      	ldr	r0, [pc, #36]	@ (80025b0 <_Z11hopper_openi+0x44>)
 800258a:	f000 ffe7 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 800258e:	4603      	mov	r3, r0
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2301      	movs	r3, #1
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800259a:	4621      	mov	r1, r4
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <_Z11hopper_openi+0x48>)
 800259e:	f7fe fc78 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200005cc 	.word	0x200005cc
 80025b0:	200005d8 	.word	0x200005d8
 80025b4:	20000684 	.word	0x20000684

080025b8 <_Z16reservoir_rotateb>:


// ---------------------------------------- RESERVOIR ----------------------------------------

void reservoir_rotate(bool keep_speed=false)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  // Set big goal. When button is pressed, reset current pos to 0 and stop the motor
  stepper_res.set_pos(0);
 80025c2:	2100      	movs	r1, #0
 80025c4:	482d      	ldr	r0, [pc, #180]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 80025c6:	f7ff f980 	bl	80018ca <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(100000, keep_speed);
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	461a      	mov	r2, r3
 80025ce:	492c      	ldr	r1, [pc, #176]	@ (8002680 <_Z16reservoir_rotateb+0xc8>)
 80025d0:	482a      	ldr	r0, [pc, #168]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 80025d2:	f7ff f93b 	bl	800184c <_ZN7Stepper8set_goalEib>

  // Turn untill the button is released
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 80025d6:	e002      	b.n	80025de <_Z16reservoir_rotateb+0x26>
  {
    stepper_res.spin_once();
 80025d8:	4828      	ldr	r0, [pc, #160]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 80025da:	f7ff f984 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 80025de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e6:	f003 fd31 	bl	800604c <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <_Z16reservoir_rotateb+0x20>
  }

  // Debouncing: spin for 200ms
  unsigned long start = HAL_GetTick();
 80025fa:	f002 ffa9 	bl	8005550 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]
  while(HAL_GetTick() - start < 200)
 8002600:	e002      	b.n	8002608 <_Z16reservoir_rotateb+0x50>
  {
    stepper_res.spin_once();
 8002602:	481e      	ldr	r0, [pc, #120]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 8002604:	f7ff f96f 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(HAL_GetTick() - start < 200)
 8002608:	f002 ffa2 	bl	8005550 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2bc7      	cmp	r3, #199	@ 0xc7
 8002614:	bf94      	ite	ls
 8002616:	2301      	movls	r3, #1
 8002618:	2300      	movhi	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <_Z16reservoir_rotateb+0x4a>
  }

  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002620:	e002      	b.n	8002628 <_Z16reservoir_rotateb+0x70>
  {
    stepper_res.spin_once();
 8002622:	4816      	ldr	r0, [pc, #88]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 8002624:	f7ff f95f 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800262c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002630:	f003 fd0c 	bl	800604c <HAL_GPIO_ReadPin>
 8002634:	4603      	mov	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ee      	bne.n	8002622 <_Z16reservoir_rotateb+0x6a>
  }

  // Turn (offset)
  stepper_res.set_pos(0);
 8002644:	2100      	movs	r1, #0
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 8002648:	f7ff f93f 	bl	80018ca <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FROM_BUTTON, true);
 800264c:	2201      	movs	r2, #1
 800264e:	2164      	movs	r1, #100	@ 0x64
 8002650:	480a      	ldr	r0, [pc, #40]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 8002652:	f7ff f8fb 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002656:	e002      	b.n	800265e <_Z16reservoir_rotateb+0xa6>
  {
    stepper_res.spin_once();
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 800265a:	f7ff f944 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 800265e:	4807      	ldr	r0, [pc, #28]	@ (800267c <_Z16reservoir_rotateb+0xc4>)
 8002660:	f7ff f9b3 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 8002664:	4603      	mov	r3, r0
 8002666:	f083 0301 	eor.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f3      	bne.n	8002658 <_Z16reservoir_rotateb+0xa0>
  }

}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000640 	.word	0x20000640
 8002680:	000186a0 	.word	0x000186a0

08002684 <_Z27reservoir_align_with_outputv>:

void reservoir_align_with_output()
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 8002688:	2100      	movs	r1, #0
 800268a:	480c      	ldr	r0, [pc, #48]	@ (80026bc <_Z27reservoir_align_with_outputv+0x38>)
 800268c:	f7ff f91d 	bl	80018ca <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FOR_OUTPUT);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002696:	4809      	ldr	r0, [pc, #36]	@ (80026bc <_Z27reservoir_align_with_outputv+0x38>)
 8002698:	f7ff f8d8 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 800269c:	e002      	b.n	80026a4 <_Z27reservoir_align_with_outputv+0x20>
  {
    stepper_res.spin_once();
 800269e:	4807      	ldr	r0, [pc, #28]	@ (80026bc <_Z27reservoir_align_with_outputv+0x38>)
 80026a0:	f7ff f921 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <_Z27reservoir_align_with_outputv+0x38>)
 80026a6:	f7ff f990 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f3      	bne.n	800269e <_Z27reservoir_align_with_outputv+0x1a>
  }
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000640 	.word	0x20000640

080026c0 <_Z22reservoir_realign_backv>:

void reservoir_realign_back()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 80026c4:	2100      	movs	r1, #0
 80026c6:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <_Z22reservoir_realign_backv+0x38>)
 80026c8:	f7ff f8ff 	bl	80018ca <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(-RES_OFFSET_FOR_OUTPUT);
 80026cc:	2200      	movs	r2, #0
 80026ce:	490b      	ldr	r1, [pc, #44]	@ (80026fc <_Z22reservoir_realign_backv+0x3c>)
 80026d0:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <_Z22reservoir_realign_backv+0x38>)
 80026d2:	f7ff f8bb 	bl	800184c <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 80026d6:	e002      	b.n	80026de <_Z22reservoir_realign_backv+0x1e>
  {
    stepper_res.spin_once();
 80026d8:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <_Z22reservoir_realign_backv+0x38>)
 80026da:	f7ff f904 	bl	80018e6 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 80026de:	4806      	ldr	r0, [pc, #24]	@ (80026f8 <_Z22reservoir_realign_backv+0x38>)
 80026e0:	f7ff f973 	bl	80019ca <_ZN7Stepper10is_stoppedEv>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f3      	bne.n	80026d8 <_Z22reservoir_realign_backv+0x18>
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000640 	.word	0x20000640
 80026fc:	fffffce0 	.word	0xfffffce0

08002700 <_Z16reservoir_rotatei>:


void reservoir_rotate(int n_slots)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < n_slots; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e00b      	b.n	8002726 <_Z16reservoir_rotatei+0x26>
  {
    reservoir_rotate(i>0);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	bfcc      	ite	gt
 8002714:	2301      	movgt	r3, #1
 8002716:	2300      	movle	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff4c 	bl	80025b8 <_Z16reservoir_rotateb>
  for(int i = 0; i < n_slots; i++)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3301      	adds	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	dbef      	blt.n	800270e <_Z16reservoir_rotatei+0xe>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_Z14close_fildeferv>:

void close_fildefer()
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_CLOSED, 1000);
 800273e:	2301      	movs	r3, #1
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 800274a:	2112      	movs	r1, #18
 800274c:	4802      	ldr	r0, [pc, #8]	@ (8002758 <_Z14close_fildeferv+0x20>)
 800274e:	f7fe fba0 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000684 	.word	0x20000684

0800275c <_Z13hide_fildeferv>:

void hide_fildefer()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
 8002762:	2301      	movs	r3, #1
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276a:	2264      	movs	r2, #100	@ 0x64
 800276c:	2112      	movs	r1, #18
 800276e:	4803      	ldr	r0, [pc, #12]	@ (800277c <_Z13hide_fildeferv+0x20>)
 8002770:	f7fe fb8f 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000684 	.word	0x20000684

08002780 <_Z19fildefer_initializev>:

void fildefer_initialize()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  // servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
  hide_fildefer();
 8002784:	f7ff ffea 	bl	800275c <_Z13hide_fildeferv>
  HAL_Delay(1000);
 8002788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800278c:	f002 feec 	bl	8005568 <HAL_Delay>
  close_fildefer();
 8002790:	f7ff ffd2 	bl	8002738 <_Z14close_fildeferv>
  HAL_Delay(1000);
 8002794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002798:	f002 fee6 	bl	8005568 <HAL_Delay>
  hide_fildefer();
 800279c:	f7ff ffde 	bl	800275c <_Z13hide_fildeferv>
  HAL_Delay(1000);
 80027a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027a4:	f002 fee0 	bl	8005568 <HAL_Delay>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_Z10push_plantv>:

void push_plant()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_PUSHED, 500);
 80027b2:	2301      	movs	r3, #1
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027ba:	22dc      	movs	r2, #220	@ 0xdc
 80027bc:	2109      	movs	r1, #9
 80027be:	4803      	ldr	r0, [pc, #12]	@ (80027cc <_Z10push_plantv+0x20>)
 80027c0:	f7fe fb67 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000684 	.word	0x20000684

080027d0 <_Z19retract_servo_plantv>:
void retract_servo_plant()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED, 200);
 80027d6:	2301      	movs	r3, #1
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	23c8      	movs	r3, #200	@ 0xc8
 80027dc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80027e0:	2109      	movs	r1, #9
 80027e2:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <_Z19retract_servo_plantv+0x20>)
 80027e4:	f7fe fb55 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000684 	.word	0x20000684

080027f4 <_Z17open_circle_plantv>:

void open_circle_plant()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN, 200);
 80027fa:	2301      	movs	r3, #1
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	23c8      	movs	r3, #200	@ 0xc8
 8002800:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002804:	2110      	movs	r1, #16
 8002806:	4803      	ldr	r0, [pc, #12]	@ (8002814 <_Z17open_circle_plantv+0x20>)
 8002808:	f7fe fb43 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000684 	.word	0x20000684

08002818 <_Z22open_circle_plant_morev>:
void open_circle_plant_more()
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN_MORE, 200);
 800281e:	2301      	movs	r3, #1
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	23c8      	movs	r3, #200	@ 0xc8
 8002824:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002828:	2110      	movs	r1, #16
 800282a:	4803      	ldr	r0, [pc, #12]	@ (8002838 <_Z22open_circle_plant_morev+0x20>)
 800282c:	f7fe fb31 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000684 	.word	0x20000684

0800283c <_Z18close_circle_plantv>:
void close_circle_plant()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE, 200);
 8002842:	2301      	movs	r3, #1
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	23c8      	movs	r3, #200	@ 0xc8
 8002848:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800284c:	2110      	movs	r1, #16
 800284e:	4803      	ldr	r0, [pc, #12]	@ (800285c <_Z18close_circle_plantv+0x20>)
 8002850:	f7fe fb1f 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000684 	.word	0x20000684

08002860 <_Z28pusher_and_circle_initializev>:

void pusher_and_circle_initialize()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af02      	add	r7, sp, #8
  // init circle
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE+50, 200);
 8002866:	2301      	movs	r3, #1
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	23c8      	movs	r3, #200	@ 0xc8
 800286c:	f240 224e 	movw	r2, #590	@ 0x24e
 8002870:	2110      	movs	r1, #16
 8002872:	4811      	ldr	r0, [pc, #68]	@ (80028b8 <_Z28pusher_and_circle_initializev+0x58>)
 8002874:	f7fe fb0d 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 8002878:	20c8      	movs	r0, #200	@ 0xc8
 800287a:	f002 fe75 	bl	8005568 <HAL_Delay>
  close_circle_plant();
 800287e:	f7ff ffdd 	bl	800283c <_Z18close_circle_plantv>

  //init pusher
  retract_servo_plant();
 8002882:	f7ff ffa5 	bl	80027d0 <_Z19retract_servo_plantv>
  HAL_Delay(500);
 8002886:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800288a:	f002 fe6d 	bl	8005568 <HAL_Delay>
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED-50, 200);
 800288e:	2301      	movs	r3, #1
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	23c8      	movs	r3, #200	@ 0xc8
 8002894:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8002898:	2109      	movs	r1, #9
 800289a:	4807      	ldr	r0, [pc, #28]	@ (80028b8 <_Z28pusher_and_circle_initializev+0x58>)
 800289c:	f7fe faf9 	bl	8000e92 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 80028a0:	20c8      	movs	r0, #200	@ 0xc8
 80028a2:	f002 fe61 	bl	8005568 <HAL_Delay>
  retract_servo_plant();
 80028a6:	f7ff ff93 	bl	80027d0 <_Z19retract_servo_plantv>
  HAL_Delay(500);
 80028aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028ae:	f002 fe5b 	bl	8005568 <HAL_Delay>
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000684 	.word	0x20000684

080028bc <_Z25search_next_plant_to_pushv>:

int search_next_plant_to_push()
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
  // the output is aligned with the head + 5
  // we search in reverse order till we find a plant
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e02b      	b.n	8002920 <_Z25search_next_plant_to_pushv+0x64>
  {
    int index = (reservoir_state.head + 5 - i) % reservoir_state.slots.size();
 80028c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <_Z25search_next_plant_to_pushv+0x88>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	1d5a      	adds	r2, r3, #5
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	461c      	mov	r4, r3
 80028d4:	481b      	ldr	r0, [pc, #108]	@ (8002944 <_Z25search_next_plant_to_pushv+0x88>)
 80028d6:	f000 fe97 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80028da:	4603      	mov	r3, r0
 80028dc:	fbb4 f2f3 	udiv	r2, r4, r3
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	1ae3      	subs	r3, r4, r3
 80028e6:	60bb      	str	r3, [r7, #8]
    if (index < 0)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da06      	bge.n	80028fc <_Z25search_next_plant_to_pushv+0x40>
    {
      index += reservoir_state.slots.size();
 80028ee:	4815      	ldr	r0, [pc, #84]	@ (8002944 <_Z25search_next_plant_to_pushv+0x88>)
 80028f0:	f000 fe8a 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
    }

    if (reservoir_state.slots[index])
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	463b      	mov	r3, r7
 8002900:	4910      	ldr	r1, [pc, #64]	@ (8002944 <_Z25search_next_plant_to_pushv+0x88>)
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe9d 	bl	8003642 <_ZNSt6vectorIbSaIbEEixEj>
 8002908:	463b      	mov	r3, r7
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fa41 	bl	8001d92 <_ZNKSt14_Bit_referencecvbEv>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <_Z25search_next_plant_to_pushv+0x5e>
    {
      return i;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	e010      	b.n	800293c <_Z25search_next_plant_to_pushv+0x80>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3301      	adds	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4808      	ldr	r0, [pc, #32]	@ (8002944 <_Z25search_next_plant_to_pushv+0x88>)
 8002922:	f000 fe71 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	429a      	cmp	r2, r3
 800292c:	bf8c      	ite	hi
 800292e:	2301      	movhi	r3, #1
 8002930:	2300      	movls	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1c7      	bne.n	80028c8 <_Z25search_next_plant_to_pushv+0xc>
    }
  }
  return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	200006ac 	.word	0x200006ac

08002948 <_Z18push_one_plant_outv>:

void push_one_plant_out()
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
  // search for a plant to push
  int nb_slot_till_next_plant = search_next_plant_to_push();
 800294e:	f7ff ffb5 	bl	80028bc <_Z25search_next_plant_to_pushv>
 8002952:	60f8      	str	r0, [r7, #12]
  printf("\n\n");
 8002954:	484e      	ldr	r0, [pc, #312]	@ (8002a90 <_Z18push_one_plant_outv+0x148>)
 8002956:	f007 f8fb 	bl	8009b50 <puts>
  printf("next plant to push: %d\n", nb_slot_till_next_plant);
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	484d      	ldr	r0, [pc, #308]	@ (8002a94 <_Z18push_one_plant_outv+0x14c>)
 800295e:	f007 f887 	bl	8009a70 <iprintf>
  if (nb_slot_till_next_plant == -1)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002968:	f000 808e 	beq.w	8002a88 <_Z18push_one_plant_outv+0x140>
  {
    return;
  }
  HAL_Delay(2000);
 800296c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002970:	f002 fdfa 	bl	8005568 <HAL_Delay>
  // rotate the reservoir to the right position
  printf("rotate the reservoir to the right position\n");
 8002974:	4848      	ldr	r0, [pc, #288]	@ (8002a98 <_Z18push_one_plant_outv+0x150>)
 8002976:	f007 f8eb 	bl	8009b50 <puts>
  reservoir_rotate(nb_slot_till_next_plant );
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fec0 	bl	8002700 <_Z16reservoir_rotatei>
  HAL_Delay(2000);
 8002980:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002984:	f002 fdf0 	bl	8005568 <HAL_Delay>


  // rotate the reservoir by the right offset
  printf("align reservoir \n");
 8002988:	4844      	ldr	r0, [pc, #272]	@ (8002a9c <_Z18push_one_plant_outv+0x154>)
 800298a:	f007 f8e1 	bl	8009b50 <puts>
  reservoir_align_with_output();
 800298e:	f7ff fe79 	bl	8002684 <_Z27reservoir_align_with_outputv>
  HAL_Delay(2000);
 8002992:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002996:	f002 fde7 	bl	8005568 <HAL_Delay>
  printf("open circle \n");
 800299a:	4841      	ldr	r0, [pc, #260]	@ (8002aa0 <_Z18push_one_plant_outv+0x158>)
 800299c:	f007 f8d8 	bl	8009b50 <puts>
  open_circle_plant();
 80029a0:	f7ff ff28 	bl	80027f4 <_Z17open_circle_plantv>
  printf("push plant \n");
 80029a4:	483f      	ldr	r0, [pc, #252]	@ (8002aa4 <_Z18push_one_plant_outv+0x15c>)
 80029a6:	f007 f8d3 	bl	8009b50 <puts>
  push_plant();
 80029aa:	f7ff feff 	bl	80027ac <_Z10push_plantv>
  HAL_Delay(1300);
 80029ae:	f240 5014 	movw	r0, #1300	@ 0x514
 80029b2:	f002 fdd9 	bl	8005568 <HAL_Delay>
  printf("retract servo plant \n");
 80029b6:	483c      	ldr	r0, [pc, #240]	@ (8002aa8 <_Z18push_one_plant_outv+0x160>)
 80029b8:	f007 f8ca 	bl	8009b50 <puts>
  retract_servo_plant();
 80029bc:	f7ff ff08 	bl	80027d0 <_Z19retract_servo_plantv>
  printf("retract circle\n");
 80029c0:	483a      	ldr	r0, [pc, #232]	@ (8002aac <_Z18push_one_plant_outv+0x164>)
 80029c2:	f007 f8c5 	bl	8009b50 <puts>
  open_circle_plant_more();
 80029c6:	f7ff ff27 	bl	8002818 <_Z22open_circle_plant_morev>
  HAL_Delay(200);
 80029ca:	20c8      	movs	r0, #200	@ 0xc8
 80029cc:	f002 fdcc 	bl	8005568 <HAL_Delay>
  close_circle_plant();
 80029d0:	f7ff ff34 	bl	800283c <_Z18close_circle_plantv>
  reservoir_realign_back();
 80029d4:	f7ff fe74 	bl	80026c0 <_Z22reservoir_realign_backv>

  // update reservoir state at the head + 5
  printf("on veut enlever à %d \n",(reservoir_state.head+5-nb_slot_till_next_plant)%reservoir_state.slots.size());
 80029d8:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	1d5a      	adds	r2, r3, #5
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	461c      	mov	r4, r3
 80029e4:	4832      	ldr	r0, [pc, #200]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 80029e6:	f000 fe0f 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80029ea:	4603      	mov	r3, r0
 80029ec:	fbb4 f2f3 	udiv	r2, r4, r3
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	1ae3      	subs	r3, r4, r3
 80029f6:	4619      	mov	r1, r3
 80029f8:	482e      	ldr	r0, [pc, #184]	@ (8002ab4 <_Z18push_one_plant_outv+0x16c>)
 80029fa:	f007 f839 	bl	8009a70 <iprintf>
  reservoir_state.slots[(reservoir_state.head+5-nb_slot_till_next_plant) % reservoir_state.slots.size()] = false;
 80029fe:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	1d5a      	adds	r2, r3, #5
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	461c      	mov	r4, r3
 8002a0a:	4829      	ldr	r0, [pc, #164]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a0c:	f000 fdfc 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002a10:	4603      	mov	r3, r0
 8002a12:	fbb4 f2f3 	udiv	r2, r4, r3
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	1ae2      	subs	r2, r4, r3
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4924      	ldr	r1, [pc, #144]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fe0e 	bl	8003642 <_ZNSt6vectorIbSaIbEEixEj>
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f9c6 	bl	8001dbc <_ZNSt14_Bit_referenceaSEb>
  reservoir_state.nb_stored--;
 8002a30:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a38:	6193      	str	r3, [r2, #24]
  reservoir_state.head = reservoir_state.head - nb_slot_till_next_plant;
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a44:	6153      	str	r3, [r2, #20]
  if (reservoir_state.head < 0)
 8002a46:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	da0a      	bge.n	8002a64 <_Z18push_one_plant_outv+0x11c>
  {
    reservoir_state.head += reservoir_state.slots.size();
 8002a4e:	4818      	ldr	r0, [pc, #96]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a50:	f000 fdda 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a58:	6952      	ldr	r2, [r2, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	e00e      	b.n	8002a82 <_Z18push_one_plant_outv+0x13a>
  }
  else
  {
    reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	461c      	mov	r4, r3
 8002a6a:	4811      	ldr	r0, [pc, #68]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a6c:	f000 fdcc 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	fbb4 f2f3 	udiv	r2, r4, r3
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	1ae3      	subs	r3, r4, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <_Z18push_one_plant_outv+0x168>)
 8002a80:	615a      	str	r2, [r3, #20]
  }
  print_reservoir();
 8002a82:	f7ff fb97 	bl	80021b4 <_Z15print_reservoirv>
 8002a86:	e000      	b.n	8002a8a <_Z18push_one_plant_outv+0x142>
    return;
 8002a88:	bf00      	nop
}
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	0800aa14 	.word	0x0800aa14
 8002a94:	0800aa18 	.word	0x0800aa18
 8002a98:	0800aa30 	.word	0x0800aa30
 8002a9c:	0800aa5c 	.word	0x0800aa5c
 8002aa0:	0800aa70 	.word	0x0800aa70
 8002aa4:	0800aa80 	.word	0x0800aa80
 8002aa8:	0800aa8c 	.word	0x0800aa8c
 8002aac:	0800aaa4 	.word	0x0800aaa4
 8002ab0:	200006ac 	.word	0x200006ac
 8002ab4:	0800aab4 	.word	0x0800aab4

08002ab8 <_Z31hopper_wait_and_close_spin_oncei>:

// =============================================== HIGH LEVEL ACTIONS =================================================


bool hopper_wait_and_close_spin_once(int side)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  // Check if distance < 50mm for left plant
  int dist = sensors[side].get_dist_mm();
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <_Z31hopper_wait_and_close_spin_oncei+0x38>)
 8002ac6:	f000 fde4 	bl	8003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f8e5 	bl	8001c9c <_ZN11LaserSensor11get_dist_mmEv>
 8002ad2:	60f8      	str	r0, [r7, #12]
  if(dist < 50)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b31      	cmp	r3, #49	@ 0x31
 8002ad8:	dc04      	bgt.n	8002ae4 <_Z31hopper_wait_and_close_spin_oncei+0x2c>
  {
    // Close the hopper
    hopper_close(side);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fd20 	bl	8002520 <_Z12hopper_closei>
    return true;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <_Z31hopper_wait_and_close_spin_oncei+0x2e>
  }
  return false;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200005f0 	.word	0x200005f0

08002af4 <_Z20request_store_plantsv>:


void request_store_plants()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  system_state.storing = true;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <_Z20request_store_plantsv+0x34>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	709a      	strb	r2, [r3, #2]

  // Clear distance sensors buffers (?)
  sensors[LEFT].clear_interrupt();
 8002afe:	2100      	movs	r1, #0
 8002b00:	480a      	ldr	r0, [pc, #40]	@ (8002b2c <_Z20request_store_plantsv+0x38>)
 8002b02:	f000 fdc6 	bl	8003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f8e1 	bl	8001cd0 <_ZN11LaserSensor15clear_interruptEv>
  sensors[RIGHT].clear_interrupt();
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4806      	ldr	r0, [pc, #24]	@ (8002b2c <_Z20request_store_plantsv+0x38>)
 8002b12:	f000 fdbe 	bl	8003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f8d9 	bl	8001cd0 <_ZN11LaserSensor15clear_interruptEv>
  HAL_Delay(100);
 8002b1e:	2064      	movs	r0, #100	@ 0x64
 8002b20:	f002 fd22 	bl	8005568 <HAL_Delay>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000694 	.word	0x20000694
 8002b2c:	200005f0 	.word	0x200005f0

08002b30 <_Z22store_plants_spin_oncev>:


// /!\ DELAY IN THIS FUNCTION
void store_plants_spin_once()
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0

  if(!system_state.storing)
 8002b36:	4b64      	ldr	r3, [pc, #400]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b38:	789b      	ldrb	r3, [r3, #2]
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 80bd 	bne.w	8002cc0 <_Z22store_plants_spin_oncev+0x190>
  {
    return;
  }

  if(!system_state.hopper_left_closed)
 8002b46:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <_Z22store_plants_spin_oncev+0x32>
  {
    system_state.hopper_left_closed = hopper_wait_and_close_spin_once(LEFT);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7ff ffaf 	bl	8002ab8 <_Z31hopper_wait_and_close_spin_oncei>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b60:	701a      	strb	r2, [r3, #0]
  }

  if(!system_state.hopper_right_closed)
 8002b62:	4b59      	ldr	r3, [pc, #356]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <_Z22store_plants_spin_oncev+0x4e>
  {
    system_state.hopper_right_closed = hopper_wait_and_close_spin_once(RIGHT);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7ff ffa1 	bl	8002ab8 <_Z31hopper_wait_and_close_spin_oncei>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b53      	ldr	r3, [pc, #332]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b7c:	705a      	strb	r2, [r3, #1]
  }

  if(system_state.hopper_left_closed && system_state.hopper_right_closed)
 8002b7e:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 809d 	beq.w	8002cc2 <_Z22store_plants_spin_oncev+0x192>
 8002b88:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8098 	beq.w	8002cc2 <_Z22store_plants_spin_oncev+0x192>
  {
    HAL_Delay(1500); // Because hoppers functions are not blocking // TODO ADD NON BLOCKING DELAY
 8002b92:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002b96:	f002 fce7 	bl	8005568 <HAL_Delay>
    lift_go_up();
 8002b9a:	f7ff fc5b 	bl	8002454 <_Z10lift_go_upv>
    grabber_extend();
 8002b9e:	f7ff fc8d 	bl	80024bc <_Z14grabber_extendv>
    HAL_Delay(500);
 8002ba2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ba6:	f002 fcdf 	bl	8005568 <HAL_Delay>
    lift_go_middle();
 8002baa:	f7ff fc6d 	bl	8002488 <_Z14lift_go_middlev>
    grabber_retract(false);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff fc9a 	bl	80024e8 <_Z15grabber_retractb>
    lift_go_down();
 8002bb4:	f7ff fc14 	bl	80023e0 <_Z12lift_go_downv>
    hide_fildefer();
 8002bb8:	f7ff fdd0 	bl	800275c <_Z13hide_fildeferv>
    HAL_Delay(2000);
 8002bbc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002bc0:	f002 fcd2 	bl	8005568 <HAL_Delay>
    close_fildefer();
 8002bc4:	f7ff fdb8 	bl	8002738 <_Z14close_fildeferv>
    hopper_open(LEFT);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff fccf 	bl	800256c <_Z11hopper_openi>
    hopper_open(RIGHT);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff fccc 	bl	800256c <_Z11hopper_openi>
    HAL_Delay(2000);
 8002bd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002bd8:	f002 fcc6 	bl	8005568 <HAL_Delay>
    hide_fildefer();
 8002bdc:	f7ff fdbe 	bl	800275c <_Z13hide_fildeferv>
    system_state.storing = false;
 8002be0:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	709a      	strb	r2, [r3, #2]
    system_state.hopper_left_closed = false;
 8002be6:	4b38      	ldr	r3, [pc, #224]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    system_state.hopper_right_closed = false;
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <_Z22store_plants_spin_oncev+0x198>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	705a      	strb	r2, [r3, #1]

    int nb_to_turn = 3;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	617b      	str	r3, [r7, #20]
    reservoir_rotate(nb_to_turn);
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff fd82 	bl	8002700 <_Z16reservoir_rotatei>
    print_reservoir();
 8002bfc:	f7ff fada 	bl	80021b4 <_Z15print_reservoirv>

    // fill the reservoir state. 2 have to be set to true, and one skipped
    reservoir_state.slots[reservoir_state.head] = true;
 8002c00:	4b32      	ldr	r3, [pc, #200]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	461a      	mov	r2, r3
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4930      	ldr	r1, [pc, #192]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd19 	bl	8003642 <_ZNSt6vectorIbSaIbEEixEj>
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f8d1 	bl	8001dbc <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.slots[(reservoir_state.head + 1) % reservoir_state.slots.size()] = true;
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	461c      	mov	r4, r3
 8002c22:	482a      	ldr	r0, [pc, #168]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c24:	f000 fcf0 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	fbb4 f2f3 	udiv	r2, r4, r3
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	1ae2      	subs	r2, r4, r3
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4924      	ldr	r1, [pc, #144]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fd01 	bl	8003642 <_ZNSt6vectorIbSaIbEEixEj>
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f8b8 	bl	8001dbc <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.nb_stored += 2;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	3302      	adds	r3, #2
 8002c52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c54:	6193      	str	r3, [r2, #24]

    reservoir_state.head = reservoir_state.head - nb_to_turn;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c60:	6153      	str	r3, [r2, #20]
    printf("head:%d \n", reservoir_state.head);
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4819      	ldr	r0, [pc, #100]	@ (8002cd0 <_Z22store_plants_spin_oncev+0x1a0>)
 8002c6a:	f006 ff01 	bl	8009a70 <iprintf>
    if (reservoir_state.head < 0)
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da12      	bge.n	8002c9c <_Z22store_plants_spin_oncev+0x16c>
    {
      printf("head += %d \n", reservoir_state.slots.size());
 8002c76:	4815      	ldr	r0, [pc, #84]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c78:	f000 fcc6 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4814      	ldr	r0, [pc, #80]	@ (8002cd4 <_Z22store_plants_spin_oncev+0x1a4>)
 8002c82:	f006 fef5 	bl	8009a70 <iprintf>
      reservoir_state.head += reservoir_state.slots.size();
 8002c86:	4811      	ldr	r0, [pc, #68]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c88:	f000 fcbe 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c90:	6952      	ldr	r2, [r2, #20]
 8002c92:	4413      	add	r3, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	e00e      	b.n	8002cba <_Z22store_plants_spin_oncev+0x18a>
    }
    else
    {
      reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	480a      	ldr	r0, [pc, #40]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002ca4:	f000 fcb0 	bl	8003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	fbb4 f2f3 	udiv	r2, r4, r3
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1ae3      	subs	r3, r4, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <_Z22store_plants_spin_oncev+0x19c>)
 8002cb8:	615a      	str	r2, [r3, #20]
    }
    print_reservoir();
 8002cba:	f7ff fa7b 	bl	80021b4 <_Z15print_reservoirv>
 8002cbe:	e000      	b.n	8002cc2 <_Z22store_plants_spin_oncev+0x192>
    return;
 8002cc0:	bf00      	nop
  }
}
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	20000694 	.word	0x20000694
 8002ccc:	200006ac 	.word	0x200006ac
 8002cd0:	0800aacc 	.word	0x0800aacc
 8002cd4:	0800aad8 	.word	0x0800aad8

08002cd8 <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 8002cd8:	b4b0      	push	{r4, r5, r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f102 0408 	add.w	r4, r2, #8
 8002cf2:	f103 0508 	add.w	r5, r3, #8
 8002cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bcb0      	pop	{r4, r5, r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <_Z5setupv>:




void setup()
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	@ 0x30
 8002d14:	af00      	add	r7, sp, #0

  printf("Setup Begins...\n");
 8002d16:	4848      	ldr	r0, [pc, #288]	@ (8002e38 <_Z5setupv+0x128>)
 8002d18:	f006 ff1a 	bl	8009b50 <puts>

  // Initialize the status message / set has_... fields to true
  status_msg = msgs_can_ActStatus_init_zero;
 8002d1c:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	2320      	movs	r3, #32
 8002d22:	461a      	mov	r2, r3
 8002d24:	2100      	movs	r1, #0
 8002d26:	f007 f80d 	bl	8009d44 <memset>
  status_msg.has_status = true;
 8002d2a:	4b44      	ldr	r3, [pc, #272]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
  status_msg.status.has_status = true;
 8002d30:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	731a      	strb	r2, [r3, #12]
  status_msg.status.has_error = true;
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	739a      	strb	r2, [r3, #14]
  status_msg.has_plant_count = true;
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	769a      	strb	r2, [r3, #26]
  status_msg.has_action = true;
 8002d42:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	761a      	strb	r2, [r3, #24]

  status_msg.status.status = msgs_can_Status_StatusType_INIT;
 8002d48:	4b3c      	ldr	r3, [pc, #240]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	735a      	strb	r2, [r3, #13]
  status_msg.status.error = msgs_can_Status_ErrorType_NONE;
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	73da      	strb	r2, [r3, #15]
  status_msg.action = msgs_can_ActActions_INITIALIZING;
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d56:	2204      	movs	r2, #4
 8002d58:	765a      	strb	r2, [r3, #25]
  status_msg.plant_count = 0;
 8002d5a:	4b38      	ldr	r3, [pc, #224]	@ (8002e3c <_Z5setupv+0x12c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	61da      	str	r2, [r3, #28]



  // Init Steppers (and start the timer for the time_us function)
  HAL_TIM_Base_Start_IT(&htim2);
 8002d60:	4837      	ldr	r0, [pc, #220]	@ (8002e40 <_Z5setupv+0x130>)
 8002d62:	f004 ffb5 	bl	8007cd0 <HAL_TIM_Base_Start_IT>
  stepper_lift.set_speed(5000);
 8002d66:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002d6a:	4836      	ldr	r0, [pc, #216]	@ (8002e44 <_Z5setupv+0x134>)
 8002d6c:	f7fe fd58 	bl	8001820 <_ZN7Stepper9set_speedEm>

  printf("Setup lasers...\n");
 8002d70:	4835      	ldr	r0, [pc, #212]	@ (8002e48 <_Z5setupv+0x138>)
 8002d72:	f006 feed 	bl	8009b50 <puts>

  // Initialize the sensors
  if(setup_lasers() != 0)
 8002d76:	f7ff faad 	bl	80022d4 <_Z12setup_lasersv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <_Z5setupv+0x84>
  {
    printf("Error setting up the sensors\n");
 8002d8a:	4830      	ldr	r0, [pc, #192]	@ (8002e4c <_Z5setupv+0x13c>)
 8002d8c:	f006 fee0 	bl	8009b50 <puts>
    Error_Handler();
 8002d90:	f000 fb18 	bl	80033c4 <Error_Handler>
  }

  printf("Setup servos...\n");
 8002d94:	482e      	ldr	r0, [pc, #184]	@ (8002e50 <_Z5setupv+0x140>)
 8002d96:	f006 fedb 	bl	8009b50 <puts>

  if(ping_servos() != 0)
 8002d9a:	f7ff fa57 	bl	800224c <_Z11ping_servosv>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <_Z5setupv+0xa8>
  {
    printf("Error pinging servos\n");
 8002dae:	4829      	ldr	r0, [pc, #164]	@ (8002e54 <_Z5setupv+0x144>)
 8002db0:	f006 fece 	bl	8009b50 <puts>
    Error_Handler();
 8002db4:	f000 fb06 	bl	80033c4 <Error_Handler>
  }

  champi_can = ChampiCan(&hfdcan1);
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	4927      	ldr	r1, [pc, #156]	@ (8002e58 <_Z5setupv+0x148>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ff05 	bl	8000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4825      	ldr	r0, [pc, #148]	@ (8002e5c <_Z5setupv+0x14c>)
 8002dc8:	f7ff ff86 	bl	8002cd8 <_ZN9ChampiCanaSERKS_>
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd ff70 	bl	8000cb4 <_ZN9ChampiCanD1Ev>


  if (champi_can.start() != 0) {
 8002dd4:	4821      	ldr	r0, [pc, #132]	@ (8002e5c <_Z5setupv+0x14c>)
 8002dd6:	f7fd ff43 	bl	8000c60 <_ZN9ChampiCan5startEv>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <_Z5setupv+0xde>
    // TODO: On n'a jamais rencontré cette erreur.
    Error_Handler();
 8002dea:	f000 faeb 	bl	80033c4 <Error_Handler>
  }

  printf("Setup CAN Done\n");
 8002dee:	481c      	ldr	r0, [pc, #112]	@ (8002e60 <_Z5setupv+0x150>)
 8002df0:	f006 feae 	bl	8009b50 <puts>
  // champi_state = ChampiState(&champi_can, 500);
  //
  // status_msg.status.status = msgs_can_Status_StatusType_OK;
  // champi_state.report_status(status_msg);

  printf("Begin actuators initialization...\n");
 8002df4:	481b      	ldr	r0, [pc, #108]	@ (8002e64 <_Z5setupv+0x154>)
 8002df6:	f006 feab 	bl	8009b50 <puts>

  // Initialize / move actuators
  pusher_and_circle_initialize();
 8002dfa:	f7ff fd31 	bl	8002860 <_Z28pusher_and_circle_initializev>
  fildefer_initialize();
 8002dfe:	f7ff fcbf 	bl	8002780 <_Z19fildefer_initializev>
  reservoir_initialize_and_test();
 8002e02:	f7ff faa3 	bl	800234c <_Z29reservoir_initialize_and_testv>

  hoppers_initialize_and_test();
 8002e06:	f7ff fad7 	bl	80023b8 <_Z27hoppers_initialize_and_testv>
  HAL_Delay(200);
 8002e0a:	20c8      	movs	r0, #200	@ 0xc8
 8002e0c:	f002 fbac 	bl	8005568 <HAL_Delay>
  grabber_retract();
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7ff fb69 	bl	80024e8 <_Z15grabber_retractb>
  lift_initialize_and_test();
 8002e16:	f7ff faa1 	bl	800235c <_Z24lift_initialize_and_testv>

  printf("Initialization Done\n");
 8002e1a:	4813      	ldr	r0, [pc, #76]	@ (8002e68 <_Z5setupv+0x158>)
 8002e1c:	f006 fe98 	bl	8009b50 <puts>
  //request_store_plants();



  // Switch led ON to indicate that we're running
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e26:	4811      	ldr	r0, [pc, #68]	@ (8002e6c <_Z5setupv+0x15c>)
 8002e28:	f003 f928 	bl	800607c <HAL_GPIO_WritePin>

  // status_msg.action = msgs_can_ActActions_FREE;
  // champi_state.report_status(status_msg);

  print_reservoir();
 8002e2c:	f7ff f9c2 	bl	80021b4 <_Z15print_reservoirv>
}
 8002e30:	bf00      	nop
 8002e32:	3730      	adds	r7, #48	@ 0x30
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0800aae8 	.word	0x0800aae8
 8002e3c:	200005ac 	.word	0x200005ac
 8002e40:	20000144 	.word	0x20000144
 8002e44:	200005fc 	.word	0x200005fc
 8002e48:	0800aaf8 	.word	0x0800aaf8
 8002e4c:	0800ab08 	.word	0x0800ab08
 8002e50:	0800ab28 	.word	0x0800ab28
 8002e54:	0800ab38 	.word	0x0800ab38
 8002e58:	2000008c 	.word	0x2000008c
 8002e5c:	200002bc 	.word	0x200002bc
 8002e60:	0800ab50 	.word	0x0800ab50
 8002e64:	0800ab60 	.word	0x0800ab60
 8002e68:	0800ab84 	.word	0x0800ab84
 8002e6c:	48000400 	.word	0x48000400

08002e70 <_Z4loopv>:



void loop()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  // Print distances
  // printf("Left: %d mm, Right: %d mm\n", sensors[LEFT].get_dist_mm(), sensors[RIGHT].get_dist_mm());

  store_plants_spin_once();
 8002e74:	f7ff fe5c 	bl	8002b30 <_Z22store_plants_spin_oncev>
  if(!system_state.storing)
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <_Z4loopv+0x38>)
 8002e7a:	789b      	ldrb	r3, [r3, #2]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <_Z4loopv+0x1a>
  {
    request_store_plants();
 8002e86:	f7ff fe35 	bl	8002af4 <_Z20request_store_plantsv>
  }

  if (reservoir_state.nb_stored == 4)
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_Z4loopv+0x3c>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d107      	bne.n	8002ea2 <_Z4loopv+0x32>
  {
    push_one_plant_out();
 8002e92:	f7ff fd59 	bl	8002948 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8002e96:	f7ff fd57 	bl	8002948 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8002e9a:	f7ff fd55 	bl	8002948 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8002e9e:	f7ff fd53 	bl	8002948 <_Z18push_one_plant_outv>
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000694 	.word	0x20000694
 8002eac:	200006ac 	.word	0x200006ac

08002eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb4:	f002 fae7 	bl	8005486 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb8:	f000 f811 	bl	8002ede <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ebc:	f000 fa1e 	bl	80032fc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002ec0:	f000 f9bc 	bl	800323c <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8002ec4:	f000 f958 	bl	8003178 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 8002ec8:	f000 f85e 	bl	8002f88 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 8002ecc:	f000 f8a8 	bl	8003020 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002ed0:	f000 f8f4 	bl	80030bc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 8002ed4:	f7ff ff1c 	bl	8002d10 <_Z5setupv>


    while (1)
    {

      loop();
 8002ed8:	f7ff ffca 	bl	8002e70 <_Z4loopv>
 8002edc:	e7fc      	b.n	8002ed8 <main+0x28>

08002ede <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b094      	sub	sp, #80	@ 0x50
 8002ee2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	2238      	movs	r2, #56	@ 0x38
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f006 ff29 	bl	8009d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f003 febb 	bl	8006c7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f10:	2340      	movs	r3, #64	@ 0x40
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f14:	2302      	movs	r3, #2
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f20:	2355      	movs	r3, #85	@ 0x55
 8002f22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f24:	2302      	movs	r3, #2
 8002f26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f30:	f107 0318 	add.w	r3, r7, #24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 ff55 	bl	8006de4 <HAL_RCC_OscConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002f4a:	f000 fa3b 	bl	80033c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f4e:	230f      	movs	r3, #15
 8002f50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f52:	2303      	movs	r3, #3
 8002f54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	2104      	movs	r1, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 fa4e 	bl	8007408 <HAL_RCC_ClockConfig>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002f7c:	f000 fa22 	bl	80033c4 <Error_Handler>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3750      	adds	r7, #80	@ 0x50
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002f8e:	4a23      	ldr	r2, [pc, #140]	@ (800301c <_ZL14MX_FDCAN1_Initv+0x94>)
 8002f90:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002f92:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fb8:	2210      	movs	r2, #16
 8002fba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002fbc:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002fd4:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002fda:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002ff8:	4807      	ldr	r0, [pc, #28]	@ (8003018 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002ffa:	f002 fbe7 	bl	80057cc <HAL_FDCAN_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800300e:	f000 f9d9 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000008c 	.word	0x2000008c
 800301c:	40006400 	.word	0x40006400

08003020 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003024:	4b22      	ldr	r3, [pc, #136]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003026:	4a23      	ldr	r2, [pc, #140]	@ (80030b4 <_ZL12MX_I2C1_Initv+0x94>)
 8003028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800302a:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <_ZL12MX_I2C1_Initv+0x98>)
 800302e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003030:	4b1f      	ldr	r3, [pc, #124]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003038:	2201      	movs	r2, #1
 800303a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800303c:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003048:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003050:	2200      	movs	r2, #0
 8003052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003054:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003056:	2200      	movs	r2, #0
 8003058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800305a:	4815      	ldr	r0, [pc, #84]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 800305c:	f003 f826 	bl	80060ac <HAL_I2C_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003070:	f000 f9a8 	bl	80033c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003074:	2100      	movs	r1, #0
 8003076:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003078:	f003 fd68 	bl	8006b4c <HAL_I2CEx_ConfigAnalogFilter>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800308c:	f000 f99a 	bl	80033c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003090:	2100      	movs	r1, #0
 8003092:	4807      	ldr	r0, [pc, #28]	@ (80030b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003094:	f003 fda5 	bl	8006be2 <HAL_I2CEx_ConfigDigitalFilter>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80030a8:	f000 f98c 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200000f0 	.word	0x200000f0
 80030b4:	40005400 	.word	0x40005400
 80030b8:	30a0a7fb 	.word	0x30a0a7fb

080030bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030da:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80030e2:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030e4:	2210      	movs	r2, #16
 80030e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030f0:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <_ZL12MX_TIM2_Initv+0xb8>)
 80030f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003100:	481b      	ldr	r0, [pc, #108]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 8003102:	f004 fd8d 	bl	8007c20 <HAL_TIM_Base_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8003116:	f000 f955 	bl	80033c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800311e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4619      	mov	r1, r3
 8003126:	4812      	ldr	r0, [pc, #72]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 8003128:	f004 ff8c 	bl	8008044 <HAL_TIM_ConfigClockSource>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 800313c:	f000 f942 	bl	80033c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003140:	2300      	movs	r3, #0
 8003142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4808      	ldr	r0, [pc, #32]	@ (8003170 <_ZL12MX_TIM2_Initv+0xb4>)
 800314e:	f005 f9d3 	bl	80084f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8003162:	f000 f92f 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003166:	bf00      	nop
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000144 	.word	0x20000144
 8003174:	000f4240 	.word	0x000f4240

08003178 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800317c:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800317e:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003182:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003184:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8003186:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003188:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800318e:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800319a:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800319c:	220c      	movs	r2, #12
 800319e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a6:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80031be:	481c      	ldr	r0, [pc, #112]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031c0:	f005 fab2 	bl	8008728 <HAL_HalfDuplex_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 80031d4:	f000 f8f6 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031d8:	2100      	movs	r1, #0
 80031da:	4815      	ldr	r0, [pc, #84]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031dc:	f006 f9b1 	bl	8009542 <HAL_UARTEx_SetTxFifoThreshold>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80031f0:	f000 f8e8 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031f4:	2100      	movs	r1, #0
 80031f6:	480e      	ldr	r0, [pc, #56]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80031f8:	f006 f9e1 	bl	80095be <HAL_UARTEx_SetRxFifoThreshold>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 800320c:	f000 f8da 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003210:	4807      	ldr	r0, [pc, #28]	@ (8003230 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003212:	f006 f922 	bl	800945a <HAL_UARTEx_EnableFifoMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8003226:	f000 f8cd 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000190 	.word	0x20000190
 8003234:	40013800 	.word	0x40013800
 8003238:	000f4240 	.word	0x000f4240

0800323c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003240:	4b2c      	ldr	r3, [pc, #176]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003242:	4a2d      	ldr	r2, [pc, #180]	@ (80032f8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8003244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003246:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800324c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003254:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800325a:	4b26      	ldr	r3, [pc, #152]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003260:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003262:	220c      	movs	r2, #12
 8003264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003266:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800326c:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003278:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003284:	481b      	ldr	r0, [pc, #108]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003286:	f005 f9ff 	bl	8008688 <HAL_UART_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800329a:	f000 f893 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800329e:	2100      	movs	r1, #0
 80032a0:	4814      	ldr	r0, [pc, #80]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80032a2:	f006 f94e 	bl	8009542 <HAL_UARTEx_SetTxFifoThreshold>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80032b6:	f000 f885 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ba:	2100      	movs	r1, #0
 80032bc:	480d      	ldr	r0, [pc, #52]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80032be:	f006 f97e 	bl	80095be <HAL_UARTEx_SetRxFifoThreshold>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80032d2:	f000 f877 	bl	80033c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032d6:	4807      	ldr	r0, [pc, #28]	@ (80032f4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80032d8:	f006 f8fa 	bl	80094d0 <HAL_UARTEx_DisableFifoMode>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80032ec:	f000 f86a 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000224 	.word	0x20000224
 80032f8:	40004400 	.word	0x40004400

080032fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b2a      	ldr	r3, [pc, #168]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	4a29      	ldr	r2, [pc, #164]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331e:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003336:	4b21      	ldr	r3, [pc, #132]	@ (80033bc <_ZL12MX_GPIO_Initv+0xc0>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	2192      	movs	r1, #146	@ 0x92
 8003346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800334a:	f002 fe97 	bl	800607c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 800334e:	2200      	movs	r2, #0
 8003350:	f240 1171 	movw	r1, #369	@ 0x171
 8003354:	481a      	ldr	r0, [pc, #104]	@ (80033c0 <_ZL12MX_GPIO_Initv+0xc4>)
 8003356:	f002 fe91 	bl	800607c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 800335a:	2392      	movs	r3, #146	@ 0x92
 800335c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	2301      	movs	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003374:	f002 fce8 	bl	8005d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8003378:	f240 1371 	movw	r3, #369	@ 0x171
 800337c:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337e:	2301      	movs	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	4619      	mov	r1, r3
 8003390:	480b      	ldr	r0, [pc, #44]	@ (80033c0 <_ZL12MX_GPIO_Initv+0xc4>)
 8003392:	f002 fcd9 	bl	8005d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_COURSE_LIFT_Pin FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = F_COURSE_LIFT_Pin|FIN_COURSE_RES_Pin;
 8003396:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800339a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ae:	f002 fccb 	bl	8005d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033b2:	bf00      	nop
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	48000400 	.word	0x48000400

080033c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c8:	b672      	cpsid	i
}
 80033ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <Error_Handler+0x8>

080033d0 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f96d 	bl	80036b8 <_ZNSt15__new_allocatorIiEC1Ev>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f96c 	bl	80036ce <_ZNSt15__new_allocatorIiED1Ev>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	1d38      	adds	r0, r7, #4
 800340a:	e880 0006 	stmia.w	r0, {r1, r2}
 800340e:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f971 	bl	80036fc <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f995 	bl	800374c <_ZNKSt16initializer_listIiE5beginEv>
 8003422:	4604      	mov	r4, r0
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f99c 	bl	8003764 <_ZNKSt16initializer_listIiE3endEv>
 800342c:	4602      	mov	r2, r0
 800342e:	462b      	mov	r3, r5
 8003430:	4621      	mov	r1, r4
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f9a8 	bl	8003788 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bdb0      	pop	{r4, r5, r7, pc}

08003442 <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8003442:	b5b0      	push	{r4, r5, r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f9d0 	bl	80037fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800345a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800345c:	461a      	mov	r2, r3
 800345e:	4629      	mov	r1, r5
 8003460:	4620      	mov	r0, r4
 8003462:	f000 f9d5 	bl	8003810 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f956 	bl	800371a <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <_ZNSaI11LaserSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9d3 	bl	800382c <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZNSaI11LaserSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f9d2 	bl	8003842 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	1d38      	adds	r0, r7, #4
 80034b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80034b6:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f9cb 	bl	8003858 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f9d6 	bl	8003876 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 80034ca:	4604      	mov	r4, r0
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f9dd 	bl	800388e <_ZNKSt16initializer_listI11LaserSensorE3endEv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	462b      	mov	r3, r5
 80034d8:	4621      	mov	r1, r4
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f9ec 	bl	80038b8 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bdb0      	pop	{r4, r5, r7, pc}

080034ea <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80034ea:	b5b0      	push	{r4, r5, r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681c      	ldr	r4, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fa17 	bl	8003930 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8003502:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003504:	461a      	mov	r2, r3
 8003506:	4629      	mov	r1, r5
 8003508:	4620      	mov	r0, r4
 800350a:	f000 fa1c 	bl	8003946 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>
      }
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f805 	bl	8003520 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bdb0      	pop	{r4, r5, r7, pc}

08003520 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	109b      	asrs	r3, r3, #2
 8003538:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev+0x38>)
 800353a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800353e:	461a      	mov	r2, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fa1c 	bl	800397e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fdc7 	bl	80020dc <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	b6db6db7 	.word	0xb6db6db7

0800355c <_ZNSt6vectorIiSaIiEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
      }
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZNSaIbEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa0d 	bl	80039a4 <_ZNSt15__new_allocatorIbEC1Ev>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZNSaIbED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa0c 	bl	80039ba <_ZNSt15__new_allocatorIbED1Ev>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>:
	_M_initialize(__x.size());
	_M_copy_aligned(__x.begin(), __x.end(), begin());
      }

      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<bool> __l,
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	1d38      	adds	r0, r7, #4
 80035b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80035ba:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa11 	bl	80039e8 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>
      {
	_M_initialize_range(__l.begin(), __l.end(),
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fa39 	bl	8003a40 <_ZNKSt16initializer_listIbE5beginEv>
 80035ce:	4604      	mov	r4, r0
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fa40 	bl	8003a58 <_ZNKSt16initializer_listIbE3endEv>
 80035d8:	4602      	mov	r2, r0
 80035da:	462b      	mov	r3, r5
 80035dc:	4621      	mov	r1, r4
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa4b 	bl	8003a7a <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}

080035ee <_ZNSt6vectorIbSaIbEED1Ev>:
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT { }
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fa11 	bl	8003a20 <_ZNSt13_Bvector_baseISaIbEED1Ev>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZNKSt6vectorIbSaIbEE4sizeEv>:
      { return const_reverse_iterator(begin()); }
#endif

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
      { return size_type(end() - begin()); }
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fa53 	bl	8003ac2 <_ZNKSt6vectorIbSaIbEE3endEv>
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fa5c 	bl	8003ae0 <_ZNKSt6vectorIbSaIbEE5beginEv>
 8003628:	f107 0210 	add.w	r2, r7, #16
 800362c:	f107 0308 	add.w	r3, r7, #8
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fc49 	bl	8001eca <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZNSt6vectorIbSaIbEEixEj>:
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n)
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fa53 	bl	8003b00 <_ZNSt6vectorIbSaIbEE5beginEv>
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f107 0110 	add.w	r1, r7, #16
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fc99 	bl	8001f9a <_ZNKSt13_Bit_iteratorixEi>
 8003668:	bf00      	nop
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	109b      	asrs	r3, r3, #2
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
      }
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fe7b 	bl	80033e8 <_ZNSaIiED1Ev>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa08 	bl	8003b20 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003732:	461a      	mov	r2, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa05 	bl	8003b44 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ffd1 	bl	80036e4 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffed 	bl	800374c <_ZNKSt16initializer_listIiE5beginEv>
 8003772:	4604      	mov	r4, r0
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f9f8 	bl	8003b6a <_ZNKSt16initializer_listIiE4sizeEv>
 800377a:	4603      	mov	r3, r0
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4423      	add	r3, r4
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bd90      	pop	{r4, r7, pc}

08003788 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68b8      	ldr	r0, [r7, #8]
 800379a:	f000 f9f2 	bl	8003b82 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800379e:	4603      	mov	r3, r0
 80037a0:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80037a2:	68fc      	ldr	r4, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f827 	bl	80037fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4619      	mov	r1, r3
 80037b0:	6978      	ldr	r0, [r7, #20]
 80037b2:	f000 f9fb 	bl	8003bac <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4619      	mov	r1, r3
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 fa1e 	bl	8003bfc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f80d 	bl	80037fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80037e0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80037e2:	4622      	mov	r2, r4
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f000 fa1c 	bl	8003c24 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 80037ec:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
	}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa11 	bl	8003c46 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f9fa 	bl	8003c60 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_ZNKSt16initializer_listI11LaserSensorE3endEv>:
      end() const noexcept { return begin() + size(); }
 800388e:	b590      	push	{r4, r7, lr}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffed 	bl	8003876 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 800389c:	4604      	mov	r4, r0
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9f0 	bl	8003c84 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4423      	add	r3, r4
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	68b8      	ldr	r0, [r7, #8]
 80038ca:	f000 f9e7 	bl	8003c9c <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80038ce:	4603      	mov	r3, r0
 80038d0:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80038d2:	68fc      	ldr	r4, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f82a 	bl	8003930 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 80038dc:	4603      	mov	r3, r0
 80038de:	4619      	mov	r1, r3
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f000 f9ef 	bl	8003cc4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4619      	mov	r1, r3
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fa12 	bl	8003d14 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	18ca      	adds	r2, r1, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f80d 	bl	8003930 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8003916:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8003918:	4622      	mov	r2, r4
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	68b8      	ldr	r0, [r7, #8]
 800391e:	f000 fa0d 	bl	8003d3c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8003922:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
	}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fa02 	bl	8003d5e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>
    }
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNSaI11LaserSensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa02 	bl	8003d78 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
	if (__p)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f9fa 	bl	8003d90 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>
      }
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZNSt15__new_allocatorIbEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZNSt15__new_allocatorIbED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f9f5 	bl	8003dc8 <_ZNSaImED1Ev>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>:
      _Bvector_base(const allocator_type& __a)
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80039f2:	687c      	ldr	r4, [r7, #4]
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f9d7 	bl	8003dae <_ZNSaImEC1IbEERKSaIT_E>
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	4619      	mov	r1, r3
 8003a06:	4620      	mov	r0, r4
 8003a08:	f000 f9ea 	bl	8003de0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f9d9 	bl	8003dc8 <_ZNSaImED1Ev>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f9eb 	bl	8003e04 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ffcd 	bl	80039d0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZNKSt16initializer_listIbE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNKSt16initializer_listIbE3endEv>:
      end() const noexcept { return begin() + size(); }
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ffed 	bl	8003a40 <_ZNKSt16initializer_listIbE5beginEv>
 8003a66:	4604      	mov	r4, r0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9f0 	bl	8003e4e <_ZNKSt16initializer_listIbE4sizeEv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4423      	add	r3, r4
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}

08003a7a <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>:
	}

      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08c      	sub	sp, #48	@ 0x30
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f000 f9eb 	bl	8003e66 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8003a90:	4603      	mov	r3, r0
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
	  _M_initialize(__n);
 8003a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f9f9 	bl	8003e8e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>
	  std::copy(__first, __last, begin());
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	68f9      	ldr	r1, [r7, #12]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f82c 	bl	8003b00 <_ZNSt6vectorIbSaIbEE5beginEv>
 8003aa8:	f107 0014 	add.w	r0, r7, #20
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	f000 fa26 	bl	8003f06 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>
	}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	@ 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_ZNKSt6vectorIbSaIbEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fa9f 	bl	8002016 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZNKSt6vectorIbSaIbEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe fa7e 	bl	8001ff4 <_ZNSt19_Bit_const_iteratorC1EPmj>
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_ZNSt6vectorIbSaIbEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fa00 	bl	8001f18 <_ZNSt13_Bit_iteratorC1EPmj>
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003b2a:	6839      	ldr	r1, [r7, #0]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa09 	bl	8003f44 <_ZNSaIiEC1ERKS_>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa13 	bl	8003f60 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa13 	bl	8003f88 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003b82:	b5b0      	push	{r4, r5, r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003b8c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fa08 	bl	8003fa6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003b96:	462a      	mov	r2, r5
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 fa0e 	bl	8003fbc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8003ba0:	4603      	mov	r3, r0
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003bac <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	6839      	ldr	r1, [r7, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f9c1 	bl	8003f44 <_ZNSaIiEC1ERKS_>
 8003bc2:	f107 030c 	add.w	r3, r7, #12
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fa08 	bl	8003fdc <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf8c      	ite	hi
 8003bd4:	2301      	movhi	r3, #1
 8003bd6:	2300      	movls	r3, #0
 8003bd8:	b2dc      	uxtb	r4, r3
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fc02 	bl	80033e8 <_ZNSaIiED1Ev>
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	d002      	beq.n	8003bee <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003be8:	4803      	ldr	r0, [pc, #12]	@ (8003bf8 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 8003bea:	f005 fd8e 	bl	800970a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8003bee:	687b      	ldr	r3, [r7, #4]
      }
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}
 8003bf8:	0800ab98 	.word	0x0800ab98

08003bfc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d006      	beq.n	8003c1a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6839      	ldr	r1, [r7, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f9fd 	bl	8004010 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8003c16:	4603      	mov	r3, r0
 8003c18:	e000      	b.n	8003c1c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8003c1a:	2300      	movs	r3, #0
      }
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f9f9 	bl	800402e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 8003c3c:	4603      	mov	r3, r0
    }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9ff 	bl	8004056 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003c6a:	6839      	ldr	r1, [r7, #0]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fe78 	bl	8003962 <_ZNSaI11LaserSensorEC1ERKS0_>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f9f9 	bl	800406c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>:
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8003ca6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f9f2 	bl	8004094 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 f9f9 	bl	80040ac <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8003cba:	4603      	mov	r3, r0
    }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bdb0      	pop	{r4, r5, r7, pc}

08003cc4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fe44 	bl	8003962 <_ZNSaI11LaserSensorEC1ERKS0_>
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f9fa 	bl	80040d8 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf8c      	ite	hi
 8003cec:	2301      	movhi	r3, #1
 8003cee:	2300      	movls	r3, #0
 8003cf0:	b2dc      	uxtb	r4, r3
 8003cf2:	f107 030c 	add.w	r3, r7, #12
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fbca 	bl	8003490 <_ZNSaI11LaserSensorED1Ev>
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d002      	beq.n	8003d06 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8003d00:	4803      	ldr	r0, [pc, #12]	@ (8003d10 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8003d02:	f005 fd02 	bl	800970a <_ZSt20__throw_length_errorPKc>
	return __n;
 8003d06:	687b      	ldr	r3, [r7, #4]
      }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	0800ab98 	.word	0x0800ab98

08003d14 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x1e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f9f1 	bl	8004110 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	e000      	b.n	8003d34 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x20>
 8003d32:	2300      	movs	r3, #0
      }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9ed 	bl	800412e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8003d54:	4603      	mov	r3, r0
    }
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f9f3 	bl	8004156 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>
    }
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f9f1 	bl	8004188 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZNSaImEC1IbEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f9f8 	bl	80041ae <_ZNSt15__new_allocatorImEC1Ev>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f9f7 	bl	80041c4 <_ZNSt15__new_allocatorImED1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f9f4 	bl	80041da <_ZNSaImEC1ERKS_>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f9fe 	bl	80041f6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
	{ }
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d018      	beq.n	8003e46 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fa02 	bl	8004220 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	109b      	asrs	r3, r3, #2
 8003e26:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003e28:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003e34:	4413      	add	r3, r2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f000 fa07 	bl	800424c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_reset();
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fa12 	bl	800426a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>
      }
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_ZNKSt16initializer_listIbE4sizeEv>:
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8003e66:	b5b0      	push	{r4, r5, r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8003e70:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fa0d 	bl	8004294 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f000 fa13 	bl	80042aa <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8003e84:	4603      	mov	r3, r0
    }
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bdb0      	pop	{r4, r5, r7, pc}

08003e8e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 8003e8e:	b590      	push	{r4, r7, lr}
 8003e90:	b089      	sub	sp, #36	@ 0x24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
	if (__n)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02f      	beq.n	8003efe <_ZNSt6vectorIbSaIbEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fa10 	bl	80042c8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 8003ea8:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f000 fa20 	bl	80042f0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 8003ebc:	69f8      	ldr	r0, [r7, #28]
 8003ebe:	f000 fa24 	bl	800430a <_ZSt11__addressofImEPT_RS0_>
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe f824 	bl	8001f18 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003edc:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	68fc      	ldr	r4, [r7, #12]
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	f107 0114 	add.w	r1, r7, #20
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe f86d 	bl	8001fca <_ZStplRKSt13_Bit_iteratori>
 8003ef0:	f104 0308 	add.w	r3, r4, #8
 8003ef4:	463a      	mov	r2, r7
 8003ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003efa:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 8003efe:	bf00      	nop
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}

08003f06 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f06:	b082      	sub	sp, #8
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f000 fa02 	bl	8004320 <_ZSt12__miter_baseIPKbET_S2_>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f9fe 	bl	8004320 <_ZSt12__miter_baseIPKbET_S2_>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	4621      	mov	r1, r4
 8003f30:	f000 fa01 	bl	8004336 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8003f34:	bf00      	nop
    }
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f40:	b002      	add	sp, #8
 8003f42:	4770      	bx	lr

08003f44 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa21 	bl	8004398 <_ZNSt15__new_allocatorIiEC1ERKS0_>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
	{ }
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa09 	bl	80043b0 <_ZNSt15__new_allocatorIiE10deallocateEPij>
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003fae:	bf00      	nop
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	109b      	asrs	r3, r3, #2
    }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003fe4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003fe8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9f0 	bl	80043d0 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003ff4:	f107 0208 	add.w	r2, r7, #8
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f9f2 	bl	80043e8 <_ZSt3minIjERKT_S2_S2_>
 8004004:	4603      	mov	r3, r0
 8004006:	681b      	ldr	r3, [r3, #0]
      }
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800401a:	2200      	movs	r2, #0
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9f6 	bl	8004410 <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 8004024:	4603      	mov	r3, r0
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800403e:	2301      	movs	r3, #1
 8004040:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa0b 	bl	8004462 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 800404c:	4603      	mov	r3, r0
    }
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
	{ }
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800409c:	bf00      	nop
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	109b      	asrs	r3, r3, #2
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
    }
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	b6db6db7 	.word	0xb6db6db7

080040d8 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80040e2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9cc 	bl	8004482 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80040ee:	f107 0208 	add.w	r2, r7, #8
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f975 	bl	80043e8 <_ZSt3minIjERKT_S2_S2_>
 80040fe:	4603      	mov	r3, r0
 8004100:	681b      	ldr	r3, [r3, #0]
      }
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	04924924 	.word	0x04924924

08004110 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800411a:	2200      	movs	r2, #0
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9bc 	bl	800449c <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>
 8004124:	4603      	mov	r3, r0
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800413e:	2300      	movs	r3, #0
 8004140:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f9d6 	bl	80044f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>
 800414c:	4603      	mov	r3, r0
    }
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004160:	e009      	b.n	8004176 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f9d8 	bl	8004518 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8004168:	4603      	mov	r3, r0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f9df 	bl	800452e <_ZSt8_DestroyI11LaserSensorEvPT_>
	  for (; __first != __last; ++__first)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	331c      	adds	r3, #28
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d1f1      	bne.n	8004162 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0xc>
	}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4619      	mov	r1, r3
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f005 fa99 	bl	80096d8 <_ZdlPvj>
      }
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZNSt15__new_allocatorImEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9ac 	bl	8004544 <_ZNSt15__new_allocatorImEC1ERKS0_>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fe7a 	bl	8001efa <_ZNSt13_Bit_iteratorC1Ev>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3308      	adds	r3, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fe75 	bl	8001efa <_ZNSt13_Bit_iteratorC1Ev>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
	{ }
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	3b04      	subs	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f867 	bl	800430a <_ZSt11__addressofImEPT_RS0_>
 800423c:	4603      	mov	r3, r0
 800423e:	3304      	adds	r3, #4
 8004240:	e000      	b.n	8004244 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8004242:	2300      	movs	r3, #0
	}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f97d 	bl	800455c <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800426a:	b5b0      	push	{r4, r5, r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ffbd 	bl	80041f6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	461d      	mov	r5, r3
 8004280:	f107 040c 	add.w	r4, r7, #12
 8004284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	bf00      	nop
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}

08004294 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800429c:	bf00      	nop
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
    }
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 80042d2:	687c      	ldr	r4, [r7, #4]
 80042d4:	6838      	ldr	r0, [r7, #0]
 80042d6:	f000 f80b 	bl	80042f0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 80042da:	4603      	mov	r3, r0
 80042dc:	4619      	mov	r1, r3
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f94c 	bl	800457c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80042e4:	60f8      	str	r0, [r7, #12]
	return __p;
 80042e6:	68fb      	ldr	r3, [r7, #12]
      }
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	331f      	adds	r3, #31
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <_ZSt11__addressofImEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <_ZSt12__miter_baseIPKbET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004336:	b082      	sub	sp, #8
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b08a      	sub	sp, #40	@ 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
      return std::__niter_wrap(__result,
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	f000 f927 	bl	800459a <_ZSt12__niter_baseIPKbET_S2_>
 800434c:	4604      	mov	r4, r0
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f923 	bl	800459a <_ZSt12__niter_baseIPKbET_S2_>
 8004354:	4605      	mov	r5, r0
 8004356:	f107 0010 	add.w	r0, r7, #16
 800435a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800435e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004362:	f000 f925 	bl	80045b0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004366:	f107 0018 	add.w	r0, r7, #24
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	462a      	mov	r2, r5
 8004372:	4621      	mov	r1, r4
 8004374:	f000 f930 	bl	80045d8 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800437e:	f107 0318 	add.w	r3, r7, #24
 8004382:	cb0c      	ldmia	r3, {r2, r3}
 8004384:	f000 f940 	bl	8004608 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>
					     std::__niter_base(__result)));
 8004388:	bf00      	nop
    }
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004394:	b002      	add	sp, #8
 8004396:	4770      	bx	lr

08004398 <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4619      	mov	r1, r3
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f005 f988 	bl	80096d8 <_ZdlPvj>
      }
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f92a 	bl	8004632 <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 80043de:	4603      	mov	r3, r0
      }
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d201      	bcs.n	8004402 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	e000      	b.n	8004404 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004402:	687b      	ldr	r3, [r7, #4]
    }
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f914 	bl	800464a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4293      	cmp	r3, r2
 8004428:	bf8c      	ite	hi
 800442a:	2301      	movhi	r3, #1
 800442c:	2300      	movls	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004444:	d301      	bcc.n	800444a <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004446:	f005 f95d 	bl	8009704 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800444a:	f005 f958 	bl	80096fe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4618      	mov	r0, r3
 8004454:	f005 f942 	bl	80096dc <_Znwj>
 8004458:	4603      	mov	r3, r0
      }
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f8f5 	bl	8004662 <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8004478:	4603      	mov	r3, r0
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f901 	bl	8004692 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>
 8004490:	4603      	mov	r3, r0
      }
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f8ff 	bl	80046ac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4293      	cmp	r3, r2
 80044b4:	bf8c      	ite	hi
 80044b6:	2301      	movhi	r3, #1
 80044b8:	2300      	movls	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a09      	ldr	r2, [pc, #36]	@ (80044f4 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x58>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80044d2:	f005 f917 	bl	8009704 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80044d6:	f005 f912 	bl	80096fe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 f8f9 	bl	80096dc <_Znwj>
 80044ea:	4603      	mov	r3, r0
      }
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	09249249 	.word	0x09249249

080044f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f8dd 	bl	80046c8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 800450e:	4603      	mov	r3, r0
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZSt11__addressofI11LaserSensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <_ZSt8_DestroyI11LaserSensorEvPT_>:
    _Destroy(_Tp* __pointer)
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fafb 	bl	8001b32 <_ZN11LaserSensorD1Ev>
    }
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZNSt15__new_allocatorImEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <_ZNSt15__new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4619      	mov	r1, r3
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f005 f8b2 	bl	80096d8 <_ZdlPvj>
      }
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004586:	2200      	movs	r2, #0
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8bc 	bl	8004708 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8004590:	4603      	mov	r3, r0
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_ZSt12__niter_baseIPKbET_S2_>:
    __niter_base(_Iterator __it)
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	461a      	mov	r2, r3
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80045d8:	b082      	sub	sp, #8
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af02      	add	r7, sp, #8
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	61fb      	str	r3, [r7, #28]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	f000 f8b1 	bl	800475a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 80045f8:	bf00      	nop
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004604:	b002      	add	sp, #8
 8004606:	4770      	bx	lr

08004608 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4639      	mov	r1, r7
 8004614:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __res; }
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	461a      	mov	r2, r3
 800461c:	463b      	mov	r3, r7
 800461e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004622:	e882 0003 	stmia.w	r2, {r0, r1}
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f805 	bl	800464a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004640:	4603      	mov	r3, r0
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004652:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004662:	b590      	push	{r4, r7, lr}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f88b 	bl	800478a <_ZSt12__miter_baseIPKiET_S2_>
 8004674:	4604      	mov	r4, r0
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	f000 f887 	bl	800478a <_ZSt12__miter_baseIPKiET_S2_>
 800467c:	4603      	mov	r3, r0
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4619      	mov	r1, r3
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f88c 	bl	80047a0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8004688:	4603      	mov	r3, r0
    }
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}

08004692 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f806 	bl	80046ac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80046b4:	4b03      	ldr	r3, [pc, #12]	@ (80046c4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv+0x18>)
      }
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	04924924 	.word	0x04924924

080046c8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80046d8:	e00d      	b.n	80046f6 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff1c 	bl	8004518 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 80046e0:	4603      	mov	r3, r0
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f87e 	bl	80047e6 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	331c      	adds	r3, #28
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	331c      	adds	r3, #28
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d1ed      	bne.n	80046da <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x12>
	  return __cur;
 80046fe:	697b      	ldr	r3, [r7, #20]
    }
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f880 	bl	800481a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 800471a:	4602      	mov	r2, r0
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4293      	cmp	r3, r2
 8004720:	bf8c      	ite	hi
 8004722:	2301      	movhi	r3, #1
 8004724:	2300      	movls	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d301      	bcc.n	8004742 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800473e:	f004 ffe1 	bl	8009704 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004742:	f004 ffdc 	bl	80096fe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f004 ffc6 	bl	80096dc <_Znwj>
 8004750:	4603      	mov	r3, r0
      }
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800475a:	b082      	sub	sp, #8
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	61fb      	str	r3, [r7, #28]
			      _Category>::__copy_m(__first, __last, __result);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	f000 f85c 	bl	8004832 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>
 800477a:	bf00      	nop
    }
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004786:	b002      	add	sp, #8
 8004788:	4770      	bx	lr

0800478a <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f87a 	bl	80048a6 <_ZSt12__niter_baseIPKiET_S2_>
 80047b2:	4604      	mov	r4, r0
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	f000 f876 	bl	80048a6 <_ZSt12__niter_baseIPKiET_S2_>
 80047ba:	4605      	mov	r5, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f87c 	bl	80048bc <_ZSt12__niter_baseIPiET_S1_>
 80047c4:	4603      	mov	r3, r0
 80047c6:	461a      	mov	r2, r3
 80047c8:	4629      	mov	r1, r5
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f881 	bl	80048d2 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 80047d0:	4602      	mov	r2, r0
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f88b 	bl	80048f2 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 80047dc:	4603      	mov	r3, r0
    }
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bdb0      	pop	{r4, r5, r7, pc}

080047e6 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80047e6:	b5b0      	push	{r4, r5, r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4619      	mov	r1, r3
 80047f4:	201c      	movs	r0, #28
 80047f6:	f7fd faad 	bl	8001d54 <_ZnwjPv>
 80047fa:	4604      	mov	r4, r0
 80047fc:	6838      	ldr	r0, [r7, #0]
 80047fe:	f000 f884 	bl	800490a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>
 8004802:	4603      	mov	r3, r0
 8004804:	461d      	mov	r5, r3
 8004806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800480e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bdb0      	pop	{r4, r5, r7, pc}

0800481a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004822:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8004832:	b082      	sub	sp, #8
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e01a      	b.n	8004882 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x50>
	      *__result = *__first;
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fb6f 	bl	8001f3a <_ZNKSt13_Bit_iteratordeEv>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd faa8 	bl	8001dbc <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
	      ++__result;
 8004872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd fb73 	bl	8001f62 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3b01      	subs	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	dce1      	bgt.n	800484c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x1a>
	  return __result;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004890:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004894:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a2:	b002      	add	sp, #8
 80048a4:	4770      	bx	lr

080048a6 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f81c 	bl	8004920 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
    { return __res; }
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f805 	bl	8004940 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8004936:	4603      	mov	r3, r0
    }
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	109b      	asrs	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	461a      	mov	r2, r3
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f005 f9d3 	bl	8009d10 <memmove>
	  return __result + _Num;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
	}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZN14ReservoirStateD1Ev>:
struct ReservoirState
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fe32 	bl	80035ee <_ZNSt6vectorIbSaIbEED1Ev>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_ZN11SystemStateD1Ev>:
struct SystemState
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fe24 	bl	80035ee <_ZNSt6vectorIbSaIbEED1Ev>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b0af      	sub	sp, #188	@ 0xbc
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 80f5 	bne.w	8004bac <_Z41__static_initialization_and_destruction_0ii+0x1fc>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049c8:	4293      	cmp	r3, r2
 80049ca:	f040 80ef 	bne.w	8004bac <_Z41__static_initialization_and_destruction_0ii+0x1fc>
ChampiCan champi_can;
 80049ce:	488c      	ldr	r0, [pc, #560]	@ (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80049d0:	f7fc f92e 	bl	8000c30 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_action;
 80049d4:	488b      	ldr	r0, [pc, #556]	@ (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80049d6:	f7fc f9c3 	bl	8000d60 <_ZN17MessageRecomposerC1Ev>
ChampiState champi_state;
 80049da:	488b      	ldr	r0, [pc, #556]	@ (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80049dc:	f7fc f98a 	bl	8000cf4 <_ZN11ChampiStateC1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80049e0:	4a8a      	ldr	r2, [pc, #552]	@ (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80049e2:	f107 0314 	add.w	r3, r7, #20
 80049e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80049ee:	f107 0314 	add.w	r3, r7, #20
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	2302      	movs	r3, #2
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	f107 031c 	add.w	r3, r7, #28
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fce7 	bl	80033d0 <_ZNSaIiEC1Ev>
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	f107 020c 	add.w	r2, r7, #12
 8004a0a:	ca06      	ldmia	r2, {r1, r2}
 8004a0c:	4880      	ldr	r0, [pc, #512]	@ (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004a0e:	f7fe fcf7 	bl	8003400 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8004a12:	f107 031c 	add.w	r3, r7, #28
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fce6 	bl	80033e8 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 8004a1c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a22:	2300      	movs	r3, #0
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fccb 	bl	80033d0 <_ZNSaIiEC1Ev>
 8004a3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a3e:	f107 0220 	add.w	r2, r7, #32
 8004a42:	ca06      	ldmia	r2, {r1, r2}
 8004a44:	4873      	ldr	r0, [pc, #460]	@ (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8004a46:	f7fe fcdb 	bl	8003400 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8004a4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fcca 	bl	80033e8 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 8004a54:	4a70      	ldr	r2, [pc, #448]	@ (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004a56:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a68:	2302      	movs	r3, #2
 8004a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe fcad 	bl	80033d0 <_ZNSaIiEC1Ev>
 8004a76:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004a7a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004a7e:	ca06      	ldmia	r2, {r1, r2}
 8004a80:	4866      	ldr	r0, [pc, #408]	@ (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004a82:	f7fe fcbd 	bl	8003400 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8004a86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fcac 	bl	80033e8 <_ZNSaIiED1Ev>
auto sensors = std::vector<LaserSensor>({
 8004a90:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004a94:	f06f 0309 	mvn.w	r3, #9
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	4960      	ldr	r1, [pc, #384]	@ (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8004aa0:	f7fd f822 	bl	8001ae8 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 8004aa4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004aa8:	f103 001c 	add.w	r0, r3, #28
 8004aac:	f06f 0307 	mvn.w	r3, #7
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	495a      	ldr	r1, [pc, #360]	@ (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8004ab8:	f7fd f816 	bl	8001ae8 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 8004abc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fcd4 	bl	8003478 <_ZNSaI11LaserSensorEC1Ev>
 8004ad0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004ad4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004ad8:	ca06      	ldmia	r2, {r1, r2}
 8004ada:	4852      	ldr	r0, [pc, #328]	@ (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004adc:	f7fe fce4 	bl	80034a8 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 8004ae0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fcd3 	bl	8003490 <_ZNSaI11LaserSensorED1Ev>
});
 8004aea:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8004aee:	3438      	adds	r4, #56	@ 0x38
auto sensors = std::vector<LaserSensor>({
 8004af0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d004      	beq.n	8004b02 <_Z41__static_initialization_and_destruction_0ii+0x152>
});
 8004af8:	3c1c      	subs	r4, #28
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7fd f819 	bl	8001b32 <_ZN11LaserSensorD1Ev>
auto sensors = std::vector<LaserSensor>({
 8004b00:	e7f6      	b.n	8004af0 <_Z41__static_initialization_and_destruction_0ii+0x140>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2340      	movs	r3, #64	@ 0x40
 8004b0e:	4a44      	ldr	r2, [pc, #272]	@ (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8004b10:	4945      	ldr	r1, [pc, #276]	@ (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8004b12:	4846      	ldr	r0, [pc, #280]	@ (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8004b14:	f7fc fe39 	bl	800178a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 8004b18:	2301      	movs	r3, #1
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	4b40      	ldr	r3, [pc, #256]	@ (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2302      	movs	r3, #2
 8004b22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004b26:	4940      	ldr	r1, [pc, #256]	@ (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8004b28:	4841      	ldr	r0, [pc, #260]	@ (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8004b2a:	f7fc fe2e 	bl	800178a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 8004b2e:	4941      	ldr	r1, [pc, #260]	@ (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8004b30:	4841      	ldr	r0, [pc, #260]	@ (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8004b32:	f7fc f96c 	bl	8000e0e <_ZN7SCServoC1EP20__UART_HandleTypeDef>
std::vector<int> servo_ids_to_check = {
 8004b36:	2308      	movs	r3, #8
 8004b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  hoppers_ids[LEFT],
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4834      	ldr	r0, [pc, #208]	@ (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004b40:	f7fe fd0c 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 8004b44:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  hoppers_ids[RIGHT],
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4830      	ldr	r0, [pc, #192]	@ (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004b50:	f7fe fd04 	bl	800355c <_ZNSt6vectorIiSaIiEEixEj>
 8004b54:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b5c:	2312      	movs	r3, #18
 8004b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b62:	2310      	movs	r3, #16
 8004b64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b68:	2309      	movs	r3, #9
 8004b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b6e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b76:	2306      	movs	r3, #6
 8004b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fc25 	bl	80033d0 <_ZNSaIiEC1Ev>
 8004b86:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004b8a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8004b8e:	ca06      	ldmia	r2, {r1, r2}
 8004b90:	482a      	ldr	r0, [pc, #168]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8004b92:	f7fe fc35 	bl	8003400 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8004b96:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fc24 	bl	80033e8 <_ZNSaIiED1Ev>
} system_state;
 8004ba0:	4827      	ldr	r0, [pc, #156]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8004ba2:	f7fd faa7 	bl	80020f4 <_ZN11SystemStateC1Ev>
} reservoir_state;
 8004ba6:	4827      	ldr	r0, [pc, #156]	@ (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8004ba8:	f7fd fad5 	bl	8002156 <_ZN14ReservoirStateC1Ev>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d122      	bne.n	8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x248>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d11d      	bne.n	8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x248>
 8004bbc:	4821      	ldr	r0, [pc, #132]	@ (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8004bbe:	f7ff fedc 	bl	800497a <_ZN14ReservoirStateD1Ev>
} system_state;
 8004bc2:	481f      	ldr	r0, [pc, #124]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8004bc4:	f7ff fee6 	bl	8004994 <_ZN11SystemStateD1Ev>
std::vector<int> servo_ids_to_check = {
 8004bc8:	481c      	ldr	r0, [pc, #112]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8004bca:	f7fe fc3a 	bl	8003442 <_ZNSt6vectorIiSaIiEED1Ev>
auto sensors = std::vector<LaserSensor>({
 8004bce:	4815      	ldr	r0, [pc, #84]	@ (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004bd0:	f7fe fc8b 	bl	80034ea <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 8004bd4:	4811      	ldr	r0, [pc, #68]	@ (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004bd6:	f7fe fc34 	bl	8003442 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 8004bda:	480e      	ldr	r0, [pc, #56]	@ (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8004bdc:	f7fe fc31 	bl	8003442 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_ids = {7, 14};
 8004be0:	480b      	ldr	r0, [pc, #44]	@ (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004be2:	f7fe fc2e 	bl	8003442 <_ZNSt6vectorIiSaIiEED1Ev>
ChampiState champi_state;
 8004be6:	4808      	ldr	r0, [pc, #32]	@ (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8004be8:	f7fc f89a 	bl	8000d20 <_ZN11ChampiStateD1Ev>
MessageRecomposer msg_recomposer_action;
 8004bec:	4805      	ldr	r0, [pc, #20]	@ (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004bee:	f7fc f8d7 	bl	8000da0 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 8004bf2:	4803      	ldr	r0, [pc, #12]	@ (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004bf4:	f7fc f85e 	bl	8000cb4 <_ZN9ChampiCanD1Ev>
}
 8004bf8:	bf00      	nop
 8004bfa:	37b4      	adds	r7, #180	@ 0xb4
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	200002bc 	.word	0x200002bc
 8004c04:	200002e8 	.word	0x200002e8
 8004c08:	20000504 	.word	0x20000504
 8004c0c:	0800abcc 	.word	0x0800abcc
 8004c10:	200005cc 	.word	0x200005cc
 8004c14:	200005d8 	.word	0x200005d8
 8004c18:	0800abd4 	.word	0x0800abd4
 8004c1c:	200005e4 	.word	0x200005e4
 8004c20:	48000400 	.word	0x48000400
 8004c24:	200005f0 	.word	0x200005f0
 8004c28:	080020a9 	.word	0x080020a9
 8004c2c:	200005fc 	.word	0x200005fc
 8004c30:	20000640 	.word	0x20000640
 8004c34:	20000190 	.word	0x20000190
 8004c38:	20000684 	.word	0x20000684
 8004c3c:	20000688 	.word	0x20000688
 8004c40:	20000694 	.word	0x20000694
 8004c44:	200006ac 	.word	0x200006ac

08004c48 <_GLOBAL__sub_I_hfdcan1>:
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7ff fead 	bl	80049b0 <_Z41__static_initialization_and_destruction_0ii>
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_GLOBAL__sub_D_hfdcan1>:
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7ff fea5 	bl	80049b0 <_Z41__static_initialization_and_destruction_0ii>
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	4603      	mov	r3, r0
 8004c70:	603a      	str	r2, [r7, #0]
 8004c72:	80fb      	strh	r3, [r7, #6]
 8004c74:	460b      	mov	r3, r1
 8004c76:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004c7c:	88bb      	ldrh	r3, [r7, #4]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004c86:	88bb      	ldrh	r3, [r7, #4]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004c8c:	f107 020c 	add.w	r2, r7, #12
 8004c90:	88f9      	ldrh	r1, [r7, #6]
 8004c92:	2364      	movs	r3, #100	@ 0x64
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2302      	movs	r3, #2
 8004c98:	4810      	ldr	r0, [pc, #64]	@ (8004cdc <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8004c9a:	f001 faa3 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8004ca2:	f107 0208 	add.w	r2, r7, #8
 8004ca6:	88f9      	ldrh	r1, [r7, #6]
 8004ca8:	2364      	movs	r3, #100	@ 0x64
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2304      	movs	r3, #4
 8004cae:	480b      	ldr	r0, [pc, #44]	@ (8004cdc <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8004cb0:	f001 fbb0 	bl	8006414 <HAL_I2C_Master_Receive>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8004cb8:	7a3b      	ldrb	r3, [r7, #8]
 8004cba:	061a      	lsls	r2, r3, #24
 8004cbc:	7a7b      	ldrb	r3, [r7, #9]
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8004cc2:	7abb      	ldrb	r3, [r7, #10]
 8004cc4:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8004cc6:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8004cc8:	7afa      	ldrb	r2, [r7, #11]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	601a      	str	r2, [r3, #0]
	return status;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200000f0 	.word	0x200000f0

08004ce0 <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	603a      	str	r2, [r7, #0]
 8004cea:	80fb      	strh	r3, [r7, #6]
 8004cec:	460b      	mov	r3, r1
 8004cee:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004cf4:	88bb      	ldrh	r3, [r7, #4]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004d04:	f107 020c 	add.w	r2, r7, #12
 8004d08:	88f9      	ldrh	r1, [r7, #6]
 8004d0a:	2364      	movs	r3, #100	@ 0x64
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2302      	movs	r3, #2
 8004d10:	480f      	ldr	r0, [pc, #60]	@ (8004d50 <_Z15VL53L4CD_RdWordttPt+0x70>)
 8004d12:	f001 fa67 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8004d1a:	f107 0208 	add.w	r2, r7, #8
 8004d1e:	88f9      	ldrh	r1, [r7, #6]
 8004d20:	2364      	movs	r3, #100	@ 0x64
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2302      	movs	r3, #2
 8004d26:	480a      	ldr	r0, [pc, #40]	@ (8004d50 <_Z15VL53L4CD_RdWordttPt+0x70>)
 8004d28:	f001 fb74 	bl	8006414 <HAL_I2C_Master_Receive>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 8004d30:	7a3b      	ldrb	r3, [r7, #8]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	b21a      	sxth	r2, r3
 8004d36:	7a7b      	ldrb	r3, [r7, #9]
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	801a      	strh	r2, [r3, #0]
	return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200000f0 	.word	0x200000f0

08004d54 <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	603a      	str	r2, [r7, #0]
 8004d5e:	80fb      	strh	r3, [r7, #6]
 8004d60:	460b      	mov	r3, r1
 8004d62:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004d68:	88bb      	ldrh	r3, [r7, #4]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004d72:	88bb      	ldrh	r3, [r7, #4]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004d78:	f107 020c 	add.w	r2, r7, #12
 8004d7c:	88f9      	ldrh	r1, [r7, #6]
 8004d7e:	2364      	movs	r3, #100	@ 0x64
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2302      	movs	r3, #2
 8004d84:	480b      	ldr	r0, [pc, #44]	@ (8004db4 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8004d86:	f001 fa2d 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8004d8e:	f107 0208 	add.w	r2, r7, #8
 8004d92:	88f9      	ldrh	r1, [r7, #6]
 8004d94:	2364      	movs	r3, #100	@ 0x64
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4806      	ldr	r0, [pc, #24]	@ (8004db4 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8004d9c:	f001 fb3a 	bl	8006414 <HAL_I2C_Master_Receive>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8004da4:	7a3a      	ldrb	r2, [r7, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	701a      	strb	r2, [r3, #0]
	return status;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200000f0 	.word	0x200000f0

08004db8 <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	80bb      	strh	r3, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004dce:	88bb      	ldrh	r3, [r7, #4]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004dd8:	88bb      	ldrh	r3, [r7, #4]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8004de2:	f107 020c 	add.w	r2, r7, #12
 8004de6:	88f9      	ldrh	r1, [r7, #6]
 8004de8:	2364      	movs	r3, #100	@ 0x64
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2303      	movs	r3, #3
 8004dee:	4805      	ldr	r0, [pc, #20]	@ (8004e04 <_Z15VL53L4CD_WrBytetth+0x4c>)
 8004df0:	f001 f9f8 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004df4:	4603      	mov	r3, r0
 8004df6:	73fb      	strb	r3, [r7, #15]
	return status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200000f0 	.word	0x200000f0

08004e08 <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	4603      	mov	r3, r0
 8004e10:	80fb      	strh	r3, [r7, #6]
 8004e12:	460b      	mov	r3, r1
 8004e14:	80bb      	strh	r3, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004e1e:	88bb      	ldrh	r3, [r7, #4]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8004e28:	88bb      	ldrh	r3, [r7, #4]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8004e3e:	f107 0208 	add.w	r2, r7, #8
 8004e42:	88f9      	ldrh	r1, [r7, #6]
 8004e44:	2364      	movs	r3, #100	@ 0x64
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2304      	movs	r3, #4
 8004e4a:	4805      	ldr	r0, [pc, #20]	@ (8004e60 <_Z15VL53L4CD_WrWordttt+0x58>)
 8004e4c:	f001 f9ca 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
	return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200000f0 	.word	0x200000f0

08004e64 <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	603a      	str	r2, [r7, #0]
 8004e6e:	80fb      	strh	r3, [r7, #6]
 8004e70:	460b      	mov	r3, r1
 8004e72:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004e78:	88bb      	ldrh	r3, [r7, #4]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8004e82:	88bb      	ldrh	r3, [r7, #4]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8004ea6:	f107 0208 	add.w	r2, r7, #8
 8004eaa:	88f9      	ldrh	r1, [r7, #6]
 8004eac:	2364      	movs	r3, #100	@ 0x64
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2306      	movs	r3, #6
 8004eb2:	4805      	ldr	r0, [pc, #20]	@ (8004ec8 <_Z16VL53L4CD_WrDWordttm+0x64>)
 8004eb4:	f001 f996 	bl	80061e4 <HAL_I2C_Master_Transmit>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
	return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200000f0 	.word	0x200000f0

08004ecc <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8004ed8:	6838      	ldr	r0, [r7, #0]
 8004eda:	f000 fb45 	bl	8005568 <HAL_Delay>
	return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eee:	4b0f      	ldr	r3, [pc, #60]	@ (8004f2c <HAL_MspInit+0x44>)
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <HAL_MspInit+0x44>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004efa:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <HAL_MspInit+0x44>)
 8004efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <HAL_MspInit+0x44>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0a:	4a08      	ldr	r2, [pc, #32]	@ (8004f2c <HAL_MspInit+0x44>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_MspInit+0x44>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f1e:	f001 ff51 	bl	8006dc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000

08004f30 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b09a      	sub	sp, #104	@ 0x68
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	2244      	movs	r2, #68	@ 0x44
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f004 fef7 	bl	8009d44 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a20      	ldr	r2, [pc, #128]	@ (8004fdc <HAL_FDCAN_MspInit+0xac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d139      	bne.n	8004fd4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f6a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f6c:	f107 0310 	add.w	r3, r7, #16
 8004f70:	4618      	mov	r0, r3
 8004f72:	f002 fc65 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004f7c:	f7fe fa22 	bl	80033c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f80:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004f86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8c:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9c:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_FDCAN_MspInit+0xb0>)
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004fb0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004fb4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004fc2:	2309      	movs	r3, #9
 8004fc4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd0:	f000 feba 	bl	8005d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004fd4:	bf00      	nop
 8004fd6:	3768      	adds	r7, #104	@ 0x68
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40006400 	.word	0x40006400
 8004fe0:	40021000 	.word	0x40021000

08004fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b09c      	sub	sp, #112	@ 0x70
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ffc:	f107 0318 	add.w	r3, r7, #24
 8005000:	2244      	movs	r2, #68	@ 0x44
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f004 fe9d 	bl	8009d44 <memset>
  if(hi2c->Instance==I2C1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <HAL_I2C_MspInit+0xe0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d153      	bne.n	80050bc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005014:	2340      	movs	r3, #64	@ 0x40
 8005016:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005018:	2300      	movs	r3, #0
 800501a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800501c:	f107 0318 	add.w	r3, r7, #24
 8005020:	4618      	mov	r0, r3
 8005022:	f002 fc0d 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800502c:	f7fe f9ca 	bl	80033c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005030:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 8005032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005034:	4a24      	ldr	r2, [pc, #144]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800503c:	4b22      	ldr	r3, [pc, #136]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 800503e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005048:	4b1f      	ldr	r3, [pc, #124]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 800504a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504c:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005054:	4b1c      	ldr	r3, [pc, #112]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 8005056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005064:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005066:	2312      	movs	r3, #18
 8005068:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	2300      	movs	r3, #0
 8005070:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005072:	2304      	movs	r3, #4
 8005074:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800507a:	4619      	mov	r1, r3
 800507c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005080:	f000 fe62 	bl	8005d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005088:	2312      	movs	r3, #18
 800508a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005090:	2300      	movs	r3, #0
 8005092:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005094:	2304      	movs	r3, #4
 8005096:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005098:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800509c:	4619      	mov	r1, r3
 800509e:	480b      	ldr	r0, [pc, #44]	@ (80050cc <HAL_I2C_MspInit+0xe8>)
 80050a0:	f000 fe52 	bl	8005d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050a4:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	4a07      	ldr	r2, [pc, #28]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 80050aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <HAL_I2C_MspInit+0xe4>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050bc:	bf00      	nop
 80050be:	3770      	adds	r7, #112	@ 0x70
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40005400 	.word	0x40005400
 80050c8:	40021000 	.word	0x40021000
 80050cc:	48000400 	.word	0x48000400

080050d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e0:	d113      	bne.n	800510a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <HAL_TIM_Base_MspInit+0x44>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <HAL_TIM_Base_MspInit+0x44>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ee:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <HAL_TIM_Base_MspInit+0x44>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050fa:	2200      	movs	r2, #0
 80050fc:	2100      	movs	r1, #0
 80050fe:	201c      	movs	r0, #28
 8005100:	f000 fb2f 	bl	8005762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005104:	201c      	movs	r0, #28
 8005106:	f000 fb46 	bl	8005796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40021000 	.word	0x40021000

08005118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b09c      	sub	sp, #112	@ 0x70
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005120:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	2244      	movs	r2, #68	@ 0x44
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f004 fe03 	bl	8009d44 <memset>
  if(huart->Instance==USART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3e      	ldr	r2, [pc, #248]	@ (800523c <HAL_UART_MspInit+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d138      	bne.n	80051ba <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005148:	2301      	movs	r3, #1
 800514a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f002 fb73 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005160:	f7fe f930 	bl	80033c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005164:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <HAL_UART_MspInit+0x128>)
 8005166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005168:	4a35      	ldr	r2, [pc, #212]	@ (8005240 <HAL_UART_MspInit+0x128>)
 800516a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800516e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005170:	4b33      	ldr	r3, [pc, #204]	@ (8005240 <HAL_UART_MspInit+0x128>)
 8005172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800517c:	4b30      	ldr	r3, [pc, #192]	@ (8005240 <HAL_UART_MspInit+0x128>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <HAL_UART_MspInit+0x128>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005188:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <HAL_UART_MspInit+0x128>)
 800518a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005198:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800519a:	2312      	movs	r3, #18
 800519c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a2:	2303      	movs	r3, #3
 80051a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051a6:	2307      	movs	r3, #7
 80051a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80051ae:	4619      	mov	r1, r3
 80051b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051b4:	f000 fdc8 	bl	8005d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051b8:	e03b      	b.n	8005232 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a21      	ldr	r2, [pc, #132]	@ (8005244 <HAL_UART_MspInit+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d136      	bne.n	8005232 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051c4:	2302      	movs	r3, #2
 80051c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80051c8:	2300      	movs	r3, #0
 80051ca:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051cc:	f107 0318 	add.w	r3, r7, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f002 fb35 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80051dc:	f7fe f8f2 	bl	80033c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e0:	4b17      	ldr	r3, [pc, #92]	@ (8005240 <HAL_UART_MspInit+0x128>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e4:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <HAL_UART_MspInit+0x128>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ec:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <HAL_UART_MspInit+0x128>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f8:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <HAL_UART_MspInit+0x128>)
 80051fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fc:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <HAL_UART_MspInit+0x128>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005204:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <HAL_UART_MspInit+0x128>)
 8005206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8005210:	230c      	movs	r3, #12
 8005212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	2302      	movs	r3, #2
 8005216:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800521c:	2300      	movs	r3, #0
 800521e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005220:	2307      	movs	r3, #7
 8005222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005224:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005228:	4619      	mov	r1, r3
 800522a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800522e:	f000 fd8b 	bl	8005d48 <HAL_GPIO_Init>
}
 8005232:	bf00      	nop
 8005234:	3770      	adds	r7, #112	@ 0x70
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40013800 	.word	0x40013800
 8005240:	40021000 	.word	0x40021000
 8005244:	40004400 	.word	0x40004400

08005248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <NMI_Handler+0x4>

08005250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <HardFault_Handler+0x4>

08005258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <MemManage_Handler+0x4>

08005260 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <BusFault_Handler+0x4>

08005268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800526c:	bf00      	nop
 800526e:	e7fd      	b.n	800526c <UsageFault_Handler+0x4>

08005270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800527e:	b480      	push	{r7}
 8005280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800529e:	f000 f945 	bl	800552c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052ac:	4802      	ldr	r0, [pc, #8]	@ (80052b8 <TIM2_IRQHandler+0x10>)
 80052ae:	f002 fd79 	bl	8007da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000144 	.word	0x20000144

080052bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return 1;
 80052c0:	2301      	movs	r3, #1
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <_kill>:

int _kill(int pid, int sig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052d6:	f004 fdd7 	bl	8009e88 <__errno>
 80052da:	4603      	mov	r3, r0
 80052dc:	2216      	movs	r2, #22
 80052de:	601a      	str	r2, [r3, #0]
  return -1;
 80052e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <_exit>:

void _exit (int status)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ffe7 	bl	80052cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <_exit+0x12>

08005302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e00a      	b.n	800532a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005314:	f3af 8000 	nop.w
 8005318:	4601      	mov	r1, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	60ba      	str	r2, [r7, #8]
 8005320:	b2ca      	uxtb	r2, r1
 8005322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3301      	adds	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	dbf0      	blt.n	8005314 <_read+0x12>
  }

  return len;
 8005332:	687b      	ldr	r3, [r7, #4]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <_close>:
  }
  return len;
}

int _close(int file)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005364:	605a      	str	r2, [r3, #4]
  return 0;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <_isatty>:

int _isatty(int file)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <_sbrk+0x5c>)
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <_sbrk+0x60>)
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053b8:	4b13      	ldr	r3, [pc, #76]	@ (8005408 <_sbrk+0x64>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053c0:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <_sbrk+0x64>)
 80053c2:	4a12      	ldr	r2, [pc, #72]	@ (800540c <_sbrk+0x68>)
 80053c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053c6:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <_sbrk+0x64>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d207      	bcs.n	80053e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053d4:	f004 fd58 	bl	8009e88 <__errno>
 80053d8:	4603      	mov	r3, r0
 80053da:	220c      	movs	r2, #12
 80053dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053e2:	e009      	b.n	80053f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053e4:	4b08      	ldr	r3, [pc, #32]	@ (8005408 <_sbrk+0x64>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ea:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <_sbrk+0x64>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	4a05      	ldr	r2, [pc, #20]	@ (8005408 <_sbrk+0x64>)
 80053f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20008000 	.word	0x20008000
 8005404:	00000400 	.word	0x00000400
 8005408:	200006c8 	.word	0x200006c8
 800540c:	20000820 	.word	0x20000820

08005410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <SystemInit+0x20>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541a:	4a05      	ldr	r2, [pc, #20]	@ (8005430 <SystemInit+0x20>)
 800541c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005434:	480d      	ldr	r0, [pc, #52]	@ (800546c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005436:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 8005438:	f7ff ffea 	bl	8005410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800543c:	480c      	ldr	r0, [pc, #48]	@ (8005470 <LoopForever+0x6>)
  ldr r1, =_edata
 800543e:	490d      	ldr	r1, [pc, #52]	@ (8005474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005440:	4a0d      	ldr	r2, [pc, #52]	@ (8005478 <LoopForever+0xe>)
  movs r3, #0
 8005442:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005444:	e002      	b.n	800544c <LoopCopyDataInit>

08005446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800544a:	3304      	adds	r3, #4

0800544c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800544c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800544e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005450:	d3f9      	bcc.n	8005446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005452:	4a0a      	ldr	r2, [pc, #40]	@ (800547c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005454:	4c0a      	ldr	r4, [pc, #40]	@ (8005480 <LoopForever+0x16>)
  movs r3, #0
 8005456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005458:	e001      	b.n	800545e <LoopFillZerobss>

0800545a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800545a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800545c:	3204      	adds	r2, #4

0800545e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800545e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005460:	d3fb      	bcc.n	800545a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005462:	f004 fd17 	bl	8009e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005466:	f7fd fd23 	bl	8002eb0 <main>

0800546a <LoopForever>:

LoopForever:
    b LoopForever
 800546a:	e7fe      	b.n	800546a <LoopForever>
  ldr   r0, =_estack
 800546c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005474:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8005478:	0800acf4 	.word	0x0800acf4
  ldr r2, =_sbss
 800547c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8005480:	20000820 	.word	0x20000820

08005484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005484:	e7fe      	b.n	8005484 <ADC1_2_IRQHandler>

08005486 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005490:	2003      	movs	r0, #3
 8005492:	f000 f95b 	bl	800574c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005496:	2000      	movs	r0, #0
 8005498:	f000 f80e 	bl	80054b8 <HAL_InitTick>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	71fb      	strb	r3, [r7, #7]
 80054a6:	e001      	b.n	80054ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054a8:	f7ff fd1e 	bl	8004ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054ac:	79fb      	ldrb	r3, [r7, #7]

}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054c4:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <HAL_InitTick+0x68>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d022      	beq.n	8005512 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054cc:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <HAL_InitTick+0x6c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_InitTick+0x68>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f966 	bl	80057b2 <HAL_SYSTICK_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b0f      	cmp	r3, #15
 80054f0:	d809      	bhi.n	8005506 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f2:	2200      	movs	r2, #0
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054fa:	f000 f932 	bl	8005762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005528 <HAL_InitTick+0x70>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e007      	b.n	8005516 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e004      	b.n	8005516 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e001      	b.n	8005516 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000008 	.word	0x20000008
 8005524:	20000000 	.word	0x20000000
 8005528:	20000004 	.word	0x20000004

0800552c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <HAL_IncTick+0x1c>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_IncTick+0x20>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4413      	add	r3, r2
 800553a:	4a03      	ldr	r2, [pc, #12]	@ (8005548 <HAL_IncTick+0x1c>)
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	200006cc 	.word	0x200006cc
 800554c:	20000008 	.word	0x20000008

08005550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return uwTick;
 8005554:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <HAL_GetTick+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	200006cc 	.word	0x200006cc

08005568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7ff ffee 	bl	8005550 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005580:	d004      	beq.n	800558c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005582:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <HAL_Delay+0x40>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800558c:	bf00      	nop
 800558e:	f7ff ffdf 	bl	8005550 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	429a      	cmp	r2, r3
 800559c:	d8f7      	bhi.n	800558e <HAL_Delay+0x26>
  {
  }
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000008 	.word	0x20000008

080055ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055bc:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055de:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	60d3      	str	r3, [r2, #12]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f8:	4b04      	ldr	r3, [pc, #16]	@ (800560c <__NVIC_GetPriorityGrouping+0x18>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 0307 	and.w	r3, r3, #7
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	2b00      	cmp	r3, #0
 8005620:	db0b      	blt.n	800563a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	f003 021f 	and.w	r2, r3, #31
 8005628:	4907      	ldr	r1, [pc, #28]	@ (8005648 <__NVIC_EnableIRQ+0x38>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2001      	movs	r0, #1
 8005632:	fa00 f202 	lsl.w	r2, r0, r2
 8005636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000e100 	.word	0xe000e100

0800564c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565c:	2b00      	cmp	r3, #0
 800565e:	db0a      	blt.n	8005676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	490c      	ldr	r1, [pc, #48]	@ (8005698 <__NVIC_SetPriority+0x4c>)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	0112      	lsls	r2, r2, #4
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	440b      	add	r3, r1
 8005670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005674:	e00a      	b.n	800568c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4908      	ldr	r1, [pc, #32]	@ (800569c <__NVIC_SetPriority+0x50>)
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	3b04      	subs	r3, #4
 8005684:	0112      	lsls	r2, r2, #4
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	440b      	add	r3, r1
 800568a:	761a      	strb	r2, [r3, #24]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000e100 	.word	0xe000e100
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	@ 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f1c3 0307 	rsb	r3, r3, #7
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	bf28      	it	cs
 80056be:	2304      	movcs	r3, #4
 80056c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3304      	adds	r3, #4
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d902      	bls.n	80056d0 <NVIC_EncodePriority+0x30>
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3b03      	subs	r3, #3
 80056ce:	e000      	b.n	80056d2 <NVIC_EncodePriority+0x32>
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	401a      	ands	r2, r3
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	43d9      	mvns	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f8:	4313      	orrs	r3, r2
         );
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3724      	adds	r7, #36	@ 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3b01      	subs	r3, #1
 8005714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005718:	d301      	bcc.n	800571e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800571a:	2301      	movs	r3, #1
 800571c:	e00f      	b.n	800573e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800571e:	4a0a      	ldr	r2, [pc, #40]	@ (8005748 <SysTick_Config+0x40>)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3b01      	subs	r3, #1
 8005724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005726:	210f      	movs	r1, #15
 8005728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800572c:	f7ff ff8e 	bl	800564c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <SysTick_Config+0x40>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005736:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <SysTick_Config+0x40>)
 8005738:	2207      	movs	r2, #7
 800573a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	e000e010 	.word	0xe000e010

0800574c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff29 	bl	80055ac <__NVIC_SetPriorityGrouping>
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005770:	f7ff ff40 	bl	80055f4 <__NVIC_GetPriorityGrouping>
 8005774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff ff90 	bl	80056a0 <NVIC_EncodePriority>
 8005780:	4602      	mov	r2, r0
 8005782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ff5f 	bl	800564c <__NVIC_SetPriority>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff33 	bl	8005610 <__NVIC_EnableIRQ>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff ffa4 	bl	8005708 <SysTick_Config>
 80057c0:	4603      	mov	r3, r0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e147      	b.n	8005a6e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fb9c 	bl	8004f30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0210 	bic.w	r2, r2, #16
 8005806:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005808:	f7ff fea2 	bl	8005550 <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800580e:	e012      	b.n	8005836 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005810:	f7ff fe9e 	bl	8005550 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b0a      	cmp	r3, #10
 800581c:	d90b      	bls.n	8005836 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2203      	movs	r2, #3
 800582e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e11b      	b.n	8005a6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d0e5      	beq.n	8005810 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005854:	f7ff fe7c 	bl	8005550 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800585a:	e012      	b.n	8005882 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800585c:	f7ff fe78 	bl	8005550 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b0a      	cmp	r3, #10
 8005868:	d90b      	bls.n	8005882 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2203      	movs	r2, #3
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0f5      	b.n	8005a6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0e5      	beq.n	800585c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0202 	orr.w	r2, r2, #2
 800589e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a74      	ldr	r2, [pc, #464]	@ (8005a78 <HAL_FDCAN_Init+0x2ac>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d103      	bne.n	80058b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80058aa:	4a74      	ldr	r2, [pc, #464]	@ (8005a7c <HAL_FDCAN_Init+0x2b0>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7c1b      	ldrb	r3, [r3, #16]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d108      	bne.n	80058cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c8:	619a      	str	r2, [r3, #24]
 80058ca:	e007      	b.n	80058dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7c5b      	ldrb	r3, [r3, #17]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f2:	619a      	str	r2, [r3, #24]
 80058f4:	e007      	b.n	8005906 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005904:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7c9b      	ldrb	r3, [r3, #18]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d108      	bne.n	8005920 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591c:	619a      	str	r2, [r3, #24]
 800591e:	e007      	b.n	8005930 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800592e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005954:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0210 	bic.w	r2, r2, #16
 8005964:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d108      	bne.n	8005980 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0204 	orr.w	r2, r2, #4
 800597c:	619a      	str	r2, [r3, #24]
 800597e:	e02c      	b.n	80059da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d028      	beq.n	80059da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d01c      	beq.n	80059ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800599e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0210 	orr.w	r2, r2, #16
 80059ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d110      	bne.n	80059da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0220 	orr.w	r2, r2, #32
 80059c6:	619a      	str	r2, [r3, #24]
 80059c8:	e007      	b.n	80059da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0220 	orr.w	r2, r2, #32
 80059d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	3b01      	subs	r3, #1
 80059e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a02:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a04:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0e:	d115      	bne.n	8005a3c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a1e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	3b01      	subs	r3, #1
 8005a26:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a28:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	3b01      	subs	r3, #1
 8005a32:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a38:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a3a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f922 	bl	8005c9c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40006400 	.word	0x40006400
 8005a7c:	40006500 	.word	0x40006500

08005a80 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d110      	bne.n	8005ab6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e006      	b.n	8005ac4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ae2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d003      	beq.n	8005af2 <HAL_FDCAN_ActivateNotification+0x22>
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f040 80c8 	bne.w	8005c82 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03b      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d031      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d027      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01d      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00c      	beq.n	8005b96 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d13b      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d131      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d127      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11d      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d113      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0202 	orr.w	r2, r2, #2
 8005c30:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e006      	b.n	8005c90 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005ca4:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005ca6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbe:	041a      	lsls	r2, r3, #16
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cdc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	061a      	lsls	r2, r3, #24
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e005      	b.n	8005d2a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3304      	adds	r3, #4
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d3f3      	bcc.n	8005d1e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	4000a400 	.word	0x4000a400

08005d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d56:	e15a      	b.n	800600e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 814c 	beq.w	8006008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d005      	beq.n	8005d88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d130      	bne.n	8005dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	2203      	movs	r2, #3
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	f003 0201 	and.w	r2, r3, #1
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d017      	beq.n	8005e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	2203      	movs	r2, #3
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d123      	bne.n	8005e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	08da      	lsrs	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3208      	adds	r2, #8
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	08da      	lsrs	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3208      	adds	r2, #8
 8005e74:	6939      	ldr	r1, [r7, #16]
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	2203      	movs	r2, #3
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0203 	and.w	r2, r3, #3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a6 	beq.w	8006008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800602c <HAL_GPIO_Init+0x2e4>)
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800602c <HAL_GPIO_Init+0x2e4>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ec8:	4b58      	ldr	r3, [pc, #352]	@ (800602c <HAL_GPIO_Init+0x2e4>)
 8005eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ed4:	4a56      	ldr	r2, [pc, #344]	@ (8006030 <HAL_GPIO_Init+0x2e8>)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	089b      	lsrs	r3, r3, #2
 8005eda:	3302      	adds	r3, #2
 8005edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	220f      	movs	r2, #15
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005efe:	d01f      	beq.n	8005f40 <HAL_GPIO_Init+0x1f8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a4c      	ldr	r2, [pc, #304]	@ (8006034 <HAL_GPIO_Init+0x2ec>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d019      	beq.n	8005f3c <HAL_GPIO_Init+0x1f4>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8006038 <HAL_GPIO_Init+0x2f0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_GPIO_Init+0x1f0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a4a      	ldr	r2, [pc, #296]	@ (800603c <HAL_GPIO_Init+0x2f4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00d      	beq.n	8005f34 <HAL_GPIO_Init+0x1ec>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a49      	ldr	r2, [pc, #292]	@ (8006040 <HAL_GPIO_Init+0x2f8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <HAL_GPIO_Init+0x1e8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a48      	ldr	r2, [pc, #288]	@ (8006044 <HAL_GPIO_Init+0x2fc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d101      	bne.n	8005f2c <HAL_GPIO_Init+0x1e4>
 8005f28:	2305      	movs	r3, #5
 8005f2a:	e00a      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f2c:	2306      	movs	r3, #6
 8005f2e:	e008      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f30:	2304      	movs	r3, #4
 8005f32:	e006      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f34:	2303      	movs	r3, #3
 8005f36:	e004      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e002      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f40:	2300      	movs	r3, #0
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	f002 0203 	and.w	r2, r2, #3
 8005f48:	0092      	lsls	r2, r2, #2
 8005f4a:	4093      	lsls	r3, r2
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f52:	4937      	ldr	r1, [pc, #220]	@ (8006030 <HAL_GPIO_Init+0x2e8>)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	3302      	adds	r3, #2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f60:	4b39      	ldr	r3, [pc, #228]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f84:	4a30      	ldr	r2, [pc, #192]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4013      	ands	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fae:	4a26      	ldr	r2, [pc, #152]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fb4:	4b24      	ldr	r3, [pc, #144]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fde:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4013      	ands	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006002:	4a11      	ldr	r2, [pc, #68]	@ (8006048 <HAL_GPIO_Init+0x300>)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	3301      	adds	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f ae9d 	bne.w	8005d58 <HAL_GPIO_Init+0x10>
  }
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40021000 	.word	0x40021000
 8006030:	40010000 	.word	0x40010000
 8006034:	48000400 	.word	0x48000400
 8006038:	48000800 	.word	0x48000800
 800603c:	48000c00 	.word	0x48000c00
 8006040:	48001000 	.word	0x48001000
 8006044:	48001400 	.word	0x48001400
 8006048:	40010400 	.word	0x40010400

0800604c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	887b      	ldrh	r3, [r7, #2]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	e001      	b.n	800606e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
 8006088:	4613      	mov	r3, r2
 800608a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800608c:	787b      	ldrb	r3, [r7, #1]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006098:	e002      	b.n	80060a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e08d      	b.n	80061da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fe ff86 	bl	8004fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	@ 0x24
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800610c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	e006      	b.n	8006134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d108      	bne.n	800614e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	e007      	b.n	800615e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800615c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800616c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1a      	ldr	r2, [r3, #32]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	461a      	mov	r2, r3
 80061f0:	460b      	mov	r3, r1
 80061f2:	817b      	strh	r3, [r7, #10]
 80061f4:	4613      	mov	r3, r2
 80061f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b20      	cmp	r3, #32
 8006202:	f040 80fd 	bne.w	8006400 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2C_Master_Transmit+0x30>
 8006210:	2302      	movs	r3, #2
 8006212:	e0f6      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800621c:	f7ff f998 	bl	8005550 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2319      	movs	r3, #25
 8006228:	2201      	movs	r2, #1
 800622a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa0a 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0e1      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2221      	movs	r2, #33	@ 0x21
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2210      	movs	r2, #16
 800624a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	893a      	ldrh	r2, [r7, #8]
 800625e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626a:	b29b      	uxth	r3, r3
 800626c:	2bff      	cmp	r3, #255	@ 0xff
 800626e:	d906      	bls.n	800627e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	22ff      	movs	r2, #255	@ 0xff
 8006274:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006276:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e007      	b.n	800628e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800628c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d024      	beq.n	80062e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	781a      	ldrb	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	3301      	adds	r3, #1
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	8979      	ldrh	r1, [r7, #10]
 80062d2:	4b4e      	ldr	r3, [pc, #312]	@ (800640c <HAL_I2C_Master_Transmit+0x228>)
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fc05 	bl	8006ae8 <I2C_TransferConfig>
 80062de:	e066      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	8979      	ldrh	r1, [r7, #10]
 80062e8:	4b48      	ldr	r3, [pc, #288]	@ (800640c <HAL_I2C_Master_Transmit+0x228>)
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fbfa 	bl	8006ae8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80062f4:	e05b      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	6a39      	ldr	r1, [r7, #32]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f9fd 	bl	80066fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07b      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d034      	beq.n	80063ae <HAL_I2C_Master_Transmit+0x1ca>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d130      	bne.n	80063ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2200      	movs	r2, #0
 8006354:	2180      	movs	r1, #128	@ 0x80
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f976 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e04d      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d90e      	bls.n	800638e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	22ff      	movs	r2, #255	@ 0xff
 8006374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637a:	b2da      	uxtb	r2, r3
 800637c:	8979      	ldrh	r1, [r7, #10]
 800637e:	2300      	movs	r3, #0
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 fbae 	bl	8006ae8 <I2C_TransferConfig>
 800638c:	e00f      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639c:	b2da      	uxtb	r2, r3
 800639e:	8979      	ldrh	r1, [r7, #10]
 80063a0:	2300      	movs	r3, #0
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 fb9d 	bl	8006ae8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d19e      	bne.n	80062f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	6a39      	ldr	r1, [r7, #32]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f9e3 	bl	8006788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e01a      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2220      	movs	r2, #32
 80063d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6859      	ldr	r1, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0c      	ldr	r3, [pc, #48]	@ (8006410 <HAL_I2C_Master_Transmit+0x22c>)
 80063e0:	400b      	ands	r3, r1
 80063e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e000      	b.n	8006402 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006400:	2302      	movs	r3, #2
  }
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	80002000 	.word	0x80002000
 8006410:	fe00e800 	.word	0xfe00e800

08006414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	461a      	mov	r2, r3
 8006420:	460b      	mov	r3, r1
 8006422:	817b      	strh	r3, [r7, #10]
 8006424:	4613      	mov	r3, r2
 8006426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b20      	cmp	r3, #32
 8006432:	f040 80db 	bne.w	80065ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_I2C_Master_Receive+0x30>
 8006440:	2302      	movs	r3, #2
 8006442:	e0d4      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800644c:	f7ff f880 	bl	8005550 <HAL_GetTick>
 8006450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	2319      	movs	r3, #25
 8006458:	2201      	movs	r2, #1
 800645a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f8f2 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0bf      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2222      	movs	r2, #34	@ 0x22
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2210      	movs	r2, #16
 800647a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	893a      	ldrh	r2, [r7, #8]
 800648e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	2bff      	cmp	r3, #255	@ 0xff
 800649e:	d90e      	bls.n	80064be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	22ff      	movs	r2, #255	@ 0xff
 80064a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	8979      	ldrh	r1, [r7, #10]
 80064ae:	4b52      	ldr	r3, [pc, #328]	@ (80065f8 <HAL_I2C_Master_Receive+0x1e4>)
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fb16 	bl	8006ae8 <I2C_TransferConfig>
 80064bc:	e06d      	b.n	800659a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	8979      	ldrh	r1, [r7, #10]
 80064d0:	4b49      	ldr	r3, [pc, #292]	@ (80065f8 <HAL_I2C_Master_Receive+0x1e4>)
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fb05 	bl	8006ae8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80064de:	e05c      	b.n	800659a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	6a39      	ldr	r1, [r7, #32]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f993 	bl	8006810 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e07c      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d034      	beq.n	800659a <HAL_I2C_Master_Receive+0x186>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d130      	bne.n	800659a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2200      	movs	r2, #0
 8006540:	2180      	movs	r1, #128	@ 0x80
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f880 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e04d      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2bff      	cmp	r3, #255	@ 0xff
 800655a:	d90e      	bls.n	800657a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	22ff      	movs	r2, #255	@ 0xff
 8006560:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006566:	b2da      	uxtb	r2, r3
 8006568:	8979      	ldrh	r1, [r7, #10]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fab8 	bl	8006ae8 <I2C_TransferConfig>
 8006578:	e00f      	b.n	800659a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	b2da      	uxtb	r2, r3
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	2300      	movs	r3, #0
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 faa7 	bl	8006ae8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d19d      	bne.n	80064e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	6a39      	ldr	r1, [r7, #32]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f8ed 	bl	8006788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e01a      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2220      	movs	r2, #32
 80065be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6859      	ldr	r1, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <HAL_I2C_Master_Receive+0x1e8>)
 80065cc:	400b      	ands	r3, r1
 80065ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	80002400 	.word	0x80002400
 80065fc:	fe00e800 	.word	0xfe00e800

08006600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d103      	bne.n	800661e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d007      	beq.n	800663c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	619a      	str	r2, [r3, #24]
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006658:	e03b      	b.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f962 	bl	8006928 <I2C_IsErrorOccurred>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e041      	b.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006674:	d02d      	beq.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fe ff6b 	bl	8005550 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d122      	bne.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d113      	bne.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e00f      	b.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4013      	ands	r3, r2
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d0b4      	beq.n	800665a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006706:	e033      	b.n	8006770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f90b 	bl	8006928 <I2C_IsErrorOccurred>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e031      	b.n	8006780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006722:	d025      	beq.n	8006770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006724:	f7fe ff14 	bl	8005550 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d302      	bcc.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11a      	bne.n	8006770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d013      	beq.n	8006770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e007      	b.n	8006780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d1c4      	bne.n	8006708 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006794:	e02f      	b.n	80067f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f8c4 	bl	8006928 <I2C_IsErrorOccurred>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e02d      	b.n	8006806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fe fed1 	bl	8005550 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d11a      	bne.n	80067f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d013      	beq.n	80067f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e007      	b.n	8006806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d1c8      	bne.n	8006796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006820:	e071      	b.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f87e 	bl	8006928 <I2C_IsErrorOccurred>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b20      	cmp	r3, #32
 8006842:	d13b      	bne.n	80068bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d138      	bne.n	80068bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d105      	bne.n	8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b10      	cmp	r3, #16
 8006870:	d121      	bne.n	80068b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2204      	movs	r2, #4
 800687e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2220      	movs	r2, #32
 8006886:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006894:	400b      	ands	r3, r1
 8006896:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
 80068b4:	e002      	b.n	80068bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80068bc:	f7fe fe48 	bl	8005550 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d302      	bcc.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d119      	bne.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d116      	bne.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d00f      	beq.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b04      	cmp	r3, #4
 8006912:	d002      	beq.n	800691a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d083      	beq.n	8006822 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	fe00e800 	.word	0xfe00e800

08006928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	@ 0x28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b00      	cmp	r3, #0
 8006952:	d068      	beq.n	8006a26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2210      	movs	r2, #16
 800695a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800695c:	e049      	b.n	80069f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006964:	d045      	beq.n	80069f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fe fdf3 	bl	8005550 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <I2C_IsErrorOccurred+0x54>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d13a      	bne.n	80069f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800698e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699e:	d121      	bne.n	80069e4 <I2C_IsErrorOccurred+0xbc>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069a6:	d01d      	beq.n	80069e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069a8:	7cfb      	ldrb	r3, [r7, #19]
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d01a      	beq.n	80069e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069be:	f7fe fdc7 	bl	8005550 <HAL_GetTick>
 80069c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c4:	e00e      	b.n	80069e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069c6:	f7fe fdc3 	bl	8005550 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b19      	cmp	r3, #25
 80069d2:	d907      	bls.n	80069e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	f043 0320 	orr.w	r3, r3, #32
 80069da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069e2:	e006      	b.n	80069f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d1e9      	bne.n	80069c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d003      	beq.n	8006a08 <I2C_IsErrorOccurred+0xe0>
 8006a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0aa      	beq.n	800695e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2220      	movs	r2, #32
 8006a16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f043 0304 	orr.w	r3, r3, #4
 8006a1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	f043 0302 	orr.w	r3, r3, #2
 8006a82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01c      	beq.n	8006ad6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff fdaf 	bl	8006600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6859      	ldr	r1, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <I2C_IsErrorOccurred+0x1bc>)
 8006aae:	400b      	ands	r3, r1
 8006ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3728      	adds	r7, #40	@ 0x28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	fe00e800 	.word	0xfe00e800

08006ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	817b      	strh	r3, [r7, #10]
 8006af6:	4613      	mov	r3, r2
 8006af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b00:	7a7b      	ldrb	r3, [r7, #9]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	0d5b      	lsrs	r3, r3, #21
 8006b22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b26:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <I2C_TransferConfig+0x60>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	ea02 0103 	and.w	r1, r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	03ff63ff 	.word	0x03ff63ff

08006b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d138      	bne.n	8006bd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e032      	b.n	8006bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2224      	movs	r2, #36	@ 0x24
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e000      	b.n	8006bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d139      	bne.n	8006c6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e033      	b.n	8006c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	@ 0x24
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e000      	b.n	8006c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c6c:	2302      	movs	r3, #2
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d141      	bne.n	8006d0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c96:	d131      	bne.n	8006cfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c98:	4b47      	ldr	r3, [pc, #284]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9e:	4a46      	ldr	r2, [pc, #280]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ca8:	4b43      	ldr	r3, [pc, #268]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cb0:	4a41      	ldr	r2, [pc, #260]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cb8:	4b40      	ldr	r3, [pc, #256]	@ (8006dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2232      	movs	r2, #50	@ 0x32
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0c9b      	lsrs	r3, r3, #18
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cce:	e002      	b.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cd6:	4b38      	ldr	r3, [pc, #224]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce2:	d102      	bne.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f2      	bne.n	8006cd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cea:	4b33      	ldr	r3, [pc, #204]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf6:	d158      	bne.n	8006daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e057      	b.n	8006dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d02:	4a2d      	ldr	r2, [pc, #180]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d0c:	e04d      	b.n	8006daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d14:	d141      	bne.n	8006d9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d16:	4b28      	ldr	r3, [pc, #160]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d22:	d131      	bne.n	8006d88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d24:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d2a:	4a23      	ldr	r2, [pc, #140]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d34:	4b20      	ldr	r3, [pc, #128]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d44:	4b1d      	ldr	r3, [pc, #116]	@ (8006dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2232      	movs	r2, #50	@ 0x32
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	0c9b      	lsrs	r3, r3, #18
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d5a:	e002      	b.n	8006d62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d62:	4b15      	ldr	r3, [pc, #84]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6e:	d102      	bne.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f2      	bne.n	8006d5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d76:	4b10      	ldr	r3, [pc, #64]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d82:	d112      	bne.n	8006daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e011      	b.n	8006dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d98:	e007      	b.n	8006daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006da2:	4a05      	ldr	r2, [pc, #20]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006da8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40007000 	.word	0x40007000
 8006dbc:	20000000 	.word	0x20000000
 8006dc0:	431bde83 	.word	0x431bde83

08006dc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006dc8:	4b05      	ldr	r3, [pc, #20]	@ (8006de0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4a04      	ldr	r2, [pc, #16]	@ (8006de0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dd2:	6093      	str	r3, [r2, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40007000 	.word	0x40007000

08006de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e2fe      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d075      	beq.n	8006eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e02:	4b97      	ldr	r3, [pc, #604]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e0c:	4b94      	ldr	r3, [pc, #592]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	d102      	bne.n	8006e22 <HAL_RCC_OscConfig+0x3e>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d002      	beq.n	8006e28 <HAL_RCC_OscConfig+0x44>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10b      	bne.n	8006e40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e28:	4b8d      	ldr	r3, [pc, #564]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d05b      	beq.n	8006eec <HAL_RCC_OscConfig+0x108>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d157      	bne.n	8006eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e2d9      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e48:	d106      	bne.n	8006e58 <HAL_RCC_OscConfig+0x74>
 8006e4a:	4b85      	ldr	r3, [pc, #532]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a84      	ldr	r2, [pc, #528]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e01d      	b.n	8006e94 <HAL_RCC_OscConfig+0xb0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e60:	d10c      	bne.n	8006e7c <HAL_RCC_OscConfig+0x98>
 8006e62:	4b7f      	ldr	r3, [pc, #508]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7e      	ldr	r2, [pc, #504]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a7b      	ldr	r2, [pc, #492]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e00b      	b.n	8006e94 <HAL_RCC_OscConfig+0xb0>
 8006e7c:	4b78      	ldr	r3, [pc, #480]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a77      	ldr	r2, [pc, #476]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4b75      	ldr	r3, [pc, #468]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a74      	ldr	r2, [pc, #464]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d013      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fe fb58 	bl	8005550 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea4:	f7fe fb54 	bl	8005550 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b64      	cmp	r3, #100	@ 0x64
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e29e      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0xc0>
 8006ec2:	e014      	b.n	8006eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fe fb44 	bl	8005550 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ecc:	f7fe fb40 	bl	8005550 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b64      	cmp	r3, #100	@ 0x64
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e28a      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ede:	4b60      	ldr	r3, [pc, #384]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <HAL_RCC_OscConfig+0xe8>
 8006eea:	e000      	b.n	8006eee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d075      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efa:	4b59      	ldr	r3, [pc, #356]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f04:	4b56      	ldr	r3, [pc, #344]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d102      	bne.n	8006f1a <HAL_RCC_OscConfig+0x136>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d002      	beq.n	8006f20 <HAL_RCC_OscConfig+0x13c>
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d11f      	bne.n	8006f60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f20:	4b4f      	ldr	r3, [pc, #316]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCC_OscConfig+0x154>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e25d      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f38:	4b49      	ldr	r3, [pc, #292]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	061b      	lsls	r3, r3, #24
 8006f46:	4946      	ldr	r1, [pc, #280]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f4c:	4b45      	ldr	r3, [pc, #276]	@ (8007064 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fab1 	bl	80054b8 <HAL_InitTick>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d043      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e249      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d023      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f68:	4b3d      	ldr	r3, [pc, #244]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fe faec 	bl	8005550 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7c:	f7fe fae8 	bl	8005550 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e232      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f8e:	4b34      	ldr	r3, [pc, #208]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9a:	4b31      	ldr	r3, [pc, #196]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	061b      	lsls	r3, r3, #24
 8006fa8:	492d      	ldr	r1, [pc, #180]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
 8006fae:	e01a      	b.n	8006fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fe fac8 	bl	8005550 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fc4:	f7fe fac4 	bl	8005550 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e20e      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fd6:	4b22      	ldr	r3, [pc, #136]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x1e0>
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d041      	beq.n	8007076 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01c      	beq.n	8007034 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ffa:	4b19      	ldr	r3, [pc, #100]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007000:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700a:	f7fe faa1 	bl	8005550 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007012:	f7fe fa9d 	bl	8005550 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e1e7      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007024:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8007026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0ef      	beq.n	8007012 <HAL_RCC_OscConfig+0x22e>
 8007032:	e020      	b.n	8007076 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 8007036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800703a:	4a09      	ldr	r2, [pc, #36]	@ (8007060 <HAL_RCC_OscConfig+0x27c>)
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fe fa84 	bl	8005550 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800704a:	e00d      	b.n	8007068 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800704c:	f7fe fa80 	bl	8005550 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d906      	bls.n	8007068 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e1ca      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
 800705e:	bf00      	nop
 8007060:	40021000 	.word	0x40021000
 8007064:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007068:	4b8c      	ldr	r3, [pc, #560]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1ea      	bne.n	800704c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80a6 	beq.w	80071d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007084:	2300      	movs	r3, #0
 8007086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007088:	4b84      	ldr	r3, [pc, #528]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x2b4>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <HAL_RCC_OscConfig+0x2b6>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00d      	beq.n	80070ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800709e:	4b7f      	ldr	r3, [pc, #508]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a2:	4a7e      	ldr	r2, [pc, #504]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80070a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80070aa:	4b7c      	ldr	r3, [pc, #496]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070b6:	2301      	movs	r3, #1
 80070b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ba:	4b79      	ldr	r3, [pc, #484]	@ (80072a0 <HAL_RCC_OscConfig+0x4bc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d118      	bne.n	80070f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c6:	4b76      	ldr	r3, [pc, #472]	@ (80072a0 <HAL_RCC_OscConfig+0x4bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a75      	ldr	r2, [pc, #468]	@ (80072a0 <HAL_RCC_OscConfig+0x4bc>)
 80070cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070d2:	f7fe fa3d 	bl	8005550 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070da:	f7fe fa39 	bl	8005550 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e183      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ec:	4b6c      	ldr	r3, [pc, #432]	@ (80072a0 <HAL_RCC_OscConfig+0x4bc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d108      	bne.n	8007112 <HAL_RCC_OscConfig+0x32e>
 8007100:	4b66      	ldr	r3, [pc, #408]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007106:	4a65      	ldr	r2, [pc, #404]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007110:	e024      	b.n	800715c <HAL_RCC_OscConfig+0x378>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b05      	cmp	r3, #5
 8007118:	d110      	bne.n	800713c <HAL_RCC_OscConfig+0x358>
 800711a:	4b60      	ldr	r3, [pc, #384]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007120:	4a5e      	ldr	r2, [pc, #376]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007122:	f043 0304 	orr.w	r3, r3, #4
 8007126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800712a:	4b5c      	ldr	r3, [pc, #368]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007130:	4a5a      	ldr	r2, [pc, #360]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800713a:	e00f      	b.n	800715c <HAL_RCC_OscConfig+0x378>
 800713c:	4b57      	ldr	r3, [pc, #348]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800713e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007142:	4a56      	ldr	r2, [pc, #344]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800714c:	4b53      	ldr	r3, [pc, #332]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007152:	4a52      	ldr	r2, [pc, #328]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007154:	f023 0304 	bic.w	r3, r3, #4
 8007158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d016      	beq.n	8007192 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007164:	f7fe f9f4 	bl	8005550 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800716a:	e00a      	b.n	8007182 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716c:	f7fe f9f0 	bl	8005550 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e138      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007182:	4b46      	ldr	r3, [pc, #280]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ed      	beq.n	800716c <HAL_RCC_OscConfig+0x388>
 8007190:	e015      	b.n	80071be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007192:	f7fe f9dd 	bl	8005550 <HAL_GetTick>
 8007196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007198:	e00a      	b.n	80071b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719a:	f7fe f9d9 	bl	8005550 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e121      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071b0:	4b3a      	ldr	r3, [pc, #232]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1ed      	bne.n	800719a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071be:	7ffb      	ldrb	r3, [r7, #31]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c4:	4b35      	ldr	r3, [pc, #212]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	4a34      	ldr	r2, [pc, #208]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d03c      	beq.n	8007256 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01c      	beq.n	800721e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071e4:	4b2d      	ldr	r3, [pc, #180]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80071e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071ea:	4a2c      	ldr	r2, [pc, #176]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f4:	f7fe f9ac 	bl	8005550 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071fc:	f7fe f9a8 	bl	8005550 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e0f2      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800720e:	4b23      	ldr	r3, [pc, #140]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ef      	beq.n	80071fc <HAL_RCC_OscConfig+0x418>
 800721c:	e01b      	b.n	8007256 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800721e:	4b1f      	ldr	r3, [pc, #124]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007220:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007224:	4a1d      	ldr	r2, [pc, #116]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722e:	f7fe f98f 	bl	8005550 <HAL_GetTick>
 8007232:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007236:	f7fe f98b 	bl	8005550 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e0d5      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007248:	4b14      	ldr	r3, [pc, #80]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800724a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1ef      	bne.n	8007236 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80c9 	beq.w	80073f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007260:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 030c 	and.w	r3, r3, #12
 8007268:	2b0c      	cmp	r3, #12
 800726a:	f000 8083 	beq.w	8007374 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	2b02      	cmp	r3, #2
 8007274:	d15e      	bne.n	8007334 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007276:	4b09      	ldr	r3, [pc, #36]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a08      	ldr	r2, [pc, #32]	@ (800729c <HAL_RCC_OscConfig+0x4b8>)
 800727c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fe f965 	bl	8005550 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007288:	e00c      	b.n	80072a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728a:	f7fe f961 	bl	8005550 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d905      	bls.n	80072a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0ab      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
 800729c:	40021000 	.word	0x40021000
 80072a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072a4:	4b55      	ldr	r3, [pc, #340]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ec      	bne.n	800728a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072b0:	4b52      	ldr	r3, [pc, #328]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	4b52      	ldr	r3, [pc, #328]	@ (8007400 <HAL_RCC_OscConfig+0x61c>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6a11      	ldr	r1, [r2, #32]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072c0:	3a01      	subs	r2, #1
 80072c2:	0112      	lsls	r2, r2, #4
 80072c4:	4311      	orrs	r1, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072ca:	0212      	lsls	r2, r2, #8
 80072cc:	4311      	orrs	r1, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072d2:	0852      	lsrs	r2, r2, #1
 80072d4:	3a01      	subs	r2, #1
 80072d6:	0552      	lsls	r2, r2, #21
 80072d8:	4311      	orrs	r1, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072de:	0852      	lsrs	r2, r2, #1
 80072e0:	3a01      	subs	r2, #1
 80072e2:	0652      	lsls	r2, r2, #25
 80072e4:	4311      	orrs	r1, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072ea:	06d2      	lsls	r2, r2, #27
 80072ec:	430a      	orrs	r2, r1
 80072ee:	4943      	ldr	r1, [pc, #268]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072f4:	4b41      	ldr	r3, [pc, #260]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a40      	ldr	r2, [pc, #256]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 80072fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007300:	4b3e      	ldr	r3, [pc, #248]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a3d      	ldr	r2, [pc, #244]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800730a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fe f920 	bl	8005550 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fe f91c 	bl	8005550 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e066      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007326:	4b35      	ldr	r3, [pc, #212]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCC_OscConfig+0x530>
 8007332:	e05e      	b.n	80073f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007334:	4b31      	ldr	r3, [pc, #196]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a30      	ldr	r2, [pc, #192]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 800733a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800733e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007340:	f7fe f906 	bl	8005550 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007346:	e008      	b.n	800735a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007348:	f7fe f902 	bl	8005550 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e04c      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800735a:	4b28      	ldr	r3, [pc, #160]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f0      	bne.n	8007348 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007366:	4b25      	ldr	r3, [pc, #148]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	4924      	ldr	r1, [pc, #144]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 800736c:	4b25      	ldr	r3, [pc, #148]	@ (8007404 <HAL_RCC_OscConfig+0x620>)
 800736e:	4013      	ands	r3, r2
 8007370:	60cb      	str	r3, [r1, #12]
 8007372:	e03e      	b.n	80073f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e039      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007380:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <HAL_RCC_OscConfig+0x618>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 0203 	and.w	r2, r3, #3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	429a      	cmp	r2, r3
 8007392:	d12c      	bne.n	80073ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	3b01      	subs	r3, #1
 80073a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d123      	bne.n	80073ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d11b      	bne.n	80073ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d113      	bne.n	80073ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	3b01      	subs	r3, #1
 80073d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d109      	bne.n	80073ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	3b01      	subs	r3, #1
 80073e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40021000 	.word	0x40021000
 8007400:	019f800c 	.word	0x019f800c
 8007404:	feeefffc 	.word	0xfeeefffc

08007408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e11e      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007420:	4b91      	ldr	r3, [pc, #580]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d910      	bls.n	8007450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742e:	4b8e      	ldr	r3, [pc, #568]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f023 020f 	bic.w	r2, r3, #15
 8007436:	498c      	ldr	r1, [pc, #560]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743e:	4b8a      	ldr	r3, [pc, #552]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e106      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d073      	beq.n	8007544 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d129      	bne.n	80074b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007464:	4b81      	ldr	r3, [pc, #516]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0f4      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007474:	f000 f99e 	bl	80077b4 <RCC_GetSysClockFreqFromPLLSource>
 8007478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4a7c      	ldr	r2, [pc, #496]	@ (8007670 <HAL_RCC_ClockConfig+0x268>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d93f      	bls.n	8007502 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007482:	4b7a      	ldr	r3, [pc, #488]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007496:	2b00      	cmp	r3, #0
 8007498:	d033      	beq.n	8007502 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d12f      	bne.n	8007502 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074a2:	4b72      	ldr	r3, [pc, #456]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074aa:	4a70      	ldr	r2, [pc, #448]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	e024      	b.n	8007502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d107      	bne.n	80074d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074c0:	4b6a      	ldr	r3, [pc, #424]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d109      	bne.n	80074e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0c6      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074d0:	4b66      	ldr	r3, [pc, #408]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0be      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074e0:	f000 f8ce 	bl	8007680 <HAL_RCC_GetSysClockFreq>
 80074e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4a61      	ldr	r2, [pc, #388]	@ (8007670 <HAL_RCC_ClockConfig+0x268>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d909      	bls.n	8007502 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074ee:	4b5f      	ldr	r3, [pc, #380]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074f6:	4a5d      	ldr	r2, [pc, #372]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80074f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007502:	4b5a      	ldr	r3, [pc, #360]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f023 0203 	bic.w	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4957      	ldr	r1, [pc, #348]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007510:	4313      	orrs	r3, r2
 8007512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007514:	f7fe f81c 	bl	8005550 <HAL_GetTick>
 8007518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751a:	e00a      	b.n	8007532 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751c:	f7fe f818 	bl	8005550 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800752a:	4293      	cmp	r3, r2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e095      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007532:	4b4e      	ldr	r3, [pc, #312]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 020c 	and.w	r2, r3, #12
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	429a      	cmp	r2, r3
 8007542:	d1eb      	bne.n	800751c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d023      	beq.n	8007598 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800755c:	4b43      	ldr	r3, [pc, #268]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a42      	ldr	r2, [pc, #264]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007566:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007574:	4b3d      	ldr	r3, [pc, #244]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800757c:	4a3b      	ldr	r2, [pc, #236]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 800757e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007584:	4b39      	ldr	r3, [pc, #228]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	4936      	ldr	r1, [pc, #216]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
 8007596:	e008      	b.n	80075aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2b80      	cmp	r3, #128	@ 0x80
 800759c:	d105      	bne.n	80075aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800759e:	4b33      	ldr	r3, [pc, #204]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	4a32      	ldr	r2, [pc, #200]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 80075a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d21d      	bcs.n	80075f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f023 020f 	bic.w	r2, r3, #15
 80075c0:	4929      	ldr	r1, [pc, #164]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075c8:	f7fd ffc2 	bl	8005550 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d0:	f7fd ffbe 	bl	8005550 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e03b      	b.n	800765e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b20      	ldr	r3, [pc, #128]	@ (8007668 <HAL_RCC_ClockConfig+0x260>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1ed      	bne.n	80075d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007600:	4b1a      	ldr	r3, [pc, #104]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4917      	ldr	r1, [pc, #92]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 800760e:	4313      	orrs	r3, r2
 8007610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800761e:	4b13      	ldr	r3, [pc, #76]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	490f      	ldr	r1, [pc, #60]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007632:	f000 f825 	bl	8007680 <HAL_RCC_GetSysClockFreq>
 8007636:	4602      	mov	r2, r0
 8007638:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <HAL_RCC_ClockConfig+0x264>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	490c      	ldr	r1, [pc, #48]	@ (8007674 <HAL_RCC_ClockConfig+0x26c>)
 8007644:	5ccb      	ldrb	r3, [r1, r3]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <HAL_RCC_ClockConfig+0x270>)
 8007650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007652:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <HAL_RCC_ClockConfig+0x274>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd ff2e 	bl	80054b8 <HAL_InitTick>
 800765c:	4603      	mov	r3, r0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40022000 	.word	0x40022000
 800766c:	40021000 	.word	0x40021000
 8007670:	04c4b400 	.word	0x04c4b400
 8007674:	0800ac68 	.word	0x0800ac68
 8007678:	20000000 	.word	0x20000000
 800767c:	20000004 	.word	0x20000004

08007680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007686:	4b2c      	ldr	r3, [pc, #176]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b04      	cmp	r3, #4
 8007690:	d102      	bne.n	8007698 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007692:	4b2a      	ldr	r3, [pc, #168]	@ (800773c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	e047      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007698:	4b27      	ldr	r3, [pc, #156]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d102      	bne.n	80076aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076a4:	4b26      	ldr	r3, [pc, #152]	@ (8007740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e03e      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076aa:	4b23      	ldr	r3, [pc, #140]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 030c 	and.w	r3, r3, #12
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d136      	bne.n	8007724 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076b6:	4b20      	ldr	r3, [pc, #128]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	3301      	adds	r3, #1
 80076cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d10c      	bne.n	80076ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076dc:	4a16      	ldr	r2, [pc, #88]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076de:	68d2      	ldr	r2, [r2, #12]
 80076e0:	0a12      	lsrs	r2, r2, #8
 80076e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076e6:	fb02 f303 	mul.w	r3, r2, r3
 80076ea:	617b      	str	r3, [r7, #20]
      break;
 80076ec:	e00c      	b.n	8007708 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076ee:	4a13      	ldr	r2, [pc, #76]	@ (800773c <HAL_RCC_GetSysClockFreq+0xbc>)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f6:	4a10      	ldr	r2, [pc, #64]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076f8:	68d2      	ldr	r2, [r2, #12]
 80076fa:	0a12      	lsrs	r2, r2, #8
 80076fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007700:	fb02 f303 	mul.w	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]
      break;
 8007706:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007708:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	0e5b      	lsrs	r3, r3, #25
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	3301      	adds	r3, #1
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	e001      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007728:	693b      	ldr	r3, [r7, #16]
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40021000 	.word	0x40021000
 800773c:	00f42400 	.word	0x00f42400
 8007740:	007a1200 	.word	0x007a1200

08007744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007748:	4b03      	ldr	r3, [pc, #12]	@ (8007758 <HAL_RCC_GetHCLKFreq+0x14>)
 800774a:	681b      	ldr	r3, [r3, #0]
}
 800774c:	4618      	mov	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000000 	.word	0x20000000

0800775c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007760:	f7ff fff0 	bl	8007744 <HAL_RCC_GetHCLKFreq>
 8007764:	4602      	mov	r2, r0
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	4904      	ldr	r1, [pc, #16]	@ (8007784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007772:	5ccb      	ldrb	r3, [r1, r3]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40021000 	.word	0x40021000
 8007784:	0800ac78 	.word	0x0800ac78

08007788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800778c:	f7ff ffda 	bl	8007744 <HAL_RCC_GetHCLKFreq>
 8007790:	4602      	mov	r2, r0
 8007792:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	0adb      	lsrs	r3, r3, #11
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	4904      	ldr	r1, [pc, #16]	@ (80077b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800779e:	5ccb      	ldrb	r3, [r1, r3]
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40021000 	.word	0x40021000
 80077b0:	0800ac78 	.word	0x0800ac78

080077b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	3301      	adds	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d10c      	bne.n	80077f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077d8:	4a17      	ldr	r2, [pc, #92]	@ (8007838 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e0:	4a14      	ldr	r2, [pc, #80]	@ (8007834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077e2:	68d2      	ldr	r2, [r2, #12]
 80077e4:	0a12      	lsrs	r2, r2, #8
 80077e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	617b      	str	r3, [r7, #20]
    break;
 80077f0:	e00c      	b.n	800780c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077f2:	4a12      	ldr	r2, [pc, #72]	@ (800783c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077fc:	68d2      	ldr	r2, [r2, #12]
 80077fe:	0a12      	lsrs	r2, r2, #8
 8007800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
    break;
 800780a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800780c:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	0e5b      	lsrs	r3, r3, #25
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	3301      	adds	r3, #1
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007826:	687b      	ldr	r3, [r7, #4]
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	40021000 	.word	0x40021000
 8007838:	007a1200 	.word	0x007a1200
 800783c:	00f42400 	.word	0x00f42400

08007840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007848:	2300      	movs	r3, #0
 800784a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800784c:	2300      	movs	r3, #0
 800784e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8098 	beq.w	800798e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800785e:	2300      	movs	r3, #0
 8007860:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007862:	4b43      	ldr	r3, [pc, #268]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10d      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800786e:	4b40      	ldr	r3, [pc, #256]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	4a3f      	ldr	r2, [pc, #252]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007878:	6593      	str	r3, [r2, #88]	@ 0x58
 800787a:	4b3d      	ldr	r3, [pc, #244]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007886:	2301      	movs	r3, #1
 8007888:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800788a:	4b3a      	ldr	r3, [pc, #232]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a39      	ldr	r2, [pc, #228]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007896:	f7fd fe5b 	bl	8005550 <HAL_GetTick>
 800789a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800789c:	e009      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789e:	f7fd fe57 	bl	8005550 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d902      	bls.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	74fb      	strb	r3, [r7, #19]
        break;
 80078b0:	e005      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078b2:	4b30      	ldr	r3, [pc, #192]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0ef      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80078be:	7cfb      	ldrb	r3, [r7, #19]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d159      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01e      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d019      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078e0:	4b23      	ldr	r3, [pc, #140]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ec:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007902:	4a1b      	ldr	r2, [pc, #108]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800790c:	4a18      	ldr	r2, [pc, #96]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d016      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791e:	f7fd fe17 	bl	8005550 <HAL_GetTick>
 8007922:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007924:	e00b      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007926:	f7fd fe13 	bl	8005550 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007934:	4293      	cmp	r3, r2
 8007936:	d902      	bls.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	74fb      	strb	r3, [r7, #19]
            break;
 800793c:	e006      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0ec      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800794c:	7cfb      	ldrb	r3, [r7, #19]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007952:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007960:	4903      	ldr	r1, [pc, #12]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007968:	e008      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800796a:	7cfb      	ldrb	r3, [r7, #19]
 800796c:	74bb      	strb	r3, [r7, #18]
 800796e:	e005      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007970:	40021000 	.word	0x40021000
 8007974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007978:	7cfb      	ldrb	r3, [r7, #19]
 800797a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800797c:	7c7b      	ldrb	r3, [r7, #17]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d105      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007982:	4ba6      	ldr	r3, [pc, #664]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007986:	4aa5      	ldr	r2, [pc, #660]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800798c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800799a:	4ba0      	ldr	r3, [pc, #640]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800799c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a0:	f023 0203 	bic.w	r2, r3, #3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	499c      	ldr	r1, [pc, #624]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079bc:	4b97      	ldr	r3, [pc, #604]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c2:	f023 020c 	bic.w	r2, r3, #12
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4994      	ldr	r1, [pc, #592]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079de:	4b8f      	ldr	r3, [pc, #572]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	498b      	ldr	r1, [pc, #556]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a00:	4b86      	ldr	r3, [pc, #536]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4983      	ldr	r1, [pc, #524]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a22:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	497a      	ldr	r1, [pc, #488]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a44:	4b75      	ldr	r3, [pc, #468]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	4972      	ldr	r1, [pc, #456]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a66:	4b6d      	ldr	r3, [pc, #436]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	4969      	ldr	r1, [pc, #420]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a88:	4b64      	ldr	r3, [pc, #400]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	4961      	ldr	r1, [pc, #388]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	4958      	ldr	r1, [pc, #352]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d015      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007acc:	4b53      	ldr	r3, [pc, #332]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	4950      	ldr	r1, [pc, #320]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aea:	d105      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aec:	4b4b      	ldr	r3, [pc, #300]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a4a      	ldr	r2, [pc, #296]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d015      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b04:	4b45      	ldr	r3, [pc, #276]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	4942      	ldr	r1, [pc, #264]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b22:	d105      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b24:	4b3d      	ldr	r3, [pc, #244]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a3c      	ldr	r2, [pc, #240]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d015      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b3c:	4b37      	ldr	r3, [pc, #220]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	4934      	ldr	r1, [pc, #208]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b5a:	d105      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	4a2e      	ldr	r2, [pc, #184]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b74:	4b29      	ldr	r3, [pc, #164]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b82:	4926      	ldr	r1, [pc, #152]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b92:	d105      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b94:	4b21      	ldr	r3, [pc, #132]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a20      	ldr	r2, [pc, #128]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d015      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bac:	4b1b      	ldr	r3, [pc, #108]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	4918      	ldr	r1, [pc, #96]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bca:	d105      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bcc:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a12      	ldr	r2, [pc, #72]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d015      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007be4:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf2:	490a      	ldr	r1, [pc, #40]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c02:	d105      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4a04      	ldr	r2, [pc, #16]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40021000 	.word	0x40021000

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e049      	b.n	8007cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fd fa42 	bl	80050d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fb12 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04a      	b.n	8007d7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a21      	ldr	r2, [pc, #132]	@ (8007d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d018      	beq.n	8007d3c <HAL_TIM_Base_Start_IT+0x6c>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d12:	d013      	beq.n	8007d3c <HAL_TIM_Base_Start_IT+0x6c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1d      	ldr	r2, [pc, #116]	@ (8007d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00e      	beq.n	8007d3c <HAL_TIM_Base_Start_IT+0x6c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1c      	ldr	r2, [pc, #112]	@ (8007d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d009      	beq.n	8007d3c <HAL_TIM_Base_Start_IT+0x6c>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIM_Base_Start_IT+0x6c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a19      	ldr	r2, [pc, #100]	@ (8007d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d115      	bne.n	8007d68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b06      	cmp	r3, #6
 8007d4c:	d015      	beq.n	8007d7a <HAL_TIM_Base_Start_IT+0xaa>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d54:	d011      	beq.n	8007d7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0201 	orr.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	e008      	b.n	8007d7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e000      	b.n	8007d7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40012c00 	.word	0x40012c00
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40013400 	.word	0x40013400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	00010007 	.word	0x00010007

08007da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d020      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01b      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0202 	mvn.w	r2, #2
 8007dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa2c 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007df4:	e005      	b.n	8007e02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa1e 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa2f 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d020      	beq.n	8007e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0204 	mvn.w	r2, #4
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa06 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9f8 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa09 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d020      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01b      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0208 	mvn.w	r2, #8
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2204      	movs	r2, #4
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9e0 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9d2 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9e3 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0210 	mvn.w	r2, #16
 8007ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9ba 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9ac 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9bd 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0201 	mvn.w	r2, #1
 8007f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fa f8b6 	bl	800207c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb69 	bl	8008610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fb61 	bl	8008624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00c      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f977 	bl	8008274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00c      	beq.n	8007faa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0220 	mvn.w	r2, #32
 8007fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fb29 	bl	80085fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00c      	beq.n	8007fce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fb35 	bl	8008638 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00c      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb2d 	bl	800864c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00c      	beq.n	8008016 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800800e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fb25 	bl	8008660 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00c      	beq.n	800803a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fb1d 	bl	8008674 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIM_ConfigClockSource+0x1c>
 800805c:	2302      	movs	r3, #2
 800805e:	e0de      	b.n	800821e <HAL_TIM_ConfigClockSource+0x1da>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800807e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800808a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a63      	ldr	r2, [pc, #396]	@ (8008228 <HAL_TIM_ConfigClockSource+0x1e4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	f000 80a9 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80080a0:	4a61      	ldr	r2, [pc, #388]	@ (8008228 <HAL_TIM_ConfigClockSource+0x1e4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	f200 80ae 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080a8:	4a60      	ldr	r2, [pc, #384]	@ (800822c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	f000 80a1 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80080b0:	4a5e      	ldr	r2, [pc, #376]	@ (800822c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f200 80a6 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	f000 8099 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80080c0:	4a5b      	ldr	r2, [pc, #364]	@ (8008230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f200 809e 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080c8:	4a5a      	ldr	r2, [pc, #360]	@ (8008234 <HAL_TIM_ConfigClockSource+0x1f0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f000 8091 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80080d0:	4a58      	ldr	r2, [pc, #352]	@ (8008234 <HAL_TIM_ConfigClockSource+0x1f0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	f200 8096 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080dc:	f000 8089 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80080e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080e4:	f200 808e 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ec:	d03e      	beq.n	800816c <HAL_TIM_ConfigClockSource+0x128>
 80080ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080f2:	f200 8087 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080fa:	f000 8086 	beq.w	800820a <HAL_TIM_ConfigClockSource+0x1c6>
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008102:	d87f      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 8008104:	2b70      	cmp	r3, #112	@ 0x70
 8008106:	d01a      	beq.n	800813e <HAL_TIM_ConfigClockSource+0xfa>
 8008108:	2b70      	cmp	r3, #112	@ 0x70
 800810a:	d87b      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 800810c:	2b60      	cmp	r3, #96	@ 0x60
 800810e:	d050      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
 8008110:	2b60      	cmp	r3, #96	@ 0x60
 8008112:	d877      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 8008114:	2b50      	cmp	r3, #80	@ 0x50
 8008116:	d03c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x14e>
 8008118:	2b50      	cmp	r3, #80	@ 0x50
 800811a:	d873      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 800811c:	2b40      	cmp	r3, #64	@ 0x40
 800811e:	d058      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x18e>
 8008120:	2b40      	cmp	r3, #64	@ 0x40
 8008122:	d86f      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 8008124:	2b30      	cmp	r3, #48	@ 0x30
 8008126:	d064      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008128:	2b30      	cmp	r3, #48	@ 0x30
 800812a:	d86b      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 800812c:	2b20      	cmp	r3, #32
 800812e:	d060      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d867      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d05c      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008138:	2b10      	cmp	r3, #16
 800813a:	d05a      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800813c:	e062      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800814e:	f000 f9b3 	bl	80084b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	609a      	str	r2, [r3, #8]
      break;
 800816a:	e04f      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800817c:	f000 f99c 	bl	80084b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800818e:	609a      	str	r2, [r3, #8]
      break;
 8008190:	e03c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800819e:	461a      	mov	r2, r3
 80081a0:	f000 f90e 	bl	80083c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2150      	movs	r1, #80	@ 0x50
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f967 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 80081b0:	e02c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081be:	461a      	mov	r2, r3
 80081c0:	f000 f92d 	bl	800841e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2160      	movs	r1, #96	@ 0x60
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f957 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 80081d0:	e01c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081de:	461a      	mov	r2, r3
 80081e0:	f000 f8ee 	bl	80083c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2140      	movs	r1, #64	@ 0x40
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 f947 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 80081f0:	e00c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f000 f93e 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 8008202:	e003      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
      break;
 8008208:	e000      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800820a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	00100070 	.word	0x00100070
 800822c:	00100040 	.word	0x00100040
 8008230:	00100030 	.word	0x00100030
 8008234:	00100020 	.word	0x00100020

08008238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a42      	ldr	r2, [pc, #264]	@ (80083a4 <TIM_Base_SetConfig+0x11c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00f      	beq.n	80082c0 <TIM_Base_SetConfig+0x38>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a6:	d00b      	beq.n	80082c0 <TIM_Base_SetConfig+0x38>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3f      	ldr	r2, [pc, #252]	@ (80083a8 <TIM_Base_SetConfig+0x120>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d007      	beq.n	80082c0 <TIM_Base_SetConfig+0x38>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3e      	ldr	r2, [pc, #248]	@ (80083ac <TIM_Base_SetConfig+0x124>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d003      	beq.n	80082c0 <TIM_Base_SetConfig+0x38>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3d      	ldr	r2, [pc, #244]	@ (80083b0 <TIM_Base_SetConfig+0x128>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d108      	bne.n	80082d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a33      	ldr	r2, [pc, #204]	@ (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d01b      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e0:	d017      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a30      	ldr	r2, [pc, #192]	@ (80083a8 <TIM_Base_SetConfig+0x120>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2f      	ldr	r2, [pc, #188]	@ (80083ac <TIM_Base_SetConfig+0x124>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00f      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2e      	ldr	r2, [pc, #184]	@ (80083b0 <TIM_Base_SetConfig+0x128>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00b      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2d      	ldr	r2, [pc, #180]	@ (80083b4 <TIM_Base_SetConfig+0x12c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d007      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a2c      	ldr	r2, [pc, #176]	@ (80083b8 <TIM_Base_SetConfig+0x130>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_Base_SetConfig+0x8a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a2b      	ldr	r2, [pc, #172]	@ (80083bc <TIM_Base_SetConfig+0x134>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d108      	bne.n	8008324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a16      	ldr	r2, [pc, #88]	@ (80083a4 <TIM_Base_SetConfig+0x11c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00f      	beq.n	8008370 <TIM_Base_SetConfig+0xe8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <TIM_Base_SetConfig+0x128>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00b      	beq.n	8008370 <TIM_Base_SetConfig+0xe8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a16      	ldr	r2, [pc, #88]	@ (80083b4 <TIM_Base_SetConfig+0x12c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d007      	beq.n	8008370 <TIM_Base_SetConfig+0xe8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a15      	ldr	r2, [pc, #84]	@ (80083b8 <TIM_Base_SetConfig+0x130>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_Base_SetConfig+0xe8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a14      	ldr	r2, [pc, #80]	@ (80083bc <TIM_Base_SetConfig+0x134>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d103      	bne.n	8008378 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b01      	cmp	r3, #1
 8008388:	d105      	bne.n	8008396 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f023 0201 	bic.w	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	611a      	str	r2, [r3, #16]
  }
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800

080083c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f023 0201 	bic.w	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f023 030a 	bic.w	r3, r3, #10
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	621a      	str	r2, [r3, #32]
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800841e:	b480      	push	{r7}
 8008420:	b087      	sub	sp, #28
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f023 0210 	bic.w	r2, r3, #16
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	031b      	lsls	r3, r3, #12
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800845a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	f043 0307 	orr.w	r3, r3, #7
 80084a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	431a      	orrs	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4313      	orrs	r3, r2
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800850c:	2302      	movs	r3, #2
 800850e:	e065      	b.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2c      	ldr	r2, [pc, #176]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2b      	ldr	r2, [pc, #172]	@ (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800854a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1b      	ldr	r2, [pc, #108]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d018      	beq.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008586:	d013      	beq.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a18      	ldr	r2, [pc, #96]	@ (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00e      	beq.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a17      	ldr	r2, [pc, #92]	@ (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d009      	beq.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a12      	ldr	r2, [pc, #72]	@ (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a13      	ldr	r2, [pc, #76]	@ (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10c      	bne.n	80085ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	40012c00 	.word	0x40012c00
 80085ec:	40013400 	.word	0x40013400
 80085f0:	40000400 	.word	0x40000400
 80085f4:	40000800 	.word	0x40000800
 80085f8:	40014000 	.word	0x40014000

080085fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e042      	b.n	8008720 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fc fd33 	bl	8005118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2224      	movs	r2, #36	@ 0x24
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fca2 	bl	800901c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9d3 	bl	8008a84 <UART_SetConfig>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e01b      	b.n	8008720 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fd21 	bl	8009160 <UART_CheckIdleState>
 800871e:	4603      	mov	r3, r0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e04a      	b.n	80087d0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fc fce3 	bl	8005118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2224      	movs	r2, #36	@ 0x24
 8008756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0201 	bic.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fc52 	bl	800901c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f983 	bl	8008a84 <UART_SetConfig>
 800877e:	4603      	mov	r3, r0
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e023      	b.n	80087d0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80087a6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0208 	orr.w	r2, r2, #8
 80087b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fcc9 	bl	8009160 <UART_CheckIdleState>
 80087ce:	4603      	mov	r3, r0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	@ 0x28
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	4613      	mov	r3, r2
 80087e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d17b      	bne.n	80088ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <HAL_UART_Transmit+0x26>
 80087f8:	88fb      	ldrh	r3, [r7, #6]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e074      	b.n	80088ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2221      	movs	r2, #33	@ 0x21
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008812:	f7fc fe9d 	bl	8005550 <HAL_GetTick>
 8008816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	88fa      	ldrh	r2, [r7, #6]
 800881c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008830:	d108      	bne.n	8008844 <HAL_UART_Transmit+0x6c>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	61bb      	str	r3, [r7, #24]
 8008842:	e003      	b.n	800884c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800884c:	e030      	b.n	80088b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2200      	movs	r2, #0
 8008856:	2180      	movs	r1, #128	@ 0x80
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fd2b 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e03d      	b.n	80088ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10b      	bne.n	800888e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008884:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	3302      	adds	r3, #2
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	e007      	b.n	800889e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	3301      	adds	r3, #1
 800889c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1c8      	bne.n	800884e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	2140      	movs	r1, #64	@ 0x40
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fcf4 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e006      	b.n	80088ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80088ea:	2302      	movs	r3, #2
  }
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	@ 0x28
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890a:	2b20      	cmp	r3, #32
 800890c:	f040 80b5 	bne.w	8008a7a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Receive+0x28>
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0ad      	b.n	8008a7c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2222      	movs	r2, #34	@ 0x22
 800892c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008936:	f7fc fe0b 	bl	8005550 <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008954:	d10e      	bne.n	8008974 <HAL_UART_Receive+0x80>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d105      	bne.n	800896a <HAL_UART_Receive+0x76>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008964:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008968:	e02d      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	22ff      	movs	r2, #255	@ 0xff
 800896e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008972:	e028      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10d      	bne.n	8008998 <HAL_UART_Receive+0xa4>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <HAL_UART_Receive+0x9a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	22ff      	movs	r2, #255	@ 0xff
 8008988:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800898c:	e01b      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	227f      	movs	r2, #127	@ 0x7f
 8008992:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008996:	e016      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089a0:	d10d      	bne.n	80089be <HAL_UART_Receive+0xca>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d104      	bne.n	80089b4 <HAL_UART_Receive+0xc0>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	227f      	movs	r2, #127	@ 0x7f
 80089ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089b2:	e008      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	223f      	movs	r2, #63	@ 0x3f
 80089b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089bc:	e003      	b.n	80089c6 <HAL_UART_Receive+0xd2>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d6:	d108      	bne.n	80089ea <HAL_UART_Receive+0xf6>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	61bb      	str	r3, [r7, #24]
 80089e8:	e003      	b.n	80089f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80089f2:	e036      	b.n	8008a62 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2200      	movs	r2, #0
 80089fc:	2120      	movs	r1, #32
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fc58 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e032      	b.n	8008a7c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10c      	bne.n	8008a36 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	8a7b      	ldrh	r3, [r7, #18]
 8008a26:	4013      	ands	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	3302      	adds	r3, #2
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e00c      	b.n	8008a50 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	8a7b      	ldrh	r3, [r7, #18]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	4013      	ands	r3, r2
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1c2      	bne.n	80089f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a88:	b08c      	sub	sp, #48	@ 0x30
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	4bab      	ldr	r3, [pc, #684]	@ (8008d60 <UART_SetConfig+0x2dc>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008abc:	430b      	orrs	r3, r1
 8008abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4aa0      	ldr	r2, [pc, #640]	@ (8008d64 <UART_SetConfig+0x2e0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aec:	4313      	orrs	r3, r2
 8008aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008afa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0e:	f023 010f 	bic.w	r1, r3, #15
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a91      	ldr	r2, [pc, #580]	@ (8008d68 <UART_SetConfig+0x2e4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d125      	bne.n	8008b74 <UART_SetConfig+0xf0>
 8008b28:	4b90      	ldr	r3, [pc, #576]	@ (8008d6c <UART_SetConfig+0x2e8>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d81a      	bhi.n	8008b6c <UART_SetConfig+0xe8>
 8008b36:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <UART_SetConfig+0xb8>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b65 	.word	0x08008b65
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b52:	e0d6      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008b54:	2302      	movs	r3, #2
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5a:	e0d2      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b62:	e0ce      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6a:	e0ca      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b72:	e0c6      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a7d      	ldr	r2, [pc, #500]	@ (8008d70 <UART_SetConfig+0x2ec>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d138      	bne.n	8008bf0 <UART_SetConfig+0x16c>
 8008b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d6c <UART_SetConfig+0x2e8>)
 8008b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b84:	f003 030c 	and.w	r3, r3, #12
 8008b88:	2b0c      	cmp	r3, #12
 8008b8a:	d82d      	bhi.n	8008be8 <UART_SetConfig+0x164>
 8008b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <UART_SetConfig+0x110>)
 8008b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b92:	bf00      	nop
 8008b94:	08008bc9 	.word	0x08008bc9
 8008b98:	08008be9 	.word	0x08008be9
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008be9 	.word	0x08008be9
 8008ba4:	08008bd9 	.word	0x08008bd9
 8008ba8:	08008be9 	.word	0x08008be9
 8008bac:	08008be9 	.word	0x08008be9
 8008bb0:	08008be9 	.word	0x08008be9
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008be9 	.word	0x08008be9
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	08008be9 	.word	0x08008be9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bce:	e098      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd6:	e094      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bde:	e090      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008be6:	e08c      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bee:	e088      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8008d74 <UART_SetConfig+0x2f0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d125      	bne.n	8008c46 <UART_SetConfig+0x1c2>
 8008bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8008d6c <UART_SetConfig+0x2e8>)
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c04:	2b30      	cmp	r3, #48	@ 0x30
 8008c06:	d016      	beq.n	8008c36 <UART_SetConfig+0x1b2>
 8008c08:	2b30      	cmp	r3, #48	@ 0x30
 8008c0a:	d818      	bhi.n	8008c3e <UART_SetConfig+0x1ba>
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d00a      	beq.n	8008c26 <UART_SetConfig+0x1a2>
 8008c10:	2b20      	cmp	r3, #32
 8008c12:	d814      	bhi.n	8008c3e <UART_SetConfig+0x1ba>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <UART_SetConfig+0x19a>
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	d008      	beq.n	8008c2e <UART_SetConfig+0x1aa>
 8008c1c:	e00f      	b.n	8008c3e <UART_SetConfig+0x1ba>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c24:	e06d      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c26:	2302      	movs	r3, #2
 8008c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2c:	e069      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c2e:	2304      	movs	r3, #4
 8008c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c34:	e065      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c36:	2308      	movs	r3, #8
 8008c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3c:	e061      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c3e:	2310      	movs	r3, #16
 8008c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c44:	e05d      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8008d78 <UART_SetConfig+0x2f4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d125      	bne.n	8008c9c <UART_SetConfig+0x218>
 8008c50:	4b46      	ldr	r3, [pc, #280]	@ (8008d6c <UART_SetConfig+0x2e8>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c5c:	d016      	beq.n	8008c8c <UART_SetConfig+0x208>
 8008c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c60:	d818      	bhi.n	8008c94 <UART_SetConfig+0x210>
 8008c62:	2b80      	cmp	r3, #128	@ 0x80
 8008c64:	d00a      	beq.n	8008c7c <UART_SetConfig+0x1f8>
 8008c66:	2b80      	cmp	r3, #128	@ 0x80
 8008c68:	d814      	bhi.n	8008c94 <UART_SetConfig+0x210>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <UART_SetConfig+0x1f0>
 8008c6e:	2b40      	cmp	r3, #64	@ 0x40
 8008c70:	d008      	beq.n	8008c84 <UART_SetConfig+0x200>
 8008c72:	e00f      	b.n	8008c94 <UART_SetConfig+0x210>
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c7a:	e042      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c82:	e03e      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c8a:	e03a      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c92:	e036      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9a:	e032      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a30      	ldr	r2, [pc, #192]	@ (8008d64 <UART_SetConfig+0x2e0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d12a      	bne.n	8008cfc <UART_SetConfig+0x278>
 8008ca6:	4b31      	ldr	r3, [pc, #196]	@ (8008d6c <UART_SetConfig+0x2e8>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cb4:	d01a      	beq.n	8008cec <UART_SetConfig+0x268>
 8008cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cba:	d81b      	bhi.n	8008cf4 <UART_SetConfig+0x270>
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc0:	d00c      	beq.n	8008cdc <UART_SetConfig+0x258>
 8008cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc6:	d815      	bhi.n	8008cf4 <UART_SetConfig+0x270>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <UART_SetConfig+0x250>
 8008ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cd0:	d008      	beq.n	8008ce4 <UART_SetConfig+0x260>
 8008cd2:	e00f      	b.n	8008cf4 <UART_SetConfig+0x270>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cda:	e012      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce2:	e00e      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cea:	e00a      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008cec:	2308      	movs	r3, #8
 8008cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf2:	e006      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfa:	e002      	b.n	8008d02 <UART_SetConfig+0x27e>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a17      	ldr	r2, [pc, #92]	@ (8008d64 <UART_SetConfig+0x2e0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f040 80a8 	bne.w	8008e5e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d834      	bhi.n	8008d80 <UART_SetConfig+0x2fc>
 8008d16:	a201      	add	r2, pc, #4	@ (adr r2, 8008d1c <UART_SetConfig+0x298>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d81 	.word	0x08008d81
 8008d24:	08008d49 	.word	0x08008d49
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d4f 	.word	0x08008d4f
 8008d30:	08008d81 	.word	0x08008d81
 8008d34:	08008d81 	.word	0x08008d81
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008d57 	.word	0x08008d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d40:	f7fe fd0c 	bl	800775c <HAL_RCC_GetPCLK1Freq>
 8008d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d46:	e021      	b.n	8008d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d48:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <UART_SetConfig+0x2f8>)
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d4c:	e01e      	b.n	8008d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d4e:	f7fe fc97 	bl	8007680 <HAL_RCC_GetSysClockFreq>
 8008d52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d54:	e01a      	b.n	8008d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d5c:	e016      	b.n	8008d8c <UART_SetConfig+0x308>
 8008d5e:	bf00      	nop
 8008d60:	cfff69f3 	.word	0xcfff69f3
 8008d64:	40008000 	.word	0x40008000
 8008d68:	40013800 	.word	0x40013800
 8008d6c:	40021000 	.word	0x40021000
 8008d70:	40004400 	.word	0x40004400
 8008d74:	40004800 	.word	0x40004800
 8008d78:	40004c00 	.word	0x40004c00
 8008d7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 812a 	beq.w	8008fe8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	4a9e      	ldr	r2, [pc, #632]	@ (8009014 <UART_SetConfig+0x590>)
 8008d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	4613      	mov	r3, r2
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	4413      	add	r3, r2
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d305      	bcc.n	8008dc4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d903      	bls.n	8008dcc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008dca:	e10d      	b.n	8008fe8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	2200      	movs	r2, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	60fa      	str	r2, [r7, #12]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8009014 <UART_SetConfig+0x590>)
 8008dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	2200      	movs	r2, #0
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dee:	f7f7 fd75 	bl	80008dc <__aeabi_uldivmod>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4610      	mov	r0, r2
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	020b      	lsls	r3, r1, #8
 8008e04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e08:	0202      	lsls	r2, r0, #8
 8008e0a:	6979      	ldr	r1, [r7, #20]
 8008e0c:	6849      	ldr	r1, [r1, #4]
 8008e0e:	0849      	lsrs	r1, r1, #1
 8008e10:	2000      	movs	r0, #0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4605      	mov	r5, r0
 8008e16:	eb12 0804 	adds.w	r8, r2, r4
 8008e1a:	eb43 0905 	adc.w	r9, r3, r5
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	469a      	mov	sl, r3
 8008e26:	4693      	mov	fp, r2
 8008e28:	4652      	mov	r2, sl
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 fd54 	bl	80008dc <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e42:	d308      	bcc.n	8008e56 <UART_SetConfig+0x3d2>
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e4a:	d204      	bcs.n	8008e56 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	60da      	str	r2, [r3, #12]
 8008e54:	e0c8      	b.n	8008fe8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e5c:	e0c4      	b.n	8008fe8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e66:	d167      	bne.n	8008f38 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d828      	bhi.n	8008ec2 <UART_SetConfig+0x43e>
 8008e70:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <UART_SetConfig+0x3f4>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008ec3 	.word	0x08008ec3
 8008e88:	08008eb3 	.word	0x08008eb3
 8008e8c:	08008ec3 	.word	0x08008ec3
 8008e90:	08008ec3 	.word	0x08008ec3
 8008e94:	08008ec3 	.word	0x08008ec3
 8008e98:	08008ebb 	.word	0x08008ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e9c:	f7fe fc5e 	bl	800775c <HAL_RCC_GetPCLK1Freq>
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ea2:	e014      	b.n	8008ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea4:	f7fe fc70 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 8008ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eaa:	e010      	b.n	8008ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eac:	4b5a      	ldr	r3, [pc, #360]	@ (8009018 <UART_SetConfig+0x594>)
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb0:	e00d      	b.n	8008ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb2:	f7fe fbe5 	bl	8007680 <HAL_RCC_GetSysClockFreq>
 8008eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eb8:	e009      	b.n	8008ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ec0:	e005      	b.n	8008ece <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8089 	beq.w	8008fe8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	4a4e      	ldr	r2, [pc, #312]	@ (8009014 <UART_SetConfig+0x590>)
 8008edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ee8:	005a      	lsls	r2, r3, #1
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	441a      	add	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	2b0f      	cmp	r3, #15
 8008f00:	d916      	bls.n	8008f30 <UART_SetConfig+0x4ac>
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f08:	d212      	bcs.n	8008f30 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f023 030f 	bic.w	r3, r3, #15
 8008f12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	8bfb      	ldrh	r3, [r7, #30]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	8bfa      	ldrh	r2, [r7, #30]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	e05b      	b.n	8008fe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f36:	e057      	b.n	8008fe8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d828      	bhi.n	8008f92 <UART_SetConfig+0x50e>
 8008f40:	a201      	add	r2, pc, #4	@ (adr r2, 8008f48 <UART_SetConfig+0x4c4>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f6d 	.word	0x08008f6d
 8008f4c:	08008f75 	.word	0x08008f75
 8008f50:	08008f7d 	.word	0x08008f7d
 8008f54:	08008f93 	.word	0x08008f93
 8008f58:	08008f83 	.word	0x08008f83
 8008f5c:	08008f93 	.word	0x08008f93
 8008f60:	08008f93 	.word	0x08008f93
 8008f64:	08008f93 	.word	0x08008f93
 8008f68:	08008f8b 	.word	0x08008f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f6c:	f7fe fbf6 	bl	800775c <HAL_RCC_GetPCLK1Freq>
 8008f70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f72:	e014      	b.n	8008f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f74:	f7fe fc08 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 8008f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f7a:	e010      	b.n	8008f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f7c:	4b26      	ldr	r3, [pc, #152]	@ (8009018 <UART_SetConfig+0x594>)
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f80:	e00d      	b.n	8008f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f82:	f7fe fb7d 	bl	8007680 <HAL_RCC_GetSysClockFreq>
 8008f86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f88:	e009      	b.n	8008f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f90:	e005      	b.n	8008f9e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d021      	beq.n	8008fe8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8009014 <UART_SetConfig+0x590>)
 8008faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	441a      	add	r2, r3
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	d909      	bls.n	8008fe2 <UART_SetConfig+0x55e>
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fd4:	d205      	bcs.n	8008fe2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60da      	str	r2, [r3, #12]
 8008fe0:	e002      	b.n	8008fe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009004:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009008:	4618      	mov	r0, r3
 800900a:	3730      	adds	r7, #48	@ 0x30
 800900c:	46bd      	mov	sp, r7
 800900e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009012:	bf00      	nop
 8009014:	0800ac80 	.word	0x0800ac80
 8009018:	00f42400 	.word	0x00f42400

0800901c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01a      	beq.n	8009132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800911a:	d10a      	bne.n	8009132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b098      	sub	sp, #96	@ 0x60
 8009164:	af02      	add	r7, sp, #8
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009170:	f7fc f9ee 	bl	8005550 <HAL_GetTick>
 8009174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d12f      	bne.n	80091e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800918c:	2200      	movs	r2, #0
 800918e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f88e 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d022      	beq.n	80091e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e6      	bne.n	800919e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e063      	b.n	80092ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d149      	bne.n	8009286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091fa:	2200      	movs	r2, #0
 80091fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f857 	bl	80092b4 <UART_WaitOnFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d03c      	beq.n	8009286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	623b      	str	r3, [r7, #32]
   return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800922a:	633b      	str	r3, [r7, #48]	@ 0x30
 800922c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e6      	bne.n	800920c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	60fb      	str	r3, [r7, #12]
   return(result);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3308      	adds	r3, #8
 800925c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800925e:	61fa      	str	r2, [r7, #28]
 8009260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	69b9      	ldr	r1, [r7, #24]
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	617b      	str	r3, [r7, #20]
   return(result);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e5      	bne.n	800923e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e012      	b.n	80092ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3758      	adds	r7, #88	@ 0x58
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c4:	e04f      	b.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092cc:	d04b      	beq.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ce:	f7fc f93f 	bl	8005550 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d302      	bcc.n	80092e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e04e      	b.n	8009386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d037      	beq.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b80      	cmp	r3, #128	@ 0x80
 80092fa:	d034      	beq.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d031      	beq.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b08      	cmp	r3, #8
 800930e:	d110      	bne.n	8009332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2208      	movs	r2, #8
 8009316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f838 	bl	800938e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2208      	movs	r2, #8
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e029      	b.n	8009386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800933c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009340:	d111      	bne.n	8009366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800934a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f81e 	bl	800938e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2220      	movs	r2, #32
 8009356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e00f      	b.n	8009386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4013      	ands	r3, r2
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	429a      	cmp	r2, r3
 8009374:	bf0c      	ite	eq
 8009376:	2301      	moveq	r3, #1
 8009378:	2300      	movne	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	461a      	mov	r2, r3
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	429a      	cmp	r2, r3
 8009382:	d0a0      	beq.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800938e:	b480      	push	{r7}
 8009390:	b095      	sub	sp, #84	@ 0x54
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80093b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e6      	bne.n	8009396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e3      	bne.n	80093c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009404:	2b01      	cmp	r3, #1
 8009406:	d118      	bne.n	800943a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	60bb      	str	r3, [r7, #8]
   return(result);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f023 0310 	bic.w	r3, r3, #16
 800941c:	647b      	str	r3, [r7, #68]	@ 0x44
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009426:	61bb      	str	r3, [r7, #24]
 8009428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	613b      	str	r3, [r7, #16]
   return(result);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e6      	bne.n	8009408 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800944e:	bf00      	nop
 8009450:	3754      	adds	r7, #84	@ 0x54
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_UARTEx_EnableFifoMode+0x16>
 800946c:	2302      	movs	r3, #2
 800946e:	e02b      	b.n	80094c8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2224      	movs	r2, #36	@ 0x24
 800947c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0201 	bic.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800949e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80094a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f8c3 	bl	800963c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e027      	b.n	8009536 <HAL_UARTEx_DisableFifoMode+0x66>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2224      	movs	r2, #36	@ 0x24
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009556:	2302      	movs	r3, #2
 8009558:	e02d      	b.n	80095b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2224      	movs	r2, #36	@ 0x24
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f850 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e02d      	b.n	8009632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2224      	movs	r2, #36	@ 0x24
 80095e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f812 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2220      	movs	r2, #32
 8009624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009648:	2b00      	cmp	r3, #0
 800964a:	d108      	bne.n	800965e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800965c:	e031      	b.n	80096c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800965e:	2308      	movs	r3, #8
 8009660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009662:	2308      	movs	r3, #8
 8009664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	0e5b      	lsrs	r3, r3, #25
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	0f5b      	lsrs	r3, r3, #29
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	7b3a      	ldrb	r2, [r7, #12]
 800968a:	4911      	ldr	r1, [pc, #68]	@ (80096d0 <UARTEx_SetNbDataToProcess+0x94>)
 800968c:	5c8a      	ldrb	r2, [r1, r2]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009692:	7b3a      	ldrb	r2, [r7, #12]
 8009694:	490f      	ldr	r1, [pc, #60]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009698:	fb93 f3f2 	sdiv	r3, r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	7b7a      	ldrb	r2, [r7, #13]
 80096a8:	4909      	ldr	r1, [pc, #36]	@ (80096d0 <UARTEx_SetNbDataToProcess+0x94>)
 80096aa:	5c8a      	ldrb	r2, [r1, r2]
 80096ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096b0:	7b7a      	ldrb	r2, [r7, #13]
 80096b2:	4908      	ldr	r1, [pc, #32]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x98>)
 80096b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	0800ac98 	.word	0x0800ac98
 80096d4:	0800aca0 	.word	0x0800aca0

080096d8 <_ZdlPvj>:
 80096d8:	f000 b838 	b.w	800974c <_ZdlPv>

080096dc <_Znwj>:
 80096dc:	2801      	cmp	r0, #1
 80096de:	bf38      	it	cc
 80096e0:	2001      	movcc	r0, #1
 80096e2:	b510      	push	{r4, lr}
 80096e4:	4604      	mov	r4, r0
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f842 	bl	8009770 <malloc>
 80096ec:	b100      	cbz	r0, 80096f0 <_Znwj+0x14>
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	f000 f82e 	bl	8009750 <_ZSt15get_new_handlerv>
 80096f4:	b908      	cbnz	r0, 80096fa <_Znwj+0x1e>
 80096f6:	f000 f833 	bl	8009760 <abort>
 80096fa:	4780      	blx	r0
 80096fc:	e7f3      	b.n	80096e6 <_Znwj+0xa>

080096fe <_ZSt17__throw_bad_allocv>:
 80096fe:	b508      	push	{r3, lr}
 8009700:	f000 f82e 	bl	8009760 <abort>

08009704 <_ZSt28__throw_bad_array_new_lengthv>:
 8009704:	b508      	push	{r3, lr}
 8009706:	f000 f82b 	bl	8009760 <abort>

0800970a <_ZSt20__throw_length_errorPKc>:
 800970a:	b508      	push	{r3, lr}
 800970c:	f000 f828 	bl	8009760 <abort>

08009710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8009710:	f850 3b08 	ldr.w	r3, [r0], #8
 8009714:	1a1b      	subs	r3, r3, r0
 8009716:	4258      	negs	r0, r3
 8009718:	4158      	adcs	r0, r3
 800971a:	4770      	bx	lr

0800971c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800971c:	b510      	push	{r4, lr}
 800971e:	4604      	mov	r4, r0
 8009720:	f7ff fff6 	bl	8009710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8009724:	b920      	cbnz	r0, 8009730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8009726:	6820      	ldr	r0, [r4, #0]
 8009728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800972c:	f000 b80e 	b.w	800974c <_ZdlPv>
 8009730:	bd10      	pop	{r4, pc}

08009732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009732:	f100 0208 	add.w	r2, r0, #8
 8009736:	6002      	str	r2, [r0, #0]
 8009738:	2200      	movs	r2, #0
 800973a:	6042      	str	r2, [r0, #4]
 800973c:	7202      	strb	r2, [r0, #8]
 800973e:	4770      	bx	lr

08009740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009740:	b510      	push	{r4, lr}
 8009742:	4604      	mov	r4, r0
 8009744:	f7ff ffea 	bl	800971c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009748:	4620      	mov	r0, r4
 800974a:	bd10      	pop	{r4, pc}

0800974c <_ZdlPv>:
 800974c:	f000 b818 	b.w	8009780 <free>

08009750 <_ZSt15get_new_handlerv>:
 8009750:	4b02      	ldr	r3, [pc, #8]	@ (800975c <_ZSt15get_new_handlerv+0xc>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	f3bf 8f5b 	dmb	ish
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	200006d0 	.word	0x200006d0

08009760 <abort>:
 8009760:	b508      	push	{r3, lr}
 8009762:	2006      	movs	r0, #6
 8009764:	f000 fb1e 	bl	8009da4 <raise>
 8009768:	2001      	movs	r0, #1
 800976a:	f7fb fdbf 	bl	80052ec <_exit>
	...

08009770 <malloc>:
 8009770:	4b02      	ldr	r3, [pc, #8]	@ (800977c <malloc+0xc>)
 8009772:	4601      	mov	r1, r0
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	f000 b82d 	b.w	80097d4 <_malloc_r>
 800977a:	bf00      	nop
 800977c:	20000018 	.word	0x20000018

08009780 <free>:
 8009780:	4b02      	ldr	r3, [pc, #8]	@ (800978c <free+0xc>)
 8009782:	4601      	mov	r1, r0
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	f000 bbad 	b.w	8009ee4 <_free_r>
 800978a:	bf00      	nop
 800978c:	20000018 	.word	0x20000018

08009790 <sbrk_aligned>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4e0f      	ldr	r6, [pc, #60]	@ (80097d0 <sbrk_aligned+0x40>)
 8009794:	460c      	mov	r4, r1
 8009796:	6831      	ldr	r1, [r6, #0]
 8009798:	4605      	mov	r5, r0
 800979a:	b911      	cbnz	r1, 80097a2 <sbrk_aligned+0x12>
 800979c:	f000 fb52 	bl	8009e44 <_sbrk_r>
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 fb4d 	bl	8009e44 <_sbrk_r>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	d103      	bne.n	80097b6 <sbrk_aligned+0x26>
 80097ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80097b2:	4620      	mov	r0, r4
 80097b4:	bd70      	pop	{r4, r5, r6, pc}
 80097b6:	1cc4      	adds	r4, r0, #3
 80097b8:	f024 0403 	bic.w	r4, r4, #3
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d0f8      	beq.n	80097b2 <sbrk_aligned+0x22>
 80097c0:	1a21      	subs	r1, r4, r0
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 fb3e 	bl	8009e44 <_sbrk_r>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d1f2      	bne.n	80097b2 <sbrk_aligned+0x22>
 80097cc:	e7ef      	b.n	80097ae <sbrk_aligned+0x1e>
 80097ce:	bf00      	nop
 80097d0:	200006d4 	.word	0x200006d4

080097d4 <_malloc_r>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	1ccd      	adds	r5, r1, #3
 80097da:	f025 0503 	bic.w	r5, r5, #3
 80097de:	3508      	adds	r5, #8
 80097e0:	2d0c      	cmp	r5, #12
 80097e2:	bf38      	it	cc
 80097e4:	250c      	movcc	r5, #12
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	4606      	mov	r6, r0
 80097ea:	db01      	blt.n	80097f0 <_malloc_r+0x1c>
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d904      	bls.n	80097fa <_malloc_r+0x26>
 80097f0:	230c      	movs	r3, #12
 80097f2:	6033      	str	r3, [r6, #0]
 80097f4:	2000      	movs	r0, #0
 80097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098d0 <_malloc_r+0xfc>
 80097fe:	f000 f869 	bl	80098d4 <__malloc_lock>
 8009802:	f8d8 3000 	ldr.w	r3, [r8]
 8009806:	461c      	mov	r4, r3
 8009808:	bb44      	cbnz	r4, 800985c <_malloc_r+0x88>
 800980a:	4629      	mov	r1, r5
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ffbf 	bl	8009790 <sbrk_aligned>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	4604      	mov	r4, r0
 8009816:	d158      	bne.n	80098ca <_malloc_r+0xf6>
 8009818:	f8d8 4000 	ldr.w	r4, [r8]
 800981c:	4627      	mov	r7, r4
 800981e:	2f00      	cmp	r7, #0
 8009820:	d143      	bne.n	80098aa <_malloc_r+0xd6>
 8009822:	2c00      	cmp	r4, #0
 8009824:	d04b      	beq.n	80098be <_malloc_r+0xea>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	4639      	mov	r1, r7
 800982a:	4630      	mov	r0, r6
 800982c:	eb04 0903 	add.w	r9, r4, r3
 8009830:	f000 fb08 	bl	8009e44 <_sbrk_r>
 8009834:	4581      	cmp	r9, r0
 8009836:	d142      	bne.n	80098be <_malloc_r+0xea>
 8009838:	6821      	ldr	r1, [r4, #0]
 800983a:	1a6d      	subs	r5, r5, r1
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f7ff ffa6 	bl	8009790 <sbrk_aligned>
 8009844:	3001      	adds	r0, #1
 8009846:	d03a      	beq.n	80098be <_malloc_r+0xea>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	442b      	add	r3, r5
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	f8d8 3000 	ldr.w	r3, [r8]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	bb62      	cbnz	r2, 80098b0 <_malloc_r+0xdc>
 8009856:	f8c8 7000 	str.w	r7, [r8]
 800985a:	e00f      	b.n	800987c <_malloc_r+0xa8>
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	1b52      	subs	r2, r2, r5
 8009860:	d420      	bmi.n	80098a4 <_malloc_r+0xd0>
 8009862:	2a0b      	cmp	r2, #11
 8009864:	d917      	bls.n	8009896 <_malloc_r+0xc2>
 8009866:	1961      	adds	r1, r4, r5
 8009868:	42a3      	cmp	r3, r4
 800986a:	6025      	str	r5, [r4, #0]
 800986c:	bf18      	it	ne
 800986e:	6059      	strne	r1, [r3, #4]
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	bf08      	it	eq
 8009874:	f8c8 1000 	streq.w	r1, [r8]
 8009878:	5162      	str	r2, [r4, r5]
 800987a:	604b      	str	r3, [r1, #4]
 800987c:	4630      	mov	r0, r6
 800987e:	f000 f82f 	bl	80098e0 <__malloc_unlock>
 8009882:	f104 000b 	add.w	r0, r4, #11
 8009886:	1d23      	adds	r3, r4, #4
 8009888:	f020 0007 	bic.w	r0, r0, #7
 800988c:	1ac2      	subs	r2, r0, r3
 800988e:	bf1c      	itt	ne
 8009890:	1a1b      	subne	r3, r3, r0
 8009892:	50a3      	strne	r3, [r4, r2]
 8009894:	e7af      	b.n	80097f6 <_malloc_r+0x22>
 8009896:	6862      	ldr	r2, [r4, #4]
 8009898:	42a3      	cmp	r3, r4
 800989a:	bf0c      	ite	eq
 800989c:	f8c8 2000 	streq.w	r2, [r8]
 80098a0:	605a      	strne	r2, [r3, #4]
 80098a2:	e7eb      	b.n	800987c <_malloc_r+0xa8>
 80098a4:	4623      	mov	r3, r4
 80098a6:	6864      	ldr	r4, [r4, #4]
 80098a8:	e7ae      	b.n	8009808 <_malloc_r+0x34>
 80098aa:	463c      	mov	r4, r7
 80098ac:	687f      	ldr	r7, [r7, #4]
 80098ae:	e7b6      	b.n	800981e <_malloc_r+0x4a>
 80098b0:	461a      	mov	r2, r3
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	d1fb      	bne.n	80098b0 <_malloc_r+0xdc>
 80098b8:	2300      	movs	r3, #0
 80098ba:	6053      	str	r3, [r2, #4]
 80098bc:	e7de      	b.n	800987c <_malloc_r+0xa8>
 80098be:	230c      	movs	r3, #12
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	4630      	mov	r0, r6
 80098c4:	f000 f80c 	bl	80098e0 <__malloc_unlock>
 80098c8:	e794      	b.n	80097f4 <_malloc_r+0x20>
 80098ca:	6005      	str	r5, [r0, #0]
 80098cc:	e7d6      	b.n	800987c <_malloc_r+0xa8>
 80098ce:	bf00      	nop
 80098d0:	200006d8 	.word	0x200006d8

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	@ (80098dc <__malloc_lock+0x8>)
 80098d6:	f000 bb02 	b.w	8009ede <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	2000081c 	.word	0x2000081c

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f000 bafd 	b.w	8009ee0 <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	2000081c 	.word	0x2000081c

080098ec <std>:
 80098ec:	2300      	movs	r3, #0
 80098ee:	b510      	push	{r4, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	e9c0 3300 	strd	r3, r3, [r0]
 80098f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fa:	6083      	str	r3, [r0, #8]
 80098fc:	8181      	strh	r1, [r0, #12]
 80098fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009900:	81c2      	strh	r2, [r0, #14]
 8009902:	6183      	str	r3, [r0, #24]
 8009904:	4619      	mov	r1, r3
 8009906:	2208      	movs	r2, #8
 8009908:	305c      	adds	r0, #92	@ 0x5c
 800990a:	f000 fa1b 	bl	8009d44 <memset>
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <std+0x58>)
 8009910:	6263      	str	r3, [r4, #36]	@ 0x24
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <std+0x5c>)
 8009914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <std+0x60>)
 8009918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800991a:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <std+0x64>)
 800991c:	6323      	str	r3, [r4, #48]	@ 0x30
 800991e:	4b0d      	ldr	r3, [pc, #52]	@ (8009954 <std+0x68>)
 8009920:	6224      	str	r4, [r4, #32]
 8009922:	429c      	cmp	r4, r3
 8009924:	d006      	beq.n	8009934 <std+0x48>
 8009926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800992a:	4294      	cmp	r4, r2
 800992c:	d002      	beq.n	8009934 <std+0x48>
 800992e:	33d0      	adds	r3, #208	@ 0xd0
 8009930:	429c      	cmp	r4, r3
 8009932:	d105      	bne.n	8009940 <std+0x54>
 8009934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993c:	f000 bace 	b.w	8009edc <__retarget_lock_init_recursive>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	08009b61 	.word	0x08009b61
 8009948:	08009b83 	.word	0x08009b83
 800994c:	08009bbb 	.word	0x08009bbb
 8009950:	08009bdf 	.word	0x08009bdf
 8009954:	200006dc 	.word	0x200006dc

08009958 <stdio_exit_handler>:
 8009958:	4a02      	ldr	r2, [pc, #8]	@ (8009964 <stdio_exit_handler+0xc>)
 800995a:	4903      	ldr	r1, [pc, #12]	@ (8009968 <stdio_exit_handler+0x10>)
 800995c:	4803      	ldr	r0, [pc, #12]	@ (800996c <stdio_exit_handler+0x14>)
 800995e:	f000 b869 	b.w	8009a34 <_fwalk_sglue>
 8009962:	bf00      	nop
 8009964:	2000000c 	.word	0x2000000c
 8009968:	0800a621 	.word	0x0800a621
 800996c:	2000001c 	.word	0x2000001c

08009970 <cleanup_stdio>:
 8009970:	6841      	ldr	r1, [r0, #4]
 8009972:	4b0c      	ldr	r3, [pc, #48]	@ (80099a4 <cleanup_stdio+0x34>)
 8009974:	4299      	cmp	r1, r3
 8009976:	b510      	push	{r4, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	d001      	beq.n	8009980 <cleanup_stdio+0x10>
 800997c:	f000 fe50 	bl	800a620 <_fflush_r>
 8009980:	68a1      	ldr	r1, [r4, #8]
 8009982:	4b09      	ldr	r3, [pc, #36]	@ (80099a8 <cleanup_stdio+0x38>)
 8009984:	4299      	cmp	r1, r3
 8009986:	d002      	beq.n	800998e <cleanup_stdio+0x1e>
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fe49 	bl	800a620 <_fflush_r>
 800998e:	68e1      	ldr	r1, [r4, #12]
 8009990:	4b06      	ldr	r3, [pc, #24]	@ (80099ac <cleanup_stdio+0x3c>)
 8009992:	4299      	cmp	r1, r3
 8009994:	d004      	beq.n	80099a0 <cleanup_stdio+0x30>
 8009996:	4620      	mov	r0, r4
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999c:	f000 be40 	b.w	800a620 <_fflush_r>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	bf00      	nop
 80099a4:	200006dc 	.word	0x200006dc
 80099a8:	20000744 	.word	0x20000744
 80099ac:	200007ac 	.word	0x200007ac

080099b0 <global_stdio_init.part.0>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <global_stdio_init.part.0+0x30>)
 80099b4:	4c0b      	ldr	r4, [pc, #44]	@ (80099e4 <global_stdio_init.part.0+0x34>)
 80099b6:	4a0c      	ldr	r2, [pc, #48]	@ (80099e8 <global_stdio_init.part.0+0x38>)
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	4620      	mov	r0, r4
 80099bc:	2200      	movs	r2, #0
 80099be:	2104      	movs	r1, #4
 80099c0:	f7ff ff94 	bl	80098ec <std>
 80099c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099c8:	2201      	movs	r2, #1
 80099ca:	2109      	movs	r1, #9
 80099cc:	f7ff ff8e 	bl	80098ec <std>
 80099d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099d4:	2202      	movs	r2, #2
 80099d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099da:	2112      	movs	r1, #18
 80099dc:	f7ff bf86 	b.w	80098ec <std>
 80099e0:	20000814 	.word	0x20000814
 80099e4:	200006dc 	.word	0x200006dc
 80099e8:	08009959 	.word	0x08009959

080099ec <__sfp_lock_acquire>:
 80099ec:	4801      	ldr	r0, [pc, #4]	@ (80099f4 <__sfp_lock_acquire+0x8>)
 80099ee:	f000 ba76 	b.w	8009ede <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	2000081d 	.word	0x2000081d

080099f8 <__sfp_lock_release>:
 80099f8:	4801      	ldr	r0, [pc, #4]	@ (8009a00 <__sfp_lock_release+0x8>)
 80099fa:	f000 ba71 	b.w	8009ee0 <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	2000081d 	.word	0x2000081d

08009a04 <__sinit>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	f7ff fff0 	bl	80099ec <__sfp_lock_acquire>
 8009a0c:	6a23      	ldr	r3, [r4, #32]
 8009a0e:	b11b      	cbz	r3, 8009a18 <__sinit+0x14>
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f7ff bff0 	b.w	80099f8 <__sfp_lock_release>
 8009a18:	4b04      	ldr	r3, [pc, #16]	@ (8009a2c <__sinit+0x28>)
 8009a1a:	6223      	str	r3, [r4, #32]
 8009a1c:	4b04      	ldr	r3, [pc, #16]	@ (8009a30 <__sinit+0x2c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f5      	bne.n	8009a10 <__sinit+0xc>
 8009a24:	f7ff ffc4 	bl	80099b0 <global_stdio_init.part.0>
 8009a28:	e7f2      	b.n	8009a10 <__sinit+0xc>
 8009a2a:	bf00      	nop
 8009a2c:	08009971 	.word	0x08009971
 8009a30:	20000814 	.word	0x20000814

08009a34 <_fwalk_sglue>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4607      	mov	r7, r0
 8009a3a:	4688      	mov	r8, r1
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a44:	f1b9 0901 	subs.w	r9, r9, #1
 8009a48:	d505      	bpl.n	8009a56 <_fwalk_sglue+0x22>
 8009a4a:	6824      	ldr	r4, [r4, #0]
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d1f7      	bne.n	8009a40 <_fwalk_sglue+0xc>
 8009a50:	4630      	mov	r0, r6
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d907      	bls.n	8009a6c <_fwalk_sglue+0x38>
 8009a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a60:	3301      	adds	r3, #1
 8009a62:	d003      	beq.n	8009a6c <_fwalk_sglue+0x38>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	4306      	orrs	r6, r0
 8009a6c:	3568      	adds	r5, #104	@ 0x68
 8009a6e:	e7e9      	b.n	8009a44 <_fwalk_sglue+0x10>

08009a70 <iprintf>:
 8009a70:	b40f      	push	{r0, r1, r2, r3}
 8009a72:	b507      	push	{r0, r1, r2, lr}
 8009a74:	4906      	ldr	r1, [pc, #24]	@ (8009a90 <iprintf+0x20>)
 8009a76:	ab04      	add	r3, sp, #16
 8009a78:	6808      	ldr	r0, [r1, #0]
 8009a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7e:	6881      	ldr	r1, [r0, #8]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	f000 faa3 	bl	8009fcc <_vfiprintf_r>
 8009a86:	b003      	add	sp, #12
 8009a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a8c:	b004      	add	sp, #16
 8009a8e:	4770      	bx	lr
 8009a90:	20000018 	.word	0x20000018

08009a94 <putchar>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	@ (8009aa0 <putchar+0xc>)
 8009a96:	4601      	mov	r1, r0
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	6882      	ldr	r2, [r0, #8]
 8009a9c:	f000 be4a 	b.w	800a734 <_putc_r>
 8009aa0:	20000018 	.word	0x20000018

08009aa4 <_puts_r>:
 8009aa4:	6a03      	ldr	r3, [r0, #32]
 8009aa6:	b570      	push	{r4, r5, r6, lr}
 8009aa8:	6884      	ldr	r4, [r0, #8]
 8009aaa:	4605      	mov	r5, r0
 8009aac:	460e      	mov	r6, r1
 8009aae:	b90b      	cbnz	r3, 8009ab4 <_puts_r+0x10>
 8009ab0:	f7ff ffa8 	bl	8009a04 <__sinit>
 8009ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ab6:	07db      	lsls	r3, r3, #31
 8009ab8:	d405      	bmi.n	8009ac6 <_puts_r+0x22>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	0598      	lsls	r0, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_puts_r+0x22>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ac2:	f000 fa0c 	bl	8009ede <__retarget_lock_acquire_recursive>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	0719      	lsls	r1, r3, #28
 8009aca:	d502      	bpl.n	8009ad2 <_puts_r+0x2e>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d135      	bne.n	8009b3e <_puts_r+0x9a>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f000 f8c5 	bl	8009c64 <__swsetup_r>
 8009ada:	b380      	cbz	r0, 8009b3e <_puts_r+0x9a>
 8009adc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ae2:	07da      	lsls	r2, r3, #31
 8009ae4:	d405      	bmi.n	8009af2 <_puts_r+0x4e>
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	059b      	lsls	r3, r3, #22
 8009aea:	d402      	bmi.n	8009af2 <_puts_r+0x4e>
 8009aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aee:	f000 f9f7 	bl	8009ee0 <__retarget_lock_release_recursive>
 8009af2:	4628      	mov	r0, r5
 8009af4:	bd70      	pop	{r4, r5, r6, pc}
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da04      	bge.n	8009b04 <_puts_r+0x60>
 8009afa:	69a2      	ldr	r2, [r4, #24]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	dc17      	bgt.n	8009b30 <_puts_r+0x8c>
 8009b00:	290a      	cmp	r1, #10
 8009b02:	d015      	beq.n	8009b30 <_puts_r+0x8c>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	7019      	strb	r1, [r3, #0]
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b12:	3b01      	subs	r3, #1
 8009b14:	60a3      	str	r3, [r4, #8]
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d1ed      	bne.n	8009af6 <_puts_r+0x52>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da11      	bge.n	8009b42 <_puts_r+0x9e>
 8009b1e:	4622      	mov	r2, r4
 8009b20:	210a      	movs	r1, #10
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f85f 	bl	8009be6 <__swbuf_r>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0d7      	beq.n	8009adc <_puts_r+0x38>
 8009b2c:	250a      	movs	r5, #10
 8009b2e:	e7d7      	b.n	8009ae0 <_puts_r+0x3c>
 8009b30:	4622      	mov	r2, r4
 8009b32:	4628      	mov	r0, r5
 8009b34:	f000 f857 	bl	8009be6 <__swbuf_r>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1e7      	bne.n	8009b0c <_puts_r+0x68>
 8009b3c:	e7ce      	b.n	8009adc <_puts_r+0x38>
 8009b3e:	3e01      	subs	r6, #1
 8009b40:	e7e4      	b.n	8009b0c <_puts_r+0x68>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	6022      	str	r2, [r4, #0]
 8009b48:	220a      	movs	r2, #10
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	e7ee      	b.n	8009b2c <_puts_r+0x88>
	...

08009b50 <puts>:
 8009b50:	4b02      	ldr	r3, [pc, #8]	@ (8009b5c <puts+0xc>)
 8009b52:	4601      	mov	r1, r0
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f7ff bfa5 	b.w	8009aa4 <_puts_r>
 8009b5a:	bf00      	nop
 8009b5c:	20000018 	.word	0x20000018

08009b60 <__sread>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	460c      	mov	r4, r1
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	f000 f946 	bl	8009df8 <_read_r>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	bfab      	itete	ge
 8009b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b72:	89a3      	ldrhlt	r3, [r4, #12]
 8009b74:	181b      	addge	r3, r3, r0
 8009b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b7a:	bfac      	ite	ge
 8009b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b7e:	81a3      	strhlt	r3, [r4, #12]
 8009b80:	bd10      	pop	{r4, pc}

08009b82 <__swrite>:
 8009b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	461f      	mov	r7, r3
 8009b88:	898b      	ldrh	r3, [r1, #12]
 8009b8a:	05db      	lsls	r3, r3, #23
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	4616      	mov	r6, r2
 8009b92:	d505      	bpl.n	8009ba0 <__swrite+0x1e>
 8009b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b98:	2302      	movs	r3, #2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f000 f91a 	bl	8009dd4 <_lseek_r>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	4632      	mov	r2, r6
 8009bae:	463b      	mov	r3, r7
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	f000 b955 	b.w	8009e64 <_write_r>

08009bba <__sseek>:
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc2:	f000 f907 	bl	8009dd4 <_lseek_r>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	bf15      	itete	ne
 8009bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bd6:	81a3      	strheq	r3, [r4, #12]
 8009bd8:	bf18      	it	ne
 8009bda:	81a3      	strhne	r3, [r4, #12]
 8009bdc:	bd10      	pop	{r4, pc}

08009bde <__sclose>:
 8009bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be2:	f000 b8e7 	b.w	8009db4 <_close_r>

08009be6 <__swbuf_r>:
 8009be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be8:	460e      	mov	r6, r1
 8009bea:	4614      	mov	r4, r2
 8009bec:	4605      	mov	r5, r0
 8009bee:	b118      	cbz	r0, 8009bf8 <__swbuf_r+0x12>
 8009bf0:	6a03      	ldr	r3, [r0, #32]
 8009bf2:	b90b      	cbnz	r3, 8009bf8 <__swbuf_r+0x12>
 8009bf4:	f7ff ff06 	bl	8009a04 <__sinit>
 8009bf8:	69a3      	ldr	r3, [r4, #24]
 8009bfa:	60a3      	str	r3, [r4, #8]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	071a      	lsls	r2, r3, #28
 8009c00:	d501      	bpl.n	8009c06 <__swbuf_r+0x20>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	b943      	cbnz	r3, 8009c18 <__swbuf_r+0x32>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 f82b 	bl	8009c64 <__swsetup_r>
 8009c0e:	b118      	cbz	r0, 8009c18 <__swbuf_r+0x32>
 8009c10:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c14:	4638      	mov	r0, r7
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	6922      	ldr	r2, [r4, #16]
 8009c1c:	1a98      	subs	r0, r3, r2
 8009c1e:	6963      	ldr	r3, [r4, #20]
 8009c20:	b2f6      	uxtb	r6, r6
 8009c22:	4283      	cmp	r3, r0
 8009c24:	4637      	mov	r7, r6
 8009c26:	dc05      	bgt.n	8009c34 <__swbuf_r+0x4e>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 fcf8 	bl	800a620 <_fflush_r>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1ed      	bne.n	8009c10 <__swbuf_r+0x2a>
 8009c34:	68a3      	ldr	r3, [r4, #8]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	60a3      	str	r3, [r4, #8]
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	701e      	strb	r6, [r3, #0]
 8009c42:	6962      	ldr	r2, [r4, #20]
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d004      	beq.n	8009c54 <__swbuf_r+0x6e>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	07db      	lsls	r3, r3, #31
 8009c4e:	d5e1      	bpl.n	8009c14 <__swbuf_r+0x2e>
 8009c50:	2e0a      	cmp	r6, #10
 8009c52:	d1df      	bne.n	8009c14 <__swbuf_r+0x2e>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	f000 fce2 	bl	800a620 <_fflush_r>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0d9      	beq.n	8009c14 <__swbuf_r+0x2e>
 8009c60:	e7d6      	b.n	8009c10 <__swbuf_r+0x2a>
	...

08009c64 <__swsetup_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4b29      	ldr	r3, [pc, #164]	@ (8009d0c <__swsetup_r+0xa8>)
 8009c68:	4605      	mov	r5, r0
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	b118      	cbz	r0, 8009c78 <__swsetup_r+0x14>
 8009c70:	6a03      	ldr	r3, [r0, #32]
 8009c72:	b90b      	cbnz	r3, 8009c78 <__swsetup_r+0x14>
 8009c74:	f7ff fec6 	bl	8009a04 <__sinit>
 8009c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7c:	0719      	lsls	r1, r3, #28
 8009c7e:	d422      	bmi.n	8009cc6 <__swsetup_r+0x62>
 8009c80:	06da      	lsls	r2, r3, #27
 8009c82:	d407      	bmi.n	8009c94 <__swsetup_r+0x30>
 8009c84:	2209      	movs	r2, #9
 8009c86:	602a      	str	r2, [r5, #0]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c92:	e033      	b.n	8009cfc <__swsetup_r+0x98>
 8009c94:	0758      	lsls	r0, r3, #29
 8009c96:	d512      	bpl.n	8009cbe <__swsetup_r+0x5a>
 8009c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c9a:	b141      	cbz	r1, 8009cae <__swsetup_r+0x4a>
 8009c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d002      	beq.n	8009caa <__swsetup_r+0x46>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f000 f91d 	bl	8009ee4 <_free_r>
 8009caa:	2300      	movs	r3, #0
 8009cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f043 0308 	orr.w	r3, r3, #8
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	b94b      	cbnz	r3, 8009cde <__swsetup_r+0x7a>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd4:	d003      	beq.n	8009cde <__swsetup_r+0x7a>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 fcef 	bl	800a6bc <__smakebuf_r>
 8009cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce2:	f013 0201 	ands.w	r2, r3, #1
 8009ce6:	d00a      	beq.n	8009cfe <__swsetup_r+0x9a>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	60a2      	str	r2, [r4, #8]
 8009cec:	6962      	ldr	r2, [r4, #20]
 8009cee:	4252      	negs	r2, r2
 8009cf0:	61a2      	str	r2, [r4, #24]
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	b942      	cbnz	r2, 8009d08 <__swsetup_r+0xa4>
 8009cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cfa:	d1c5      	bne.n	8009c88 <__swsetup_r+0x24>
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	0799      	lsls	r1, r3, #30
 8009d00:	bf58      	it	pl
 8009d02:	6962      	ldrpl	r2, [r4, #20]
 8009d04:	60a2      	str	r2, [r4, #8]
 8009d06:	e7f4      	b.n	8009cf2 <__swsetup_r+0x8e>
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7f7      	b.n	8009cfc <__swsetup_r+0x98>
 8009d0c:	20000018 	.word	0x20000018

08009d10 <memmove>:
 8009d10:	4288      	cmp	r0, r1
 8009d12:	b510      	push	{r4, lr}
 8009d14:	eb01 0402 	add.w	r4, r1, r2
 8009d18:	d902      	bls.n	8009d20 <memmove+0x10>
 8009d1a:	4284      	cmp	r4, r0
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	d807      	bhi.n	8009d30 <memmove+0x20>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	42a1      	cmp	r1, r4
 8009d24:	d008      	beq.n	8009d38 <memmove+0x28>
 8009d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2e:	e7f8      	b.n	8009d22 <memmove+0x12>
 8009d30:	4402      	add	r2, r0
 8009d32:	4601      	mov	r1, r0
 8009d34:	428a      	cmp	r2, r1
 8009d36:	d100      	bne.n	8009d3a <memmove+0x2a>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d42:	e7f7      	b.n	8009d34 <memmove+0x24>

08009d44 <memset>:
 8009d44:	4402      	add	r2, r0
 8009d46:	4603      	mov	r3, r0
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d100      	bne.n	8009d4e <memset+0xa>
 8009d4c:	4770      	bx	lr
 8009d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d52:	e7f9      	b.n	8009d48 <memset+0x4>

08009d54 <_raise_r>:
 8009d54:	291f      	cmp	r1, #31
 8009d56:	b538      	push	{r3, r4, r5, lr}
 8009d58:	4605      	mov	r5, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	d904      	bls.n	8009d68 <_raise_r+0x14>
 8009d5e:	2316      	movs	r3, #22
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d6a:	b112      	cbz	r2, 8009d72 <_raise_r+0x1e>
 8009d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d70:	b94b      	cbnz	r3, 8009d86 <_raise_r+0x32>
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f864 	bl	8009e40 <_getpid_r>
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d82:	f000 b84b 	b.w	8009e1c <_kill_r>
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d00a      	beq.n	8009da0 <_raise_r+0x4c>
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	d103      	bne.n	8009d96 <_raise_r+0x42>
 8009d8e:	2316      	movs	r3, #22
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	2001      	movs	r0, #1
 8009d94:	e7e7      	b.n	8009d66 <_raise_r+0x12>
 8009d96:	2100      	movs	r1, #0
 8009d98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4798      	blx	r3
 8009da0:	2000      	movs	r0, #0
 8009da2:	e7e0      	b.n	8009d66 <_raise_r+0x12>

08009da4 <raise>:
 8009da4:	4b02      	ldr	r3, [pc, #8]	@ (8009db0 <raise+0xc>)
 8009da6:	4601      	mov	r1, r0
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	f7ff bfd3 	b.w	8009d54 <_raise_r>
 8009dae:	bf00      	nop
 8009db0:	20000018 	.word	0x20000018

08009db4 <_close_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d06      	ldr	r5, [pc, #24]	@ (8009dd0 <_close_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7fb fabc 	bl	800533c <_close>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_close_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_close_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20000818 	.word	0x20000818

08009dd4 <_lseek_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	@ (8009df4 <_lseek_r+0x20>)
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4611      	mov	r1, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f7fb fad1 	bl	800538a <_lseek>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_lseek_r+0x1e>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_lseek_r+0x1e>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20000818 	.word	0x20000818

08009df8 <_read_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d07      	ldr	r5, [pc, #28]	@ (8009e18 <_read_r+0x20>)
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	4608      	mov	r0, r1
 8009e00:	4611      	mov	r1, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	602a      	str	r2, [r5, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f7fb fa7b 	bl	8005302 <_read>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_read_r+0x1e>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_read_r+0x1e>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20000818 	.word	0x20000818

08009e1c <_kill_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	@ (8009e3c <_kill_r+0x20>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	f7fb fa4f 	bl	80052cc <_kill>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_kill_r+0x1c>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_kill_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20000818 	.word	0x20000818

08009e40 <_getpid_r>:
 8009e40:	f7fb ba3c 	b.w	80052bc <_getpid>

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d06      	ldr	r5, [pc, #24]	@ (8009e60 <_sbrk_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7fb faa8 	bl	80053a4 <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	20000818 	.word	0x20000818

08009e64 <_write_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d07      	ldr	r5, [pc, #28]	@ (8009e84 <_write_r+0x20>)
 8009e68:	4604      	mov	r4, r0
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	602a      	str	r2, [r5, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	f7f8 f8e2 	bl	800203c <_write>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_write_r+0x1e>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_write_r+0x1e>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	20000818 	.word	0x20000818

08009e88 <__errno>:
 8009e88:	4b01      	ldr	r3, [pc, #4]	@ (8009e90 <__errno+0x8>)
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20000018 	.word	0x20000018

08009e94 <__libc_init_array>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	4d0d      	ldr	r5, [pc, #52]	@ (8009ecc <__libc_init_array+0x38>)
 8009e98:	4c0d      	ldr	r4, [pc, #52]	@ (8009ed0 <__libc_init_array+0x3c>)
 8009e9a:	1b64      	subs	r4, r4, r5
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	42a6      	cmp	r6, r4
 8009ea2:	d109      	bne.n	8009eb8 <__libc_init_array+0x24>
 8009ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ed4 <__libc_init_array+0x40>)
 8009ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ed8 <__libc_init_array+0x44>)
 8009ea8:	f000 fc9a 	bl	800a7e0 <_init>
 8009eac:	1b64      	subs	r4, r4, r5
 8009eae:	10a4      	asrs	r4, r4, #2
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	42a6      	cmp	r6, r4
 8009eb4:	d105      	bne.n	8009ec2 <__libc_init_array+0x2e>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ebc:	4798      	blx	r3
 8009ebe:	3601      	adds	r6, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__libc_init_array+0xc>
 8009ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec6:	4798      	blx	r3
 8009ec8:	3601      	adds	r6, #1
 8009eca:	e7f2      	b.n	8009eb2 <__libc_init_array+0x1e>
 8009ecc:	0800ace4 	.word	0x0800ace4
 8009ed0:	0800ace4 	.word	0x0800ace4
 8009ed4:	0800ace4 	.word	0x0800ace4
 8009ed8:	0800acec 	.word	0x0800acec

08009edc <__retarget_lock_init_recursive>:
 8009edc:	4770      	bx	lr

08009ede <__retarget_lock_acquire_recursive>:
 8009ede:	4770      	bx	lr

08009ee0 <__retarget_lock_release_recursive>:
 8009ee0:	4770      	bx	lr
	...

08009ee4 <_free_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d041      	beq.n	8009f70 <_free_r+0x8c>
 8009eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef0:	1f0c      	subs	r4, r1, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfb8      	it	lt
 8009ef6:	18e4      	addlt	r4, r4, r3
 8009ef8:	f7ff fcec 	bl	80098d4 <__malloc_lock>
 8009efc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f74 <_free_r+0x90>)
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	b933      	cbnz	r3, 8009f10 <_free_r+0x2c>
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	6014      	str	r4, [r2, #0]
 8009f06:	4628      	mov	r0, r5
 8009f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0c:	f7ff bce8 	b.w	80098e0 <__malloc_unlock>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d908      	bls.n	8009f26 <_free_r+0x42>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	1821      	adds	r1, r4, r0
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf01      	itttt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	1809      	addeq	r1, r1, r0
 8009f22:	6021      	streq	r1, [r4, #0]
 8009f24:	e7ed      	b.n	8009f02 <_free_r+0x1e>
 8009f26:	461a      	mov	r2, r3
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	b10b      	cbz	r3, 8009f30 <_free_r+0x4c>
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	d9fa      	bls.n	8009f26 <_free_r+0x42>
 8009f30:	6811      	ldr	r1, [r2, #0]
 8009f32:	1850      	adds	r0, r2, r1
 8009f34:	42a0      	cmp	r0, r4
 8009f36:	d10b      	bne.n	8009f50 <_free_r+0x6c>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	4401      	add	r1, r0
 8009f3c:	1850      	adds	r0, r2, r1
 8009f3e:	4283      	cmp	r3, r0
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	d1e0      	bne.n	8009f06 <_free_r+0x22>
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	6053      	str	r3, [r2, #4]
 8009f4a:	4408      	add	r0, r1
 8009f4c:	6010      	str	r0, [r2, #0]
 8009f4e:	e7da      	b.n	8009f06 <_free_r+0x22>
 8009f50:	d902      	bls.n	8009f58 <_free_r+0x74>
 8009f52:	230c      	movs	r3, #12
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	e7d6      	b.n	8009f06 <_free_r+0x22>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	1821      	adds	r1, r4, r0
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	bf04      	itt	eq
 8009f60:	6819      	ldreq	r1, [r3, #0]
 8009f62:	685b      	ldreq	r3, [r3, #4]
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	bf04      	itt	eq
 8009f68:	1809      	addeq	r1, r1, r0
 8009f6a:	6021      	streq	r1, [r4, #0]
 8009f6c:	6054      	str	r4, [r2, #4]
 8009f6e:	e7ca      	b.n	8009f06 <_free_r+0x22>
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	bf00      	nop
 8009f74:	200006d8 	.word	0x200006d8

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	b410      	push	{r4}
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da08      	bge.n	8009f96 <__sfputc_r+0x1e>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d103      	bne.n	8009f96 <__sfputc_r+0x1e>
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	f7ff be28 	b.w	8009be6 <__swbuf_r>
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	1c58      	adds	r0, r3, #1
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	7019      	strb	r1, [r3, #0]
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <__sfputs_r>:
 8009fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	42ac      	cmp	r4, r5
 8009fb2:	d101      	bne.n	8009fb8 <__sfputs_r+0x12>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e007      	b.n	8009fc8 <__sfputs_r+0x22>
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffda 	bl	8009f78 <__sfputc_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d1f3      	bne.n	8009fb0 <__sfputs_r+0xa>
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	@ 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6a03      	ldr	r3, [r0, #32]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f7ff fd10 	bl	8009a04 <__sinit>
 8009fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fe6:	07d9      	lsls	r1, r3, #31
 8009fe8:	d405      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009fea:	89ab      	ldrh	r3, [r5, #12]
 8009fec:	059a      	lsls	r2, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ff2:	f7ff ff74 	bl	8009ede <__retarget_lock_acquire_recursive>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	071b      	lsls	r3, r3, #28
 8009ffa:	d501      	bpl.n	800a000 <_vfiprintf_r+0x34>
 8009ffc:	692b      	ldr	r3, [r5, #16]
 8009ffe:	b99b      	cbnz	r3, 800a028 <_vfiprintf_r+0x5c>
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff fe2e 	bl	8009c64 <__swsetup_r>
 800a008:	b170      	cbz	r0, 800a028 <_vfiprintf_r+0x5c>
 800a00a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00c:	07dc      	lsls	r4, r3, #31
 800a00e:	d504      	bpl.n	800a01a <_vfiprintf_r+0x4e>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a014:	b01d      	add	sp, #116	@ 0x74
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	0598      	lsls	r0, r3, #22
 800a01e:	d4f7      	bmi.n	800a010 <_vfiprintf_r+0x44>
 800a020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a022:	f7ff ff5d 	bl	8009ee0 <__retarget_lock_release_recursive>
 800a026:	e7f3      	b.n	800a010 <_vfiprintf_r+0x44>
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a032:	f8cd 800c 	str.w	r8, [sp, #12]
 800a036:	2330      	movs	r3, #48	@ 0x30
 800a038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1e8 <_vfiprintf_r+0x21c>
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a040:	f04f 0901 	mov.w	r9, #1
 800a044:	4623      	mov	r3, r4
 800a046:	469a      	mov	sl, r3
 800a048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04c:	b10a      	cbz	r2, 800a052 <_vfiprintf_r+0x86>
 800a04e:	2a25      	cmp	r2, #37	@ 0x25
 800a050:	d1f9      	bne.n	800a046 <_vfiprintf_r+0x7a>
 800a052:	ebba 0b04 	subs.w	fp, sl, r4
 800a056:	d00b      	beq.n	800a070 <_vfiprintf_r+0xa4>
 800a058:	465b      	mov	r3, fp
 800a05a:	4622      	mov	r2, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ffa1 	bl	8009fa6 <__sfputs_r>
 800a064:	3001      	adds	r0, #1
 800a066:	f000 80a7 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a06c:	445a      	add	r2, fp
 800a06e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 809f 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a090:	931a      	str	r3, [sp, #104]	@ 0x68
 800a092:	4654      	mov	r4, sl
 800a094:	2205      	movs	r2, #5
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	4853      	ldr	r0, [pc, #332]	@ (800a1e8 <_vfiprintf_r+0x21c>)
 800a09c:	f7f6 f8c0 	bl	8000220 <memchr>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	b9d8      	cbnz	r0, 800a0dc <_vfiprintf_r+0x110>
 800a0a4:	06d1      	lsls	r1, r2, #27
 800a0a6:	bf44      	itt	mi
 800a0a8:	2320      	movmi	r3, #32
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ae:	0713      	lsls	r3, r2, #28
 800a0b0:	bf44      	itt	mi
 800a0b2:	232b      	movmi	r3, #43	@ 0x2b
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0be:	d015      	beq.n	800a0ec <_vfiprintf_r+0x120>
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	4654      	mov	r4, sl
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f04f 0c0a 	mov.w	ip, #10
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d0:	3b30      	subs	r3, #48	@ 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d94b      	bls.n	800a16e <_vfiprintf_r+0x1a2>
 800a0d6:	b1b0      	cbz	r0, 800a106 <_vfiprintf_r+0x13a>
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	e014      	b.n	800a106 <_vfiprintf_r+0x13a>
 800a0dc:	eba0 0308 	sub.w	r3, r0, r8
 800a0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	46a2      	mov	sl, r4
 800a0ea:	e7d2      	b.n	800a092 <_vfiprintf_r+0xc6>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d19      	adds	r1, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfbb      	ittet	lt
 800a0f8:	425b      	neglt	r3, r3
 800a0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fe:	9307      	strge	r3, [sp, #28]
 800a100:	9307      	strlt	r3, [sp, #28]
 800a102:	bfb8      	it	lt
 800a104:	9204      	strlt	r2, [sp, #16]
 800a106:	7823      	ldrb	r3, [r4, #0]
 800a108:	2b2e      	cmp	r3, #46	@ 0x2e
 800a10a:	d10a      	bne.n	800a122 <_vfiprintf_r+0x156>
 800a10c:	7863      	ldrb	r3, [r4, #1]
 800a10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a110:	d132      	bne.n	800a178 <_vfiprintf_r+0x1ac>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	9203      	str	r2, [sp, #12]
 800a11a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a11e:	3402      	adds	r4, #2
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1f8 <_vfiprintf_r+0x22c>
 800a126:	7821      	ldrb	r1, [r4, #0]
 800a128:	2203      	movs	r2, #3
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7f6 f878 	bl	8000220 <memchr>
 800a130:	b138      	cbz	r0, 800a142 <_vfiprintf_r+0x176>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	eba0 000a 	sub.w	r0, r0, sl
 800a138:	2240      	movs	r2, #64	@ 0x40
 800a13a:	4082      	lsls	r2, r0
 800a13c:	4313      	orrs	r3, r2
 800a13e:	3401      	adds	r4, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4829      	ldr	r0, [pc, #164]	@ (800a1ec <_vfiprintf_r+0x220>)
 800a148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a14c:	2206      	movs	r2, #6
 800a14e:	f7f6 f867 	bl	8000220 <memchr>
 800a152:	2800      	cmp	r0, #0
 800a154:	d03f      	beq.n	800a1d6 <_vfiprintf_r+0x20a>
 800a156:	4b26      	ldr	r3, [pc, #152]	@ (800a1f0 <_vfiprintf_r+0x224>)
 800a158:	bb1b      	cbnz	r3, 800a1a2 <_vfiprintf_r+0x1d6>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	3308      	adds	r3, #8
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	443b      	add	r3, r7
 800a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16c:	e76a      	b.n	800a044 <_vfiprintf_r+0x78>
 800a16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a172:	460c      	mov	r4, r1
 800a174:	2001      	movs	r0, #1
 800a176:	e7a8      	b.n	800a0ca <_vfiprintf_r+0xfe>
 800a178:	2300      	movs	r3, #0
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4619      	mov	r1, r3
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4620      	mov	r0, r4
 800a186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18a:	3a30      	subs	r2, #48	@ 0x30
 800a18c:	2a09      	cmp	r2, #9
 800a18e:	d903      	bls.n	800a198 <_vfiprintf_r+0x1cc>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c6      	beq.n	800a122 <_vfiprintf_r+0x156>
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	e7c4      	b.n	800a122 <_vfiprintf_r+0x156>
 800a198:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19c:	4604      	mov	r4, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f0      	b.n	800a184 <_vfiprintf_r+0x1b8>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b12      	ldr	r3, [pc, #72]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f3af 8000 	nop.w
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	1c78      	adds	r0, r7, #1
 800a1b6:	d1d6      	bne.n	800a166 <_vfiprintf_r+0x19a>
 800a1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1ba:	07d9      	lsls	r1, r3, #31
 800a1bc:	d405      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	059a      	lsls	r2, r3, #22
 800a1c2:	d402      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1c6:	f7ff fe8b 	bl	8009ee0 <__retarget_lock_release_recursive>
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	065b      	lsls	r3, r3, #25
 800a1ce:	f53f af1f 	bmi.w	800a010 <_vfiprintf_r+0x44>
 800a1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1d4:	e71e      	b.n	800a014 <_vfiprintf_r+0x48>
 800a1d6:	ab03      	add	r3, sp, #12
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1de:	a904      	add	r1, sp, #16
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f879 	bl	800a2d8 <_printf_i>
 800a1e6:	e7e4      	b.n	800a1b2 <_vfiprintf_r+0x1e6>
 800a1e8:	0800aca8 	.word	0x0800aca8
 800a1ec:	0800acb2 	.word	0x0800acb2
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	08009fa7 	.word	0x08009fa7
 800a1f8:	0800acae 	.word	0x0800acae

0800a1fc <_printf_common>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	4616      	mov	r6, r2
 800a202:	4698      	mov	r8, r3
 800a204:	688a      	ldr	r2, [r1, #8]
 800a206:	690b      	ldr	r3, [r1, #16]
 800a208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a20c:	4293      	cmp	r3, r2
 800a20e:	bfb8      	it	lt
 800a210:	4613      	movlt	r3, r2
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a218:	4607      	mov	r7, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	b10a      	cbz	r2, 800a222 <_printf_common+0x26>
 800a21e:	3301      	adds	r3, #1
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	0699      	lsls	r1, r3, #26
 800a226:	bf42      	ittt	mi
 800a228:	6833      	ldrmi	r3, [r6, #0]
 800a22a:	3302      	addmi	r3, #2
 800a22c:	6033      	strmi	r3, [r6, #0]
 800a22e:	6825      	ldr	r5, [r4, #0]
 800a230:	f015 0506 	ands.w	r5, r5, #6
 800a234:	d106      	bne.n	800a244 <_printf_common+0x48>
 800a236:	f104 0a19 	add.w	sl, r4, #25
 800a23a:	68e3      	ldr	r3, [r4, #12]
 800a23c:	6832      	ldr	r2, [r6, #0]
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc26      	bgt.n	800a292 <_printf_common+0x96>
 800a244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	3b00      	subs	r3, #0
 800a24c:	bf18      	it	ne
 800a24e:	2301      	movne	r3, #1
 800a250:	0692      	lsls	r2, r2, #26
 800a252:	d42b      	bmi.n	800a2ac <_printf_common+0xb0>
 800a254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a258:	4641      	mov	r1, r8
 800a25a:	4638      	mov	r0, r7
 800a25c:	47c8      	blx	r9
 800a25e:	3001      	adds	r0, #1
 800a260:	d01e      	beq.n	800a2a0 <_printf_common+0xa4>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	f003 0306 	and.w	r3, r3, #6
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	bf02      	ittt	eq
 800a26e:	68e5      	ldreq	r5, [r4, #12]
 800a270:	6833      	ldreq	r3, [r6, #0]
 800a272:	1aed      	subeq	r5, r5, r3
 800a274:	68a3      	ldr	r3, [r4, #8]
 800a276:	bf0c      	ite	eq
 800a278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a27c:	2500      	movne	r5, #0
 800a27e:	4293      	cmp	r3, r2
 800a280:	bfc4      	itt	gt
 800a282:	1a9b      	subgt	r3, r3, r2
 800a284:	18ed      	addgt	r5, r5, r3
 800a286:	2600      	movs	r6, #0
 800a288:	341a      	adds	r4, #26
 800a28a:	42b5      	cmp	r5, r6
 800a28c:	d11a      	bne.n	800a2c4 <_printf_common+0xc8>
 800a28e:	2000      	movs	r0, #0
 800a290:	e008      	b.n	800a2a4 <_printf_common+0xa8>
 800a292:	2301      	movs	r3, #1
 800a294:	4652      	mov	r2, sl
 800a296:	4641      	mov	r1, r8
 800a298:	4638      	mov	r0, r7
 800a29a:	47c8      	blx	r9
 800a29c:	3001      	adds	r0, #1
 800a29e:	d103      	bne.n	800a2a8 <_printf_common+0xac>
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	e7c6      	b.n	800a23a <_printf_common+0x3e>
 800a2ac:	18e1      	adds	r1, r4, r3
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	2030      	movs	r0, #48	@ 0x30
 800a2b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2b6:	4422      	add	r2, r4
 800a2b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	e7c7      	b.n	800a254 <_printf_common+0x58>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	47c8      	blx	r9
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0e6      	beq.n	800a2a0 <_printf_common+0xa4>
 800a2d2:	3601      	adds	r6, #1
 800a2d4:	e7d9      	b.n	800a28a <_printf_common+0x8e>
	...

0800a2d8 <_printf_i>:
 800a2d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	7e0f      	ldrb	r7, [r1, #24]
 800a2de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2e0:	2f78      	cmp	r7, #120	@ 0x78
 800a2e2:	4691      	mov	r9, r2
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	469a      	mov	sl, r3
 800a2ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ee:	d807      	bhi.n	800a300 <_printf_i+0x28>
 800a2f0:	2f62      	cmp	r7, #98	@ 0x62
 800a2f2:	d80a      	bhi.n	800a30a <_printf_i+0x32>
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	f000 80d2 	beq.w	800a49e <_printf_i+0x1c6>
 800a2fa:	2f58      	cmp	r7, #88	@ 0x58
 800a2fc:	f000 80b9 	beq.w	800a472 <_printf_i+0x19a>
 800a300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a308:	e03a      	b.n	800a380 <_printf_i+0xa8>
 800a30a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a30e:	2b15      	cmp	r3, #21
 800a310:	d8f6      	bhi.n	800a300 <_printf_i+0x28>
 800a312:	a101      	add	r1, pc, #4	@ (adr r1, 800a318 <_printf_i+0x40>)
 800a314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a385 	.word	0x0800a385
 800a320:	0800a301 	.word	0x0800a301
 800a324:	0800a301 	.word	0x0800a301
 800a328:	0800a301 	.word	0x0800a301
 800a32c:	0800a301 	.word	0x0800a301
 800a330:	0800a385 	.word	0x0800a385
 800a334:	0800a301 	.word	0x0800a301
 800a338:	0800a301 	.word	0x0800a301
 800a33c:	0800a301 	.word	0x0800a301
 800a340:	0800a301 	.word	0x0800a301
 800a344:	0800a485 	.word	0x0800a485
 800a348:	0800a3af 	.word	0x0800a3af
 800a34c:	0800a43f 	.word	0x0800a43f
 800a350:	0800a301 	.word	0x0800a301
 800a354:	0800a301 	.word	0x0800a301
 800a358:	0800a4a7 	.word	0x0800a4a7
 800a35c:	0800a301 	.word	0x0800a301
 800a360:	0800a3af 	.word	0x0800a3af
 800a364:	0800a301 	.word	0x0800a301
 800a368:	0800a301 	.word	0x0800a301
 800a36c:	0800a447 	.word	0x0800a447
 800a370:	6833      	ldr	r3, [r6, #0]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6032      	str	r2, [r6, #0]
 800a378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a37c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a380:	2301      	movs	r3, #1
 800a382:	e09d      	b.n	800a4c0 <_printf_i+0x1e8>
 800a384:	6833      	ldr	r3, [r6, #0]
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	1d19      	adds	r1, r3, #4
 800a38a:	6031      	str	r1, [r6, #0]
 800a38c:	0606      	lsls	r6, r0, #24
 800a38e:	d501      	bpl.n	800a394 <_printf_i+0xbc>
 800a390:	681d      	ldr	r5, [r3, #0]
 800a392:	e003      	b.n	800a39c <_printf_i+0xc4>
 800a394:	0645      	lsls	r5, r0, #25
 800a396:	d5fb      	bpl.n	800a390 <_printf_i+0xb8>
 800a398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	da03      	bge.n	800a3a8 <_printf_i+0xd0>
 800a3a0:	232d      	movs	r3, #45	@ 0x2d
 800a3a2:	426d      	negs	r5, r5
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3a8:	4859      	ldr	r0, [pc, #356]	@ (800a510 <_printf_i+0x238>)
 800a3aa:	230a      	movs	r3, #10
 800a3ac:	e011      	b.n	800a3d2 <_printf_i+0xfa>
 800a3ae:	6821      	ldr	r1, [r4, #0]
 800a3b0:	6833      	ldr	r3, [r6, #0]
 800a3b2:	0608      	lsls	r0, r1, #24
 800a3b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3b8:	d402      	bmi.n	800a3c0 <_printf_i+0xe8>
 800a3ba:	0649      	lsls	r1, r1, #25
 800a3bc:	bf48      	it	mi
 800a3be:	b2ad      	uxthmi	r5, r5
 800a3c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3c2:	4853      	ldr	r0, [pc, #332]	@ (800a510 <_printf_i+0x238>)
 800a3c4:	6033      	str	r3, [r6, #0]
 800a3c6:	bf14      	ite	ne
 800a3c8:	230a      	movne	r3, #10
 800a3ca:	2308      	moveq	r3, #8
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3d2:	6866      	ldr	r6, [r4, #4]
 800a3d4:	60a6      	str	r6, [r4, #8]
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	bfa2      	ittt	ge
 800a3da:	6821      	ldrge	r1, [r4, #0]
 800a3dc:	f021 0104 	bicge.w	r1, r1, #4
 800a3e0:	6021      	strge	r1, [r4, #0]
 800a3e2:	b90d      	cbnz	r5, 800a3e8 <_printf_i+0x110>
 800a3e4:	2e00      	cmp	r6, #0
 800a3e6:	d04b      	beq.n	800a480 <_printf_i+0x1a8>
 800a3e8:	4616      	mov	r6, r2
 800a3ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a3f2:	5dc7      	ldrb	r7, [r0, r7]
 800a3f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3f8:	462f      	mov	r7, r5
 800a3fa:	42bb      	cmp	r3, r7
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	d9f4      	bls.n	800a3ea <_printf_i+0x112>
 800a400:	2b08      	cmp	r3, #8
 800a402:	d10b      	bne.n	800a41c <_printf_i+0x144>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	07df      	lsls	r7, r3, #31
 800a408:	d508      	bpl.n	800a41c <_printf_i+0x144>
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	6861      	ldr	r1, [r4, #4]
 800a40e:	4299      	cmp	r1, r3
 800a410:	bfde      	ittt	le
 800a412:	2330      	movle	r3, #48	@ 0x30
 800a414:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a418:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a41c:	1b92      	subs	r2, r2, r6
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	f8cd a000 	str.w	sl, [sp]
 800a424:	464b      	mov	r3, r9
 800a426:	aa03      	add	r2, sp, #12
 800a428:	4621      	mov	r1, r4
 800a42a:	4640      	mov	r0, r8
 800a42c:	f7ff fee6 	bl	800a1fc <_printf_common>
 800a430:	3001      	adds	r0, #1
 800a432:	d14a      	bne.n	800a4ca <_printf_i+0x1f2>
 800a434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a438:	b004      	add	sp, #16
 800a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	f043 0320 	orr.w	r3, r3, #32
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	4833      	ldr	r0, [pc, #204]	@ (800a514 <_printf_i+0x23c>)
 800a448:	2778      	movs	r7, #120	@ 0x78
 800a44a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	6831      	ldr	r1, [r6, #0]
 800a452:	061f      	lsls	r7, r3, #24
 800a454:	f851 5b04 	ldr.w	r5, [r1], #4
 800a458:	d402      	bmi.n	800a460 <_printf_i+0x188>
 800a45a:	065f      	lsls	r7, r3, #25
 800a45c:	bf48      	it	mi
 800a45e:	b2ad      	uxthmi	r5, r5
 800a460:	6031      	str	r1, [r6, #0]
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	bf44      	itt	mi
 800a466:	f043 0320 	orrmi.w	r3, r3, #32
 800a46a:	6023      	strmi	r3, [r4, #0]
 800a46c:	b11d      	cbz	r5, 800a476 <_printf_i+0x19e>
 800a46e:	2310      	movs	r3, #16
 800a470:	e7ac      	b.n	800a3cc <_printf_i+0xf4>
 800a472:	4827      	ldr	r0, [pc, #156]	@ (800a510 <_printf_i+0x238>)
 800a474:	e7e9      	b.n	800a44a <_printf_i+0x172>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	f023 0320 	bic.w	r3, r3, #32
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	e7f6      	b.n	800a46e <_printf_i+0x196>
 800a480:	4616      	mov	r6, r2
 800a482:	e7bd      	b.n	800a400 <_printf_i+0x128>
 800a484:	6833      	ldr	r3, [r6, #0]
 800a486:	6825      	ldr	r5, [r4, #0]
 800a488:	6961      	ldr	r1, [r4, #20]
 800a48a:	1d18      	adds	r0, r3, #4
 800a48c:	6030      	str	r0, [r6, #0]
 800a48e:	062e      	lsls	r6, r5, #24
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	d501      	bpl.n	800a498 <_printf_i+0x1c0>
 800a494:	6019      	str	r1, [r3, #0]
 800a496:	e002      	b.n	800a49e <_printf_i+0x1c6>
 800a498:	0668      	lsls	r0, r5, #25
 800a49a:	d5fb      	bpl.n	800a494 <_printf_i+0x1bc>
 800a49c:	8019      	strh	r1, [r3, #0]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6123      	str	r3, [r4, #16]
 800a4a2:	4616      	mov	r6, r2
 800a4a4:	e7bc      	b.n	800a420 <_printf_i+0x148>
 800a4a6:	6833      	ldr	r3, [r6, #0]
 800a4a8:	1d1a      	adds	r2, r3, #4
 800a4aa:	6032      	str	r2, [r6, #0]
 800a4ac:	681e      	ldr	r6, [r3, #0]
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7f5 feb4 	bl	8000220 <memchr>
 800a4b8:	b108      	cbz	r0, 800a4be <_printf_i+0x1e6>
 800a4ba:	1b80      	subs	r0, r0, r6
 800a4bc:	6060      	str	r0, [r4, #4]
 800a4be:	6863      	ldr	r3, [r4, #4]
 800a4c0:	6123      	str	r3, [r4, #16]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4c8:	e7aa      	b.n	800a420 <_printf_i+0x148>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	47d0      	blx	sl
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d0ad      	beq.n	800a434 <_printf_i+0x15c>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	079b      	lsls	r3, r3, #30
 800a4dc:	d413      	bmi.n	800a506 <_printf_i+0x22e>
 800a4de:	68e0      	ldr	r0, [r4, #12]
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	4298      	cmp	r0, r3
 800a4e4:	bfb8      	it	lt
 800a4e6:	4618      	movlt	r0, r3
 800a4e8:	e7a6      	b.n	800a438 <_printf_i+0x160>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	47d0      	blx	sl
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d09d      	beq.n	800a434 <_printf_i+0x15c>
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	68e3      	ldr	r3, [r4, #12]
 800a4fc:	9903      	ldr	r1, [sp, #12]
 800a4fe:	1a5b      	subs	r3, r3, r1
 800a500:	42ab      	cmp	r3, r5
 800a502:	dcf2      	bgt.n	800a4ea <_printf_i+0x212>
 800a504:	e7eb      	b.n	800a4de <_printf_i+0x206>
 800a506:	2500      	movs	r5, #0
 800a508:	f104 0619 	add.w	r6, r4, #25
 800a50c:	e7f5      	b.n	800a4fa <_printf_i+0x222>
 800a50e:	bf00      	nop
 800a510:	0800acb9 	.word	0x0800acb9
 800a514:	0800acca 	.word	0x0800acca

0800a518 <__sflush_r>:
 800a518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a520:	0716      	lsls	r6, r2, #28
 800a522:	4605      	mov	r5, r0
 800a524:	460c      	mov	r4, r1
 800a526:	d454      	bmi.n	800a5d2 <__sflush_r+0xba>
 800a528:	684b      	ldr	r3, [r1, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dc02      	bgt.n	800a534 <__sflush_r+0x1c>
 800a52e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	dd48      	ble.n	800a5c6 <__sflush_r+0xae>
 800a534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a536:	2e00      	cmp	r6, #0
 800a538:	d045      	beq.n	800a5c6 <__sflush_r+0xae>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a540:	682f      	ldr	r7, [r5, #0]
 800a542:	6a21      	ldr	r1, [r4, #32]
 800a544:	602b      	str	r3, [r5, #0]
 800a546:	d030      	beq.n	800a5aa <__sflush_r+0x92>
 800a548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	0759      	lsls	r1, r3, #29
 800a54e:	d505      	bpl.n	800a55c <__sflush_r+0x44>
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	1ad2      	subs	r2, r2, r3
 800a554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a556:	b10b      	cbz	r3, 800a55c <__sflush_r+0x44>
 800a558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a560:	6a21      	ldr	r1, [r4, #32]
 800a562:	4628      	mov	r0, r5
 800a564:	47b0      	blx	r6
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	d106      	bne.n	800a57a <__sflush_r+0x62>
 800a56c:	6829      	ldr	r1, [r5, #0]
 800a56e:	291d      	cmp	r1, #29
 800a570:	d82b      	bhi.n	800a5ca <__sflush_r+0xb2>
 800a572:	4a2a      	ldr	r2, [pc, #168]	@ (800a61c <__sflush_r+0x104>)
 800a574:	410a      	asrs	r2, r1
 800a576:	07d6      	lsls	r6, r2, #31
 800a578:	d427      	bmi.n	800a5ca <__sflush_r+0xb2>
 800a57a:	2200      	movs	r2, #0
 800a57c:	6062      	str	r2, [r4, #4]
 800a57e:	04d9      	lsls	r1, r3, #19
 800a580:	6922      	ldr	r2, [r4, #16]
 800a582:	6022      	str	r2, [r4, #0]
 800a584:	d504      	bpl.n	800a590 <__sflush_r+0x78>
 800a586:	1c42      	adds	r2, r0, #1
 800a588:	d101      	bne.n	800a58e <__sflush_r+0x76>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b903      	cbnz	r3, 800a590 <__sflush_r+0x78>
 800a58e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a592:	602f      	str	r7, [r5, #0]
 800a594:	b1b9      	cbz	r1, 800a5c6 <__sflush_r+0xae>
 800a596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a59a:	4299      	cmp	r1, r3
 800a59c:	d002      	beq.n	800a5a4 <__sflush_r+0x8c>
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f7ff fca0 	bl	8009ee4 <_free_r>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5a8:	e00d      	b.n	800a5c6 <__sflush_r+0xae>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b0      	blx	r6
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	1c50      	adds	r0, r2, #1
 800a5b4:	d1c9      	bne.n	800a54a <__sflush_r+0x32>
 800a5b6:	682b      	ldr	r3, [r5, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0c6      	beq.n	800a54a <__sflush_r+0x32>
 800a5bc:	2b1d      	cmp	r3, #29
 800a5be:	d001      	beq.n	800a5c4 <__sflush_r+0xac>
 800a5c0:	2b16      	cmp	r3, #22
 800a5c2:	d11e      	bne.n	800a602 <__sflush_r+0xea>
 800a5c4:	602f      	str	r7, [r5, #0]
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e022      	b.n	800a610 <__sflush_r+0xf8>
 800a5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	e01b      	b.n	800a60a <__sflush_r+0xf2>
 800a5d2:	690f      	ldr	r7, [r1, #16]
 800a5d4:	2f00      	cmp	r7, #0
 800a5d6:	d0f6      	beq.n	800a5c6 <__sflush_r+0xae>
 800a5d8:	0793      	lsls	r3, r2, #30
 800a5da:	680e      	ldr	r6, [r1, #0]
 800a5dc:	bf08      	it	eq
 800a5de:	694b      	ldreq	r3, [r1, #20]
 800a5e0:	600f      	str	r7, [r1, #0]
 800a5e2:	bf18      	it	ne
 800a5e4:	2300      	movne	r3, #0
 800a5e6:	eba6 0807 	sub.w	r8, r6, r7
 800a5ea:	608b      	str	r3, [r1, #8]
 800a5ec:	f1b8 0f00 	cmp.w	r8, #0
 800a5f0:	dde9      	ble.n	800a5c6 <__sflush_r+0xae>
 800a5f2:	6a21      	ldr	r1, [r4, #32]
 800a5f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5f6:	4643      	mov	r3, r8
 800a5f8:	463a      	mov	r2, r7
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47b0      	blx	r6
 800a5fe:	2800      	cmp	r0, #0
 800a600:	dc08      	bgt.n	800a614 <__sflush_r+0xfc>
 800a602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a614:	4407      	add	r7, r0
 800a616:	eba8 0800 	sub.w	r8, r8, r0
 800a61a:	e7e7      	b.n	800a5ec <__sflush_r+0xd4>
 800a61c:	dfbffffe 	.word	0xdfbffffe

0800a620 <_fflush_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	690b      	ldr	r3, [r1, #16]
 800a624:	4605      	mov	r5, r0
 800a626:	460c      	mov	r4, r1
 800a628:	b913      	cbnz	r3, 800a630 <_fflush_r+0x10>
 800a62a:	2500      	movs	r5, #0
 800a62c:	4628      	mov	r0, r5
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	b118      	cbz	r0, 800a63a <_fflush_r+0x1a>
 800a632:	6a03      	ldr	r3, [r0, #32]
 800a634:	b90b      	cbnz	r3, 800a63a <_fflush_r+0x1a>
 800a636:	f7ff f9e5 	bl	8009a04 <__sinit>
 800a63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0f3      	beq.n	800a62a <_fflush_r+0xa>
 800a642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a644:	07d0      	lsls	r0, r2, #31
 800a646:	d404      	bmi.n	800a652 <_fflush_r+0x32>
 800a648:	0599      	lsls	r1, r3, #22
 800a64a:	d402      	bmi.n	800a652 <_fflush_r+0x32>
 800a64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a64e:	f7ff fc46 	bl	8009ede <__retarget_lock_acquire_recursive>
 800a652:	4628      	mov	r0, r5
 800a654:	4621      	mov	r1, r4
 800a656:	f7ff ff5f 	bl	800a518 <__sflush_r>
 800a65a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a65c:	07da      	lsls	r2, r3, #31
 800a65e:	4605      	mov	r5, r0
 800a660:	d4e4      	bmi.n	800a62c <_fflush_r+0xc>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	059b      	lsls	r3, r3, #22
 800a666:	d4e1      	bmi.n	800a62c <_fflush_r+0xc>
 800a668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a66a:	f7ff fc39 	bl	8009ee0 <__retarget_lock_release_recursive>
 800a66e:	e7dd      	b.n	800a62c <_fflush_r+0xc>

0800a670 <__swhatbuf_r>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a678:	2900      	cmp	r1, #0
 800a67a:	b096      	sub	sp, #88	@ 0x58
 800a67c:	4615      	mov	r5, r2
 800a67e:	461e      	mov	r6, r3
 800a680:	da0d      	bge.n	800a69e <__swhatbuf_r+0x2e>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a688:	f04f 0100 	mov.w	r1, #0
 800a68c:	bf14      	ite	ne
 800a68e:	2340      	movne	r3, #64	@ 0x40
 800a690:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a694:	2000      	movs	r0, #0
 800a696:	6031      	str	r1, [r6, #0]
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	b016      	add	sp, #88	@ 0x58
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	466a      	mov	r2, sp
 800a6a0:	f000 f87c 	bl	800a79c <_fstat_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	dbec      	blt.n	800a682 <__swhatbuf_r+0x12>
 800a6a8:	9901      	ldr	r1, [sp, #4]
 800a6aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6b2:	4259      	negs	r1, r3
 800a6b4:	4159      	adcs	r1, r3
 800a6b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ba:	e7eb      	b.n	800a694 <__swhatbuf_r+0x24>

0800a6bc <__smakebuf_r>:
 800a6bc:	898b      	ldrh	r3, [r1, #12]
 800a6be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6c0:	079d      	lsls	r5, r3, #30
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	d507      	bpl.n	800a6d8 <__smakebuf_r+0x1c>
 800a6c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	6163      	str	r3, [r4, #20]
 800a6d4:	b003      	add	sp, #12
 800a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d8:	ab01      	add	r3, sp, #4
 800a6da:	466a      	mov	r2, sp
 800a6dc:	f7ff ffc8 	bl	800a670 <__swhatbuf_r>
 800a6e0:	9f00      	ldr	r7, [sp, #0]
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7ff f874 	bl	80097d4 <_malloc_r>
 800a6ec:	b948      	cbnz	r0, 800a702 <__smakebuf_r+0x46>
 800a6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f2:	059a      	lsls	r2, r3, #22
 800a6f4:	d4ee      	bmi.n	800a6d4 <__smakebuf_r+0x18>
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	f043 0302 	orr.w	r3, r3, #2
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	e7e2      	b.n	800a6c8 <__smakebuf_r+0xc>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	6020      	str	r0, [r4, #0]
 800a706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a712:	b15b      	cbz	r3, 800a72c <__smakebuf_r+0x70>
 800a714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f851 	bl	800a7c0 <_isatty_r>
 800a71e:	b128      	cbz	r0, 800a72c <__smakebuf_r+0x70>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	431d      	orrs	r5, r3
 800a730:	81a5      	strh	r5, [r4, #12]
 800a732:	e7cf      	b.n	800a6d4 <__smakebuf_r+0x18>

0800a734 <_putc_r>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460d      	mov	r5, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	4606      	mov	r6, r0
 800a73c:	b118      	cbz	r0, 800a746 <_putc_r+0x12>
 800a73e:	6a03      	ldr	r3, [r0, #32]
 800a740:	b90b      	cbnz	r3, 800a746 <_putc_r+0x12>
 800a742:	f7ff f95f 	bl	8009a04 <__sinit>
 800a746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a748:	07d8      	lsls	r0, r3, #31
 800a74a:	d405      	bmi.n	800a758 <_putc_r+0x24>
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	0599      	lsls	r1, r3, #22
 800a750:	d402      	bmi.n	800a758 <_putc_r+0x24>
 800a752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a754:	f7ff fbc3 	bl	8009ede <__retarget_lock_acquire_recursive>
 800a758:	68a3      	ldr	r3, [r4, #8]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	60a3      	str	r3, [r4, #8]
 800a760:	da05      	bge.n	800a76e <_putc_r+0x3a>
 800a762:	69a2      	ldr	r2, [r4, #24]
 800a764:	4293      	cmp	r3, r2
 800a766:	db12      	blt.n	800a78e <_putc_r+0x5a>
 800a768:	b2eb      	uxtb	r3, r5
 800a76a:	2b0a      	cmp	r3, #10
 800a76c:	d00f      	beq.n	800a78e <_putc_r+0x5a>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	6022      	str	r2, [r4, #0]
 800a774:	701d      	strb	r5, [r3, #0]
 800a776:	b2ed      	uxtb	r5, r5
 800a778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a77a:	07da      	lsls	r2, r3, #31
 800a77c:	d405      	bmi.n	800a78a <_putc_r+0x56>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d402      	bmi.n	800a78a <_putc_r+0x56>
 800a784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a786:	f7ff fbab 	bl	8009ee0 <__retarget_lock_release_recursive>
 800a78a:	4628      	mov	r0, r5
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	4629      	mov	r1, r5
 800a790:	4622      	mov	r2, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff fa27 	bl	8009be6 <__swbuf_r>
 800a798:	4605      	mov	r5, r0
 800a79a:	e7ed      	b.n	800a778 <_putc_r+0x44>

0800a79c <_fstat_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	@ (800a7bc <_fstat_r+0x20>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7fa fdd3 	bl	8005354 <_fstat>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_fstat_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_fstat_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000818 	.word	0x20000818

0800a7c0 <_isatty_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	@ (800a7dc <_isatty_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7fa fdd2 	bl	8005374 <_isatty>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_isatty_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_isatty_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20000818 	.word	0x20000818

0800a7e0 <_init>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr

0800a7ec <_fini>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	bf00      	nop
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr
