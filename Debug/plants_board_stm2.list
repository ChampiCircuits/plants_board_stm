
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009810  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  080099f0  080099f0  0000a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d4c  08009d4c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009d4c  08009d4c  0000ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d54  08009d54  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009d5c  08009d5c  0000ad5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009d64  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000068  08009dcc  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009dcc  0000b4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026214  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b48  00000000  00000000  000312ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  00034df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e5  00000000  00000000  00036b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002483c  00000000  00000000  00038255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d432  00000000  00000000  0005ca91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df81a  00000000  00000000  00079ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001596dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008da4  00000000  00000000  00159720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001624c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080099d8 	.word	0x080099d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080099d8 	.word	0x080099d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>
#include <cstdio>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	601a      	str	r2, [r3, #0]
{
}
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	1cf9      	adds	r1, r7, #3
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f006 ff40 	bl	8007a84 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f107 010f 	add.w	r1, r7, #15
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f006 ffc6 	bl	8007ba0 <HAL_UART_Receive>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000c24:	bf00      	nop
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f107 010f 	add.w	r1, r7, #15
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2201      	movs	r2, #1
 8000c32:	f006 ffb5 	bl	8007ba0 <HAL_UART_Receive>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1ef      	bne.n	8000c26 <_ZN7SCServo12fflushRevBufEv+0xa>
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000c60:	2307      	movs	r3, #7
 8000c62:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	121b      	asrs	r3, r3, #8
 8000c68:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	121b      	asrs	r3, r3, #8
 8000c72:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff ffcf 	bl	8000c1c <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000c7e:	21ff      	movs	r1, #255	@ 0xff
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff ffb2 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000c86:	21ff      	movs	r1, #255	@ 0xff
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff ffae 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	4619      	mov	r1, r3
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff ffa9 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff ffa3 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff ff9f 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 8000cac:	212a      	movs	r1, #42	@ 0x2a
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff ff9b 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff ff96 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(posH);
 8000cbe:	7cbb      	ldrb	r3, [r7, #18]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff ff91 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(velL);
 8000cc8:	7c7b      	ldrb	r3, [r7, #17]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff ff8c 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(velH);
 8000cd2:	7c3b      	ldrb	r3, [r7, #16]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff ff87 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	7cfb      	ldrb	r3, [r7, #19]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	7cbb      	ldrb	r3, [r7, #18]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	7c7b      	ldrb	r3, [r7, #17]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	7c3b      	ldrb	r3, [r7, #16]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4619      	mov	r1, r3
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ff6e 	bl	8000bea <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	2b10      	cmp	r3, #16
 8000d12:	d00a      	beq.n	8000d2a <_ZN7SCServo8WritePosEhiih+0xda>
 8000d14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d106      	bne.n	8000d2a <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2106      	movs	r1, #6
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f807 	bl	8000d34 <_ZN7SCServo7ReadBufEtPh>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e000      	b.n	8000d2c <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	897a      	ldrh	r2, [r7, #10]
 8000d48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	f006 ff27 	bl	8007ba0 <HAL_UART_Receive>
 8000d52:	4603      	mov	r3, r0
 8000d54:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 8000d5c:	897b      	ldrh	r3, [r7, #10]
 8000d5e:	e001      	b.n	8000d64 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN7SCServo7ReadPosEh>:

int SCServo::ReadPos(u8 ID)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
    u8 buf[8] = {0};
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
    int size;
    int pos=0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff49 	bl	8000c1c <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff2c 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8000d92:	21ff      	movs	r1, #255	@ 0xff
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff28 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff23 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(4);
 8000da4:	2104      	movs	r1, #4
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff1f 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(INST_READ);
 8000dac:	2102      	movs	r1, #2
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff1b 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(P_PRESENT_POSITION_L);
 8000db4:	2138      	movs	r1, #56	@ 0x38
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff17 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf(2);
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff13 	bl	8000bea <_ZN7SCServo6PrintfEh>
    Printf((~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2))&0xFF);
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000dca:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000dce:	33bf      	adds	r3, #191	@ 0xbf
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff08 	bl	8000bea <_ZN7SCServo6PrintfEh>
    size = ReadBuf(8, buf);
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	461a      	mov	r2, r3
 8000de0:	2108      	movs	r1, #8
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa6 	bl	8000d34 <_ZN7SCServo7ReadBufEtPh>
 8000de8:	6138      	str	r0, [r7, #16]
    if(size<8)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	dc02      	bgt.n	8000df6 <_ZN7SCServo7ReadPosEh+0x8a>
        return -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df4:	e00a      	b.n	8000e0c <_ZN7SCServo7ReadPosEh+0xa0>
    pos = buf[5];
 8000df6:	7b7b      	ldrb	r3, [r7, #13]
 8000df8:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	461a      	mov	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]
    return pos;
 8000e0a:	697b      	ldr	r3, [r7, #20]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	4613      	mov	r3, r2
 8000e22:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2101      	movs	r1, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fa24 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	f240 110f 	movw	r1, #271	@ 0x10f
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 f99f 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 8000e96:	f107 0209 	add.w	r2, r7, #9
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	21e5      	movs	r1, #229	@ 0xe5
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 f9bc 	bl	800421c <_Z15VL53L4CD_RdBytettPh>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 8000eae:	7a7b      	ldrb	r3, [r7, #9]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d102      	bne.n	8000eba <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	737b      	strb	r3, [r7, #13]
 8000eb8:	e00b      	b.n	8000ed2 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 8000eba:	897b      	ldrh	r3, [r7, #10]
 8000ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ec0:	d203      	bcs.n	8000eca <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 8000ec2:	897b      	ldrh	r3, [r7, #10]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	e003      	b.n	8000ed2 <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8000ece:	23ff      	movs	r3, #255	@ 0xff
 8000ed0:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fa5c 	bl	8004394 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d0d9      	beq.n	8000e96 <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8000ee2:	232d      	movs	r3, #45	@ 0x2d
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	e011      	b.n	8000f0c <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 8000eec:	7bbb      	ldrb	r3, [r7, #14]
 8000eee:	3b2d      	subs	r3, #45	@ 0x2d
 8000ef0:	4a44      	ldr	r2, [pc, #272]	@ (8001004 <_Z19VL53L4CD_SensorInitt+0x184>)
 8000ef2:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f9c2 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	73bb      	strb	r3, [r7, #14]
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	2b87      	cmp	r3, #135	@ 0x87
 8000f10:	d9ea      	bls.n	8000ee8 <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	2240      	movs	r2, #64	@ 0x40
 8000f16:	2187      	movs	r1, #135	@ 0x87
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f9b1 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8000f30:	f107 0209 	add.w	r2, r7, #9
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f8c5 	bl	80010c8 <_Z26VL53L4CD_CheckForDataReadytPh>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8000f48:	7a7b      	ldrb	r3, [r7, #9]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	737b      	strb	r3, [r7, #13]
 8000f52:	e00b      	b.n	8000f6c <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f5a:	d203      	bcs.n	8000f64 <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 8000f5c:	897b      	ldrh	r3, [r7, #10]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	817b      	strh	r3, [r7, #10]
 8000f62:	e003      	b.n	8000f6c <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8000f68:	23ff      	movs	r3, #255	@ 0xff
 8000f6a:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fa0f 	bl	8004394 <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d0d9      	beq.n	8000f30 <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f842 	bl	8001008 <_Z23VL53L4CD_ClearInterruptt>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f882 	bl	800109a <_Z20VL53L4CD_StopRangingt>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	2209      	movs	r2, #9
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 f96a 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210b      	movs	r1, #11
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 f95f 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000fd2:	2124      	movs	r1, #36	@ 0x24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 f97b 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2132      	movs	r1, #50	@ 0x32
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f8b0 	bl	8001150 <_Z23VL53L4CD_SetRangeTimingtmm>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	73fb      	strb	r3, [r7, #15]

	return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08009c7c 	.word	0x08009c7c

08001008 <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2201      	movs	r2, #1
 800101a:	2186      	movs	r1, #134	@ 0x86
 800101c:	4618      	mov	r0, r3
 800101e:	f003 f92f 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	4313      	orrs	r3, r2
 800102a:	73fb      	strb	r3, [r7, #15]
	return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8001044:	f107 0208 	add.w	r2, r7, #8
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	216c      	movs	r1, #108	@ 0x6c
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f86f 	bl	8004130 <_Z16VL53L4CD_RdDWordttPm>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4313      	orrs	r3, r2
 800105a:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10b      	bne.n	800107a <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2221      	movs	r2, #33	@ 0x21
 8001066:	2187      	movs	r1, #135	@ 0x87
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f909 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4313      	orrs	r3, r2
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e00a      	b.n	8001090 <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	2240      	movs	r2, #64	@ 0x40
 800107e:	2187      	movs	r1, #135	@ 0x87
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f8fd 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4313      	orrs	r3, r2
 800108e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2200      	movs	r2, #0
 80010ac:	2187      	movs	r1, #135	@ 0x87
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f8e6 	bl	8004280 <_Z15VL53L4CD_WrBytetth>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	73fb      	strb	r3, [r7, #15]
	return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80010d8:	f107 020d 	add.w	r2, r7, #13
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	2130      	movs	r1, #48	@ 0x30
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 f89b 	bl	800421c <_Z15VL53L4CD_RdBytettPh>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8001112:	f107 020d 	add.w	r2, r7, #13
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2131      	movs	r1, #49	@ 0x31
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f87e 	bl	800421c <_Z15VL53L4CD_RdBytettPh>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	4313      	orrs	r3, r2
 8001128:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	429a      	cmp	r2, r3
 8001134:	d103      	bne.n	800113e <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e002      	b.n	8001144 <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001144:	7bbb      	ldrb	r3, [r7, #14]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 800116c:	4b84      	ldr	r3, [pc, #528]	@ (8001380 <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 800116e:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	2106      	movs	r1, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f815 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001186:	4313      	orrs	r3, r2
 8001188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 800118c:	8abb      	ldrh	r3, [r7, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d012      	beq.n	80011b8 <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011a6:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	099b      	lsrs	r3, r3, #6
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b6:	e005      	b.n	80011c4 <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011bc:	f063 0301 	orn	r3, r3, #1
 80011c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	d906      	bls.n	80011d8 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80011ce:	d803      	bhi.n	80011d8 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 80011d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 80011d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011dc:	f063 0301 	orn	r3, r3, #1
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011e4:	e05e      	b.n	80012a4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d111      	bne.n	8001210 <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	2200      	movs	r2, #0
 80011f0:	216c      	movs	r1, #108	@ 0x6c
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f89a 	bl	800432c <_Z16VL53L4CD_WrDWordttm>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001200:	4313      	orrs	r3, r2
 8001202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	e049      	b.n	80012a4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	429a      	cmp	r2, r3
 8001216:	d93f      	bls.n	8001298 <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8001218:	f107 0216 	add.w	r2, r7, #22
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	21de      	movs	r1, #222	@ 0xde
 8001220:	4618      	mov	r0, r3
 8001222:	f002 ffc1 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122e:	4313      	orrs	r3, r2
 8001230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800123a:	b29b      	uxth	r3, r3
 800123c:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001248:	edd7 7a07 	vldr	s15, [r7, #28]
 800124c:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8001262:	edd7 7a07 	vldr	s15, [r7, #28]
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	ee17 2a90 	vmov	r2, s15
 8001270:	216c      	movs	r1, #108	@ 0x6c
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f85a 	bl	800432c <_Z16VL53L4CD_WrDWordttm>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001280:	4313      	orrs	r3, r2
 8001282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 800128c:	3b0c      	subs	r3, #12
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e005      	b.n	80012a4 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129c:	f063 0301 	orn	r3, r3, #1
 80012a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 80012a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80012aa:	d063      	beq.n	8001374 <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09da      	lsrs	r2, r3, #7
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	441a      	add	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80012d0:	e005      	b.n	80012de <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 80012d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012da:	3301      	adds	r3, #1
 80012dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d8f6      	bhi.n	80012d2 <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 80012e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 80012f2:	4413      	add	r3, r2
 80012f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 80012f6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	215e      	movs	r1, #94	@ 0x5e
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 ffe7 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130a:	4313      	orrs	r3, r2
 800130c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8001314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	09da      	lsrs	r2, r3, #7
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	441a      	add	r2, r3
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001334:	e005      	b.n	8001342 <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 800133c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800133e:	3301      	adds	r3, #1
 8001340:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2bff      	cmp	r3, #255	@ 0xff
 8001346:	d8f6      	bhi.n	8001336 <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001348:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001356:	4413      	add	r3, r2
 8001358:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 800135a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	2161      	movs	r1, #97	@ 0x61
 8001360:	4618      	mov	r0, r3
 8001362:	f002 ffb5 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136e:	4313      	orrs	r3, r2
 8001370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 8001374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001378:	4618      	mov	r0, r3
 800137a:	3730      	adds	r7, #48	@ 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	3f870a3d 	.word	0x3f870a3d

08001384 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8001396:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 8001398:	f107 0408 	add.w	r4, r7, #8
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013a6:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 80013aa:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	2189      	movs	r1, #137	@ 0x89
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 ff32 	bl	800421c <_Z15VL53L4CD_RdBytettPh>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013c0:	4313      	orrs	r3, r2
 80013c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 80013c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 80013d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013d8:	2b17      	cmp	r3, #23
 80013da:	d807      	bhi.n	80013ec <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 80013dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013e0:	3328      	adds	r3, #40	@ 0x28
 80013e2:	443b      	add	r3, r7
 80013e4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80013e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 80013ec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 80013f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	218c      	movs	r1, #140	@ 0x8c
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fed3 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800140a:	4313      	orrs	r3, r2
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8001410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29a      	uxth	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 800141a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	218e      	movs	r1, #142	@ 0x8e
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fec0 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001430:	4313      	orrs	r3, r2
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8001436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	b29a      	uxth	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8001440:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2190      	movs	r1, #144	@ 0x90
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fead 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001456:	4313      	orrs	r3, r2
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 800145c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	b29a      	uxth	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8001466:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2192      	movs	r1, #146	@ 0x92
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fe9a 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800147c:	4313      	orrs	r3, r2
 800147e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8001482:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	b29a      	uxth	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 800148c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2196      	movs	r1, #150	@ 0x96
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fe87 	bl	80041a8 <_Z15VL53L4CD_RdWordttPt>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014a2:	4313      	orrs	r3, r2
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 80014a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	899b      	ldrh	r3, [r3, #12]
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	80da      	strh	r2, [r3, #6]

	return status;
 80014d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop
 80014e0:	080099f0 	.word	0x080099f0

080014e4 <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 80014fe:	89ba      	ldrh	r2, [r7, #12]
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	211e      	movs	r1, #30
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fee3 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4313      	orrs	r3, r2
 8001512:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	2200      	movs	r2, #0
 8001518:	2120      	movs	r1, #32
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fed8 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4313      	orrs	r3, r2
 8001528:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	2200      	movs	r2, #0
 800152e:	2122      	movs	r1, #34	@ 0x22
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fecd 	bl	80042d0 <_Z15VL53L4CD_WrWordttt>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4313      	orrs	r3, r2
 800153e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2201      	movs	r2, #1
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	761a      	strb	r2, [r3, #24]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001576:	621a      	str	r2, [r3, #32]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	220a      	movs	r2, #10
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	631a      	str	r2, [r3, #48]	@ 0x30
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001596:	639a      	str	r2, [r3, #56]	@ 0x38
    this->gpio_port_step = gpio_port_step;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8bba      	ldrh	r2, [r7, #28]
 80015ae:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f003 feb3 	bl	8005328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 80015c2:	8bbb      	ldrh	r3, [r7, #28]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f003 fead 	bl	8005328 <HAL_GPIO_WritePin>

  }
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN7Stepper9set_speedEm>:

  void set_speed(unsigned long speed) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    this->speed = speed;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	621a      	str	r2, [r3, #32]
    time_step = 10000000 / speed;
 80015e8:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_ZN7Stepper9set_speedEm+0x28>)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	00989680 	.word	0x00989680

08001604 <_ZN7Stepper8set_goalEi>:

  void set_goal(int goal) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
    this->goal = goal;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	dd01      	ble.n	8001628 <_ZN7Stepper8set_goalEi+0x24>
 8001624:	2201      	movs	r2, #1
 8001626:	e001      	b.n	800162c <_ZN7Stepper8set_goalEi+0x28>
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001634:	4798      	blx	r3
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8999      	ldrh	r1, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	2b01      	cmp	r3, #1
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	f003 fe64 	bl	8005328 <HAL_GPIO_WritePin>
  }
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	611a      	str	r2, [r3, #16]
  }
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e1b      	ldrb	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d061      	beq.n	8001758 <_ZN7Stepper9spin_onceEv+0xd4>
      return;
    }

    compute_time_step();
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f877 	bl	8001788 <_ZN7Stepper17compute_time_stepEv>

    if (state.state == State::HIGH) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7e1b      	ldrb	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d11b      	bne.n	80016da <_ZN7Stepper9spin_onceEv+0x56>
      if (get_time_us() - time_start_high > time_high) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a6:	4798      	blx	r3
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	bf8c      	ite	hi
 80016b8:	2301      	movhi	r3, #1
 80016ba:	2300      	movls	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d03d      	beq.n	800173e <_ZN7Stepper9spin_onceEv+0xba>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	f003 fe2b 	bl	8005328 <HAL_GPIO_WritePin>
        state.state = State::LOW;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	761a      	strb	r2, [r3, #24]
 80016d8:	e031      	b.n	800173e <_ZN7Stepper9spin_onceEv+0xba>
      }
    } else if (state.state == State::LOW) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7e1b      	ldrb	r3, [r3, #24]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d12d      	bne.n	800173e <_ZN7Stepper9spin_onceEv+0xba>
      if (get_time_us() - time_start_step > time_step) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e6:	4798      	blx	r3
 80016e8:	4602      	mov	r2, r0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	429a      	cmp	r2, r3
 80016f6:	bf8c      	ite	hi
 80016f8:	2301      	movhi	r3, #1
 80016fa:	2300      	movls	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01d      	beq.n	800173e <_ZN7Stepper9spin_onceEv+0xba>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	889b      	ldrh	r3, [r3, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f003 fe0b 	bl	8005328 <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171c:	4798      	blx	r3
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001728:	4798      	blx	r3
 800172a:	4602      	mov	r2, r0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	429a      	cmp	r2, r3
 8001748:	d107      	bne.n	800175a <_ZN7Stepper9spin_onceEv+0xd6>
      state.state = State::STOPPED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	761a      	strb	r2, [r3, #24]
      current_speed = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	@ 0x34
 8001756:	e000      	b.n	800175a <_ZN7Stepper9spin_onceEv+0xd6>
      return;
 8001758:	bf00      	nop
    }
  }
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
  }
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	0000      	movs	r0, r0
 8001784:	0000      	movs	r0, r0
	...

08001788 <_ZN7Stepper17compute_time_stepEv>:

  void compute_time_step() {
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

    // We compute the new speed every 5ms (return if we are not there yet)
    static unsigned long last_time = 0;
    if (get_time_us() - last_time < 5000 && last_time != 0) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	4798      	blx	r3
 8001796:	4602      	mov	r2, r0
 8001798:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d805      	bhi.n	80017b2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 80017a6:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <_ZN7Stepper17compute_time_stepEv+0x2c>
 80017b2:	2300      	movs	r3, #0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d152      	bne.n	800185e <_ZN7Stepper17compute_time_stepEv+0xd6>
      return;
    }
    last_time = get_time_us();
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017bc:	4798      	blx	r3
 80017be:	4603      	mov	r3, r0
 80017c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 80017c2:	6013      	str	r3, [r2, #0]


    if (current_speed == speed) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d047      	beq.n	8001862 <_ZN7Stepper17compute_time_stepEv+0xda>
      return;
    }

    if (current_speed < speed) {
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d222      	bcs.n	8001826 <_ZN7Stepper17compute_time_stepEv+0x9e>
      current_speed += (long) (((double) max_acceleration) * 0.005); // 5ms (0.005s
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ffe5 	bl	80007b8 <__aeabi_i2d>
 80017ee:	a320      	add	r3, pc, #128	@ (adr r3, 8001870 <_ZN7Stepper17compute_time_stepEv+0xe8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fd64 	bl	80002c0 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f844 	bl	800088c <__aeabi_d2iz>
 8001804:	4603      	mov	r3, r0
 8001806:	18e2      	adds	r2, r4, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed > speed) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	429a      	cmp	r2, r3
 8001818:	d918      	bls.n	800184c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34
 8001824:	e012      	b.n	800184c <_ZN7Stepper17compute_time_stepEv+0xc4>
      }
    } else {
      current_speed -= max_acceleration;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed < speed) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	429a      	cmp	r2, r3
 8001840:	d204      	bcs.n	800184c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	635a      	str	r2, [r3, #52]	@ 0x34
      }
    }

    time_step = 10000000 / current_speed;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <_ZN7Stepper17compute_time_stepEv+0xf4>)
 8001852:	fb92 f3f3 	sdiv	r3, r2, r3
 8001856:	461a      	mov	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24
 800185c:	e002      	b.n	8001864 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 8001862:	bf00      	nop
  }
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	47ae147b 	.word	0x47ae147b
 8001874:	3f747ae1 	.word	0x3f747ae1
 8001878:	20000084 	.word	0x20000084
 800187c:	00989680 	.word	0x00989680

08001880 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>:
#include "VL53L4CD_api.h"


class LaserSensor {
public:
	LaserSensor(GPIO_TypeDef *port, uint16_t pin, Dev_t address, int16_t offset) : pin(pin), port(port), address(address), offset(offset)
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	460b      	mov	r3, r1
 8001890:	80fb      	strh	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	80bb      	strh	r3, [r7, #4]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	88fa      	ldrh	r2, [r7, #6]
 800189a:	801a      	strh	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	811a      	strh	r2, [r3, #8]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	330a      	adds	r3, #10
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8b3a      	ldrh	r2, [r7, #24]
 80018ba:	835a      	strh	r2, [r3, #26]
	{

	}
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZN11LaserSensorD1Ev>:

	// destructor
	~LaserSensor()
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_StopRanging(address);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	891b      	ldrh	r3, [r3, #8]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fbdf 	bl	800109a <_Z20VL53L4CD_StopRangingt>
	}
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <_ZN11LaserSensor5setupEv>:

	int setup()
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	{
		uint16_t sensor_id;
		uint8_t status;
		printf("SENSOR_PIN: %d\n", pin);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4845      	ldr	r0, [pc, #276]	@ (8001a0c <_ZN11LaserSensor5setupEv+0x124>)
 80018f8:	f007 f9f2 	bl	8008ce0 <iprintf>

		HAL_Delay(5);
 80018fc:	2005      	movs	r0, #5
 80018fe:	f003 f897 	bl	8004a30 <HAL_Delay>
		// set the pin to high to enable the sensor
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6858      	ldr	r0, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	4619      	mov	r1, r3
 800190e:	f003 fd0b 	bl	8005328 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001912:	2005      	movs	r0, #5
 8001914:	f003 f88c 	bl	8004a30 <HAL_Delay>

		// set I2C address (other unset addresses XSHUT have to be pull to low before)
		status = VL53L4CD_SetI2CAddress(0x52, address); // 0x52 is the default address
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	891b      	ldrh	r3, [r3, #8]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	2052      	movs	r0, #82	@ 0x52
 8001922:	f7ff fa77 	bl	8000e14 <_Z22VL53L4CD_SetI2CAddressth>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
		if (status)
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <_ZN11LaserSensor5setupEv+0x56>
		{
			printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	4619      	mov	r1, r3
 8001934:	4836      	ldr	r0, [pc, #216]	@ (8001a10 <_ZN11LaserSensor5setupEv+0x128>)
 8001936:	f007 f9d3 	bl	8008ce0 <iprintf>
			return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	e061      	b.n	8001a02 <_ZN11LaserSensor5setupEv+0x11a>
		}

		/* (Optional) Check if there is a VL53L4CD sensor connected */
		printf("Checking for laser sensor at address %x\n", address);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	891b      	ldrh	r3, [r3, #8]
 8001942:	4619      	mov	r1, r3
 8001944:	4833      	ldr	r0, [pc, #204]	@ (8001a14 <_ZN11LaserSensor5setupEv+0x12c>)
 8001946:	f007 f9cb 	bl	8008ce0 <iprintf>
		status = VL53L4CD_GetSensorId(address, &sensor_id);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	891b      	ldrh	r3, [r3, #8]
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa79 	bl	8000e4c <_Z20VL53L4CD_GetSensorIdtPt>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]

		if (status || (sensor_id != 0xEBAA))
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <_ZN11LaserSensor5setupEv+0x86>
 8001964:	89bb      	ldrh	r3, [r7, #12]
 8001966:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <_ZN11LaserSensor5setupEv+0x90>
		{
			printf("VL53L4CD not detected at requested address\n");
 800196e:	482a      	ldr	r0, [pc, #168]	@ (8001a18 <_ZN11LaserSensor5setupEv+0x130>)
 8001970:	f007 fa1e 	bl	8008db0 <puts>
			return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	e044      	b.n	8001a02 <_ZN11LaserSensor5setupEv+0x11a>
		}
		printf("VL53L4CD detected at address %x\n", address);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	891b      	ldrh	r3, [r3, #8]
 800197c:	4619      	mov	r1, r3
 800197e:	4827      	ldr	r0, [pc, #156]	@ (8001a1c <_ZN11LaserSensor5setupEv+0x134>)
 8001980:	f007 f9ae 	bl	8008ce0 <iprintf>

		/* (Mandatory) Init VL53L4CD sensor */
		printf("Initializing laser sensor\n");
 8001984:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <_ZN11LaserSensor5setupEv+0x138>)
 8001986:	f007 fa13 	bl	8008db0 <puts>
		status = VL53L4CD_SensorInit(address);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	891b      	ldrh	r3, [r3, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa76 	bl	8000e80 <_Z19VL53L4CD_SensorInitt>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
		if (status)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <_ZN11LaserSensor5setupEv+0xc0>
		{
			printf("VL53L4CD ULD Loading failed\n");
 800199e:	4821      	ldr	r0, [pc, #132]	@ (8001a24 <_ZN11LaserSensor5setupEv+0x13c>)
 80019a0:	f007 fa06 	bl	8008db0 <puts>
			return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	e02c      	b.n	8001a02 <_ZN11LaserSensor5setupEv+0x11a>
		}

		// set the offset
		status = VL53L4CD_SetOffset(address, offset);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	891a      	ldrh	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f7ff fd95 	bl	80014e4 <_Z18VL53L4CD_SetOffsetts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
		if (status)
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <_ZN11LaserSensor5setupEv+0xea>
		{
			printf("VL53L4CD_SetOffset failed with status %u\n", status);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <_ZN11LaserSensor5setupEv+0x140>)
 80019ca:	f007 f989 	bl	8008ce0 <iprintf>
			return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	e017      	b.n	8001a02 <_ZN11LaserSensor5setupEv+0x11a>
		}

		status = VL53L4CD_StartRanging(address);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	891b      	ldrh	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb2d 	bl	8001036 <_Z21VL53L4CD_StartRangingt>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
		if (status)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <_ZN11LaserSensor5setupEv+0x10c>
		{
			printf("VL53L4CD_StartRanging failed with status %u\n", status);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4810      	ldr	r0, [pc, #64]	@ (8001a2c <_ZN11LaserSensor5setupEv+0x144>)
 80019ec:	f007 f978 	bl	8008ce0 <iprintf>
			return status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e006      	b.n	8001a02 <_ZN11LaserSensor5setupEv+0x11a>
		}

		printf("VL53L4CD ULD ready at address %x ready\n", address);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	891b      	ldrh	r3, [r3, #8]
 80019f8:	4619      	mov	r1, r3
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <_ZN11LaserSensor5setupEv+0x148>)
 80019fc:	f007 f970 	bl	8008ce0 <iprintf>
		return 0;
 8001a00:	2300      	movs	r3, #0
	}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08009a08 	.word	0x08009a08
 8001a10:	08009a18 	.word	0x08009a18
 8001a14:	08009a48 	.word	0x08009a48
 8001a18:	08009a74 	.word	0x08009a74
 8001a1c:	08009aa0 	.word	0x08009aa0
 8001a20:	08009ac4 	.word	0x08009ac4
 8001a24:	08009ae0 	.word	0x08009ae0
 8001a28:	08009afc 	.word	0x08009afc
 8001a2c:	08009b28 	.word	0x08009b28
 8001a30:	08009b58 	.word	0x08009b58

08001a34 <_ZN11LaserSensor11get_dist_mmEv>:


	int get_dist_mm()
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	{
		int status = update_distance();
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f821 	bl	8001a84 <_ZN11LaserSensor15update_distanceEv>
 8001a42:	60f8      	str	r0, [r7, #12]
		if (status)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <_ZN11LaserSensor11get_dist_mmEv+0x24>
		{
			printf("VL53L4CD_GetResult failed with status %u\n", status);
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <_ZN11LaserSensor11get_dist_mmEv+0x30>)
 8001a4e:	f007 f947 	bl	8008ce0 <iprintf>
			return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a56:	e001      	b.n	8001a5c <_ZN11LaserSensor11get_dist_mmEv+0x28>
		}
		return results.distance_mm;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	899b      	ldrh	r3, [r3, #12]
	}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	08009b80 	.word	0x08009b80

08001a68 <_ZN11LaserSensor15clear_interruptEv>:


	void clear_interrupt()
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_ClearInterrupt(address);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fac7 	bl	8001008 <_Z23VL53L4CD_ClearInterruptt>
	}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <_ZN11LaserSensor15update_distanceEv>:
	VL53L4CD_ResultsData_t results = {};
	int16_t offset;



	int update_distance()
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	{
		// We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
		static uint32_t last_read_time = 0;
		if (HAL_GetTick() - last_read_time < 5)
 8001a8c:	f002 ffc4 	bl	8004a18 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <_ZN11LaserSensor15update_distanceEv+0x64>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <_ZN11LaserSensor15update_distanceEv+0x26>
		{
			return 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e01a      	b.n	8001ae0 <_ZN11LaserSensor15update_distanceEv+0x5c>
		/* Use polling function to know when a new measurement is ready.
		 * Another way can be to wait for HW interrupt raised on PIN 7
		 * (GPIO 1) when a new measurement is ready */

		uint8_t isReady;
		uint8_t status = VL53L4CD_CheckForDataReady(address, &isReady);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	891b      	ldrh	r3, [r3, #8]
 8001aae:	f107 020e 	add.w	r2, r7, #14
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb07 	bl	80010c8 <_Z26VL53L4CD_CheckForDataReadytPh>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]

		if (isReady)
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <_ZN11LaserSensor15update_distanceEv+0x5a>
		{
			/* (Mandatory) Clear HW interrupt to restart measurements */
			VL53L4CD_ClearInterrupt(address);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	891b      	ldrh	r3, [r3, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fa9d 	bl	8001008 <_Z23VL53L4CD_ClearInterruptt>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(address, &results);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	891a      	ldrh	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	330a      	adds	r3, #10
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff fc53 	bl	8001384 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
		}

		return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000088 	.word	0x20000088

08001aec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_ZNSt14_Bit_referenceaSEb>:
    operator bool() const _GLIBCXX_NOEXCEPT
    { return !!(*_M_p & _M_mask); }

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e009      	b.n	8001b64 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
      return *this;
 8001b64:	687b      	ldr	r3, [r7, #4]
    }
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    _GLIBCXX20_CONSTEXPR
    void
    _M_bump_up()
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6051      	str	r1, [r2, #4]
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1d1a      	adds	r2, r3, #4
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	601a      	str	r2, [r3, #0]
	}
    }
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da00      	bge.n	8001bf4 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001bf2:	331f      	adds	r3, #31
 8001bf4:	115b      	asrs	r3, r3, #5
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	425a      	negs	r2, r3
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	bf58      	it	pl
 8001c0c:	4253      	negpl	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da07      	bge.n	8001c26 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3320      	adds	r3, #32
 8001c1a:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1f1a      	subs	r2, r3, #4
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]
    }
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff93 	bl	8001b72 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff82 	bl	8001b72 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff36 	bl	8001b04 <_ZNSt14_Bit_referenceC1EPmm>
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZNSt13_Bit_iteratorppEv>:

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator++()
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff74 	bl	8001b98 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001cb0:	687b      	ldr	r3, [r7, #4]
    }
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff83 	bl	8001bd4 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001cce:	687b      	ldr	r3, [r7, #4]
    }
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZStplRKSt13_Bit_iteratori>:
    operator[](difference_type __i) const
    { return *(*this + __i); }

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cec:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff ffe1 	bl	8001cba <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001cf8:	bf00      	nop
    }
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00b      	b.n	8001d2e <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	1c4b      	adds	r3, r1, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d20:	2201      	movs	r2, #1
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <_write+0x3c>)
 8001d24:	f005 feae 	bl	8007a84 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dbef      	blt.n	8001d16 <_write+0x12>
   return len;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000224 	.word	0x20000224

08001d44 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d54:	d104      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a03      	ldr	r2, [pc, #12]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d5e:	6013      	str	r3, [r2, #0]
  }
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	200002b8 	.word	0x200002b8

08001d70 <_Z11get_time_usv>:

unsigned long get_time_us() {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <_Z11get_time_usv+0x28>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_Z11get_time_usv+0x2c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <_Z11get_time_usv+0x30>)
 8001d84:	fb03 f202 	mul.w	r2, r3, r2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20000144 	.word	0x20000144
 8001d9c:	200002b8 	.word	0x200002b8
 8001da0:	000f4240 	.word	0x000f4240

08001da4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fe5b 	bl	8002a68 <_ZNSaI11LaserSensorED1Ev>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN11SystemStateC1Ev>:
  hoppers_ids[LEFT],
  hoppers_ids[RIGHT]
};


struct SystemState
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	709a      	strb	r2, [r3, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1d1c      	adds	r4, r3, #4
 8001dda:	2300      	movs	r3, #0
 8001ddc:	743b      	strb	r3, [r7, #16]
 8001dde:	2300      	movs	r3, #0
 8001de0:	747b      	strb	r3, [r7, #17]
 8001de2:	2300      	movs	r3, #0
 8001de4:	74bb      	strb	r3, [r7, #18]
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	2303      	movs	r3, #3
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fead 	bl	8002b54 <_ZNSaIbEC1Ev>
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	f107 0208 	add.w	r2, r7, #8
 8001e02:	ca06      	ldmia	r2, {r1, r2}
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 febd 	bl	8002b84 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 feac 	bl	8002b6c <_ZNSaIbED1Ev>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}
	...

08001e20 <_Z11ping_servosv>:


// ================================================ DIAGNOSTIC FUNCTIONS ===============================================

int ping_servos()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  int res = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	e021      	b.n	8001e74 <_Z11ping_servosv+0x54>
  {
    int id = servo_ids_to_check[i];
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4818      	ldr	r0, [pc, #96]	@ (8001e98 <_Z11ping_servosv+0x78>)
 8001e36:	f000 fe7d 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	607b      	str	r3, [r7, #4]
    int pos = servos.ReadPos(id);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	4815      	ldr	r0, [pc, #84]	@ (8001e9c <_Z11ping_servosv+0x7c>)
 8001e48:	f7fe ff90 	bl	8000d6c <_ZN7SCServo7ReadPosEh>
 8001e4c:	6038      	str	r0, [r7, #0]

    if(pos == -1)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e54:	d107      	bne.n	8001e66 <_Z11ping_servosv+0x46>
    {
      printf("Error reading servo %d\n", id);
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4811      	ldr	r0, [pc, #68]	@ (8001ea0 <_Z11ping_servosv+0x80>)
 8001e5a:	f006 ff41 	bl	8008ce0 <iprintf>
      res = -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e003      	b.n	8001e6e <_Z11ping_servosv+0x4e>
    }
    else
    {
      printf("Servo %d was ping successfully\n", id);
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <_Z11ping_servosv+0x84>)
 8001e6a:	f006 ff39 	bl	8008ce0 <iprintf>
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	4808      	ldr	r0, [pc, #32]	@ (8001e98 <_Z11ping_servosv+0x78>)
 8001e76:	f000 feb3 	bl	8002be0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	bf8c      	ite	hi
 8001e82:	2301      	movhi	r3, #1
 8001e84:	2300      	movls	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1d1      	bne.n	8001e30 <_Z11ping_servosv+0x10>
    }
  }
  return res;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000370 	.word	0x20000370
 8001e9c:	2000036c 	.word	0x2000036c
 8001ea0:	08009bac 	.word	0x08009bac
 8001ea4:	08009bc4 	.word	0x08009bc4

08001ea8 <_Z12setup_lasersv>:
 * @brief Setup the distance sensors
 *
 * @return int 0 if all sensors are setup correctly, otherwise the error code
 */
int setup_lasers()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <_Z12setup_lasersv+0x70>)
 8001eb4:	f003 fa38 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2120      	movs	r1, #32
 8001ebc:	4816      	ldr	r0, [pc, #88]	@ (8001f18 <_Z12setup_lasersv+0x70>)
 8001ebe:	f003 fa33 	bl	8005328 <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  int status = sensors[LEFT].setup();
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4815      	ldr	r0, [pc, #84]	@ (8001f1c <_Z12setup_lasersv+0x74>)
 8001ec6:	f000 fe9b 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd0b 	bl	80018e8 <_ZN11LaserSensor5setupEv>
 8001ed2:	6078      	str	r0, [r7, #4]

  if(status)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_Z12setup_lasersv+0x36>
  {
    return status;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e018      	b.n	8001f10 <_Z12setup_lasersv+0x68>
  }

  /* Setup the second laser sensor */
  status = sensors[RIGHT].setup();
 8001ede:	2101      	movs	r1, #1
 8001ee0:	480e      	ldr	r0, [pc, #56]	@ (8001f1c <_Z12setup_lasersv+0x74>)
 8001ee2:	f000 fe8d 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fcfd 	bl	80018e8 <_ZN11LaserSensor5setupEv>
 8001eee:	6078      	str	r0, [r7, #4]

  if(status)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_Z12setup_lasersv+0x52>
  {
    return status;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e00a      	b.n	8001f10 <_Z12setup_lasersv+0x68>
  }

  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2110      	movs	r1, #16
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <_Z12setup_lasersv+0x70>)
 8001f00:	f003 fa12 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2120      	movs	r1, #32
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <_Z12setup_lasersv+0x70>)
 8001f0a:	f003 fa0d 	bl	8005328 <HAL_GPIO_WritePin>

  return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	200002e0 	.word	0x200002e0

08001f20 <_Z29reservoir_initialize_and_testv>:


void reservoir_initialize_and_test()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
  // Set big goal. When button is pressed, reset current pos to 0 and stop the motor
  stepper_res.set_goal(-100000);
 8001f26:	4923      	ldr	r1, [pc, #140]	@ (8001fb4 <_Z29reservoir_initialize_and_testv+0x94>)
 8001f28:	4823      	ldr	r0, [pc, #140]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001f2a:	f7ff fb6b 	bl	8001604 <_ZN7Stepper8set_goalEi>

  // Turn untill the button is released
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8001f2e:	e002      	b.n	8001f36 <_Z29reservoir_initialize_and_testv+0x16>
  {
    stepper_res.spin_once();
 8001f30:	4821      	ldr	r0, [pc, #132]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001f32:	f7ff fba7 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8001f36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3e:	f003 f9db 	bl	80052f8 <HAL_GPIO_ReadPin>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ee      	bne.n	8001f30 <_Z29reservoir_initialize_and_testv+0x10>
  }

  // Debouncing: spin for 200ms
  unsigned long start = HAL_GetTick();
 8001f52:	f002 fd61 	bl	8004a18 <HAL_GetTick>
 8001f56:	6078      	str	r0, [r7, #4]
  while(HAL_GetTick() - start < 200)
 8001f58:	e002      	b.n	8001f60 <_Z29reservoir_initialize_and_testv+0x40>
  {
    stepper_res.spin_once();
 8001f5a:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001f5c:	f7ff fb92 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GetTick() - start < 200)
 8001f60:	f002 fd5a 	bl	8004a18 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f6c:	bf94      	ite	ls
 8001f6e:	2301      	movls	r3, #1
 8001f70:	2300      	movhi	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <_Z29reservoir_initialize_and_testv+0x3a>
  }

  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8001f78:	e002      	b.n	8001f80 <_Z29reservoir_initialize_and_testv+0x60>
  {
    stepper_res.spin_once();
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001f7c:	f7ff fb82 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8001f80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f88:	f003 f9b6 	bl	80052f8 <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <_Z29reservoir_initialize_and_testv+0x5a>
  }

  stepper_res.set_pos(0);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4806      	ldr	r0, [pc, #24]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001fa0:	f7ff fb62 	bl	8001668 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(0);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <_Z29reservoir_initialize_and_testv+0x98>)
 8001fa8:	f7ff fb2c 	bl	8001604 <_ZN7Stepper8set_goalEi>

}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	fffe7960 	.word	0xfffe7960
 8001fb8:	2000032c 	.word	0x2000032c

08001fbc <_Z24lift_initialize_and_testv>:

void lift_initialize_and_test()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  // Here we don't have a sensor. So we just turn the motor for a certain distance. (5 spins at 3200 steps per spin)

  stepper_lift.set_goal(-5*3200);
 8001fc0:	490e      	ldr	r1, [pc, #56]	@ (8001ffc <_Z24lift_initialize_and_testv+0x40>)
 8001fc2:	480f      	ldr	r0, [pc, #60]	@ (8002000 <_Z24lift_initialize_and_testv+0x44>)
 8001fc4:	f7ff fb1e 	bl	8001604 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 8001fc8:	e002      	b.n	8001fd0 <_Z24lift_initialize_and_testv+0x14>
  {
    stepper_lift.spin_once();
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <_Z24lift_initialize_and_testv+0x44>)
 8001fcc:	f7ff fb5a 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8001fd0:	480b      	ldr	r0, [pc, #44]	@ (8002000 <_Z24lift_initialize_and_testv+0x44>)
 8001fd2:	f7ff fbc5 	bl	8001760 <_ZN7Stepper10is_stoppedEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f3      	bne.n	8001fca <_Z24lift_initialize_and_testv+0xe>
  }
  stepper_lift.set_pos(0);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4806      	ldr	r0, [pc, #24]	@ (8002000 <_Z24lift_initialize_and_testv+0x44>)
 8001fe6:	f7ff fb3f 	bl	8001668 <_ZN7Stepper7set_posEi>

  grabber_extend();
 8001fea:	f000 f86d 	bl	80020c8 <_Z14grabber_extendv>
  grabber_retract();
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 f880 	bl	80020f4 <_Z15grabber_retractb>

  lift_go_down();
 8001ff4:	f000 f81a 	bl	800202c <_Z12lift_go_downv>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	ffffc180 	.word	0xffffc180
 8002000:	200002ec 	.word	0x200002ec

08002004 <_Z27hoppers_initialize_and_testv>:
/**
 * Close then open the hoppers
 *
 */
void hoppers_initialize_and_test()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  hopper_close(LEFT);
 8002008:	2000      	movs	r0, #0
 800200a:	f000 f88f 	bl	800212c <_Z12hopper_closei>
  hopper_close(RIGHT);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 f88c 	bl	800212c <_Z12hopper_closei>

  HAL_Delay(500); // Because hoppers functions are not blocking
 8002014:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002018:	f002 fd0a 	bl	8004a30 <HAL_Delay>

  hopper_open(LEFT);
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f8ab 	bl	8002178 <_Z11hopper_openi>
  hopper_open(RIGHT);
 8002022:	2001      	movs	r0, #1
 8002024:	f000 f8a8 	bl	8002178 <_Z11hopper_openi>
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <_Z12lift_go_downv>:


// ----------------------------------------- LIFT -----------------------------------------

void lift_go_down()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_DOWN);
 8002030:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8002034:	4809      	ldr	r0, [pc, #36]	@ (800205c <_Z12lift_go_downv+0x30>)
 8002036:	f7ff fae5 	bl	8001604 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 800203a:	e002      	b.n	8002042 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <_Z12lift_go_downv+0x30>)
 800203e:	f7ff fb21 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <_Z12lift_go_downv+0x30>)
 8002044:	f7ff fb8c 	bl	8001760 <_ZN7Stepper10is_stoppedEv>
 8002048:	4603      	mov	r3, r0
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f3      	bne.n	800203c <_Z12lift_go_downv+0x10>
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200002ec 	.word	0x200002ec

08002060 <_Z10lift_go_upv>:


void lift_go_up()
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8002064:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002068:	4809      	ldr	r0, [pc, #36]	@ (8002090 <_Z10lift_go_upv+0x30>)
 800206a:	f7ff facb 	bl	8001604 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 800206e:	e002      	b.n	8002076 <_Z10lift_go_upv+0x16>
  {
    stepper_lift.spin_once();
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <_Z10lift_go_upv+0x30>)
 8002072:	f7ff fb07 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002076:	4806      	ldr	r0, [pc, #24]	@ (8002090 <_Z10lift_go_upv+0x30>)
 8002078:	f7ff fb72 	bl	8001760 <_ZN7Stepper10is_stoppedEv>
 800207c:	4603      	mov	r3, r0
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f3      	bne.n	8002070 <_Z10lift_go_upv+0x10>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200002ec 	.word	0x200002ec

08002094 <_Z14lift_go_middlev>:


void lift_go_middle()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 8002098:	f241 3188 	movw	r1, #5000	@ 0x1388
 800209c:	4809      	ldr	r0, [pc, #36]	@ (80020c4 <_Z14lift_go_middlev+0x30>)
 800209e:	f7ff fab1 	bl	8001604 <_ZN7Stepper8set_goalEi>
  while(!stepper_lift.is_stopped())
 80020a2:	e002      	b.n	80020aa <_Z14lift_go_middlev+0x16>
  {
    stepper_lift.spin_once();
 80020a4:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <_Z14lift_go_middlev+0x30>)
 80020a6:	f7ff faed 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 80020aa:	4806      	ldr	r0, [pc, #24]	@ (80020c4 <_Z14lift_go_middlev+0x30>)
 80020ac:	f7ff fb58 	bl	8001760 <_ZN7Stepper10is_stoppedEv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f3      	bne.n	80020a4 <_Z14lift_go_middlev+0x10>
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002ec 	.word	0x200002ec

080020c8 <_Z14grabber_extendv>:

// ----------------------------------------- GRABBER -----------------------------------------

void grabber_extend()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_EXTEND, 1000);
 80020ce:	2301      	movs	r3, #1
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80020da:	2108      	movs	r1, #8
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <_Z14grabber_extendv+0x28>)
 80020de:	f7fe fdb7 	bl	8000c50 <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 80020e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e6:	f002 fca3 	bl	8004a30 <HAL_Delay>
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000036c 	.word	0x2000036c

080020f4 <_Z15grabber_retractb>:


void grabber_retract(bool block)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 500);
 80020fe:	2301      	movs	r3, #1
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002106:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800210a:	2108      	movs	r1, #8
 800210c:	4806      	ldr	r0, [pc, #24]	@ (8002128 <_Z15grabber_retractb+0x34>)
 800210e:	f7fe fd9f 	bl	8000c50 <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <_Z15grabber_retractb+0x2c>
 8002118:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800211c:	f002 fc88 	bl	8004a30 <HAL_Delay>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000036c 	.word	0x2000036c

0800212c <_Z12hopper_closei>:


// ----------------------------------------- HOPPERS -----------------------------------------

void hopper_close(int side)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b085      	sub	sp, #20
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_close[side], 500);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4619      	mov	r1, r3
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <_Z12hopper_closei+0x40>)
 800213a:	f000 fcfb 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800213e:	4603      	mov	r3, r0
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b2dc      	uxtb	r4, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4619      	mov	r1, r3
 8002148:	4809      	ldr	r0, [pc, #36]	@ (8002170 <_Z12hopper_closei+0x44>)
 800214a:	f000 fcf3 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800214e:	4603      	mov	r3, r0
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800215a:	4621      	mov	r1, r4
 800215c:	4805      	ldr	r0, [pc, #20]	@ (8002174 <_Z12hopper_closei+0x48>)
 800215e:	f7fe fd77 	bl	8000c50 <_ZN7SCServo8WritePosEhiih>
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	200002bc 	.word	0x200002bc
 8002170:	200002d4 	.word	0x200002d4
 8002174:	2000036c 	.word	0x2000036c

08002178 <_Z11hopper_openi>:


void hopper_open(int side)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b085      	sub	sp, #20
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_open[side], 500);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4619      	mov	r1, r3
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <_Z11hopper_openi+0x40>)
 8002186:	f000 fcd5 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800218a:	4603      	mov	r3, r0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b2dc      	uxtb	r4, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <_Z11hopper_openi+0x44>)
 8002196:	f000 fccd 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800219a:	4603      	mov	r3, r0
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80021a6:	4621      	mov	r1, r4
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <_Z11hopper_openi+0x48>)
 80021aa:	f7fe fd51 	bl	8000c50 <_ZN7SCServo8WritePosEhiih>
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002bc 	.word	0x200002bc
 80021bc:	200002c8 	.word	0x200002c8
 80021c0:	2000036c 	.word	0x2000036c

080021c4 <_Z16reservoir_rotatev>:


// ---------------------------------------- RESERVOIR ----------------------------------------

void reservoir_rotate()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  // Set big goal. When button is pressed, reset current pos to 0 and stop the motor
  stepper_res.set_pos(0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	4824      	ldr	r0, [pc, #144]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 80021ce:	f7ff fa4b 	bl	8001668 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(-100000);
 80021d2:	4924      	ldr	r1, [pc, #144]	@ (8002264 <_Z16reservoir_rotatev+0xa0>)
 80021d4:	4822      	ldr	r0, [pc, #136]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 80021d6:	f7ff fa15 	bl	8001604 <_ZN7Stepper8set_goalEi>

  // Turn untill the button is released
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 80021da:	e002      	b.n	80021e2 <_Z16reservoir_rotatev+0x1e>
  {
    stepper_res.spin_once();
 80021dc:	4820      	ldr	r0, [pc, #128]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 80021de:	f7ff fa51 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 80021e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ea:	f003 f885 	bl	80052f8 <HAL_GPIO_ReadPin>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ee      	bne.n	80021dc <_Z16reservoir_rotatev+0x18>
  }

  // Debouncing: spin for 200ms
  unsigned long start = HAL_GetTick();
 80021fe:	f002 fc0b 	bl	8004a18 <HAL_GetTick>
 8002202:	6078      	str	r0, [r7, #4]
  while(HAL_GetTick() - start < 200)
 8002204:	e002      	b.n	800220c <_Z16reservoir_rotatev+0x48>
  {
    stepper_res.spin_once();
 8002206:	4816      	ldr	r0, [pc, #88]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 8002208:	f7ff fa3c 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GetTick() - start < 200)
 800220c:	f002 fc04 	bl	8004a18 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2bc7      	cmp	r3, #199	@ 0xc7
 8002218:	bf94      	ite	ls
 800221a:	2301      	movls	r3, #1
 800221c:	2300      	movhi	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <_Z16reservoir_rotatev+0x42>
  }

  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002224:	e002      	b.n	800222c <_Z16reservoir_rotatev+0x68>
  {
    stepper_res.spin_once();
 8002226:	480e      	ldr	r0, [pc, #56]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 8002228:	f7ff fa2c 	bl	8001684 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 800222c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002234:	f003 f860 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <_Z16reservoir_rotatev+0x62>
  }

  stepper_res.set_pos(0);
 8002248:	2100      	movs	r1, #0
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 800224c:	f7ff fa0c 	bl	8001668 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(0);
 8002250:	2100      	movs	r1, #0
 8002252:	4803      	ldr	r0, [pc, #12]	@ (8002260 <_Z16reservoir_rotatev+0x9c>)
 8002254:	f7ff f9d6 	bl	8001604 <_ZN7Stepper8set_goalEi>

}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000032c 	.word	0x2000032c
 8002264:	fffe7960 	.word	0xfffe7960

08002268 <_Z16reservoir_rotatei>:


void reservoir_rotate(int n_slots)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < n_slots; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e004      	b.n	8002280 <_Z16reservoir_rotatei+0x18>
  {
    reservoir_rotate();
 8002276:	f7ff ffa5 	bl	80021c4 <_Z16reservoir_rotatev>
  for(int i = 0; i < n_slots; i++)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf6      	blt.n	8002276 <_Z16reservoir_rotatei+0xe>
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <_Z31hopper_wait_and_close_spin_oncei>:

// =============================================== HIGH LEVEL ACTIONS =================================================


bool hopper_wait_and_close_spin_once(int side)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  // Check if distance < 50mm for left plant
  int dist = sensors[side].get_dist_mm();
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4619      	mov	r1, r3
 80022a0:	480a      	ldr	r0, [pc, #40]	@ (80022cc <_Z31hopper_wait_and_close_spin_oncei+0x38>)
 80022a2:	f000 fcad 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fbc3 	bl	8001a34 <_ZN11LaserSensor11get_dist_mmEv>
 80022ae:	60f8      	str	r0, [r7, #12]
  if(dist < 50)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b31      	cmp	r3, #49	@ 0x31
 80022b4:	dc04      	bgt.n	80022c0 <_Z31hopper_wait_and_close_spin_oncei+0x2c>
  {
    // Close the hopper
    hopper_close(side);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff38 	bl	800212c <_Z12hopper_closei>
    return true;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <_Z31hopper_wait_and_close_spin_oncei+0x2e>
  }
  return false;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002e0 	.word	0x200002e0

080022d0 <_Z20request_store_plantsv>:


void request_store_plants()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  system_state.storing = true;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <_Z20request_store_plantsv+0x34>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	709a      	strb	r2, [r3, #2]

  // Clear distance sensors buffers (?)
  sensors[LEFT].clear_interrupt();
 80022da:	2100      	movs	r1, #0
 80022dc:	480a      	ldr	r0, [pc, #40]	@ (8002308 <_Z20request_store_plantsv+0x38>)
 80022de:	f000 fc8f 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fbbf 	bl	8001a68 <_ZN11LaserSensor15clear_interruptEv>
  sensors[RIGHT].clear_interrupt();
 80022ea:	2101      	movs	r1, #1
 80022ec:	4806      	ldr	r0, [pc, #24]	@ (8002308 <_Z20request_store_plantsv+0x38>)
 80022ee:	f000 fc87 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fbb7 	bl	8001a68 <_ZN11LaserSensor15clear_interruptEv>
  HAL_Delay(100);
 80022fa:	2064      	movs	r0, #100	@ 0x64
 80022fc:	f002 fb98 	bl	8004a30 <HAL_Delay>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000037c 	.word	0x2000037c
 8002308:	200002e0 	.word	0x200002e0

0800230c <_Z22store_plants_spin_oncev>:


// /!\ DELAY IN THIS FUNCTION
void store_plants_spin_once()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0

  if(!system_state.storing)
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d14d      	bne.n	80023ba <_Z22store_plants_spin_oncev+0xae>
  {
    return;
  }

  if(!system_state.hopper_left_closed)
 800231e:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <_Z22store_plants_spin_oncev+0x2e>
  {
    system_state.hopper_left_closed = hopper_wait_and_close_spin_once(LEFT);
 800232c:	2000      	movs	r0, #0
 800232e:	f7ff ffb1 	bl	8002294 <_Z31hopper_wait_and_close_spin_oncei>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002338:	701a      	strb	r2, [r3, #0]
  }

  if(!system_state.hopper_right_closed)
 800233a:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <_Z22store_plants_spin_oncev+0x4a>
  {
    system_state.hopper_right_closed = hopper_wait_and_close_spin_once(RIGHT);
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff ffa3 	bl	8002294 <_Z31hopper_wait_and_close_spin_oncei>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002354:	705a      	strb	r2, [r3, #1]
  }

  if(system_state.hopper_left_closed && system_state.hopper_right_closed)
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d02e      	beq.n	80023bc <_Z22store_plants_spin_oncev+0xb0>
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02a      	beq.n	80023bc <_Z22store_plants_spin_oncev+0xb0>
  {
    HAL_Delay(1000); // Because hoppers functions are not blocking // TODO ADD NON BLOCKING DELAY
 8002366:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800236a:	f002 fb61 	bl	8004a30 <HAL_Delay>
    lift_go_up();
 800236e:	f7ff fe77 	bl	8002060 <_Z10lift_go_upv>
    grabber_extend();
 8002372:	f7ff fea9 	bl	80020c8 <_Z14grabber_extendv>
    HAL_Delay(500);
 8002376:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800237a:	f002 fb59 	bl	8004a30 <HAL_Delay>
    lift_go_middle();
 800237e:	f7ff fe89 	bl	8002094 <_Z14lift_go_middlev>
    grabber_retract(false);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff feb6 	bl	80020f4 <_Z15grabber_retractb>
    lift_go_down();
 8002388:	f7ff fe50 	bl	800202c <_Z12lift_go_downv>
    hopper_open(LEFT);
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff fef3 	bl	8002178 <_Z11hopper_openi>
    hopper_open(RIGHT);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff fef0 	bl	8002178 <_Z11hopper_openi>
    HAL_Delay(500);
 8002398:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800239c:	f002 fb48 	bl	8004a30 <HAL_Delay>
    system_state.storing = false;
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	709a      	strb	r2, [r3, #2]
    system_state.hopper_left_closed = false;
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
    system_state.hopper_right_closed = false;
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <_Z22store_plants_spin_oncev+0xb4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	705a      	strb	r2, [r3, #1]
    reservoir_rotate(3);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f7ff ff58 	bl	8002268 <_Z16reservoir_rotatei>
 80023b8:	e000      	b.n	80023bc <_Z22store_plants_spin_oncev+0xb0>
    return;
 80023ba:	bf00      	nop
  }
}
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000037c 	.word	0x2000037c

080023c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c4:	b598      	push	{r3, r4, r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c8:	f002 fac1 	bl	800494e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023cc:	f000 f872 	bl	80024b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d0:	f000 fa80 	bl	80028d4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80023d4:	f000 fa1e 	bl	8002814 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80023d8:	f000 f9ba 	bl	8002750 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 80023dc:	f000 f8c0 	bl	8002560 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 80023e0:	f000 f90a 	bl	80025f8 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80023e4:	f000 f956 	bl	8002694 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 80023e8:	482b      	ldr	r0, [pc, #172]	@ (8002498 <main+0xd4>)
 80023ea:	f004 fdc7 	bl	8006f7c <HAL_TIM_Base_Start_IT>


  stepper_lift.set_speed(5000);
 80023ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80023f2:	482a      	ldr	r0, [pc, #168]	@ (800249c <main+0xd8>)
 80023f4:	f7ff f8f0 	bl	80015d8 <_ZN7Stepper9set_speedEm>

    // Initialize the sensors
  if(setup_lasers() != 0)
 80023f8:	f7ff fd56 	bl	8001ea8 <_Z12setup_lasersv>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <main+0x52>
  {
    printf("Error setting up the sensors\n");
 800240c:	4824      	ldr	r0, [pc, #144]	@ (80024a0 <main+0xdc>)
 800240e:	f006 fccf 	bl	8008db0 <puts>
    Error_Handler();
 8002412:	f000 fac3 	bl	800299c <Error_Handler>
  }

  if(ping_servos() != 0)
 8002416:	f7ff fd03 	bl	8001e20 <_Z11ping_servosv>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <main+0x70>
  {
    printf("Error pinging servos\n");
 800242a:	481e      	ldr	r0, [pc, #120]	@ (80024a4 <main+0xe0>)
 800242c:	f006 fcc0 	bl	8008db0 <puts>
    Error_Handler();
 8002430:	f000 fab4 	bl	800299c <Error_Handler>
  }

    // Initialize / move actuators

    reservoir_initialize_and_test();
 8002434:	f7ff fd74 	bl	8001f20 <_Z29reservoir_initialize_and_testv>

    hoppers_initialize_and_test();
 8002438:	f7ff fde4 	bl	8002004 <_Z27hoppers_initialize_and_testv>
    HAL_Delay(200);
 800243c:	20c8      	movs	r0, #200	@ 0xc8
 800243e:	f002 faf7 	bl	8004a30 <HAL_Delay>
    grabber_retract();
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff fe56 	bl	80020f4 <_Z15grabber_retractb>
    lift_initialize_and_test();
 8002448:	f7ff fdb8 	bl	8001fbc <_Z24lift_initialize_and_testv>


    request_store_plants();
 800244c:	f7ff ff40 	bl	80022d0 <_Z20request_store_plantsv>

    while (1)
    {

      // Print distances
      printf("Left: %d mm, Right: %d mm\n", sensors[LEFT].get_dist_mm(), sensors[RIGHT].get_dist_mm());
 8002450:	2100      	movs	r1, #0
 8002452:	4815      	ldr	r0, [pc, #84]	@ (80024a8 <main+0xe4>)
 8002454:	f000 fbd4 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff faea 	bl	8001a34 <_ZN11LaserSensor11get_dist_mmEv>
 8002460:	4604      	mov	r4, r0
 8002462:	2101      	movs	r1, #1
 8002464:	4810      	ldr	r0, [pc, #64]	@ (80024a8 <main+0xe4>)
 8002466:	f000 fbcb 	bl	8002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fae1 	bl	8001a34 <_ZN11LaserSensor11get_dist_mmEv>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4621      	mov	r1, r4
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <main+0xe8>)
 800247a:	f006 fc31 	bl	8008ce0 <iprintf>

      store_plants_spin_once();
 800247e:	f7ff ff45 	bl	800230c <_Z22store_plants_spin_oncev>
      if(!system_state.storing)
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <main+0xec>)
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0df      	beq.n	8002450 <main+0x8c>
      {
        request_store_plants();
 8002490:	f7ff ff1e 	bl	80022d0 <_Z20request_store_plantsv>
      printf("Left: %d mm, Right: %d mm\n", sensors[LEFT].get_dist_mm(), sensors[RIGHT].get_dist_mm());
 8002494:	e7dc      	b.n	8002450 <main+0x8c>
 8002496:	bf00      	nop
 8002498:	20000144 	.word	0x20000144
 800249c:	200002ec 	.word	0x200002ec
 80024a0:	08009be4 	.word	0x08009be4
 80024a4:	08009c04 	.word	0x08009c04
 80024a8:	200002e0 	.word	0x200002e0
 80024ac:	08009c1c 	.word	0x08009c1c
 80024b0:	2000037c 	.word	0x2000037c

080024b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b094      	sub	sp, #80	@ 0x50
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 0318 	add.w	r3, r7, #24
 80024be:	2238      	movs	r2, #56	@ 0x38
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f006 fd6e 	bl	8008fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f003 fd26 	bl	8005f28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e6:	2340      	movs	r3, #64	@ 0x40
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ea:	2302      	movs	r3, #2
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ee:	2302      	movs	r3, #2
 80024f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80024f2:	2304      	movs	r3, #4
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80024f6:	2355      	movs	r3, #85	@ 0x55
 80024f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024fa:	2302      	movs	r3, #2
 80024fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024fe:	2302      	movs	r3, #2
 8002500:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002502:	2302      	movs	r3, #2
 8002504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002506:	f107 0318 	add.w	r3, r7, #24
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fdc0 	bl	8006090 <HAL_RCC_OscConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002520:	f000 fa3c 	bl	800299c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002524:	230f      	movs	r3, #15
 8002526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002528:	2303      	movs	r3, #3
 800252a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2104      	movs	r1, #4
 800253c:	4618      	mov	r0, r3
 800253e:	f004 f8b9 	bl	80066b4 <HAL_RCC_ClockConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002552:	f000 fa23 	bl	800299c <Error_Handler>
  }
}
 8002556:	bf00      	nop
 8002558:	3750      	adds	r7, #80	@ 0x50
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002564:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002566:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002568:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800257e:	2200      	movs	r2, #0
 8002580:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002584:	2200      	movs	r2, #0
 8002586:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800258a:	2200      	movs	r2, #0
 800258c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002590:	2210      	movs	r2, #16
 8002592:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002596:	2201      	movs	r2, #1
 8002598:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800259c:	2202      	movs	r2, #2
 800259e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80025ac:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025d2:	f002 fb5f 	bl	8004c94 <HAL_FDCAN_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80025e6:	f000 f9d9 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000008c 	.word	0x2000008c
 80025f4:	40006400 	.word	0x40006400

080025f8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025fc:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 80025fe:	4a23      	ldr	r2, [pc, #140]	@ (800268c <_ZL12MX_I2C1_Initv+0x94>)
 8002600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8002602:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <_ZL12MX_I2C1_Initv+0x98>)
 8002606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002608:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002610:	2201      	movs	r2, #1
 8002612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002614:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002628:	2200      	movs	r2, #0
 800262a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800262c:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002632:	4815      	ldr	r0, [pc, #84]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002634:	f002 fe90 	bl	8005358 <HAL_I2C_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002648:	f000 f9a8 	bl	800299c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800264c:	2100      	movs	r1, #0
 800264e:	480e      	ldr	r0, [pc, #56]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 8002650:	f003 fbd2 	bl	8005df8 <HAL_I2CEx_ConfigAnalogFilter>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002664:	f000 f99a 	bl	800299c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002668:	2100      	movs	r1, #0
 800266a:	4807      	ldr	r0, [pc, #28]	@ (8002688 <_ZL12MX_I2C1_Initv+0x90>)
 800266c:	f003 fc0f 	bl	8005e8e <HAL_I2CEx_ConfigDigitalFilter>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002680:	f000 f98c 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200000f0 	.word	0x200000f0
 800268c:	40005400 	.word	0x40005400
 8002690:	30a0a7fb 	.word	0x30a0a7fb

08002694 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80026ba:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026bc:	2210      	movs	r2, #16
 80026be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026c8:	4a20      	ldr	r2, [pc, #128]	@ (800274c <_ZL12MX_TIM2_Initv+0xb8>)
 80026ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026d8:	481b      	ldr	r0, [pc, #108]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 80026da:	f004 fbf7 	bl	8006ecc <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80026ee:	f000 f955 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	4619      	mov	r1, r3
 80026fe:	4812      	ldr	r0, [pc, #72]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 8002700:	f004 fdf6 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8002714:	f000 f942 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4808      	ldr	r0, [pc, #32]	@ (8002748 <_ZL12MX_TIM2_Initv+0xb4>)
 8002726:	f005 f83d 	bl	80077a4 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800273a:	f000 f92f 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000144 	.word	0x20000144
 800274c:	000f4240 	.word	0x000f4240

08002750 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002754:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002756:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800275a:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800275c:	4a2c      	ldr	r2, [pc, #176]	@ (8002810 <_ZL19MX_USART1_UART_Initv+0xc0>)
 800275e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002760:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002766:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002772:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002774:	220c      	movs	r2, #12
 8002776:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002778:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002784:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800278a:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800278c:	2200      	movs	r2, #0
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002792:	2200      	movs	r2, #0
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002796:	481c      	ldr	r0, [pc, #112]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002798:	f005 f91c 	bl	80079d4 <HAL_HalfDuplex_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 80027ac:	f000 f8f6 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b0:	2100      	movs	r1, #0
 80027b2:	4815      	ldr	r0, [pc, #84]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80027b4:	f006 f81b 	bl	80087ee <HAL_UARTEx_SetTxFifoThreshold>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80027c8:	f000 f8e8 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027cc:	2100      	movs	r1, #0
 80027ce:	480e      	ldr	r0, [pc, #56]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80027d0:	f006 f84b 	bl	800886a <HAL_UARTEx_SetRxFifoThreshold>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 80027e4:	f000 f8da 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80027e8:	4807      	ldr	r0, [pc, #28]	@ (8002808 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80027ea:	f005 ff8c 	bl	8008706 <HAL_UARTEx_EnableFifoMode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80027fe:	f000 f8cd 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000190 	.word	0x20000190
 800280c:	40013800 	.word	0x40013800
 8002810:	000f4240 	.word	0x000f4240

08002814 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002818:	4b2c      	ldr	r3, [pc, #176]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800281a:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800281c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b29      	ldr	r3, [pc, #164]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002832:	4b26      	ldr	r3, [pc, #152]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002850:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800285c:	481b      	ldr	r0, [pc, #108]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800285e:	f005 f869 	bl	8007934 <HAL_UART_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8002872:	f000 f893 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	4814      	ldr	r0, [pc, #80]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800287a:	f005 ffb8 	bl	80087ee <HAL_UARTEx_SetTxFifoThreshold>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800288e:	f000 f885 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002892:	2100      	movs	r1, #0
 8002894:	480d      	ldr	r0, [pc, #52]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002896:	f005 ffe8 	bl	800886a <HAL_UARTEx_SetRxFifoThreshold>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80028aa:	f000 f877 	bl	800299c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028ae:	4807      	ldr	r0, [pc, #28]	@ (80028cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80028b0:	f005 ff64 	bl	800877c <HAL_UARTEx_DisableFifoMode>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80028c4:	f000 f86a 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000224 	.word	0x20000224
 80028d0:	40004400 	.word	0x40004400

080028d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <_ZL12MX_GPIO_Initv+0xc0>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2192      	movs	r1, #146	@ 0x92
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f002 fd01 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8002926:	2200      	movs	r2, #0
 8002928:	f240 1171 	movw	r1, #369	@ 0x171
 800292c:	481a      	ldr	r0, [pc, #104]	@ (8002998 <_ZL12MX_GPIO_Initv+0xc4>)
 800292e:	f002 fcfb 	bl	8005328 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8002932:	2392      	movs	r3, #146	@ 0x92
 8002934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	2301      	movs	r3, #1
 8002938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800294c:	f002 fb52 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8002950:	f240 1371 	movw	r3, #369	@ 0x171
 8002954:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002956:	2301      	movs	r3, #1
 8002958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	480b      	ldr	r0, [pc, #44]	@ (8002998 <_ZL12MX_GPIO_Initv+0xc4>)
 800296a:	f002 fb43 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = FIN_COURSE_RES_Pin;
 800296e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FIN_COURSE_RES_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002986:	f002 fb35 	bl	8004ff4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	48000400 	.word	0x48000400

0800299c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <Error_Handler+0x8>

080029a8 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f938 	bl	8002c26 <_ZNSt15__new_allocatorIiEC1Ev>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f937 	bl	8002c3c <_ZNSt15__new_allocatorIiED1Ev>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	1d38      	adds	r0, r7, #4
 80029e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80029e6:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f93c 	bl	8002c6a <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f960 	bl	8002cba <_ZNKSt16initializer_listIiE5beginEv>
 80029fa:	4604      	mov	r4, r0
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f967 	bl	8002cd2 <_ZNKSt16initializer_listIiE3endEv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	462b      	mov	r3, r5
 8002a08:	4621      	mov	r1, r4
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f973 	bl	8002cf6 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bdb0      	pop	{r4, r5, r7, pc}

08002a1a <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8002a1a:	b5b0      	push	{r4, r5, r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681c      	ldr	r4, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f99b 	bl	8002d68 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002a32:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a34:	461a      	mov	r2, r3
 8002a36:	4629      	mov	r1, r5
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f000 f9a0 	bl	8002d7e <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f921 	bl	8002c88 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bdb0      	pop	{r4, r5, r7, pc}

08002a50 <_ZNSaI11LaserSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f99e 	bl	8002d9a <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNSaI11LaserSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f99d 	bl	8002db0 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	1d38      	adds	r0, r7, #4
 8002a8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a8e:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f996 	bl	8002dc6 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f9a1 	bl	8002de4 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f9a8 	bl	8002dfc <_ZNKSt16initializer_listI11LaserSensorE3endEv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	462b      	mov	r3, r5
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9b7 	bl	8002e26 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdb0      	pop	{r4, r5, r7, pc}

08002ac2 <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002ac2:	b5b0      	push	{r4, r5, r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681c      	ldr	r4, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f9e2 	bl	8002e9e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002ada:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002adc:	461a      	mov	r2, r3
 8002ade:	4629      	mov	r1, r5
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f000 f9e7 	bl	8002eb4 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>
      }
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f805 	bl	8002af8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}

08002af8 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	109b      	asrs	r3, r3, #2
 8002b10:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev+0x38>)
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002b16:	461a      	mov	r2, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f9e7 	bl	8002eec <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f93f 	bl	8001da4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	b6db6db7 	.word	0xb6db6db7

08002b34 <_ZNSt6vectorIiSaIiEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
      }
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZNSaIbEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f9d8 	bl	8002f12 <_ZNSt15__new_allocatorIbEC1Ev>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNSaIbED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9d7 	bl	8002f28 <_ZNSt15__new_allocatorIbED1Ev>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>:
	_M_initialize(__x.size());
	_M_copy_aligned(__x.begin(), __x.end(), begin());
      }

      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<bool> __l,
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	1d38      	adds	r0, r7, #4
 8002b8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b92:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f9dc 	bl	8002f56 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>
      {
	_M_initialize_range(__l.begin(), __l.end(),
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa04 	bl	8002fae <_ZNKSt16initializer_listIbE5beginEv>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fa0b 	bl	8002fc6 <_ZNKSt16initializer_listIbE3endEv>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa16 	bl	8002fe8 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bdb0      	pop	{r4, r5, r7, pc}

08002bc6 <_ZNSt6vectorIbSaIbEED1Ev>:
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT { }
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f9dc 	bl	8002f8e <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	109b      	asrs	r3, r3, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
      }
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff feb0 	bl	80029c0 <_ZNSaIiED1Ev>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f9d9 	bl	8003030 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9d6 	bl	8003054 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ffd1 	bl	8002c52 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002cd2:	b590      	push	{r4, r7, lr}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffed 	bl	8002cba <_ZNKSt16initializer_listIiE5beginEv>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9c9 	bl	800307a <_ZNKSt16initializer_listIiE4sizeEv>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}

08002cf6 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68b8      	ldr	r0, [r7, #8]
 8002d08:	f000 f9c3 	bl	8003092 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002d10:	68fc      	ldr	r4, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f827 	bl	8002d68 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f000 f9cc 	bl	80030bc <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4619      	mov	r1, r3
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 f9ef 	bl	800310c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f80d 	bl	8002d68 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002d4e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8002d50:	4622      	mov	r2, r4
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68b8      	ldr	r0, [r7, #8]
 8002d56:	f000 f9ed 	bl	8003134 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 8002d5a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	605a      	str	r2, [r3, #4]
	}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}

08002d68 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f9e2 	bl	8003156 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6839      	ldr	r1, [r7, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f9cb 	bl	8003170 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>:
      begin() const noexcept { return _M_array; }
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_ZNKSt16initializer_listI11LaserSensorE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ffed 	bl	8002de4 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f9c1 	bl	8003194 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4423      	add	r3, r4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}

08002e26 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002e26:	b590      	push	{r4, r7, lr}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68b8      	ldr	r0, [r7, #8]
 8002e38:	f000 f9b8 	bl	80031ac <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002e40:	68fc      	ldr	r4, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f82a 	bl	8002e9e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f000 f9c0 	bl	80031d4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 f9e3 	bl	8003224 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	18ca      	adds	r2, r1, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f80d 	bl	8002e9e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002e84:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8002e86:	4622      	mov	r2, r4
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f000 f9de 	bl	800324c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8002e90:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
	}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}

08002e9e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f9d3 	bl	800326e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>
    }
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZNSaI11LaserSensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f9d3 	bl	8003288 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
	if (__p)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f9cb 	bl	80032a0 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>
      }
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <_ZNSt15__new_allocatorIbEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZNSt15__new_allocatorIbED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9c6 	bl	80032d8 <_ZNSaImED1Ev>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>:
      _Bvector_base(const allocator_type& __a)
 8002f56:	b590      	push	{r4, r7, lr}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002f60:	687c      	ldr	r4, [r7, #4]
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f9a8 	bl	80032be <_ZNSaImEC1IbEERKSaIT_E>
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	4619      	mov	r1, r3
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 f9bb 	bl	80032f0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f9aa 	bl	80032d8 <_ZNSaImED1Ev>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f9bc 	bl	8003314 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ffcd 	bl	8002f3e <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_ZNKSt16initializer_listIbE5beginEv>:
      begin() const noexcept { return _M_array; }
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_ZNKSt16initializer_listIbE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002fc6:	b590      	push	{r4, r7, lr}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffed 	bl	8002fae <_ZNKSt16initializer_listIbE5beginEv>
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9c1 	bl	800335e <_ZNKSt16initializer_listIbE4sizeEv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4423      	add	r3, r4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>:
	}

      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	@ 0x30
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f000 f9bc 	bl	8003376 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
	  _M_initialize(__n);
 8003002:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9ca 	bl	800339e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>
	  std::copy(__first, __last, begin());
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa00 	bl	8003416 <_ZNSt6vectorIbSaIbEE5beginEv>
 8003016:	f107 0014 	add.w	r0, r7, #20
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	f000 fa07 	bl	8003436 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>
	}
 8003028:	bf00      	nop
 800302a:	3728      	adds	r7, #40	@ 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa19 	bl	8003474 <_ZNSaIiEC1ERKS_>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fa23 	bl	8003490 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa23 	bl	80034b8 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003092:	b5b0      	push	{r4, r5, r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800309c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fa18 	bl	80034d6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80030a6:	462a      	mov	r2, r5
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 fa1e 	bl	80034ec <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80030b0:	4603      	mov	r3, r0
    }
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030bc <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f9d1 	bl	8003474 <_ZNSaIiEC1ERKS_>
 80030d2:	f107 030c 	add.w	r3, r7, #12
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fa18 	bl	800350c <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf8c      	ite	hi
 80030e4:	2301      	movhi	r3, #1
 80030e6:	2300      	movls	r3, #0
 80030e8:	b2dc      	uxtb	r4, r3
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fc66 	bl	80029c0 <_ZNSaIiED1Ev>
 80030f4:	2c00      	cmp	r4, #0
 80030f6:	d002      	beq.n	80030fe <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80030f8:	4803      	ldr	r0, [pc, #12]	@ (8003108 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 80030fa:	f005 fc5c 	bl	80089b6 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80030fe:	687b      	ldr	r3, [r7, #4]
      }
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}
 8003108:	08009c38 	.word	0x08009c38

0800310c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fa0d 	bl	8003540 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8003126:	4603      	mov	r3, r0
 8003128:	e000      	b.n	800312c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 800312a:	2300      	movs	r3, #0
      }
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa09 	bl	800355e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 800314c:	4603      	mov	r3, r0
    }
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa0f 	bl	8003586 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fea7 	bl	8002ed0 <_ZNSaI11LaserSensorEC1ERKS0_>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa09 	bl	800359c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>:
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80031b6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa02 	bl	80035c4 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80031c0:	462a      	mov	r2, r5
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 fa09 	bl	80035dc <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80031ca:	4603      	mov	r3, r0
    }
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}

080031d4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	6839      	ldr	r1, [r7, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fe73 	bl	8002ed0 <_ZNSaI11LaserSensorEC1ERKS0_>
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa0a 	bl	8003608 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf8c      	ite	hi
 80031fc:	2301      	movhi	r3, #1
 80031fe:	2300      	movls	r3, #0
 8003200:	b2dc      	uxtb	r4, r3
 8003202:	f107 030c 	add.w	r3, r7, #12
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fc2e 	bl	8002a68 <_ZNSaI11LaserSensorED1Ev>
 800320c:	2c00      	cmp	r4, #0
 800320e:	d002      	beq.n	8003216 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8003210:	4803      	ldr	r0, [pc, #12]	@ (8003220 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8003212:	f005 fbd0 	bl	80089b6 <_ZSt20__throw_length_errorPKc>
	return __n;
 8003216:	687b      	ldr	r3, [r7, #4]
      }
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	08009c38 	.word	0x08009c38

08003224 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x1e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa01 	bl	8003640 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>
 800323e:	4603      	mov	r3, r0
 8003240:	e000      	b.n	8003244 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x20>
 8003242:	2300      	movs	r3, #0
      }
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f9fd 	bl	800365e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8003264:	4603      	mov	r3, r0
    }
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa03 	bl	8003686 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>
    }
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fa01 	bl	80036b8 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_ZNSaImEC1IbEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fa08 	bl	80036de <_ZNSt15__new_allocatorImEC1Ev>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fa07 	bl	80036f4 <_ZNSt15__new_allocatorImED1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fa04 	bl	800370a <_ZNSaImEC1ERKS_>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa0e 	bl	8003726 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
	{ }
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa12 	bl	8003750 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	109b      	asrs	r3, r3, #2
 8003336:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003338:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003344:	4413      	add	r3, r2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4619      	mov	r1, r3
 800334a:	f000 fa17 	bl	800377c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_reset();
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fa22 	bl	800379a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>
      }
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_ZNKSt16initializer_listIbE4sizeEv>:
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8003376:	b5b0      	push	{r4, r5, r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8003380:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fa1d 	bl	80037c4 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800338a:	462a      	mov	r2, r5
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	4620      	mov	r0, r4
 8003390:	f000 fa23 	bl	80037da <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8003394:	4603      	mov	r3, r0
    }
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bdb0      	pop	{r4, r5, r7, pc}

0800339e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 800339e:	b590      	push	{r4, r7, lr}
 80033a0:	b089      	sub	sp, #36	@ 0x24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
	if (__n)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02f      	beq.n	800340e <_ZNSt6vectorIbSaIbEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa20 	bl	80037f8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 80033b8:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f000 fa30 	bl	8003820 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 80033c0:	4603      	mov	r3, r0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 80033cc:	69f8      	ldr	r0, [r7, #28]
 80033ce:	f000 fa34 	bl	800383a <_ZSt11__addressofImEPT_RS0_>
 80033d2:	4601      	mov	r1, r0
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	2200      	movs	r2, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fc3b 	bl	8001c56 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033ec:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fc      	ldr	r4, [r7, #12]
 80033f4:	463b      	mov	r3, r7
 80033f6:	f107 0114 	add.w	r1, r7, #20
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fc6c 	bl	8001cd8 <_ZStplRKSt13_Bit_iteratori>
 8003400:	f104 0308 	add.w	r3, r4, #8
 8003404:	463a      	mov	r2, r7
 8003406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800340a:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 800340e:	bf00      	nop
 8003410:	3724      	adds	r7, #36	@ 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}

08003416 <_ZNSt6vectorIbSaIbEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe fc14 	bl	8001c56 <_ZNSt13_Bit_iteratorC1EPmj>
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003436:	b082      	sub	sp, #8
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b087      	sub	sp, #28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003446:	68b8      	ldr	r0, [r7, #8]
 8003448:	f000 fa02 	bl	8003850 <_ZSt12__miter_baseIPKbET_S2_>
 800344c:	4604      	mov	r4, r0
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9fe 	bl	8003850 <_ZSt12__miter_baseIPKbET_S2_>
 8003454:	4602      	mov	r2, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	4621      	mov	r1, r4
 8003460:	f000 fa01 	bl	8003866 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8003464:	bf00      	nop
    }
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003470:	b002      	add	sp, #8
 8003472:	4770      	bx	lr

08003474 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa21 	bl	80038c8 <_ZNSt15__new_allocatorIiEC1ERKS0_>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
	{ }
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fa09 	bl	80038e0 <_ZNSt15__new_allocatorIiE10deallocateEPij>
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80034de:	bf00      	nop
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	109b      	asrs	r3, r3, #2
    }
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003514:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003518:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9f0 	bl	8003900 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8003520:	4603      	mov	r3, r0
 8003522:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003524:	f107 0208 	add.w	r2, r7, #8
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f9f2 	bl	8003918 <_ZSt3minIjERKT_S2_S2_>
 8003534:	4603      	mov	r3, r0
 8003536:	681b      	ldr	r3, [r3, #0]
      }
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800354a:	2200      	movs	r2, #0
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9f6 	bl	8003940 <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 8003554:	4603      	mov	r3, r0
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800356e:	2301      	movs	r3, #1
 8003570:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fa0b 	bl	8003992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 800357c:	4603      	mov	r3, r0
    }
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
	{ }
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80035cc:	bf00      	nop
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	109b      	asrs	r3, r3, #2
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
    }
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	b6db6db7 	.word	0xb6db6db7

08003608 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8003612:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9cc 	bl	80039b2 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>
 800361a:	4603      	mov	r3, r0
 800361c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f975 	bl	8003918 <_ZSt3minIjERKT_S2_S2_>
 800362e:	4603      	mov	r3, r0
 8003630:	681b      	ldr	r3, [r3, #0]
      }
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	04924924 	.word	0x04924924

08003640 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800364a:	2200      	movs	r2, #0
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9bc 	bl	80039cc <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>
 8003654:	4603      	mov	r3, r0
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800366e:	2300      	movs	r3, #0
 8003670:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f9d6 	bl	8003a28 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>
 800367c:	4603      	mov	r3, r0
    }
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003690:	e009      	b.n	80036a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9d8 	bl	8003a48 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f9df 	bl	8003a5e <_ZSt8_DestroyI11LaserSensorEvPT_>
	  for (; __first != __last; ++__first)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	331c      	adds	r3, #28
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d1f1      	bne.n	8003692 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0xc>
	}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4619      	mov	r1, r3
 80036d0:	68b8      	ldr	r0, [r7, #8]
 80036d2:	f005 f957 	bl	8008984 <_ZdlPvj>
      }
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZNSt15__new_allocatorImEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9ac 	bl	8003a74 <_ZNSt15__new_allocatorImEC1ERKS0_>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fa81 	bl	8001c38 <_ZNSt13_Bit_iteratorC1Ev>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3308      	adds	r3, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fa7c 	bl	8001c38 <_ZNSt13_Bit_iteratorC1Ev>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
	{ }
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	3b04      	subs	r3, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f867 	bl	800383a <_ZSt11__addressofImEPT_RS0_>
 800376c:	4603      	mov	r3, r0
 800376e:	3304      	adds	r3, #4
 8003770:	e000      	b.n	8003774 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8003772:	2300      	movs	r3, #0
	}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f97d 	bl	8003a8c <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800379a:	b5b0      	push	{r4, r5, r7, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ffbd 	bl	8003726 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	461d      	mov	r5, r3
 80037b0:	f107 040c 	add.w	r4, r7, #12
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}

080037c4 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80037cc:	bf00      	nop
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
    }
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 8003802:	687c      	ldr	r4, [r7, #4]
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	f000 f80b 	bl	8003820 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 800380a:	4603      	mov	r3, r0
 800380c:	4619      	mov	r1, r3
 800380e:	4620      	mov	r0, r4
 8003810:	f000 f94c 	bl	8003aac <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8003814:	60f8      	str	r0, [r7, #12]
	return __p;
 8003816:	68fb      	ldr	r3, [r7, #12]
      }
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	331f      	adds	r3, #31
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <_ZSt11__addressofImEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <_ZSt12__miter_baseIPKbET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003866:	b082      	sub	sp, #8
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
      return std::__niter_wrap(__result,
 8003876:	68b8      	ldr	r0, [r7, #8]
 8003878:	f000 f927 	bl	8003aca <_ZSt12__niter_baseIPKbET_S2_>
 800387c:	4604      	mov	r4, r0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f923 	bl	8003aca <_ZSt12__niter_baseIPKbET_S2_>
 8003884:	4605      	mov	r5, r0
 8003886:	f107 0010 	add.w	r0, r7, #16
 800388a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800388e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003892:	f000 f925 	bl	8003ae0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8003896:	f107 0018 	add.w	r0, r7, #24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	462a      	mov	r2, r5
 80038a2:	4621      	mov	r1, r4
 80038a4:	f000 f930 	bl	8003b08 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	cb0c      	ldmia	r3, {r2, r3}
 80038b4:	f000 f940 	bl	8003b38 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>
					     std::__niter_base(__result)));
 80038b8:	bf00      	nop
    }
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80038c4:	b002      	add	sp, #8
 80038c6:	4770      	bx	lr

080038c8 <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4619      	mov	r1, r3
 80038f2:	68b8      	ldr	r0, [r7, #8]
 80038f4:	f005 f846 	bl	8008984 <_ZdlPvj>
      }
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f92a 	bl	8003b62 <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 800390e:	4603      	mov	r3, r0
      }
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d201      	bcs.n	8003932 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	e000      	b.n	8003934 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003932:	687b      	ldr	r3, [r7, #4]
    }
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f914 	bl	8003b7a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8003952:	4602      	mov	r2, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4293      	cmp	r3, r2
 8003958:	bf8c      	ite	hi
 800395a:	2301      	movhi	r3, #1
 800395c:	2300      	movls	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d301      	bcc.n	800397a <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003976:	f005 f81b 	bl	80089b0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800397a:	f005 f816 	bl	80089aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f005 f800 	bl	8008988 <_Znwj>
 8003988:	4603      	mov	r3, r0
      }
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8f5 	bl	8003b92 <_ZSt4copyIPKiPiET0_T_S4_S3_>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f901 	bl	8003bc2 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>
 80039c0:	4603      	mov	r3, r0
      }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f8ff 	bl	8003bdc <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 80039de:	4602      	mov	r2, r0
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	bf8c      	ite	hi
 80039e6:	2301      	movhi	r3, #1
 80039e8:	2300      	movls	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x58>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003a02:	f004 ffd5 	bl	80089b0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003a06:	f004 ffd0 	bl	80089aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 ffb7 	bl	8008988 <_Znwj>
 8003a1a:	4603      	mov	r3, r0
      }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	09249249 	.word	0x09249249

08003a28 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f8dd 	bl	8003bf8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZSt11__addressofI11LaserSensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_ZSt8_DestroyI11LaserSensorEvPT_>:
    _Destroy(_Tp* __pointer)
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd ff2f 	bl	80018ca <_ZN11LaserSensorD1Ev>
    }
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_ZNSt15__new_allocatorImEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_ZNSt15__new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f004 ff70 	bl	8008984 <_ZdlPvj>
      }
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8bc 	bl	8003c38 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_ZSt12__niter_baseIPKbET_S2_>:
    __niter_base(_Iterator __it)
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	461a      	mov	r2, r3
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003af8:	e882 0003 	stmia.w	r2, {r0, r1}
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003b08:	b082      	sub	sp, #8
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	61fb      	str	r3, [r7, #28]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	f000 f8b1 	bl	8003c8a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8003b28:	bf00      	nop
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b34:	b002      	add	sp, #8
 8003b36:	4770      	bx	lr

08003b38 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4639      	mov	r1, r7
 8003b44:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __res; }
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b52:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f805 	bl	8003b7a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003b82:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003b92:	b590      	push	{r4, r7, lr}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f88b 	bl	8003cba <_ZSt12__miter_baseIPKiET_S2_>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f000 f887 	bl	8003cba <_ZSt12__miter_baseIPKiET_S2_>
 8003bac:	4603      	mov	r3, r0
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f88c 	bl	8003cd0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8003bb8:	4603      	mov	r3, r0
    }
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f806 	bl	8003bdc <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv+0x18>)
      }
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	04924924 	.word	0x04924924

08003bf8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8003c08:	e00d      	b.n	8003c26 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f7ff ff1c 	bl	8003a48 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8003c10:	4603      	mov	r3, r0
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f87e 	bl	8003d16 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	331c      	adds	r3, #28
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	331c      	adds	r3, #28
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d1ed      	bne.n	8003c0a <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x12>
	  return __cur;
 8003c2e:	697b      	ldr	r3, [r7, #20]
    }
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f880 	bl	8003d4a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bf8c      	ite	hi
 8003c52:	2301      	movhi	r3, #1
 8003c54:	2300      	movls	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d301      	bcc.n	8003c72 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003c6e:	f004 fe9f 	bl	80089b0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003c72:	f004 fe9a 	bl	80089aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 fe84 	bl	8008988 <_Znwj>
 8003c80:	4603      	mov	r3, r0
      }
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	61fb      	str	r3, [r7, #28]
			      _Category>::__copy_m(__first, __last, __result);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	f000 f85c 	bl	8003d62 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>
 8003caa:	bf00      	nop
    }
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb6:	b002      	add	sp, #8
 8003cb8:	4770      	bx	lr

08003cba <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f87a 	bl	8003dd6 <_ZSt12__niter_baseIPKiET_S2_>
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	68b8      	ldr	r0, [r7, #8]
 8003ce6:	f000 f876 	bl	8003dd6 <_ZSt12__niter_baseIPKiET_S2_>
 8003cea:	4605      	mov	r5, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f87c 	bl	8003dec <_ZSt12__niter_baseIPiET_S1_>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f000 f881 	bl	8003e02 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 8003d00:	4602      	mov	r2, r0
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f88b 	bl	8003e22 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8003d0c:	4603      	mov	r3, r0
    }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bdb0      	pop	{r4, r5, r7, pc}

08003d16 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003d16:	b5b0      	push	{r4, r5, r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4619      	mov	r1, r3
 8003d24:	201c      	movs	r0, #28
 8003d26:	f7fd fee1 	bl	8001aec <_ZnwjPv>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	6838      	ldr	r0, [r7, #0]
 8003d2e:	f000 f884 	bl	8003e3a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461d      	mov	r5, r3
 8003d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}

08003d4a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003d52:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8003d62:	b082      	sub	sp, #8
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	e01a      	b.n	8003db2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x50>
	      *__result = *__first;
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd ff76 	bl	8001c78 <_ZNKSt13_Bit_iteratordeEv>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fec7 	bl	8001b2a <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60bb      	str	r3, [r7, #8]
	      ++__result;
 8003da2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd ff7a 	bl	8001ca0 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dce1      	bgt.n	8003d7c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x1a>
	  return __result;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003dc4:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dd2:	b002      	add	sp, #8
 8003dd4:	4770      	bx	lr

08003dd6 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f81c 	bl	8003e50 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f805 	bl	8003e70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8003e66:	4603      	mov	r3, r0
    }
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	109b      	asrs	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f005 f86b 	bl	8008f70 <memmove>
	  return __result + _Num;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
	}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_ZN11SystemStateD1Ev>:
struct SystemState
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fe85 	bl	8002bc6 <_ZNSt6vectorIbSaIbEED1Ev>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b0ab      	sub	sp, #172	@ 0xac
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f040 80e0 	bne.w	800409a <_Z41__static_initialization_and_destruction_0ii+0x1d2>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f040 80da 	bne.w	800409a <_Z41__static_initialization_and_destruction_0ii+0x1d2>
std::vector<int> hoppers_ids = {7, 14};
 8003ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80040d8 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003ee8:	f107 0310 	add.w	r3, r7, #16
 8003eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ef0:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	2302      	movs	r3, #2
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	f107 0318 	add.w	r3, r7, #24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fd50 	bl	80029a8 <_ZNSaIiEC1Ev>
 8003f08:	f107 0318 	add.w	r3, r7, #24
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	ca06      	ldmia	r2, {r1, r2}
 8003f12:	4872      	ldr	r0, [pc, #456]	@ (80040dc <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f14:	f7fe fd60 	bl	80029d8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8003f18:	f107 0318 	add.w	r3, r7, #24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fd4f 	bl	80029c0 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 8003f22:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	2302      	movs	r3, #2
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fd34 	bl	80029a8 <_ZNSaIiEC1Ev>
 8003f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f44:	f107 021c 	add.w	r2, r7, #28
 8003f48:	ca06      	ldmia	r2, {r1, r2}
 8003f4a:	4865      	ldr	r0, [pc, #404]	@ (80040e0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f4c:	f7fe fd44 	bl	80029d8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8003f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fd33 	bl	80029c0 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 8003f5a:	4a62      	ldr	r2, [pc, #392]	@ (80040e4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f64:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6e:	2302      	movs	r3, #2
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fd16 	bl	80029a8 <_ZNSaIiEC1Ev>
 8003f7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003f84:	ca06      	ldmia	r2, {r1, r2}
 8003f86:	4858      	ldr	r0, [pc, #352]	@ (80040e8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003f88:	f7fe fd26 	bl	80029d8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8003f8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fd15 	bl	80029c0 <_ZNSaIiED1Ev>
auto sensors = std::vector<LaserSensor>({
 8003f96:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003f9a:	f06f 0309 	mvn.w	r3, #9
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	4951      	ldr	r1, [pc, #324]	@ (80040ec <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003fa6:	f7fd fc6b 	bl	8001880 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 8003faa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003fae:	f103 001c 	add.w	r0, r3, #28
 8003fb2:	f06f 0307 	mvn.w	r3, #7
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2305      	movs	r3, #5
 8003fba:	2220      	movs	r2, #32
 8003fbc:	494b      	ldr	r1, [pc, #300]	@ (80040ec <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003fbe:	f7fd fc5f 	bl	8001880 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 8003fc2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc8:	2302      	movs	r3, #2
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fd3d 	bl	8002a50 <_ZNSaI11LaserSensorEC1Ev>
 8003fd6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003fda:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003fde:	ca06      	ldmia	r2, {r1, r2}
 8003fe0:	4843      	ldr	r0, [pc, #268]	@ (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003fe2:	f7fe fd4d 	bl	8002a80 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 8003fe6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fd3c 	bl	8002a68 <_ZNSaI11LaserSensorED1Ev>
});
 8003ff0:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003ff4:	3438      	adds	r4, #56	@ 0x38
auto sensors = std::vector<LaserSensor>({
 8003ff6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003ffa:	429c      	cmp	r4, r3
 8003ffc:	d004      	beq.n	8004008 <_Z41__static_initialization_and_destruction_0ii+0x140>
});
 8003ffe:	3c1c      	subs	r4, #28
 8004000:	4620      	mov	r0, r4
 8004002:	f7fd fc62 	bl	80018ca <_ZN11LaserSensorD1Ev>
auto sensors = std::vector<LaserSensor>({
 8004006:	e7f6      	b.n	8003ff6 <_Z41__static_initialization_and_destruction_0ii+0x12e>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2340      	movs	r3, #64	@ 0x40
 8004014:	4a35      	ldr	r2, [pc, #212]	@ (80040ec <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004016:	4937      	ldr	r1, [pc, #220]	@ (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8004018:	4837      	ldr	r0, [pc, #220]	@ (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800401a:	f7fd fa96 	bl	800154a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 800401e:	2301      	movs	r3, #1
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	4b32      	ldr	r3, [pc, #200]	@ (80040ec <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2302      	movs	r3, #2
 8004028:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800402c:	4931      	ldr	r1, [pc, #196]	@ (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800402e:	4833      	ldr	r0, [pc, #204]	@ (80040fc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8004030:	f7fd fa8b 	bl	800154a <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 8004034:	4932      	ldr	r1, [pc, #200]	@ (8004100 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8004036:	4833      	ldr	r0, [pc, #204]	@ (8004104 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8004038:	f7fc fdc8 	bl	8000bcc <_ZN7SCServoC1EP20__UART_HandleTypeDef>
std::vector<int> servo_ids_to_check = {
 800403c:	2308      	movs	r3, #8
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  hoppers_ids[LEFT],
 8004042:	2100      	movs	r1, #0
 8004044:	4825      	ldr	r0, [pc, #148]	@ (80040dc <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8004046:	f7fe fd75 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800404a:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  hoppers_ids[RIGHT]
 8004052:	2101      	movs	r1, #1
 8004054:	4821      	ldr	r0, [pc, #132]	@ (80040dc <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8004056:	f7fe fd6d 	bl	8002b34 <_ZNSt6vectorIiSaIiEEixEj>
 800405a:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004062:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800406a:	2303      	movs	r3, #3
 800406c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004070:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fc97 	bl	80029a8 <_ZNSaIiEC1Ev>
 800407a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800407e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8004082:	ca06      	ldmia	r2, {r1, r2}
 8004084:	4820      	ldr	r0, [pc, #128]	@ (8004108 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8004086:	f7fe fca7 	bl	80029d8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 800408a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fc96 	bl	80029c0 <_ZNSaIiED1Ev>
} system_state;
 8004094:	481d      	ldr	r0, [pc, #116]	@ (800410c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004096:	f7fd fe91 	bl	8001dbc <_ZN11SystemStateC1Ev>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <_Z41__static_initialization_and_destruction_0ii+0x206>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <_Z41__static_initialization_and_destruction_0ii+0x206>
 80040aa:	4818      	ldr	r0, [pc, #96]	@ (800410c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80040ac:	f7ff fefd 	bl	8003eaa <_ZN11SystemStateD1Ev>
std::vector<int> servo_ids_to_check = {
 80040b0:	4815      	ldr	r0, [pc, #84]	@ (8004108 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80040b2:	f7fe fcb2 	bl	8002a1a <_ZNSt6vectorIiSaIiEED1Ev>
auto sensors = std::vector<LaserSensor>({
 80040b6:	480e      	ldr	r0, [pc, #56]	@ (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80040b8:	f7fe fd03 	bl	8002ac2 <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 80040bc:	480a      	ldr	r0, [pc, #40]	@ (80040e8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80040be:	f7fe fcac 	bl	8002a1a <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 80040c2:	4807      	ldr	r0, [pc, #28]	@ (80040e0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80040c4:	f7fe fca9 	bl	8002a1a <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80040c8:	4804      	ldr	r0, [pc, #16]	@ (80040dc <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80040ca:	f7fe fca6 	bl	8002a1a <_ZNSt6vectorIiSaIiEED1Ev>
}
 80040ce:	bf00      	nop
 80040d0:	37a4      	adds	r7, #164	@ 0xa4
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	08009c6c 	.word	0x08009c6c
 80040dc:	200002bc 	.word	0x200002bc
 80040e0:	200002c8 	.word	0x200002c8
 80040e4:	08009c74 	.word	0x08009c74
 80040e8:	200002d4 	.word	0x200002d4
 80040ec:	48000400 	.word	0x48000400
 80040f0:	200002e0 	.word	0x200002e0
 80040f4:	08001d71 	.word	0x08001d71
 80040f8:	200002ec 	.word	0x200002ec
 80040fc:	2000032c 	.word	0x2000032c
 8004100:	20000190 	.word	0x20000190
 8004104:	2000036c 	.word	0x2000036c
 8004108:	20000370 	.word	0x20000370
 800410c:	2000037c 	.word	0x2000037c

08004110 <_GLOBAL__sub_I_hfdcan1>:
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
 8004114:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004118:	2001      	movs	r0, #1
 800411a:	f7ff fed5 	bl	8003ec8 <_Z41__static_initialization_and_destruction_0ii>
 800411e:	bd80      	pop	{r7, pc}

08004120 <_GLOBAL__sub_D_hfdcan1>:
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
 8004124:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004128:	2000      	movs	r0, #0
 800412a:	f7ff fecd 	bl	8003ec8 <_Z41__static_initialization_and_destruction_0ii>
 800412e:	bd80      	pop	{r7, pc}

08004130 <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	4603      	mov	r3, r0
 8004138:	603a      	str	r2, [r7, #0]
 800413a:	80fb      	strh	r3, [r7, #6]
 800413c:	460b      	mov	r3, r1
 800413e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004144:	88bb      	ldrh	r3, [r7, #4]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800414e:	88bb      	ldrh	r3, [r7, #4]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004154:	f107 020c 	add.w	r2, r7, #12
 8004158:	88f9      	ldrh	r1, [r7, #6]
 800415a:	2364      	movs	r3, #100	@ 0x64
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2302      	movs	r3, #2
 8004160:	4810      	ldr	r0, [pc, #64]	@ (80041a4 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8004162:	f001 f995 	bl	8005490 <HAL_I2C_Master_Transmit>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 800416a:	f107 0208 	add.w	r2, r7, #8
 800416e:	88f9      	ldrh	r1, [r7, #6]
 8004170:	2364      	movs	r3, #100	@ 0x64
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2304      	movs	r3, #4
 8004176:	480b      	ldr	r0, [pc, #44]	@ (80041a4 <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8004178:	f001 faa2 	bl	80056c0 <HAL_I2C_Master_Receive>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8004180:	7a3b      	ldrb	r3, [r7, #8]
 8004182:	061a      	lsls	r2, r3, #24
 8004184:	7a7b      	ldrb	r3, [r7, #9]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 800418a:	7abb      	ldrb	r3, [r7, #10]
 800418c:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800418e:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8004190:	7afa      	ldrb	r2, [r7, #11]
 8004192:	4313      	orrs	r3, r2
 8004194:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	601a      	str	r2, [r3, #0]
	return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200000f0 	.word	0x200000f0

080041a8 <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	4603      	mov	r3, r0
 80041b0:	603a      	str	r2, [r7, #0]
 80041b2:	80fb      	strh	r3, [r7, #6]
 80041b4:	460b      	mov	r3, r1
 80041b6:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80041bc:	88bb      	ldrh	r3, [r7, #4]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80041c6:	88bb      	ldrh	r3, [r7, #4]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80041cc:	f107 020c 	add.w	r2, r7, #12
 80041d0:	88f9      	ldrh	r1, [r7, #6]
 80041d2:	2364      	movs	r3, #100	@ 0x64
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2302      	movs	r3, #2
 80041d8:	480f      	ldr	r0, [pc, #60]	@ (8004218 <_Z15VL53L4CD_RdWordttPt+0x70>)
 80041da:	f001 f959 	bl	8005490 <HAL_I2C_Master_Transmit>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 80041e2:	f107 0208 	add.w	r2, r7, #8
 80041e6:	88f9      	ldrh	r1, [r7, #6]
 80041e8:	2364      	movs	r3, #100	@ 0x64
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2302      	movs	r3, #2
 80041ee:	480a      	ldr	r0, [pc, #40]	@ (8004218 <_Z15VL53L4CD_RdWordttPt+0x70>)
 80041f0:	f001 fa66 	bl	80056c0 <HAL_I2C_Master_Receive>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 80041f8:	7a3b      	ldrb	r3, [r7, #8]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	7a7b      	ldrb	r3, [r7, #9]
 8004200:	b21b      	sxth	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b21b      	sxth	r3, r3
 8004206:	b29a      	uxth	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	801a      	strh	r2, [r3, #0]
	return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200000f0 	.word	0x200000f0

0800421c <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	4603      	mov	r3, r0
 8004224:	603a      	str	r2, [r7, #0]
 8004226:	80fb      	strh	r3, [r7, #6]
 8004228:	460b      	mov	r3, r1
 800422a:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004230:	88bb      	ldrh	r3, [r7, #4]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004240:	f107 020c 	add.w	r2, r7, #12
 8004244:	88f9      	ldrh	r1, [r7, #6]
 8004246:	2364      	movs	r3, #100	@ 0x64
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2302      	movs	r3, #2
 800424c:	480b      	ldr	r0, [pc, #44]	@ (800427c <_Z15VL53L4CD_RdBytettPh+0x60>)
 800424e:	f001 f91f 	bl	8005490 <HAL_I2C_Master_Transmit>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8004256:	f107 0208 	add.w	r2, r7, #8
 800425a:	88f9      	ldrh	r1, [r7, #6]
 800425c:	2364      	movs	r3, #100	@ 0x64
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2301      	movs	r3, #1
 8004262:	4806      	ldr	r0, [pc, #24]	@ (800427c <_Z15VL53L4CD_RdBytettPh+0x60>)
 8004264:	f001 fa2c 	bl	80056c0 <HAL_I2C_Master_Receive>
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 800426c:	7a3a      	ldrb	r2, [r7, #8]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	701a      	strb	r2, [r3, #0]
	return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	200000f0 	.word	0x200000f0

08004280 <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
 800428a:	460b      	mov	r3, r1
 800428c:	80bb      	strh	r3, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004296:	88bb      	ldrh	r3, [r7, #4]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	b29b      	uxth	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80042a0:	88bb      	ldrh	r3, [r7, #4]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	88f9      	ldrh	r1, [r7, #6]
 80042b0:	2364      	movs	r3, #100	@ 0x64
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2303      	movs	r3, #3
 80042b6:	4805      	ldr	r0, [pc, #20]	@ (80042cc <_Z15VL53L4CD_WrBytetth+0x4c>)
 80042b8:	f001 f8ea 	bl	8005490 <HAL_I2C_Master_Transmit>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
	return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200000f0 	.word	0x200000f0

080042d0 <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	4603      	mov	r3, r0
 80042d8:	80fb      	strh	r3, [r7, #6]
 80042da:	460b      	mov	r3, r1
 80042dc:	80bb      	strh	r3, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80042e6:	88bb      	ldrh	r3, [r7, #4]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80042f0:	88bb      	ldrh	r3, [r7, #4]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8004306:	f107 0208 	add.w	r2, r7, #8
 800430a:	88f9      	ldrh	r1, [r7, #6]
 800430c:	2364      	movs	r3, #100	@ 0x64
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2304      	movs	r3, #4
 8004312:	4805      	ldr	r0, [pc, #20]	@ (8004328 <_Z15VL53L4CD_WrWordttt+0x58>)
 8004314:	f001 f8bc 	bl	8005490 <HAL_I2C_Master_Transmit>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
	return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200000f0 	.word	0x200000f0

0800432c <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	4603      	mov	r3, r0
 8004334:	603a      	str	r2, [r7, #0]
 8004336:	80fb      	strh	r3, [r7, #6]
 8004338:	460b      	mov	r3, r1
 800433a:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004340:	88bb      	ldrh	r3, [r7, #4]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	0e1b      	lsrs	r3, r3, #24
 8004354:	b2db      	uxtb	r3, r3
 8004356:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	b2db      	uxtb	r3, r3
 800435e:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	b2db      	uxtb	r3, r3
 8004366:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 800436e:	f107 0208 	add.w	r2, r7, #8
 8004372:	88f9      	ldrh	r1, [r7, #6]
 8004374:	2364      	movs	r3, #100	@ 0x64
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2306      	movs	r3, #6
 800437a:	4805      	ldr	r0, [pc, #20]	@ (8004390 <_Z16VL53L4CD_WrDWordttm+0x64>)
 800437c:	f001 f888 	bl	8005490 <HAL_I2C_Master_Transmit>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
	return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200000f0 	.word	0x200000f0

08004394 <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 80043a0:	6838      	ldr	r0, [r7, #0]
 80043a2:	f000 fb45 	bl	8004a30 <HAL_Delay>
	return 0;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b6:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <HAL_MspInit+0x44>)
 80043b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ba:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <HAL_MspInit+0x44>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80043c2:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <HAL_MspInit+0x44>)
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <HAL_MspInit+0x44>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <HAL_MspInit+0x44>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_MspInit+0x44>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80043e6:	f001 fe43 	bl	8006070 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000

080043f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b09a      	sub	sp, #104	@ 0x68
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	2244      	movs	r2, #68	@ 0x44
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f004 fdc3 	bl	8008fa4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a20      	ldr	r2, [pc, #128]	@ (80044a4 <HAL_FDCAN_MspInit+0xac>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d139      	bne.n	800449c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800442c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800442e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004432:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	4618      	mov	r0, r3
 800443a:	f002 fb57 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004444:	f7fe faaa 	bl	800299c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004448:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 800444e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004452:	6593      	str	r3, [r2, #88]	@ 0x58
 8004454:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004460:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 8004462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004464:	4a10      	ldr	r2, [pc, #64]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_FDCAN_MspInit+0xb0>)
 800446e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004478:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800447c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	2300      	movs	r3, #0
 8004488:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800448a:	2309      	movs	r3, #9
 800448c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004492:	4619      	mov	r1, r3
 8004494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004498:	f000 fdac 	bl	8004ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800449c:	bf00      	nop
 800449e:	3768      	adds	r7, #104	@ 0x68
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40006400 	.word	0x40006400
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b09c      	sub	sp, #112	@ 0x70
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044c4:	f107 0318 	add.w	r3, r7, #24
 80044c8:	2244      	movs	r2, #68	@ 0x44
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f004 fd69 	bl	8008fa4 <memset>
  if(hi2c->Instance==I2C1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2d      	ldr	r2, [pc, #180]	@ (800458c <HAL_I2C_MspInit+0xe0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d153      	bne.n	8004584 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80044dc:	2340      	movs	r3, #64	@ 0x40
 80044de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f002 faff 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80044f4:	f7fe fa52 	bl	800299c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 80044fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004504:	4b22      	ldr	r3, [pc, #136]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800451c:	4b1c      	ldr	r3, [pc, #112]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800452e:	2312      	movs	r3, #18
 8004530:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004536:	2300      	movs	r3, #0
 8004538:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800453a:	2304      	movs	r3, #4
 800453c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004548:	f000 fd54 	bl	8004ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004550:	2312      	movs	r3, #18
 8004552:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800455c:	2304      	movs	r3, #4
 800455e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004560:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004564:	4619      	mov	r1, r3
 8004566:	480b      	ldr	r0, [pc, #44]	@ (8004594 <HAL_I2C_MspInit+0xe8>)
 8004568:	f000 fd44 	bl	8004ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004570:	4a07      	ldr	r2, [pc, #28]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 8004572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004576:	6593      	str	r3, [r2, #88]	@ 0x58
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_I2C_MspInit+0xe4>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004584:	bf00      	nop
 8004586:	3770      	adds	r7, #112	@ 0x70
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40005400 	.word	0x40005400
 8004590:	40021000 	.word	0x40021000
 8004594:	48000400 	.word	0x48000400

08004598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d113      	bne.n	80045d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045aa:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <HAL_TIM_Base_MspInit+0x44>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	4a0b      	ldr	r2, [pc, #44]	@ (80045dc <HAL_TIM_Base_MspInit+0x44>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_TIM_Base_MspInit+0x44>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	201c      	movs	r0, #28
 80045c8:	f000 fb2f 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045cc:	201c      	movs	r0, #28
 80045ce:	f000 fb46 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b09c      	sub	sp, #112	@ 0x70
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f8:	f107 0318 	add.w	r3, r7, #24
 80045fc:	2244      	movs	r2, #68	@ 0x44
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f004 fccf 	bl	8008fa4 <memset>
  if(huart->Instance==USART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a3e      	ldr	r2, [pc, #248]	@ (8004704 <HAL_UART_MspInit+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d138      	bne.n	8004682 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004610:	2301      	movs	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004618:	f107 0318 	add.w	r3, r7, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f002 fa65 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004628:	f7fe f9b8 	bl	800299c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800462c:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <HAL_UART_MspInit+0x128>)
 800462e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004630:	4a35      	ldr	r2, [pc, #212]	@ (8004708 <HAL_UART_MspInit+0x128>)
 8004632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004636:	6613      	str	r3, [r2, #96]	@ 0x60
 8004638:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <HAL_UART_MspInit+0x128>)
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004644:	4b30      	ldr	r3, [pc, #192]	@ (8004708 <HAL_UART_MspInit+0x128>)
 8004646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004648:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <HAL_UART_MspInit+0x128>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004650:	4b2d      	ldr	r3, [pc, #180]	@ (8004708 <HAL_UART_MspInit+0x128>)
 8004652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800465c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004660:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004662:	2312      	movs	r3, #18
 8004664:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800466e:	2307      	movs	r3, #7
 8004670:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004672:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004676:	4619      	mov	r1, r3
 8004678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800467c:	f000 fcba 	bl	8004ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004680:	e03b      	b.n	80046fa <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <HAL_UART_MspInit+0x12c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d136      	bne.n	80046fa <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800468c:	2302      	movs	r3, #2
 800468e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004694:	f107 0318 	add.w	r3, r7, #24
 8004698:	4618      	mov	r0, r3
 800469a:	f002 fa27 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80046a4:	f7fe f97a 	bl	800299c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046a8:	4b17      	ldr	r3, [pc, #92]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ac:	4a16      	ldr	r2, [pc, #88]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046b4:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	4a10      	ldr	r2, [pc, #64]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <HAL_UART_MspInit+0x128>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80046d8:	230c      	movs	r3, #12
 80046da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e4:	2300      	movs	r3, #0
 80046e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046e8:	2307      	movs	r3, #7
 80046ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046f6:	f000 fc7d 	bl	8004ff4 <HAL_GPIO_Init>
}
 80046fa:	bf00      	nop
 80046fc:	3770      	adds	r7, #112	@ 0x70
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40013800 	.word	0x40013800
 8004708:	40021000 	.word	0x40021000
 800470c:	40004400 	.word	0x40004400

08004710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <NMI_Handler+0x4>

08004718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <HardFault_Handler+0x4>

08004720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004724:	bf00      	nop
 8004726:	e7fd      	b.n	8004724 <MemManage_Handler+0x4>

08004728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <BusFault_Handler+0x4>

08004730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <UsageFault_Handler+0x4>

08004738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004766:	f000 f945 	bl	80049f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004774:	4802      	ldr	r0, [pc, #8]	@ (8004780 <TIM2_IRQHandler+0x10>)
 8004776:	f002 fc6b 	bl	8007050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000144 	.word	0x20000144

08004784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return 1;
 8004788:	2301      	movs	r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_kill>:

int _kill(int pid, int sig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800479e:	f004 fca3 	bl	80090e8 <__errno>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2216      	movs	r2, #22
 80047a6:	601a      	str	r2, [r3, #0]
  return -1;
 80047a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <_exit>:

void _exit (int status)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ffe7 	bl	8004794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <_exit+0x12>

080047ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e00a      	b.n	80047f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047dc:	f3af 8000 	nop.w
 80047e0:	4601      	mov	r1, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	60ba      	str	r2, [r7, #8]
 80047e8:	b2ca      	uxtb	r2, r1
 80047ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	dbf0      	blt.n	80047dc <_read+0x12>
  }

  return len;
 80047fa:	687b      	ldr	r3, [r7, #4]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800482c:	605a      	str	r2, [r3, #4]
  return 0;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <_isatty>:

int _isatty(int file)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004844:	2301      	movs	r3, #1
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004874:	4a14      	ldr	r2, [pc, #80]	@ (80048c8 <_sbrk+0x5c>)
 8004876:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <_sbrk+0x60>)
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004880:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <_sbrk+0x64>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <_sbrk+0x64>)
 800488a:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <_sbrk+0x68>)
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <_sbrk+0x64>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d207      	bcs.n	80048ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800489c:	f004 fc24 	bl	80090e8 <__errno>
 80048a0:	4603      	mov	r3, r0
 80048a2:	220c      	movs	r2, #12
 80048a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048aa:	e009      	b.n	80048c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048ac:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <_sbrk+0x64>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048b2:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <_sbrk+0x64>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	4a05      	ldr	r2, [pc, #20]	@ (80048d0 <_sbrk+0x64>)
 80048bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20008000 	.word	0x20008000
 80048cc:	00000400 	.word	0x00000400
 80048d0:	20000394 	.word	0x20000394
 80048d4:	200004f0 	.word	0x200004f0

080048d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <SystemInit+0x20>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	4a05      	ldr	r2, [pc, #20]	@ (80048f8 <SystemInit+0x20>)
 80048e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048fc:	480d      	ldr	r0, [pc, #52]	@ (8004934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 8004900:	f7ff ffea 	bl	80048d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004904:	480c      	ldr	r0, [pc, #48]	@ (8004938 <LoopForever+0x6>)
  ldr r1, =_edata
 8004906:	490d      	ldr	r1, [pc, #52]	@ (800493c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004908:	4a0d      	ldr	r2, [pc, #52]	@ (8004940 <LoopForever+0xe>)
  movs r3, #0
 800490a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800490c:	e002      	b.n	8004914 <LoopCopyDataInit>

0800490e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800490e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004912:	3304      	adds	r3, #4

08004914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004918:	d3f9      	bcc.n	800490e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800491c:	4c0a      	ldr	r4, [pc, #40]	@ (8004948 <LoopForever+0x16>)
  movs r3, #0
 800491e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004920:	e001      	b.n	8004926 <LoopFillZerobss>

08004922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004924:	3204      	adds	r2, #4

08004926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004928:	d3fb      	bcc.n	8004922 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800492a:	f004 fbe3 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800492e:	f7fd fd49 	bl	80023c4 <main>

08004932 <LoopForever>:

LoopForever:
    b LoopForever
 8004932:	e7fe      	b.n	8004932 <LoopForever>
  ldr   r0, =_estack
 8004934:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800493c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004940:	08009d64 	.word	0x08009d64
  ldr r2, =_sbss
 8004944:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004948:	200004ec 	.word	0x200004ec

0800494c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800494c:	e7fe      	b.n	800494c <ADC1_2_IRQHandler>

0800494e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004958:	2003      	movs	r0, #3
 800495a:	f000 f95b 	bl	8004c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800495e:	2000      	movs	r0, #0
 8004960:	f000 f80e 	bl	8004980 <HAL_InitTick>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	71fb      	strb	r3, [r7, #7]
 800496e:	e001      	b.n	8004974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004970:	f7ff fd1e 	bl	80043b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004974:	79fb      	ldrb	r3, [r7, #7]

}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800498c:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <HAL_InitTick+0x68>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d022      	beq.n	80049da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004994:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <HAL_InitTick+0x6c>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_InitTick+0x68>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80049a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f966 	bl	8004c7a <HAL_SYSTICK_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10f      	bne.n	80049d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d809      	bhi.n	80049ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049ba:	2200      	movs	r2, #0
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c2:	f000 f932 	bl	8004c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <HAL_InitTick+0x70>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e007      	b.n	80049de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e004      	b.n	80049de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e001      	b.n	80049de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000008 	.word	0x20000008
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_IncTick+0x1c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <HAL_IncTick+0x20>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	4a03      	ldr	r2, [pc, #12]	@ (8004a10 <HAL_IncTick+0x1c>)
 8004a04:	6013      	str	r3, [r2, #0]
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20000398 	.word	0x20000398
 8004a14:	20000008 	.word	0x20000008

08004a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a1c:	4b03      	ldr	r3, [pc, #12]	@ (8004a2c <HAL_GetTick+0x14>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000398 	.word	0x20000398

08004a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a38:	f7ff ffee 	bl	8004a18 <HAL_GetTick>
 8004a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a48:	d004      	beq.n	8004a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <HAL_Delay+0x40>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a54:	bf00      	nop
 8004a56:	f7ff ffdf 	bl	8004a18 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d8f7      	bhi.n	8004a56 <HAL_Delay+0x26>
  {
  }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000008 	.word	0x20000008

08004a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db0b      	blt.n	8004b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4907      	ldr	r1, [pc, #28]	@ (8004b10 <__NVIC_EnableIRQ+0x38>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2001      	movs	r0, #1
 8004afa:	fa00 f202 	lsl.w	r2, r0, r2
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db0a      	blt.n	8004b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	490c      	ldr	r1, [pc, #48]	@ (8004b60 <__NVIC_SetPriority+0x4c>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	440b      	add	r3, r1
 8004b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b3c:	e00a      	b.n	8004b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4908      	ldr	r1, [pc, #32]	@ (8004b64 <__NVIC_SetPriority+0x50>)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	3b04      	subs	r3, #4
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	440b      	add	r3, r1
 8004b52:	761a      	strb	r2, [r3, #24]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	@ 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	bf28      	it	cs
 8004b86:	2304      	movcs	r3, #4
 8004b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d902      	bls.n	8004b98 <NVIC_EncodePriority+0x30>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3b03      	subs	r3, #3
 8004b96:	e000      	b.n	8004b9a <NVIC_EncodePriority+0x32>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	401a      	ands	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	43d9      	mvns	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	4313      	orrs	r3, r2
         );
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3724      	adds	r7, #36	@ 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be0:	d301      	bcc.n	8004be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00f      	b.n	8004c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <SysTick_Config+0x40>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bee:	210f      	movs	r1, #15
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bf4:	f7ff ff8e 	bl	8004b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <SysTick_Config+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bfe:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <SysTick_Config+0x40>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000e010 	.word	0xe000e010

08004c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff29 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	4603      	mov	r3, r0
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c38:	f7ff ff40 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	6978      	ldr	r0, [r7, #20]
 8004c44:	f7ff ff90 	bl	8004b68 <NVIC_EncodePriority>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff5f 	bl	8004b14 <__NVIC_SetPriority>
}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	4603      	mov	r3, r0
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ff33 	bl	8004ad8 <__NVIC_EnableIRQ>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffa4 	bl	8004bd0 <SysTick_Config>
 8004c88:	4603      	mov	r3, r0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e147      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fb9c 	bl	80043f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0210 	bic.w	r2, r2, #16
 8004cce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd0:	f7ff fea2 	bl	8004a18 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cd6:	e012      	b.n	8004cfe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cd8:	f7ff fe9e 	bl	8004a18 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d90b      	bls.n	8004cfe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e11b      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d0e5      	beq.n	8004cd8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1c:	f7ff fe7c 	bl	8004a18 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d22:	e012      	b.n	8004d4a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d24:	f7ff fe78 	bl	8004a18 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d90b      	bls.n	8004d4a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0f5      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e5      	beq.n	8004d24 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0202 	orr.w	r2, r2, #2
 8004d66:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a74      	ldr	r2, [pc, #464]	@ (8004f40 <HAL_FDCAN_Init+0x2ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d103      	bne.n	8004d7a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004d72:	4a74      	ldr	r2, [pc, #464]	@ (8004f44 <HAL_FDCAN_Init+0x2b0>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7c1b      	ldrb	r3, [r3, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d90:	619a      	str	r2, [r3, #24]
 8004d92:	e007      	b.n	8004da4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7c5b      	ldrb	r3, [r3, #17]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d108      	bne.n	8004dbe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dba:	619a      	str	r2, [r3, #24]
 8004dbc:	e007      	b.n	8004dce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7c9b      	ldrb	r3, [r3, #18]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d108      	bne.n	8004de8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004de4:	619a      	str	r2, [r3, #24]
 8004de6:	e007      	b.n	8004df8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004df6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004e1c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0210 	bic.w	r2, r2, #16
 8004e2c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d108      	bne.n	8004e48 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0204 	orr.w	r2, r2, #4
 8004e44:	619a      	str	r2, [r3, #24]
 8004e46:	e02c      	b.n	8004ea2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d028      	beq.n	8004ea2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d01c      	beq.n	8004e92 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e66:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0210 	orr.w	r2, r2, #16
 8004e76:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d110      	bne.n	8004ea2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0220 	orr.w	r2, r2, #32
 8004e8e:	619a      	str	r2, [r3, #24]
 8004e90:	e007      	b.n	8004ea2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eb2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ecc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed6:	d115      	bne.n	8004f04 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ee6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	3b01      	subs	r3, #1
 8004eee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ef0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f00:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f02:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f814 	bl	8004f48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40006400 	.word	0x40006400
 8004f44:	40006500 	.word	0x40006500

08004f48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004f50:	4b27      	ldr	r3, [pc, #156]	@ (8004ff0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004f52:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f62:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	041a      	lsls	r2, r3, #16
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f88:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	061a      	lsls	r2, r3, #24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e005      	b.n	8004fd6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3f3      	bcc.n	8004fca <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	4000a400 	.word	0x4000a400

08004ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005002:	e15a      	b.n	80052ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	2101      	movs	r1, #1
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 814c 	beq.w	80052b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d005      	beq.n	8005034 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005030:	2b02      	cmp	r3, #2
 8005032:	d130      	bne.n	8005096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2203      	movs	r2, #3
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800506a:	2201      	movs	r2, #1
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	f003 0201 	and.w	r2, r3, #1
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d017      	beq.n	80050d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	2203      	movs	r2, #3
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d123      	bne.n	8005126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	08da      	lsrs	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3208      	adds	r2, #8
 80050e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	220f      	movs	r2, #15
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	08da      	lsrs	r2, r3, #3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3208      	adds	r2, #8
 8005120:	6939      	ldr	r1, [r7, #16]
 8005122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2203      	movs	r2, #3
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4013      	ands	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f003 0203 	and.w	r2, r3, #3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80a6 	beq.w	80052b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005168:	4b5b      	ldr	r3, [pc, #364]	@ (80052d8 <HAL_GPIO_Init+0x2e4>)
 800516a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516c:	4a5a      	ldr	r2, [pc, #360]	@ (80052d8 <HAL_GPIO_Init+0x2e4>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6613      	str	r3, [r2, #96]	@ 0x60
 8005174:	4b58      	ldr	r3, [pc, #352]	@ (80052d8 <HAL_GPIO_Init+0x2e4>)
 8005176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005180:	4a56      	ldr	r2, [pc, #344]	@ (80052dc <HAL_GPIO_Init+0x2e8>)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	3302      	adds	r3, #2
 8005188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	220f      	movs	r2, #15
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051aa:	d01f      	beq.n	80051ec <HAL_GPIO_Init+0x1f8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a4c      	ldr	r2, [pc, #304]	@ (80052e0 <HAL_GPIO_Init+0x2ec>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d019      	beq.n	80051e8 <HAL_GPIO_Init+0x1f4>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a4b      	ldr	r2, [pc, #300]	@ (80052e4 <HAL_GPIO_Init+0x2f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_GPIO_Init+0x1f0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a4a      	ldr	r2, [pc, #296]	@ (80052e8 <HAL_GPIO_Init+0x2f4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00d      	beq.n	80051e0 <HAL_GPIO_Init+0x1ec>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a49      	ldr	r2, [pc, #292]	@ (80052ec <HAL_GPIO_Init+0x2f8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <HAL_GPIO_Init+0x1e8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a48      	ldr	r2, [pc, #288]	@ (80052f0 <HAL_GPIO_Init+0x2fc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_GPIO_Init+0x1e4>
 80051d4:	2305      	movs	r3, #5
 80051d6:	e00a      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051d8:	2306      	movs	r3, #6
 80051da:	e008      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051dc:	2304      	movs	r3, #4
 80051de:	e006      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051e0:	2303      	movs	r3, #3
 80051e2:	e004      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e002      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <HAL_GPIO_Init+0x1fa>
 80051ec:	2300      	movs	r3, #0
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	f002 0203 	and.w	r2, r2, #3
 80051f4:	0092      	lsls	r2, r2, #2
 80051f6:	4093      	lsls	r3, r2
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051fe:	4937      	ldr	r1, [pc, #220]	@ (80052dc <HAL_GPIO_Init+0x2e8>)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800520c:	4b39      	ldr	r3, [pc, #228]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005230:	4a30      	ldr	r2, [pc, #192]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005236:	4b2f      	ldr	r3, [pc, #188]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43db      	mvns	r3, r3
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800525a:	4a26      	ldr	r2, [pc, #152]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005260:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43db      	mvns	r3, r3
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005284:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800528a:	4b1a      	ldr	r3, [pc, #104]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052ae:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <HAL_GPIO_Init+0x300>)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3301      	adds	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f ae9d 	bne.w	8005004 <HAL_GPIO_Init+0x10>
  }
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40010000 	.word	0x40010000
 80052e0:	48000400 	.word	0x48000400
 80052e4:	48000800 	.word	0x48000800
 80052e8:	48000c00 	.word	0x48000c00
 80052ec:	48001000 	.word	0x48001000
 80052f0:	48001400 	.word	0x48001400
 80052f4:	40010400 	.word	0x40010400

080052f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e001      	b.n	800531a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
 8005334:	4613      	mov	r3, r2
 8005336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005338:	787b      	ldrb	r3, [r7, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005344:	e002      	b.n	800534c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e08d      	b.n	8005486 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff f894 	bl	80044ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	@ 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e006      	b.n	80053e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d108      	bne.n	80053fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e007      	b.n	800540a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800541c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	461a      	mov	r2, r3
 800549c:	460b      	mov	r3, r1
 800549e:	817b      	strh	r3, [r7, #10]
 80054a0:	4613      	mov	r3, r2
 80054a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	f040 80fd 	bne.w	80056ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2C_Master_Transmit+0x30>
 80054bc:	2302      	movs	r3, #2
 80054be:	e0f6      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054c8:	f7ff faa6 	bl	8004a18 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2319      	movs	r3, #25
 80054d4:	2201      	movs	r2, #1
 80054d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fa0a 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0e1      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2221      	movs	r2, #33	@ 0x21
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2210      	movs	r2, #16
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	893a      	ldrh	r2, [r7, #8]
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2bff      	cmp	r3, #255	@ 0xff
 800551a:	d906      	bls.n	800552a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	22ff      	movs	r2, #255	@ 0xff
 8005520:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e007      	b.n	800553a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005538:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d024      	beq.n	800558c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3301      	adds	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	8979      	ldrh	r1, [r7, #10]
 800557e:	4b4e      	ldr	r3, [pc, #312]	@ (80056b8 <HAL_I2C_Master_Transmit+0x228>)
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fc05 	bl	8005d94 <I2C_TransferConfig>
 800558a:	e066      	b.n	800565a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005590:	b2da      	uxtb	r2, r3
 8005592:	8979      	ldrh	r1, [r7, #10]
 8005594:	4b48      	ldr	r3, [pc, #288]	@ (80056b8 <HAL_I2C_Master_Transmit+0x228>)
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fbfa 	bl	8005d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80055a0:	e05b      	b.n	800565a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f9fd 	bl	80059a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07b      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d034      	beq.n	800565a <HAL_I2C_Master_Transmit+0x1ca>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d130      	bne.n	800565a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2200      	movs	r2, #0
 8005600:	2180      	movs	r1, #128	@ 0x80
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f976 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e04d      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	2bff      	cmp	r3, #255	@ 0xff
 800561a:	d90e      	bls.n	800563a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	22ff      	movs	r2, #255	@ 0xff
 8005620:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005626:	b2da      	uxtb	r2, r3
 8005628:	8979      	ldrh	r1, [r7, #10]
 800562a:	2300      	movs	r3, #0
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fbae 	bl	8005d94 <I2C_TransferConfig>
 8005638:	e00f      	b.n	800565a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	b2da      	uxtb	r2, r3
 800564a:	8979      	ldrh	r1, [r7, #10]
 800564c:	2300      	movs	r3, #0
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fb9d 	bl	8005d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d19e      	bne.n	80055a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	6a39      	ldr	r1, [r7, #32]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f9e3 	bl	8005a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e01a      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2220      	movs	r2, #32
 800567e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_I2C_Master_Transmit+0x22c>)
 800568c:	400b      	ands	r3, r1
 800568e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	80002000 	.word	0x80002000
 80056bc:	fe00e800 	.word	0xfe00e800

080056c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
 80056d0:	4613      	mov	r3, r2
 80056d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	f040 80db 	bne.w	8005898 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2C_Master_Receive+0x30>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0d4      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056f8:	f7ff f98e 	bl	8004a18 <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2319      	movs	r3, #25
 8005704:	2201      	movs	r2, #1
 8005706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8f2 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0bf      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2222      	movs	r2, #34	@ 0x22
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2210      	movs	r2, #16
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2bff      	cmp	r3, #255	@ 0xff
 800574a:	d90e      	bls.n	800576a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005756:	b2da      	uxtb	r2, r3
 8005758:	8979      	ldrh	r1, [r7, #10]
 800575a:	4b52      	ldr	r3, [pc, #328]	@ (80058a4 <HAL_I2C_Master_Receive+0x1e4>)
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fb16 	bl	8005d94 <I2C_TransferConfig>
 8005768:	e06d      	b.n	8005846 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005778:	b2da      	uxtb	r2, r3
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	4b49      	ldr	r3, [pc, #292]	@ (80058a4 <HAL_I2C_Master_Receive+0x1e4>)
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fb05 	bl	8005d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800578a:	e05c      	b.n	8005846 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	6a39      	ldr	r1, [r7, #32]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f993 	bl	8005abc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e07c      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d034      	beq.n	8005846 <HAL_I2C_Master_Receive+0x186>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d130      	bne.n	8005846 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	2200      	movs	r2, #0
 80057ec:	2180      	movs	r1, #128	@ 0x80
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f880 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e04d      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2bff      	cmp	r3, #255	@ 0xff
 8005806:	d90e      	bls.n	8005826 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	22ff      	movs	r2, #255	@ 0xff
 800580c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005812:	b2da      	uxtb	r2, r3
 8005814:	8979      	ldrh	r1, [r7, #10]
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fab8 	bl	8005d94 <I2C_TransferConfig>
 8005824:	e00f      	b.n	8005846 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005834:	b2da      	uxtb	r2, r3
 8005836:	8979      	ldrh	r1, [r7, #10]
 8005838:	2300      	movs	r3, #0
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 faa7 	bl	8005d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d19d      	bne.n	800578c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f8ed 	bl	8005a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e01a      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2220      	movs	r2, #32
 800586a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_I2C_Master_Receive+0x1e8>)
 8005878:	400b      	ands	r3, r1
 800587a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	80002400 	.word	0x80002400
 80058a8:	fe00e800 	.word	0xfe00e800

080058ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d103      	bne.n	80058ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d007      	beq.n	80058e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	619a      	str	r2, [r3, #24]
  }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005904:	e03b      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f962 	bl	8005bd4 <I2C_IsErrorOccurred>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e041      	b.n	800599e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005920:	d02d      	beq.n	800597e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7ff f879 	bl	8004a18 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d122      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d113      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f043 0220 	orr.w	r2, r3, #32
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e00f      	b.n	800599e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4013      	ands	r3, r2
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d0b4      	beq.n	8005906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b2:	e033      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f90b 	bl	8005bd4 <I2C_IsErrorOccurred>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e031      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ce:	d025      	beq.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d0:	f7ff f822 	bl	8004a18 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d11a      	bne.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d013      	beq.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e007      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d1c4      	bne.n	80059b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a40:	e02f      	b.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f8c4 	bl	8005bd4 <I2C_IsErrorOccurred>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e02d      	b.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7fe ffdf 	bl	8004a18 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11a      	bne.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d013      	beq.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e007      	b.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d1c8      	bne.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005acc:	e071      	b.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f87e 	bl	8005bd4 <I2C_IsErrorOccurred>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d13b      	bne.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d138      	bne.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d105      	bne.n	8005b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d121      	bne.n	8005b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2210      	movs	r2, #16
 8005b24:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2220      	movs	r2, #32
 8005b32:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005b40:	400b      	ands	r3, r1
 8005b42:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	e002      	b.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005b68:	f7fe ff56 	bl	8004a18 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d119      	bne.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d00f      	beq.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d002      	beq.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d083      	beq.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	fe00e800 	.word	0xfe00e800

08005bd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	@ 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d068      	beq.n	8005cd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2210      	movs	r2, #16
 8005c06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c08:	e049      	b.n	8005c9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c10:	d045      	beq.n	8005c9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fe ff01 	bl	8004a18 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_IsErrorOccurred+0x54>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13a      	bne.n	8005c9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c4a:	d121      	bne.n	8005c90 <I2C_IsErrorOccurred+0xbc>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c52:	d01d      	beq.n	8005c90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d01a      	beq.n	8005c90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c6a:	f7fe fed5 	bl	8004a18 <HAL_GetTick>
 8005c6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c70:	e00e      	b.n	8005c90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c72:	f7fe fed1 	bl	8004a18 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b19      	cmp	r3, #25
 8005c7e:	d907      	bls.n	8005c90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c8e:	e006      	b.n	8005c9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d1e9      	bne.n	8005c72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d003      	beq.n	8005cb4 <I2C_IsErrorOccurred+0xe0>
 8005cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0aa      	beq.n	8005c0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f043 0304 	orr.w	r3, r3, #4
 8005cca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f043 0308 	orr.w	r3, r3, #8
 8005d0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f043 0302 	orr.w	r3, r3, #2
 8005d2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01c      	beq.n	8005d82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fdaf 	bl	80058ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <I2C_IsErrorOccurred+0x1bc>)
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3728      	adds	r7, #40	@ 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	fe00e800 	.word	0xfe00e800

08005d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	4613      	mov	r3, r2
 8005da4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dac:	7a7b      	ldrb	r3, [r7, #9]
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005db4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	0d5b      	lsrs	r3, r3, #21
 8005dce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dd2:	4b08      	ldr	r3, [pc, #32]	@ (8005df4 <I2C_TransferConfig+0x60>)
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	ea02 0103 	and.w	r1, r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	03ff63ff 	.word	0x03ff63ff

08005df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d138      	bne.n	8005e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e032      	b.n	8005e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	@ 0x24
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d139      	bne.n	8005f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e033      	b.n	8005f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	@ 0x24
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d141      	bne.n	8005fba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f36:	4b4b      	ldr	r3, [pc, #300]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f42:	d131      	bne.n	8005fa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f44:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f4a:	4a46      	ldr	r2, [pc, #280]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f54:	4b43      	ldr	r3, [pc, #268]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f5c:	4a41      	ldr	r2, [pc, #260]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f64:	4b40      	ldr	r3, [pc, #256]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2232      	movs	r2, #50	@ 0x32
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
 8005f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800606c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	0c9b      	lsrs	r3, r3, #18
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f7a:	e002      	b.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f82:	4b38      	ldr	r3, [pc, #224]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8e:	d102      	bne.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f2      	bne.n	8005f7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f96:	4b33      	ldr	r3, [pc, #204]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa2:	d158      	bne.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e057      	b.n	8006058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fae:	4a2d      	ldr	r2, [pc, #180]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fb8:	e04d      	b.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc0:	d141      	bne.n	8006046 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fc2:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fce:	d131      	bne.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fd0:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd6:	4a23      	ldr	r2, [pc, #140]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fe0:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2232      	movs	r2, #50	@ 0x32
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800606c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8006000:	0c9b      	lsrs	r3, r3, #18
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006006:	e002      	b.n	800600e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3b01      	subs	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800600e:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601a:	d102      	bne.n	8006022 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f2      	bne.n	8006008 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006022:	4b10      	ldr	r3, [pc, #64]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800602e:	d112      	bne.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e011      	b.n	8006058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800603a:	4a0a      	ldr	r2, [pc, #40]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006044:	e007      	b.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006046:	4b07      	ldr	r3, [pc, #28]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800604e:	4a05      	ldr	r2, [pc, #20]	@ (8006064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006054:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40007000 	.word	0x40007000
 8006068:	20000000 	.word	0x20000000
 800606c:	431bde83 	.word	0x431bde83

08006070 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006074:	4b05      	ldr	r3, [pc, #20]	@ (800608c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4a04      	ldr	r2, [pc, #16]	@ (800608c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800607a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800607e:	6093      	str	r3, [r2, #8]
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40007000 	.word	0x40007000

08006090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e2fe      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d075      	beq.n	800619a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ae:	4b97      	ldr	r3, [pc, #604]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060b8:	4b94      	ldr	r3, [pc, #592]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b0c      	cmp	r3, #12
 80060c6:	d102      	bne.n	80060ce <HAL_RCC_OscConfig+0x3e>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d002      	beq.n	80060d4 <HAL_RCC_OscConfig+0x44>
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10b      	bne.n	80060ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	4b8d      	ldr	r3, [pc, #564]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05b      	beq.n	8006198 <HAL_RCC_OscConfig+0x108>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d157      	bne.n	8006198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e2d9      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d106      	bne.n	8006104 <HAL_RCC_OscConfig+0x74>
 80060f6:	4b85      	ldr	r3, [pc, #532]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a84      	ldr	r2, [pc, #528]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e01d      	b.n	8006140 <HAL_RCC_OscConfig+0xb0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610c:	d10c      	bne.n	8006128 <HAL_RCC_OscConfig+0x98>
 800610e:	4b7f      	ldr	r3, [pc, #508]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7e      	ldr	r2, [pc, #504]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b7c      	ldr	r3, [pc, #496]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a7b      	ldr	r2, [pc, #492]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e00b      	b.n	8006140 <HAL_RCC_OscConfig+0xb0>
 8006128:	4b78      	ldr	r3, [pc, #480]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a77      	ldr	r2, [pc, #476]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800612e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b75      	ldr	r3, [pc, #468]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a74      	ldr	r2, [pc, #464]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800613a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800613e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d013      	beq.n	8006170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fe fc66 	bl	8004a18 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006150:	f7fe fc62 	bl	8004a18 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b64      	cmp	r3, #100	@ 0x64
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e29e      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006162:	4b6a      	ldr	r3, [pc, #424]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0xc0>
 800616e:	e014      	b.n	800619a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fe fc52 	bl	8004a18 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006178:	f7fe fc4e 	bl	8004a18 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	@ 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e28a      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800618a:	4b60      	ldr	r3, [pc, #384]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0xe8>
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d075      	beq.n	8006292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a6:	4b59      	ldr	r3, [pc, #356]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
 80061ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b0:	4b56      	ldr	r3, [pc, #344]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b0c      	cmp	r3, #12
 80061be:	d102      	bne.n	80061c6 <HAL_RCC_OscConfig+0x136>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d002      	beq.n	80061cc <HAL_RCC_OscConfig+0x13c>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d11f      	bne.n	800620c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061cc:	4b4f      	ldr	r3, [pc, #316]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_OscConfig+0x154>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e25d      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e4:	4b49      	ldr	r3, [pc, #292]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	061b      	lsls	r3, r3, #24
 80061f2:	4946      	ldr	r1, [pc, #280]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061f8:	4b45      	ldr	r3, [pc, #276]	@ (8006310 <HAL_RCC_OscConfig+0x280>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fbbf 	bl	8004980 <HAL_InitTick>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d043      	beq.n	8006290 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e249      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d023      	beq.n	800625c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006214:	4b3d      	ldr	r3, [pc, #244]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3c      	ldr	r2, [pc, #240]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fe fbfa 	bl	8004a18 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006228:	f7fe fbf6 	bl	8004a18 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e232      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800623a:	4b34      	ldr	r3, [pc, #208]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006246:	4b31      	ldr	r3, [pc, #196]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	061b      	lsls	r3, r3, #24
 8006254:	492d      	ldr	r1, [pc, #180]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	604b      	str	r3, [r1, #4]
 800625a:	e01a      	b.n	8006292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800625c:	4b2b      	ldr	r3, [pc, #172]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2a      	ldr	r2, [pc, #168]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fe fbd6 	bl	8004a18 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006270:	f7fe fbd2 	bl	8004a18 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e20e      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006282:	4b22      	ldr	r3, [pc, #136]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x1e0>
 800628e:	e000      	b.n	8006292 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d041      	beq.n	8006322 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01c      	beq.n	80062e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a6:	4b19      	ldr	r3, [pc, #100]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80062a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ac:	4a17      	ldr	r2, [pc, #92]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fe fbaf 	bl	8004a18 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062be:	f7fe fbab 	bl	8004a18 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e1e7      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062d0:	4b0e      	ldr	r3, [pc, #56]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80062d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0ef      	beq.n	80062be <HAL_RCC_OscConfig+0x22e>
 80062de:	e020      	b.n	8006322 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062e0:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80062e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e6:	4a09      	ldr	r2, [pc, #36]	@ (800630c <HAL_RCC_OscConfig+0x27c>)
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fe fb92 	bl	8004a18 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062f6:	e00d      	b.n	8006314 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f8:	f7fe fb8e 	bl	8004a18 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d906      	bls.n	8006314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e1ca      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000
 8006310:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006314:	4b8c      	ldr	r3, [pc, #560]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ea      	bne.n	80062f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a6 	beq.w	800647c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006334:	4b84      	ldr	r3, [pc, #528]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_OscConfig+0x2b4>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x2b6>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634a:	4b7f      	ldr	r3, [pc, #508]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634e:	4a7e      	ldr	r2, [pc, #504]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006354:	6593      	str	r3, [r2, #88]	@ 0x58
 8006356:	4b7c      	ldr	r3, [pc, #496]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006362:	2301      	movs	r3, #1
 8006364:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006366:	4b79      	ldr	r3, [pc, #484]	@ (800654c <HAL_RCC_OscConfig+0x4bc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d118      	bne.n	80063a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006372:	4b76      	ldr	r3, [pc, #472]	@ (800654c <HAL_RCC_OscConfig+0x4bc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a75      	ldr	r2, [pc, #468]	@ (800654c <HAL_RCC_OscConfig+0x4bc>)
 8006378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800637e:	f7fe fb4b 	bl	8004a18 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006386:	f7fe fb47 	bl	8004a18 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e183      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006398:	4b6c      	ldr	r3, [pc, #432]	@ (800654c <HAL_RCC_OscConfig+0x4bc>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d108      	bne.n	80063be <HAL_RCC_OscConfig+0x32e>
 80063ac:	4b66      	ldr	r3, [pc, #408]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	4a65      	ldr	r2, [pc, #404]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063bc:	e024      	b.n	8006408 <HAL_RCC_OscConfig+0x378>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d110      	bne.n	80063e8 <HAL_RCC_OscConfig+0x358>
 80063c6:	4b60      	ldr	r3, [pc, #384]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f043 0304 	orr.w	r3, r3, #4
 80063d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063e6:	e00f      	b.n	8006408 <HAL_RCC_OscConfig+0x378>
 80063e8:	4b57      	ldr	r3, [pc, #348]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	4a56      	ldr	r2, [pc, #344]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063f8:	4b53      	ldr	r3, [pc, #332]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fe:	4a52      	ldr	r2, [pc, #328]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006400:	f023 0304 	bic.w	r3, r3, #4
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fe fb02 	bl	8004a18 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fe fafe 	bl	8004a18 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e138      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642e:	4b46      	ldr	r3, [pc, #280]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0ed      	beq.n	8006418 <HAL_RCC_OscConfig+0x388>
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643e:	f7fe faeb 	bl	8004a18 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006444:	e00a      	b.n	800645c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fe fae7 	bl	8004a18 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e121      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800645c:	4b3a      	ldr	r3, [pc, #232]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ed      	bne.n	8006446 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800646a:	7ffb      	ldrb	r3, [r7, #31]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006470:	4b35      	ldr	r3, [pc, #212]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006474:	4a34      	ldr	r2, [pc, #208]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800647a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03c      	beq.n	8006502 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01c      	beq.n	80064ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006490:	4b2d      	ldr	r3, [pc, #180]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006496:	4a2c      	ldr	r2, [pc, #176]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fe faba 	bl	8004a18 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064a8:	f7fe fab6 	bl	8004a18 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e0f2      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064ba:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ef      	beq.n	80064a8 <HAL_RCC_OscConfig+0x418>
 80064c8:	e01b      	b.n	8006502 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80064cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7fe fa9d 	bl	8004a18 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e2:	f7fe fa99 	bl	8004a18 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e0d5      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064f4:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 80064f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ef      	bne.n	80064e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80c9 	beq.w	800669e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800650c:	4b0e      	ldr	r3, [pc, #56]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b0c      	cmp	r3, #12
 8006516:	f000 8083 	beq.w	8006620 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d15e      	bne.n	80065e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006522:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <HAL_RCC_OscConfig+0x4b8>)
 8006528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800652c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fe fa73 	bl	8004a18 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006534:	e00c      	b.n	8006550 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006536:	f7fe fa6f 	bl	8004a18 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d905      	bls.n	8006550 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e0ab      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
 8006548:	40021000 	.word	0x40021000
 800654c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006550:	4b55      	ldr	r3, [pc, #340]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1ec      	bne.n	8006536 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800655c:	4b52      	ldr	r3, [pc, #328]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	4b52      	ldr	r3, [pc, #328]	@ (80066ac <HAL_RCC_OscConfig+0x61c>)
 8006562:	4013      	ands	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6a11      	ldr	r1, [r2, #32]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800656c:	3a01      	subs	r2, #1
 800656e:	0112      	lsls	r2, r2, #4
 8006570:	4311      	orrs	r1, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006576:	0212      	lsls	r2, r2, #8
 8006578:	4311      	orrs	r1, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800657e:	0852      	lsrs	r2, r2, #1
 8006580:	3a01      	subs	r2, #1
 8006582:	0552      	lsls	r2, r2, #21
 8006584:	4311      	orrs	r1, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800658a:	0852      	lsrs	r2, r2, #1
 800658c:	3a01      	subs	r2, #1
 800658e:	0652      	lsls	r2, r2, #25
 8006590:	4311      	orrs	r1, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006596:	06d2      	lsls	r2, r2, #27
 8006598:	430a      	orrs	r2, r1
 800659a:	4943      	ldr	r1, [pc, #268]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 800659c:	4313      	orrs	r3, r2
 800659e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a0:	4b41      	ldr	r3, [pc, #260]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a40      	ldr	r2, [pc, #256]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065ac:	4b3e      	ldr	r3, [pc, #248]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a3d      	ldr	r2, [pc, #244]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fe fa2e 	bl	8004a18 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fe fa2a 	bl	8004a18 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e066      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d2:	4b35      	ldr	r3, [pc, #212]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x530>
 80065de:	e05e      	b.n	800669e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e0:	4b31      	ldr	r3, [pc, #196]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a30      	ldr	r2, [pc, #192]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fe fa14 	bl	8004a18 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fe fa10 	bl	8004a18 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e04c      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006606:	4b28      	ldr	r3, [pc, #160]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006612:	4b25      	ldr	r3, [pc, #148]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	4924      	ldr	r1, [pc, #144]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 8006618:	4b25      	ldr	r3, [pc, #148]	@ (80066b0 <HAL_RCC_OscConfig+0x620>)
 800661a:	4013      	ands	r3, r2
 800661c:	60cb      	str	r3, [r1, #12]
 800661e:	e03e      	b.n	800669e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e039      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800662c:	4b1e      	ldr	r3, [pc, #120]	@ (80066a8 <HAL_RCC_OscConfig+0x618>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f003 0203 	and.w	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	429a      	cmp	r2, r3
 800663e:	d12c      	bne.n	800669a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	3b01      	subs	r3, #1
 800664c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d123      	bne.n	800669a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d11b      	bne.n	800669a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800666e:	429a      	cmp	r2, r3
 8006670:	d113      	bne.n	800669a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	3b01      	subs	r3, #1
 8006680:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006682:	429a      	cmp	r2, r3
 8006684:	d109      	bne.n	800669a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	3b01      	subs	r3, #1
 8006694:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d001      	beq.n	800669e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40021000 	.word	0x40021000
 80066ac:	019f800c 	.word	0x019f800c
 80066b0:	feeefffc 	.word	0xfeeefffc

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e11e      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066cc:	4b91      	ldr	r3, [pc, #580]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d910      	bls.n	80066fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066da:	4b8e      	ldr	r3, [pc, #568]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 020f 	bic.w	r2, r3, #15
 80066e2:	498c      	ldr	r1, [pc, #560]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ea:	4b8a      	ldr	r3, [pc, #552]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e106      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d073      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d129      	bne.n	8006764 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006710:	4b81      	ldr	r3, [pc, #516]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0f4      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006720:	f000 f99e 	bl	8006a60 <RCC_GetSysClockFreqFromPLLSource>
 8006724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4a7c      	ldr	r2, [pc, #496]	@ (800691c <HAL_RCC_ClockConfig+0x268>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d93f      	bls.n	80067ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800672e:	4b7a      	ldr	r3, [pc, #488]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006742:	2b00      	cmp	r3, #0
 8006744:	d033      	beq.n	80067ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800674a:	2b00      	cmp	r3, #0
 800674c:	d12f      	bne.n	80067ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800674e:	4b72      	ldr	r3, [pc, #456]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006756:	4a70      	ldr	r2, [pc, #448]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800675e:	2380      	movs	r3, #128	@ 0x80
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e024      	b.n	80067ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d107      	bne.n	800677c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800676c:	4b6a      	ldr	r3, [pc, #424]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0c6      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800677c:	4b66      	ldr	r3, [pc, #408]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0be      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800678c:	f000 f8ce 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8006790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4a61      	ldr	r2, [pc, #388]	@ (800691c <HAL_RCC_ClockConfig+0x268>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d909      	bls.n	80067ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800679a:	4b5f      	ldr	r3, [pc, #380]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067a2:	4a5d      	ldr	r2, [pc, #372]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80067a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067aa:	2380      	movs	r3, #128	@ 0x80
 80067ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ae:	4b5a      	ldr	r3, [pc, #360]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 0203 	bic.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4957      	ldr	r1, [pc, #348]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c0:	f7fe f92a 	bl	8004a18 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c6:	e00a      	b.n	80067de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c8:	f7fe f926 	bl	8004a18 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e095      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067de:	4b4e      	ldr	r3, [pc, #312]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 020c 	and.w	r2, r3, #12
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d1eb      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d023      	beq.n	8006844 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006808:	4b43      	ldr	r3, [pc, #268]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4a42      	ldr	r2, [pc, #264]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800680e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006812:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006820:	4b3d      	ldr	r3, [pc, #244]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006828:	4a3b      	ldr	r2, [pc, #236]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800682a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800682e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006830:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4936      	ldr	r1, [pc, #216]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
 8006842:	e008      	b.n	8006856 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b80      	cmp	r3, #128	@ 0x80
 8006848:	d105      	bne.n	8006856 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800684a:	4b33      	ldr	r3, [pc, #204]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	4a32      	ldr	r2, [pc, #200]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 8006850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006854:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006856:	4b2f      	ldr	r3, [pc, #188]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d21d      	bcs.n	80068a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006864:	4b2b      	ldr	r3, [pc, #172]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 020f 	bic.w	r2, r3, #15
 800686c:	4929      	ldr	r1, [pc, #164]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	4313      	orrs	r3, r2
 8006872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006874:	f7fe f8d0 	bl	8004a18 <HAL_GetTick>
 8006878:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	e00a      	b.n	8006892 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687c:	f7fe f8cc 	bl	8004a18 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e03b      	b.n	800690a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b20      	ldr	r3, [pc, #128]	@ (8006914 <HAL_RCC_ClockConfig+0x260>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d1ed      	bne.n	800687c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4917      	ldr	r1, [pc, #92]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	490f      	ldr	r1, [pc, #60]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068de:	f000 f825 	bl	800692c <HAL_RCC_GetSysClockFreq>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <HAL_RCC_ClockConfig+0x264>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	490c      	ldr	r1, [pc, #48]	@ (8006920 <HAL_RCC_ClockConfig+0x26c>)
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <HAL_RCC_ClockConfig+0x270>)
 80068fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <HAL_RCC_ClockConfig+0x274>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe f83c 	bl	8004980 <HAL_InitTick>
 8006908:	4603      	mov	r3, r0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40022000 	.word	0x40022000
 8006918:	40021000 	.word	0x40021000
 800691c:	04c4b400 	.word	0x04c4b400
 8006920:	08009cd8 	.word	0x08009cd8
 8006924:	20000000 	.word	0x20000000
 8006928:	20000004 	.word	0x20000004

0800692c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006932:	4b2c      	ldr	r3, [pc, #176]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b04      	cmp	r3, #4
 800693c:	d102      	bne.n	8006944 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800693e:	4b2a      	ldr	r3, [pc, #168]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e047      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006944:	4b27      	ldr	r3, [pc, #156]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 030c 	and.w	r3, r3, #12
 800694c:	2b08      	cmp	r3, #8
 800694e:	d102      	bne.n	8006956 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006950:	4b26      	ldr	r3, [pc, #152]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	e03e      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006956:	4b23      	ldr	r3, [pc, #140]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d136      	bne.n	80069d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006962:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800696c:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d10c      	bne.n	800699a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006980:	4a1a      	ldr	r2, [pc, #104]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800698a:	68d2      	ldr	r2, [r2, #12]
 800698c:	0a12      	lsrs	r2, r2, #8
 800698e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	617b      	str	r3, [r7, #20]
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800699a:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a2:	4a10      	ldr	r2, [pc, #64]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a4:	68d2      	ldr	r2, [r2, #12]
 80069a6:	0a12      	lsrs	r2, r2, #8
 80069a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]
      break;
 80069b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069b4:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	0e5b      	lsrs	r3, r3, #25
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	3301      	adds	r3, #1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e001      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069d4:	693b      	ldr	r3, [r7, #16]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	00f42400 	.word	0x00f42400
 80069ec:	007a1200 	.word	0x007a1200

080069f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069f4:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80069f6:	681b      	ldr	r3, [r3, #0]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000000 	.word	0x20000000

08006a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a0c:	f7ff fff0 	bl	80069f0 <HAL_RCC_GetHCLKFreq>
 8006a10:	4602      	mov	r2, r0
 8006a12:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	0a1b      	lsrs	r3, r3, #8
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	4904      	ldr	r1, [pc, #16]	@ (8006a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a1e:	5ccb      	ldrb	r3, [r1, r3]
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	08009ce8 	.word	0x08009ce8

08006a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a38:	f7ff ffda 	bl	80069f0 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	0adb      	lsrs	r3, r3, #11
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4904      	ldr	r1, [pc, #16]	@ (8006a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	08009ce8 	.word	0x08009ce8

08006a60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a66:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	091b      	lsrs	r3, r3, #4
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d10c      	bne.n	8006a9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a84:	4a17      	ldr	r2, [pc, #92]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a8e:	68d2      	ldr	r2, [r2, #12]
 8006a90:	0a12      	lsrs	r2, r2, #8
 8006a92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	617b      	str	r3, [r7, #20]
    break;
 8006a9c:	e00c      	b.n	8006ab8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ae8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aa8:	68d2      	ldr	r2, [r2, #12]
 8006aaa:	0a12      	lsrs	r2, r2, #8
 8006aac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
    break;
 8006ab6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ab8:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	0e5b      	lsrs	r3, r3, #25
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ad2:	687b      	ldr	r3, [r7, #4]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	007a1200 	.word	0x007a1200
 8006ae8:	00f42400 	.word	0x00f42400

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006af4:	2300      	movs	r3, #0
 8006af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006af8:	2300      	movs	r3, #0
 8006afa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8098 	beq.w	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b0e:	4b43      	ldr	r3, [pc, #268]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1a:	4b40      	ldr	r3, [pc, #256]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b26:	4b3d      	ldr	r3, [pc, #244]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b32:	2301      	movs	r3, #1
 8006b34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b36:	4b3a      	ldr	r3, [pc, #232]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a39      	ldr	r2, [pc, #228]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b42:	f7fd ff69 	bl	8004a18 <HAL_GetTick>
 8006b46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b48:	e009      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4a:	f7fd ff65 	bl	8004a18 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d902      	bls.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	74fb      	strb	r3, [r7, #19]
        break;
 8006b5c:	e005      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b5e:	4b30      	ldr	r3, [pc, #192]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0ef      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d159      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b70:	4b2a      	ldr	r3, [pc, #168]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01e      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d019      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b8c:	4b23      	ldr	r3, [pc, #140]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b98:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bae:	4a1b      	ldr	r2, [pc, #108]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bb8:	4a18      	ldr	r2, [pc, #96]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fd ff25 	bl	8004a18 <HAL_GetTick>
 8006bce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd0:	e00b      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd2:	f7fd ff21 	bl	8004a18 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d902      	bls.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	74fb      	strb	r3, [r7, #19]
            break;
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bea:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ec      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006bf8:	7cfb      	ldrb	r3, [r7, #19]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bfe:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	4903      	ldr	r1, [pc, #12]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c14:	e008      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c16:	7cfb      	ldrb	r3, [r7, #19]
 8006c18:	74bb      	strb	r3, [r7, #18]
 8006c1a:	e005      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	7cfb      	ldrb	r3, [r7, #19]
 8006c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c28:	7c7b      	ldrb	r3, [r7, #17]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d105      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c2e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	4aa5      	ldr	r2, [pc, #660]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c46:	4ba0      	ldr	r3, [pc, #640]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4c:	f023 0203 	bic.w	r2, r3, #3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	499c      	ldr	r1, [pc, #624]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c68:	4b97      	ldr	r3, [pc, #604]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	f023 020c 	bic.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4994      	ldr	r1, [pc, #592]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	498b      	ldr	r1, [pc, #556]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cac:	4b86      	ldr	r3, [pc, #536]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	4983      	ldr	r1, [pc, #524]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cce:	4b7e      	ldr	r3, [pc, #504]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	497a      	ldr	r1, [pc, #488]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cf0:	4b75      	ldr	r3, [pc, #468]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	4972      	ldr	r1, [pc, #456]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d12:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	4969      	ldr	r1, [pc, #420]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d34:	4b64      	ldr	r3, [pc, #400]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	4961      	ldr	r1, [pc, #388]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d56:	4b5c      	ldr	r3, [pc, #368]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	4958      	ldr	r1, [pc, #352]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d78:	4b53      	ldr	r3, [pc, #332]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	4950      	ldr	r1, [pc, #320]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d105      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d98:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006db0:	4b45      	ldr	r3, [pc, #276]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4942      	ldr	r1, [pc, #264]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dce:	d105      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006de8:	4b37      	ldr	r3, [pc, #220]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	4934      	ldr	r1, [pc, #208]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e06:	d105      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e08:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d015      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e20:	4b29      	ldr	r3, [pc, #164]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2e:	4926      	ldr	r1, [pc, #152]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e40:	4b21      	ldr	r3, [pc, #132]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a20      	ldr	r2, [pc, #128]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d015      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	4918      	ldr	r1, [pc, #96]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e76:	d105      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e78:	4b13      	ldr	r3, [pc, #76]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a12      	ldr	r2, [pc, #72]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e90:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9e:	490a      	ldr	r1, [pc, #40]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eae:	d105      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4a04      	ldr	r2, [pc, #16]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ebc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40021000 	.word	0x40021000

08006ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e049      	b.n	8006f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fd fb50 	bl	8004598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f000 fb12 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d001      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e04a      	b.n	800702a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a21      	ldr	r2, [pc, #132]	@ (8007038 <HAL_TIM_Base_Start_IT+0xbc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d013      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <HAL_TIM_Base_Start_IT+0xc0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	@ (8007040 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8007044 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a19      	ldr	r2, [pc, #100]	@ (8007048 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d115      	bne.n	8007014 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	4b17      	ldr	r3, [pc, #92]	@ (800704c <HAL_TIM_Base_Start_IT+0xd0>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b06      	cmp	r3, #6
 8006ff8:	d015      	beq.n	8007026 <HAL_TIM_Base_Start_IT+0xaa>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007000:	d011      	beq.n	8007026 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007012:	e008      	b.n	8007026 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e000      	b.n	8007028 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40013400 	.word	0x40013400
 8007048:	40014000 	.word	0x40014000
 800704c:	00010007 	.word	0x00010007

08007050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d020      	beq.n	80070b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01b      	beq.n	80070b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0202 	mvn.w	r2, #2
 8007084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa2c 	bl	80074f8 <HAL_TIM_IC_CaptureCallback>
 80070a0:	e005      	b.n	80070ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa1e 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa2f 	bl	800750c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d020      	beq.n	8007100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01b      	beq.n	8007100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0204 	mvn.w	r2, #4
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa06 	bl	80074f8 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9f8 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa09 	bl	800750c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d020      	beq.n	800714c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01b      	beq.n	800714c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0208 	mvn.w	r2, #8
 800711c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2204      	movs	r2, #4
 8007122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9e0 	bl	80074f8 <HAL_TIM_IC_CaptureCallback>
 8007138:	e005      	b.n	8007146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9d2 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9e3 	bl	800750c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	d020      	beq.n	8007198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0210 	mvn.w	r2, #16
 8007168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2208      	movs	r2, #8
 800716e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f9ba 	bl	80074f8 <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9ac 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9bd 	bl	800750c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00c      	beq.n	80071bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0201 	mvn.w	r2, #1
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fa fdc4 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00c      	beq.n	80071ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb69 	bl	80078bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00c      	beq.n	800720e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb61 	bl	80078d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800722a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f977 	bl	8007520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f06f 0220 	mvn.w	r2, #32
 800724e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fb29 	bl	80078a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00c      	beq.n	800727a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb35 	bl	80078e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00c      	beq.n	800729e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb2d 	bl	80078f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb25 	bl	800790c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00c      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80072de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb1d 	bl	8007920 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIM_ConfigClockSource+0x1c>
 8007308:	2302      	movs	r3, #2
 800730a:	e0de      	b.n	80074ca <HAL_TIM_ConfigClockSource+0x1da>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800732a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800732e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a63      	ldr	r2, [pc, #396]	@ (80074d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	f000 80a9 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 800734c:	4a61      	ldr	r2, [pc, #388]	@ (80074d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	f200 80ae 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007354:	4a60      	ldr	r2, [pc, #384]	@ (80074d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	f000 80a1 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 800735c:	4a5e      	ldr	r2, [pc, #376]	@ (80074d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	f200 80a6 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007364:	4a5d      	ldr	r2, [pc, #372]	@ (80074dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007366:	4293      	cmp	r3, r2
 8007368:	f000 8099 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 800736c:	4a5b      	ldr	r2, [pc, #364]	@ (80074dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800736e:	4293      	cmp	r3, r2
 8007370:	f200 809e 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007374:	4a5a      	ldr	r2, [pc, #360]	@ (80074e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	f000 8091 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 800737c:	4a58      	ldr	r2, [pc, #352]	@ (80074e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	f200 8096 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007384:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007388:	f000 8089 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 800738c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007390:	f200 808e 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007398:	d03e      	beq.n	8007418 <HAL_TIM_ConfigClockSource+0x128>
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739e:	f200 8087 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a6:	f000 8086 	beq.w	80074b6 <HAL_TIM_ConfigClockSource+0x1c6>
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ae:	d87f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073b0:	2b70      	cmp	r3, #112	@ 0x70
 80073b2:	d01a      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0xfa>
 80073b4:	2b70      	cmp	r3, #112	@ 0x70
 80073b6:	d87b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073b8:	2b60      	cmp	r3, #96	@ 0x60
 80073ba:	d050      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
 80073bc:	2b60      	cmp	r3, #96	@ 0x60
 80073be:	d877      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073c0:	2b50      	cmp	r3, #80	@ 0x50
 80073c2:	d03c      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x14e>
 80073c4:	2b50      	cmp	r3, #80	@ 0x50
 80073c6:	d873      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073c8:	2b40      	cmp	r3, #64	@ 0x40
 80073ca:	d058      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x18e>
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d86f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073d0:	2b30      	cmp	r3, #48	@ 0x30
 80073d2:	d064      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 80073d4:	2b30      	cmp	r3, #48	@ 0x30
 80073d6:	d86b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d060      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d867      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05c      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d05a      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1ae>
 80073e8:	e062      	b.n	80074b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073fa:	f000 f9b3 	bl	8007764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800740c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	609a      	str	r2, [r3, #8]
      break;
 8007416:	e04f      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007428:	f000 f99c 	bl	8007764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800743a:	609a      	str	r2, [r3, #8]
      break;
 800743c:	e03c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	461a      	mov	r2, r3
 800744c:	f000 f90e 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2150      	movs	r1, #80	@ 0x50
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f967 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 800745c:	e02c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800746a:	461a      	mov	r2, r3
 800746c:	f000 f92d 	bl	80076ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2160      	movs	r1, #96	@ 0x60
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f957 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 800747c:	e01c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	461a      	mov	r2, r3
 800748c:	f000 f8ee 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2140      	movs	r1, #64	@ 0x40
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f947 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 800749c:	e00c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f000 f93e 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 80074ae:	e003      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e000      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80074b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	00100070 	.word	0x00100070
 80074d8:	00100040 	.word	0x00100040
 80074dc:	00100030 	.word	0x00100030
 80074e0:	00100020 	.word	0x00100020

080074e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a42      	ldr	r2, [pc, #264]	@ (8007650 <TIM_Base_SetConfig+0x11c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00f      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007552:	d00b      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a3f      	ldr	r2, [pc, #252]	@ (8007654 <TIM_Base_SetConfig+0x120>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a3e      	ldr	r2, [pc, #248]	@ (8007658 <TIM_Base_SetConfig+0x124>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3d      	ldr	r2, [pc, #244]	@ (800765c <TIM_Base_SetConfig+0x128>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a33      	ldr	r2, [pc, #204]	@ (8007650 <TIM_Base_SetConfig+0x11c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01b      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758c:	d017      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a30      	ldr	r2, [pc, #192]	@ (8007654 <TIM_Base_SetConfig+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2f      	ldr	r2, [pc, #188]	@ (8007658 <TIM_Base_SetConfig+0x124>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2e      	ldr	r2, [pc, #184]	@ (800765c <TIM_Base_SetConfig+0x128>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007660 <TIM_Base_SetConfig+0x12c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007664 <TIM_Base_SetConfig+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007668 <TIM_Base_SetConfig+0x134>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a16      	ldr	r2, [pc, #88]	@ (8007650 <TIM_Base_SetConfig+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d00f      	beq.n	800761c <TIM_Base_SetConfig+0xe8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a17      	ldr	r2, [pc, #92]	@ (800765c <TIM_Base_SetConfig+0x128>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00b      	beq.n	800761c <TIM_Base_SetConfig+0xe8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a16      	ldr	r2, [pc, #88]	@ (8007660 <TIM_Base_SetConfig+0x12c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d007      	beq.n	800761c <TIM_Base_SetConfig+0xe8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a15      	ldr	r2, [pc, #84]	@ (8007664 <TIM_Base_SetConfig+0x130>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_Base_SetConfig+0xe8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <TIM_Base_SetConfig+0x134>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d103      	bne.n	8007624 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b01      	cmp	r3, #1
 8007634:	d105      	bne.n	8007642 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	611a      	str	r2, [r3, #16]
  }
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40012c00 	.word	0x40012c00
 8007654:	40000400 	.word	0x40000400
 8007658:	40000800 	.word	0x40000800
 800765c:	40013400 	.word	0x40013400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 030a 	bic.w	r3, r3, #10
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b087      	sub	sp, #28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0210 	bic.w	r2, r3, #16
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 0307 	orr.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800777e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e065      	b.n	8007888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d108      	bne.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1b      	ldr	r2, [pc, #108]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d018      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007832:	d013      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a18      	ldr	r2, [pc, #96]	@ (800789c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00e      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a17      	ldr	r2, [pc, #92]	@ (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d009      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a12      	ldr	r2, [pc, #72]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a13      	ldr	r2, [pc, #76]	@ (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d10c      	bne.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40013400 	.word	0x40013400
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40014000 	.word	0x40014000

080078a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e042      	b.n	80079cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fc fe41 	bl	80045e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2224      	movs	r2, #36	@ 0x24
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0201 	bic.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fca2 	bl	80082c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f9d3 	bl	8007d30 <UART_SetConfig>
 800798a:	4603      	mov	r3, r0
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e01b      	b.n	80079cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fd21 	bl	800840c <UART_CheckIdleState>
 80079ca:	4603      	mov	r3, r0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e04a      	b.n	8007a7c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fc fdf1 	bl	80045e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2224      	movs	r2, #36	@ 0x24
 8007a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc52 	bl	80082c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f983 	bl	8007d30 <UART_SetConfig>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e023      	b.n	8007a7c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8007a52:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0208 	orr.w	r2, r2, #8
 8007a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fcc9 	bl	800840c <UART_CheckIdleState>
 8007a7a:	4603      	mov	r3, r0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	@ 0x28
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4613      	mov	r3, r2
 8007a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d17b      	bne.n	8007b96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_UART_Transmit+0x26>
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e074      	b.n	8007b98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2221      	movs	r2, #33	@ 0x21
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007abe:	f7fc ffab 	bl	8004a18 <HAL_GetTick>
 8007ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007adc:	d108      	bne.n	8007af0 <HAL_UART_Transmit+0x6c>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	e003      	b.n	8007af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007af8:	e030      	b.n	8007b5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2180      	movs	r1, #128	@ 0x80
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fd2b 	bl	8008560 <UART_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e03d      	b.n	8007b98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	3302      	adds	r3, #2
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e007      	b.n	8007b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3301      	adds	r3, #1
 8007b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1c8      	bne.n	8007afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2140      	movs	r1, #64	@ 0x40
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fcf4 	bl	8008560 <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e006      	b.n	8007b98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e000      	b.n	8007b98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b96:	2302      	movs	r3, #2
  }
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	@ 0x28
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	f040 80b5 	bne.w	8007d26 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_UART_Receive+0x28>
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0ad      	b.n	8007d28 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2222      	movs	r2, #34	@ 0x22
 8007bd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007be2:	f7fc ff19 	bl	8004a18 <HAL_GetTick>
 8007be6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c00:	d10e      	bne.n	8007c20 <HAL_UART_Receive+0x80>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <HAL_UART_Receive+0x76>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c14:	e02d      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22ff      	movs	r2, #255	@ 0xff
 8007c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c1e:	e028      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10d      	bne.n	8007c44 <HAL_UART_Receive+0xa4>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_UART_Receive+0x9a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	22ff      	movs	r2, #255	@ 0xff
 8007c34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c38:	e01b      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	227f      	movs	r2, #127	@ 0x7f
 8007c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c42:	e016      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c4c:	d10d      	bne.n	8007c6a <HAL_UART_Receive+0xca>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <HAL_UART_Receive+0xc0>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	227f      	movs	r2, #127	@ 0x7f
 8007c5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c5e:	e008      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	223f      	movs	r2, #63	@ 0x3f
 8007c64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c68:	e003      	b.n	8007c72 <HAL_UART_Receive+0xd2>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c82:	d108      	bne.n	8007c96 <HAL_UART_Receive+0xf6>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	61bb      	str	r3, [r7, #24]
 8007c94:	e003      	b.n	8007c9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c9e:	e036      	b.n	8007d0e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2120      	movs	r1, #32
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fc58 	bl	8008560 <UART_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e032      	b.n	8007d28 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	3302      	adds	r3, #2
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	e00c      	b.n	8007cfc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	8a7b      	ldrh	r3, [r7, #18]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4013      	ands	r3, r2
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1c2      	bne.n	8007ca0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e000      	b.n	8007d28 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007d26:	2302      	movs	r3, #2
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d34:	b08c      	sub	sp, #48	@ 0x30
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4bab      	ldr	r3, [pc, #684]	@ (800800c <UART_SetConfig+0x2dc>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4aa0      	ldr	r2, [pc, #640]	@ (8008010 <UART_SetConfig+0x2e0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007da6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dba:	f023 010f 	bic.w	r1, r3, #15
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a91      	ldr	r2, [pc, #580]	@ (8008014 <UART_SetConfig+0x2e4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d125      	bne.n	8007e20 <UART_SetConfig+0xf0>
 8007dd4:	4b90      	ldr	r3, [pc, #576]	@ (8008018 <UART_SetConfig+0x2e8>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d81a      	bhi.n	8007e18 <UART_SetConfig+0xe8>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0xb8>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007e09 	.word	0x08007e09
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfe:	e0d6      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e06:	e0d2      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0e:	e0ce      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e16:	e0ca      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1e:	e0c6      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7d      	ldr	r2, [pc, #500]	@ (800801c <UART_SetConfig+0x2ec>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d138      	bne.n	8007e9c <UART_SetConfig+0x16c>
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008018 <UART_SetConfig+0x2e8>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e30:	f003 030c 	and.w	r3, r3, #12
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	d82d      	bhi.n	8007e94 <UART_SetConfig+0x164>
 8007e38:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <UART_SetConfig+0x110>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e75 	.word	0x08007e75
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e95 	.word	0x08007e95
 8007e4c:	08007e95 	.word	0x08007e95
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e95 	.word	0x08007e95
 8007e5c:	08007e95 	.word	0x08007e95
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	08007e95 	.word	0x08007e95
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e8d 	.word	0x08007e8d
 8007e74:	2300      	movs	r3, #0
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	e098      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e82:	e094      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e84:	2304      	movs	r3, #4
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8a:	e090      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e8c:	2308      	movs	r3, #8
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e92:	e08c      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e94:	2310      	movs	r3, #16
 8007e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e9a:	e088      	b.n	8007fae <UART_SetConfig+0x27e>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5f      	ldr	r2, [pc, #380]	@ (8008020 <UART_SetConfig+0x2f0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d125      	bne.n	8007ef2 <UART_SetConfig+0x1c2>
 8007ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8008018 <UART_SetConfig+0x2e8>)
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007eb0:	2b30      	cmp	r3, #48	@ 0x30
 8007eb2:	d016      	beq.n	8007ee2 <UART_SetConfig+0x1b2>
 8007eb4:	2b30      	cmp	r3, #48	@ 0x30
 8007eb6:	d818      	bhi.n	8007eea <UART_SetConfig+0x1ba>
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d00a      	beq.n	8007ed2 <UART_SetConfig+0x1a2>
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d814      	bhi.n	8007eea <UART_SetConfig+0x1ba>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <UART_SetConfig+0x19a>
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d008      	beq.n	8007eda <UART_SetConfig+0x1aa>
 8007ec8:	e00f      	b.n	8007eea <UART_SetConfig+0x1ba>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed0:	e06d      	b.n	8007fae <UART_SetConfig+0x27e>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed8:	e069      	b.n	8007fae <UART_SetConfig+0x27e>
 8007eda:	2304      	movs	r3, #4
 8007edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee0:	e065      	b.n	8007fae <UART_SetConfig+0x27e>
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee8:	e061      	b.n	8007fae <UART_SetConfig+0x27e>
 8007eea:	2310      	movs	r3, #16
 8007eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef0:	e05d      	b.n	8007fae <UART_SetConfig+0x27e>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8008024 <UART_SetConfig+0x2f4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d125      	bne.n	8007f48 <UART_SetConfig+0x218>
 8007efc:	4b46      	ldr	r3, [pc, #280]	@ (8008018 <UART_SetConfig+0x2e8>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f08:	d016      	beq.n	8007f38 <UART_SetConfig+0x208>
 8007f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f0c:	d818      	bhi.n	8007f40 <UART_SetConfig+0x210>
 8007f0e:	2b80      	cmp	r3, #128	@ 0x80
 8007f10:	d00a      	beq.n	8007f28 <UART_SetConfig+0x1f8>
 8007f12:	2b80      	cmp	r3, #128	@ 0x80
 8007f14:	d814      	bhi.n	8007f40 <UART_SetConfig+0x210>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <UART_SetConfig+0x1f0>
 8007f1a:	2b40      	cmp	r3, #64	@ 0x40
 8007f1c:	d008      	beq.n	8007f30 <UART_SetConfig+0x200>
 8007f1e:	e00f      	b.n	8007f40 <UART_SetConfig+0x210>
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f26:	e042      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2e:	e03e      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f36:	e03a      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f3e:	e036      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f46:	e032      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a30      	ldr	r2, [pc, #192]	@ (8008010 <UART_SetConfig+0x2e0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d12a      	bne.n	8007fa8 <UART_SetConfig+0x278>
 8007f52:	4b31      	ldr	r3, [pc, #196]	@ (8008018 <UART_SetConfig+0x2e8>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f60:	d01a      	beq.n	8007f98 <UART_SetConfig+0x268>
 8007f62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f66:	d81b      	bhi.n	8007fa0 <UART_SetConfig+0x270>
 8007f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f6c:	d00c      	beq.n	8007f88 <UART_SetConfig+0x258>
 8007f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f72:	d815      	bhi.n	8007fa0 <UART_SetConfig+0x270>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <UART_SetConfig+0x250>
 8007f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f7c:	d008      	beq.n	8007f90 <UART_SetConfig+0x260>
 8007f7e:	e00f      	b.n	8007fa0 <UART_SetConfig+0x270>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e012      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e00e      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e00a      	b.n	8007fae <UART_SetConfig+0x27e>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e006      	b.n	8007fae <UART_SetConfig+0x27e>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e002      	b.n	8007fae <UART_SetConfig+0x27e>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <UART_SetConfig+0x2e0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	f040 80a8 	bne.w	800810a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d834      	bhi.n	800802c <UART_SetConfig+0x2fc>
 8007fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <UART_SetConfig+0x298>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	0800802d 	.word	0x0800802d
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	08007ffb 	.word	0x08007ffb
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fec:	f7fe fd0c 	bl	8006a08 <HAL_RCC_GetPCLK1Freq>
 8007ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ff2:	e021      	b.n	8008038 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8008028 <UART_SetConfig+0x2f8>)
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ff8:	e01e      	b.n	8008038 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fe fc97 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8007ffe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008000:	e01a      	b.n	8008038 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008008:	e016      	b.n	8008038 <UART_SetConfig+0x308>
 800800a:	bf00      	nop
 800800c:	cfff69f3 	.word	0xcfff69f3
 8008010:	40008000 	.word	0x40008000
 8008014:	40013800 	.word	0x40013800
 8008018:	40021000 	.word	0x40021000
 800801c:	40004400 	.word	0x40004400
 8008020:	40004800 	.word	0x40004800
 8008024:	40004c00 	.word	0x40004c00
 8008028:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008036:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 812a 	beq.w	8008294 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	4a9e      	ldr	r2, [pc, #632]	@ (80082c0 <UART_SetConfig+0x590>)
 8008046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800804a:	461a      	mov	r2, r3
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008052:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	4413      	add	r3, r2
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d305      	bcc.n	8008070 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008076:	e10d      	b.n	8008294 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	2200      	movs	r2, #0
 800807c:	60bb      	str	r3, [r7, #8]
 800807e:	60fa      	str	r2, [r7, #12]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	4a8e      	ldr	r2, [pc, #568]	@ (80082c0 <UART_SetConfig+0x590>)
 8008086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808a:	b29b      	uxth	r3, r3
 800808c:	2200      	movs	r2, #0
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800809a:	f7f8 fc1f 	bl	80008dc <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	020b      	lsls	r3, r1, #8
 80080b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080b4:	0202      	lsls	r2, r0, #8
 80080b6:	6979      	ldr	r1, [r7, #20]
 80080b8:	6849      	ldr	r1, [r1, #4]
 80080ba:	0849      	lsrs	r1, r1, #1
 80080bc:	2000      	movs	r0, #0
 80080be:	460c      	mov	r4, r1
 80080c0:	4605      	mov	r5, r0
 80080c2:	eb12 0804 	adds.w	r8, r2, r4
 80080c6:	eb43 0905 	adc.w	r9, r3, r5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	469a      	mov	sl, r3
 80080d2:	4693      	mov	fp, r2
 80080d4:	4652      	mov	r2, sl
 80080d6:	465b      	mov	r3, fp
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 fbfe 	bl	80008dc <__aeabi_uldivmod>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4613      	mov	r3, r2
 80080e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ee:	d308      	bcc.n	8008102 <UART_SetConfig+0x3d2>
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080f6:	d204      	bcs.n	8008102 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a3a      	ldr	r2, [r7, #32]
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	e0c8      	b.n	8008294 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008108:	e0c4      	b.n	8008294 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008112:	d167      	bne.n	80081e4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008114:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008118:	2b08      	cmp	r3, #8
 800811a:	d828      	bhi.n	800816e <UART_SetConfig+0x43e>
 800811c:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0x3f4>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008149 	.word	0x08008149
 8008128:	08008151 	.word	0x08008151
 800812c:	08008159 	.word	0x08008159
 8008130:	0800816f 	.word	0x0800816f
 8008134:	0800815f 	.word	0x0800815f
 8008138:	0800816f 	.word	0x0800816f
 800813c:	0800816f 	.word	0x0800816f
 8008140:	0800816f 	.word	0x0800816f
 8008144:	08008167 	.word	0x08008167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008148:	f7fe fc5e 	bl	8006a08 <HAL_RCC_GetPCLK1Freq>
 800814c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800814e:	e014      	b.n	800817a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008150:	f7fe fc70 	bl	8006a34 <HAL_RCC_GetPCLK2Freq>
 8008154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008156:	e010      	b.n	800817a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008158:	4b5a      	ldr	r3, [pc, #360]	@ (80082c4 <UART_SetConfig+0x594>)
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800815c:	e00d      	b.n	800817a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800815e:	f7fe fbe5 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8008162:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008164:	e009      	b.n	800817a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800816c:	e005      	b.n	800817a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8089 	beq.w	8008294 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	4a4e      	ldr	r2, [pc, #312]	@ (80082c0 <UART_SetConfig+0x590>)
 8008188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800818c:	461a      	mov	r2, r3
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	fbb3 f3f2 	udiv	r3, r3, r2
 8008194:	005a      	lsls	r2, r3, #1
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	441a      	add	r2, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d916      	bls.n	80081dc <UART_SetConfig+0x4ac>
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b4:	d212      	bcs.n	80081dc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f023 030f 	bic.w	r3, r3, #15
 80081be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	8bfb      	ldrh	r3, [r7, #30]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	8bfa      	ldrh	r2, [r7, #30]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	e05b      	b.n	8008294 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081e2:	e057      	b.n	8008294 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d828      	bhi.n	800823e <UART_SetConfig+0x50e>
 80081ec:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0x4c4>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008229 	.word	0x08008229
 8008200:	0800823f 	.word	0x0800823f
 8008204:	0800822f 	.word	0x0800822f
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800823f 	.word	0x0800823f
 8008210:	0800823f 	.word	0x0800823f
 8008214:	08008237 	.word	0x08008237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008218:	f7fe fbf6 	bl	8006a08 <HAL_RCC_GetPCLK1Freq>
 800821c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800821e:	e014      	b.n	800824a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008220:	f7fe fc08 	bl	8006a34 <HAL_RCC_GetPCLK2Freq>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008226:	e010      	b.n	800824a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008228:	4b26      	ldr	r3, [pc, #152]	@ (80082c4 <UART_SetConfig+0x594>)
 800822a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800822c:	e00d      	b.n	800824a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800822e:	f7fe fb7d 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8008232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008234:	e009      	b.n	800824a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800823c:	e005      	b.n	800824a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008248:	bf00      	nop
    }

    if (pclk != 0U)
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d021      	beq.n	8008294 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	4a1a      	ldr	r2, [pc, #104]	@ (80082c0 <UART_SetConfig+0x590>)
 8008256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825a:	461a      	mov	r2, r3
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	085b      	lsrs	r3, r3, #1
 8008268:	441a      	add	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d909      	bls.n	800828e <UART_SetConfig+0x55e>
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008280:	d205      	bcs.n	800828e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	b29a      	uxth	r2, r3
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	e002      	b.n	8008294 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2201      	movs	r2, #1
 8008298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2201      	movs	r2, #1
 80082a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2200      	movs	r2, #0
 80082a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3730      	adds	r7, #48	@ 0x30
 80082b8:	46bd      	mov	sp, r7
 80082ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082be:	bf00      	nop
 80082c0:	08009cf0 	.word	0x08009cf0
 80082c4:	00f42400 	.word	0x00f42400

080082c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01a      	beq.n	80083de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083c6:	d10a      	bne.n	80083de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b098      	sub	sp, #96	@ 0x60
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800841c:	f7fc fafc 	bl	8004a18 <HAL_GetTick>
 8008420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d12f      	bne.n	8008490 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008438:	2200      	movs	r2, #0
 800843a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f88e 	bl	8008560 <UART_WaitOnFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d022      	beq.n	8008490 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800845e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008468:	647b      	str	r3, [r7, #68]	@ 0x44
 800846a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800846e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e6      	bne.n	800844a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e063      	b.n	8008558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b04      	cmp	r3, #4
 800849c:	d149      	bne.n	8008532 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a6:	2200      	movs	r2, #0
 80084a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f857 	bl	8008560 <UART_WaitOnFlagUntilTimeout>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d03c      	beq.n	8008532 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	623b      	str	r3, [r7, #32]
   return(result);
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e6      	bne.n	80084b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800850a:	61fa      	str	r2, [r7, #28]
 800850c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	69b9      	ldr	r1, [r7, #24]
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	617b      	str	r3, [r7, #20]
   return(result);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e012      	b.n	8008558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3758      	adds	r7, #88	@ 0x58
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008570:	e04f      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008578:	d04b      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857a:	f7fc fa4d 	bl	8004a18 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	429a      	cmp	r2, r3
 8008588:	d302      	bcc.n	8008590 <UART_WaitOnFlagUntilTimeout+0x30>
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e04e      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d037      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b80      	cmp	r3, #128	@ 0x80
 80085a6:	d034      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b40      	cmp	r3, #64	@ 0x40
 80085ac:	d031      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d110      	bne.n	80085de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2208      	movs	r2, #8
 80085c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f838 	bl	800863a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2208      	movs	r2, #8
 80085ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e029      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085ec:	d111      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f81e 	bl	800863a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e00f      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4013      	ands	r3, r2
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	429a      	cmp	r2, r3
 8008620:	bf0c      	ite	eq
 8008622:	2301      	moveq	r3, #1
 8008624:	2300      	movne	r3, #0
 8008626:	b2db      	uxtb	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	429a      	cmp	r2, r3
 800862e:	d0a0      	beq.n	8008572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800863a:	b480      	push	{r7}
 800863c:	b095      	sub	sp, #84	@ 0x54
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008660:	643b      	str	r3, [r7, #64]	@ 0x40
 8008662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e6      	bne.n	8008642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	61fb      	str	r3, [r7, #28]
   return(result);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800869a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800869e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e3      	bne.n	8008674 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d118      	bne.n	80086e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f023 0310 	bic.w	r3, r3, #16
 80086c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6979      	ldr	r1, [r7, #20]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	613b      	str	r3, [r7, #16]
   return(result);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e6      	bne.n	80086b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086fa:	bf00      	nop
 80086fc:	3754      	adds	r7, #84	@ 0x54
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_UARTEx_EnableFifoMode+0x16>
 8008718:	2302      	movs	r3, #2
 800871a:	e02b      	b.n	8008774 <HAL_UARTEx_EnableFifoMode+0x6e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2224      	movs	r2, #36	@ 0x24
 8008728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0201 	bic.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800874a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008752:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8c3 	bl	80088e8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_UARTEx_DisableFifoMode+0x16>
 800878e:	2302      	movs	r3, #2
 8008790:	e027      	b.n	80087e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2224      	movs	r2, #36	@ 0x24
 800879e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008802:	2302      	movs	r3, #2
 8008804:	e02d      	b.n	8008862 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2224      	movs	r2, #36	@ 0x24
 8008812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f850 	bl	80088e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800887e:	2302      	movs	r3, #2
 8008880:	e02d      	b.n	80088de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2224      	movs	r2, #36	@ 0x24
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f812 	bl	80088e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d108      	bne.n	800890a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008908:	e031      	b.n	800896e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800890a:	2308      	movs	r3, #8
 800890c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800890e:	2308      	movs	r3, #8
 8008910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	0e5b      	lsrs	r3, r3, #25
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	0f5b      	lsrs	r3, r3, #29
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	7b3a      	ldrb	r2, [r7, #12]
 8008936:	4911      	ldr	r1, [pc, #68]	@ (800897c <UARTEx_SetNbDataToProcess+0x94>)
 8008938:	5c8a      	ldrb	r2, [r1, r2]
 800893a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800893e:	7b3a      	ldrb	r2, [r7, #12]
 8008940:	490f      	ldr	r1, [pc, #60]	@ (8008980 <UARTEx_SetNbDataToProcess+0x98>)
 8008942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008944:	fb93 f3f2 	sdiv	r3, r3, r2
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	7b7a      	ldrb	r2, [r7, #13]
 8008954:	4909      	ldr	r1, [pc, #36]	@ (800897c <UARTEx_SetNbDataToProcess+0x94>)
 8008956:	5c8a      	ldrb	r2, [r1, r2]
 8008958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800895c:	7b7a      	ldrb	r2, [r7, #13]
 800895e:	4908      	ldr	r1, [pc, #32]	@ (8008980 <UARTEx_SetNbDataToProcess+0x98>)
 8008960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008962:	fb93 f3f2 	sdiv	r3, r3, r2
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800896e:	bf00      	nop
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	08009d08 	.word	0x08009d08
 8008980:	08009d10 	.word	0x08009d10

08008984 <_ZdlPvj>:
 8008984:	f000 b81a 	b.w	80089bc <_ZdlPv>

08008988 <_Znwj>:
 8008988:	2801      	cmp	r0, #1
 800898a:	bf38      	it	cc
 800898c:	2001      	movcc	r0, #1
 800898e:	b510      	push	{r4, lr}
 8008990:	4604      	mov	r4, r0
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f824 	bl	80089e0 <malloc>
 8008998:	b100      	cbz	r0, 800899c <_Znwj+0x14>
 800899a:	bd10      	pop	{r4, pc}
 800899c:	f000 f810 	bl	80089c0 <_ZSt15get_new_handlerv>
 80089a0:	b908      	cbnz	r0, 80089a6 <_Znwj+0x1e>
 80089a2:	f000 f815 	bl	80089d0 <abort>
 80089a6:	4780      	blx	r0
 80089a8:	e7f3      	b.n	8008992 <_Znwj+0xa>

080089aa <_ZSt17__throw_bad_allocv>:
 80089aa:	b508      	push	{r3, lr}
 80089ac:	f000 f810 	bl	80089d0 <abort>

080089b0 <_ZSt28__throw_bad_array_new_lengthv>:
 80089b0:	b508      	push	{r3, lr}
 80089b2:	f000 f80d 	bl	80089d0 <abort>

080089b6 <_ZSt20__throw_length_errorPKc>:
 80089b6:	b508      	push	{r3, lr}
 80089b8:	f000 f80a 	bl	80089d0 <abort>

080089bc <_ZdlPv>:
 80089bc:	f000 b818 	b.w	80089f0 <free>

080089c0 <_ZSt15get_new_handlerv>:
 80089c0:	4b02      	ldr	r3, [pc, #8]	@ (80089cc <_ZSt15get_new_handlerv+0xc>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	f3bf 8f5b 	dmb	ish
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	2000039c 	.word	0x2000039c

080089d0 <abort>:
 80089d0:	b508      	push	{r3, lr}
 80089d2:	2006      	movs	r0, #6
 80089d4:	f000 fb16 	bl	8009004 <raise>
 80089d8:	2001      	movs	r0, #1
 80089da:	f7fb feeb 	bl	80047b4 <_exit>
	...

080089e0 <malloc>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <malloc+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 b82d 	b.w	8008a44 <_malloc_r>
 80089ea:	bf00      	nop
 80089ec:	20000018 	.word	0x20000018

080089f0 <free>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	@ (80089fc <free+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f000 bba5 	b.w	8009144 <_free_r>
 80089fa:	bf00      	nop
 80089fc:	20000018 	.word	0x20000018

08008a00 <sbrk_aligned>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	4e0f      	ldr	r6, [pc, #60]	@ (8008a40 <sbrk_aligned+0x40>)
 8008a04:	460c      	mov	r4, r1
 8008a06:	6831      	ldr	r1, [r6, #0]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	b911      	cbnz	r1, 8008a12 <sbrk_aligned+0x12>
 8008a0c:	f000 fb4a 	bl	80090a4 <_sbrk_r>
 8008a10:	6030      	str	r0, [r6, #0]
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 fb45 	bl	80090a4 <_sbrk_r>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d103      	bne.n	8008a26 <sbrk_aligned+0x26>
 8008a1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a22:	4620      	mov	r0, r4
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	1cc4      	adds	r4, r0, #3
 8008a28:	f024 0403 	bic.w	r4, r4, #3
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d0f8      	beq.n	8008a22 <sbrk_aligned+0x22>
 8008a30:	1a21      	subs	r1, r4, r0
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 fb36 	bl	80090a4 <_sbrk_r>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1f2      	bne.n	8008a22 <sbrk_aligned+0x22>
 8008a3c:	e7ef      	b.n	8008a1e <sbrk_aligned+0x1e>
 8008a3e:	bf00      	nop
 8008a40:	200003a0 	.word	0x200003a0

08008a44 <_malloc_r>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	1ccd      	adds	r5, r1, #3
 8008a4a:	f025 0503 	bic.w	r5, r5, #3
 8008a4e:	3508      	adds	r5, #8
 8008a50:	2d0c      	cmp	r5, #12
 8008a52:	bf38      	it	cc
 8008a54:	250c      	movcc	r5, #12
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	4606      	mov	r6, r0
 8008a5a:	db01      	blt.n	8008a60 <_malloc_r+0x1c>
 8008a5c:	42a9      	cmp	r1, r5
 8008a5e:	d904      	bls.n	8008a6a <_malloc_r+0x26>
 8008a60:	230c      	movs	r3, #12
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b40 <_malloc_r+0xfc>
 8008a6e:	f000 f869 	bl	8008b44 <__malloc_lock>
 8008a72:	f8d8 3000 	ldr.w	r3, [r8]
 8008a76:	461c      	mov	r4, r3
 8008a78:	bb44      	cbnz	r4, 8008acc <_malloc_r+0x88>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ffbf 	bl	8008a00 <sbrk_aligned>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	4604      	mov	r4, r0
 8008a86:	d158      	bne.n	8008b3a <_malloc_r+0xf6>
 8008a88:	f8d8 4000 	ldr.w	r4, [r8]
 8008a8c:	4627      	mov	r7, r4
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d143      	bne.n	8008b1a <_malloc_r+0xd6>
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d04b      	beq.n	8008b2e <_malloc_r+0xea>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	eb04 0903 	add.w	r9, r4, r3
 8008aa0:	f000 fb00 	bl	80090a4 <_sbrk_r>
 8008aa4:	4581      	cmp	r9, r0
 8008aa6:	d142      	bne.n	8008b2e <_malloc_r+0xea>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	1a6d      	subs	r5, r5, r1
 8008aac:	4629      	mov	r1, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ffa6 	bl	8008a00 <sbrk_aligned>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d03a      	beq.n	8008b2e <_malloc_r+0xea>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	442b      	add	r3, r5
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	bb62      	cbnz	r2, 8008b20 <_malloc_r+0xdc>
 8008ac6:	f8c8 7000 	str.w	r7, [r8]
 8008aca:	e00f      	b.n	8008aec <_malloc_r+0xa8>
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	1b52      	subs	r2, r2, r5
 8008ad0:	d420      	bmi.n	8008b14 <_malloc_r+0xd0>
 8008ad2:	2a0b      	cmp	r2, #11
 8008ad4:	d917      	bls.n	8008b06 <_malloc_r+0xc2>
 8008ad6:	1961      	adds	r1, r4, r5
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	6025      	str	r5, [r4, #0]
 8008adc:	bf18      	it	ne
 8008ade:	6059      	strne	r1, [r3, #4]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	bf08      	it	eq
 8008ae4:	f8c8 1000 	streq.w	r1, [r8]
 8008ae8:	5162      	str	r2, [r4, r5]
 8008aea:	604b      	str	r3, [r1, #4]
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 f82f 	bl	8008b50 <__malloc_unlock>
 8008af2:	f104 000b 	add.w	r0, r4, #11
 8008af6:	1d23      	adds	r3, r4, #4
 8008af8:	f020 0007 	bic.w	r0, r0, #7
 8008afc:	1ac2      	subs	r2, r0, r3
 8008afe:	bf1c      	itt	ne
 8008b00:	1a1b      	subne	r3, r3, r0
 8008b02:	50a3      	strne	r3, [r4, r2]
 8008b04:	e7af      	b.n	8008a66 <_malloc_r+0x22>
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	bf0c      	ite	eq
 8008b0c:	f8c8 2000 	streq.w	r2, [r8]
 8008b10:	605a      	strne	r2, [r3, #4]
 8008b12:	e7eb      	b.n	8008aec <_malloc_r+0xa8>
 8008b14:	4623      	mov	r3, r4
 8008b16:	6864      	ldr	r4, [r4, #4]
 8008b18:	e7ae      	b.n	8008a78 <_malloc_r+0x34>
 8008b1a:	463c      	mov	r4, r7
 8008b1c:	687f      	ldr	r7, [r7, #4]
 8008b1e:	e7b6      	b.n	8008a8e <_malloc_r+0x4a>
 8008b20:	461a      	mov	r2, r3
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d1fb      	bne.n	8008b20 <_malloc_r+0xdc>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6053      	str	r3, [r2, #4]
 8008b2c:	e7de      	b.n	8008aec <_malloc_r+0xa8>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	6033      	str	r3, [r6, #0]
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f80c 	bl	8008b50 <__malloc_unlock>
 8008b38:	e794      	b.n	8008a64 <_malloc_r+0x20>
 8008b3a:	6005      	str	r5, [r0, #0]
 8008b3c:	e7d6      	b.n	8008aec <_malloc_r+0xa8>
 8008b3e:	bf00      	nop
 8008b40:	200003a4 	.word	0x200003a4

08008b44 <__malloc_lock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	@ (8008b4c <__malloc_lock+0x8>)
 8008b46:	f000 bafa 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	200004e8 	.word	0x200004e8

08008b50 <__malloc_unlock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	@ (8008b58 <__malloc_unlock+0x8>)
 8008b52:	f000 baf5 	b.w	8009140 <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	200004e8 	.word	0x200004e8

08008b5c <std>:
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	4604      	mov	r4, r0
 8008b62:	e9c0 3300 	strd	r3, r3, [r0]
 8008b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b6a:	6083      	str	r3, [r0, #8]
 8008b6c:	8181      	strh	r1, [r0, #12]
 8008b6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b70:	81c2      	strh	r2, [r0, #14]
 8008b72:	6183      	str	r3, [r0, #24]
 8008b74:	4619      	mov	r1, r3
 8008b76:	2208      	movs	r2, #8
 8008b78:	305c      	adds	r0, #92	@ 0x5c
 8008b7a:	f000 fa13 	bl	8008fa4 <memset>
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <std+0x58>)
 8008b80:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b82:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb8 <std+0x5c>)
 8008b84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b86:	4b0d      	ldr	r3, [pc, #52]	@ (8008bbc <std+0x60>)
 8008b88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <std+0x64>)
 8008b8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <std+0x68>)
 8008b90:	6224      	str	r4, [r4, #32]
 8008b92:	429c      	cmp	r4, r3
 8008b94:	d006      	beq.n	8008ba4 <std+0x48>
 8008b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b9a:	4294      	cmp	r4, r2
 8008b9c:	d002      	beq.n	8008ba4 <std+0x48>
 8008b9e:	33d0      	adds	r3, #208	@ 0xd0
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	d105      	bne.n	8008bb0 <std+0x54>
 8008ba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	f000 bac6 	b.w	800913c <__retarget_lock_init_recursive>
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08008dc1 	.word	0x08008dc1
 8008bb8:	08008de3 	.word	0x08008de3
 8008bbc:	08008e1b 	.word	0x08008e1b
 8008bc0:	08008e3f 	.word	0x08008e3f
 8008bc4:	200003a8 	.word	0x200003a8

08008bc8 <stdio_exit_handler>:
 8008bc8:	4a02      	ldr	r2, [pc, #8]	@ (8008bd4 <stdio_exit_handler+0xc>)
 8008bca:	4903      	ldr	r1, [pc, #12]	@ (8008bd8 <stdio_exit_handler+0x10>)
 8008bcc:	4803      	ldr	r0, [pc, #12]	@ (8008bdc <stdio_exit_handler+0x14>)
 8008bce:	f000 b869 	b.w	8008ca4 <_fwalk_sglue>
 8008bd2:	bf00      	nop
 8008bd4:	2000000c 	.word	0x2000000c
 8008bd8:	08009881 	.word	0x08009881
 8008bdc:	2000001c 	.word	0x2000001c

08008be0 <cleanup_stdio>:
 8008be0:	6841      	ldr	r1, [r0, #4]
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <cleanup_stdio+0x34>)
 8008be4:	4299      	cmp	r1, r3
 8008be6:	b510      	push	{r4, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	d001      	beq.n	8008bf0 <cleanup_stdio+0x10>
 8008bec:	f000 fe48 	bl	8009880 <_fflush_r>
 8008bf0:	68a1      	ldr	r1, [r4, #8]
 8008bf2:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <cleanup_stdio+0x38>)
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d002      	beq.n	8008bfe <cleanup_stdio+0x1e>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fe41 	bl	8009880 <_fflush_r>
 8008bfe:	68e1      	ldr	r1, [r4, #12]
 8008c00:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <cleanup_stdio+0x3c>)
 8008c02:	4299      	cmp	r1, r3
 8008c04:	d004      	beq.n	8008c10 <cleanup_stdio+0x30>
 8008c06:	4620      	mov	r0, r4
 8008c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c0c:	f000 be38 	b.w	8009880 <_fflush_r>
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	bf00      	nop
 8008c14:	200003a8 	.word	0x200003a8
 8008c18:	20000410 	.word	0x20000410
 8008c1c:	20000478 	.word	0x20000478

08008c20 <global_stdio_init.part.0>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <global_stdio_init.part.0+0x30>)
 8008c24:	4c0b      	ldr	r4, [pc, #44]	@ (8008c54 <global_stdio_init.part.0+0x34>)
 8008c26:	4a0c      	ldr	r2, [pc, #48]	@ (8008c58 <global_stdio_init.part.0+0x38>)
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2104      	movs	r1, #4
 8008c30:	f7ff ff94 	bl	8008b5c <std>
 8008c34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c38:	2201      	movs	r2, #1
 8008c3a:	2109      	movs	r1, #9
 8008c3c:	f7ff ff8e 	bl	8008b5c <std>
 8008c40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c44:	2202      	movs	r2, #2
 8008c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4a:	2112      	movs	r1, #18
 8008c4c:	f7ff bf86 	b.w	8008b5c <std>
 8008c50:	200004e0 	.word	0x200004e0
 8008c54:	200003a8 	.word	0x200003a8
 8008c58:	08008bc9 	.word	0x08008bc9

08008c5c <__sfp_lock_acquire>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	@ (8008c64 <__sfp_lock_acquire+0x8>)
 8008c5e:	f000 ba6e 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	200004e9 	.word	0x200004e9

08008c68 <__sfp_lock_release>:
 8008c68:	4801      	ldr	r0, [pc, #4]	@ (8008c70 <__sfp_lock_release+0x8>)
 8008c6a:	f000 ba69 	b.w	8009140 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	200004e9 	.word	0x200004e9

08008c74 <__sinit>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	4604      	mov	r4, r0
 8008c78:	f7ff fff0 	bl	8008c5c <__sfp_lock_acquire>
 8008c7c:	6a23      	ldr	r3, [r4, #32]
 8008c7e:	b11b      	cbz	r3, 8008c88 <__sinit+0x14>
 8008c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c84:	f7ff bff0 	b.w	8008c68 <__sfp_lock_release>
 8008c88:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <__sinit+0x28>)
 8008c8a:	6223      	str	r3, [r4, #32]
 8008c8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ca0 <__sinit+0x2c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f5      	bne.n	8008c80 <__sinit+0xc>
 8008c94:	f7ff ffc4 	bl	8008c20 <global_stdio_init.part.0>
 8008c98:	e7f2      	b.n	8008c80 <__sinit+0xc>
 8008c9a:	bf00      	nop
 8008c9c:	08008be1 	.word	0x08008be1
 8008ca0:	200004e0 	.word	0x200004e0

08008ca4 <_fwalk_sglue>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4607      	mov	r7, r0
 8008caa:	4688      	mov	r8, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8008cb8:	d505      	bpl.n	8008cc6 <_fwalk_sglue+0x22>
 8008cba:	6824      	ldr	r4, [r4, #0]
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <_fwalk_sglue+0xc>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d907      	bls.n	8008cdc <_fwalk_sglue+0x38>
 8008ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	d003      	beq.n	8008cdc <_fwalk_sglue+0x38>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c0      	blx	r8
 8008cda:	4306      	orrs	r6, r0
 8008cdc:	3568      	adds	r5, #104	@ 0x68
 8008cde:	e7e9      	b.n	8008cb4 <_fwalk_sglue+0x10>

08008ce0 <iprintf>:
 8008ce0:	b40f      	push	{r0, r1, r2, r3}
 8008ce2:	b507      	push	{r0, r1, r2, lr}
 8008ce4:	4906      	ldr	r1, [pc, #24]	@ (8008d00 <iprintf+0x20>)
 8008ce6:	ab04      	add	r3, sp, #16
 8008ce8:	6808      	ldr	r0, [r1, #0]
 8008cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cee:	6881      	ldr	r1, [r0, #8]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	f000 fa9b 	bl	800922c <_vfiprintf_r>
 8008cf6:	b003      	add	sp, #12
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b004      	add	sp, #16
 8008cfe:	4770      	bx	lr
 8008d00:	20000018 	.word	0x20000018

08008d04 <_puts_r>:
 8008d04:	6a03      	ldr	r3, [r0, #32]
 8008d06:	b570      	push	{r4, r5, r6, lr}
 8008d08:	6884      	ldr	r4, [r0, #8]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	460e      	mov	r6, r1
 8008d0e:	b90b      	cbnz	r3, 8008d14 <_puts_r+0x10>
 8008d10:	f7ff ffb0 	bl	8008c74 <__sinit>
 8008d14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d16:	07db      	lsls	r3, r3, #31
 8008d18:	d405      	bmi.n	8008d26 <_puts_r+0x22>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	0598      	lsls	r0, r3, #22
 8008d1e:	d402      	bmi.n	8008d26 <_puts_r+0x22>
 8008d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d22:	f000 fa0c 	bl	800913e <__retarget_lock_acquire_recursive>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	0719      	lsls	r1, r3, #28
 8008d2a:	d502      	bpl.n	8008d32 <_puts_r+0x2e>
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d135      	bne.n	8008d9e <_puts_r+0x9a>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 f8c5 	bl	8008ec4 <__swsetup_r>
 8008d3a:	b380      	cbz	r0, 8008d9e <_puts_r+0x9a>
 8008d3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d42:	07da      	lsls	r2, r3, #31
 8008d44:	d405      	bmi.n	8008d52 <_puts_r+0x4e>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	059b      	lsls	r3, r3, #22
 8008d4a:	d402      	bmi.n	8008d52 <_puts_r+0x4e>
 8008d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d4e:	f000 f9f7 	bl	8009140 <__retarget_lock_release_recursive>
 8008d52:	4628      	mov	r0, r5
 8008d54:	bd70      	pop	{r4, r5, r6, pc}
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da04      	bge.n	8008d64 <_puts_r+0x60>
 8008d5a:	69a2      	ldr	r2, [r4, #24]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	dc17      	bgt.n	8008d90 <_puts_r+0x8c>
 8008d60:	290a      	cmp	r1, #10
 8008d62:	d015      	beq.n	8008d90 <_puts_r+0x8c>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	7019      	strb	r1, [r3, #0]
 8008d6c:	68a3      	ldr	r3, [r4, #8]
 8008d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d72:	3b01      	subs	r3, #1
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	2900      	cmp	r1, #0
 8008d78:	d1ed      	bne.n	8008d56 <_puts_r+0x52>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da11      	bge.n	8008da2 <_puts_r+0x9e>
 8008d7e:	4622      	mov	r2, r4
 8008d80:	210a      	movs	r1, #10
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 f85f 	bl	8008e46 <__swbuf_r>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d0d7      	beq.n	8008d3c <_puts_r+0x38>
 8008d8c:	250a      	movs	r5, #10
 8008d8e:	e7d7      	b.n	8008d40 <_puts_r+0x3c>
 8008d90:	4622      	mov	r2, r4
 8008d92:	4628      	mov	r0, r5
 8008d94:	f000 f857 	bl	8008e46 <__swbuf_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d1e7      	bne.n	8008d6c <_puts_r+0x68>
 8008d9c:	e7ce      	b.n	8008d3c <_puts_r+0x38>
 8008d9e:	3e01      	subs	r6, #1
 8008da0:	e7e4      	b.n	8008d6c <_puts_r+0x68>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	220a      	movs	r2, #10
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e7ee      	b.n	8008d8c <_puts_r+0x88>
	...

08008db0 <puts>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	@ (8008dbc <puts+0xc>)
 8008db2:	4601      	mov	r1, r0
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f7ff bfa5 	b.w	8008d04 <_puts_r>
 8008dba:	bf00      	nop
 8008dbc:	20000018 	.word	0x20000018

08008dc0 <__sread>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc8:	f000 f946 	bl	8009058 <_read_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	bfab      	itete	ge
 8008dd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008dd4:	181b      	addge	r3, r3, r0
 8008dd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dda:	bfac      	ite	ge
 8008ddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dde:	81a3      	strhlt	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__swrite>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	461f      	mov	r7, r3
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	05db      	lsls	r3, r3, #23
 8008dec:	4605      	mov	r5, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	4616      	mov	r6, r2
 8008df2:	d505      	bpl.n	8008e00 <__swrite+0x1e>
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	2302      	movs	r3, #2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f000 f91a 	bl	8009034 <_lseek_r>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	4628      	mov	r0, r5
 8008e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	f000 b955 	b.w	80090c4 <_write_r>

08008e1a <__sseek>:
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e22:	f000 f907 	bl	8009034 <_lseek_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	bf15      	itete	ne
 8008e2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e36:	81a3      	strheq	r3, [r4, #12]
 8008e38:	bf18      	it	ne
 8008e3a:	81a3      	strhne	r3, [r4, #12]
 8008e3c:	bd10      	pop	{r4, pc}

08008e3e <__sclose>:
 8008e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e42:	f000 b8e7 	b.w	8009014 <_close_r>

08008e46 <__swbuf_r>:
 8008e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e48:	460e      	mov	r6, r1
 8008e4a:	4614      	mov	r4, r2
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	b118      	cbz	r0, 8008e58 <__swbuf_r+0x12>
 8008e50:	6a03      	ldr	r3, [r0, #32]
 8008e52:	b90b      	cbnz	r3, 8008e58 <__swbuf_r+0x12>
 8008e54:	f7ff ff0e 	bl	8008c74 <__sinit>
 8008e58:	69a3      	ldr	r3, [r4, #24]
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	071a      	lsls	r2, r3, #28
 8008e60:	d501      	bpl.n	8008e66 <__swbuf_r+0x20>
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	b943      	cbnz	r3, 8008e78 <__swbuf_r+0x32>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f82b 	bl	8008ec4 <__swsetup_r>
 8008e6e:	b118      	cbz	r0, 8008e78 <__swbuf_r+0x32>
 8008e70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008e74:	4638      	mov	r0, r7
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	6922      	ldr	r2, [r4, #16]
 8008e7c:	1a98      	subs	r0, r3, r2
 8008e7e:	6963      	ldr	r3, [r4, #20]
 8008e80:	b2f6      	uxtb	r6, r6
 8008e82:	4283      	cmp	r3, r0
 8008e84:	4637      	mov	r7, r6
 8008e86:	dc05      	bgt.n	8008e94 <__swbuf_r+0x4e>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 fcf8 	bl	8009880 <_fflush_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1ed      	bne.n	8008e70 <__swbuf_r+0x2a>
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	701e      	strb	r6, [r3, #0]
 8008ea2:	6962      	ldr	r2, [r4, #20]
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d004      	beq.n	8008eb4 <__swbuf_r+0x6e>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	07db      	lsls	r3, r3, #31
 8008eae:	d5e1      	bpl.n	8008e74 <__swbuf_r+0x2e>
 8008eb0:	2e0a      	cmp	r6, #10
 8008eb2:	d1df      	bne.n	8008e74 <__swbuf_r+0x2e>
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 fce2 	bl	8009880 <_fflush_r>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d0d9      	beq.n	8008e74 <__swbuf_r+0x2e>
 8008ec0:	e7d6      	b.n	8008e70 <__swbuf_r+0x2a>
	...

08008ec4 <__swsetup_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4b29      	ldr	r3, [pc, #164]	@ (8008f6c <__swsetup_r+0xa8>)
 8008ec8:	4605      	mov	r5, r0
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	460c      	mov	r4, r1
 8008ece:	b118      	cbz	r0, 8008ed8 <__swsetup_r+0x14>
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	b90b      	cbnz	r3, 8008ed8 <__swsetup_r+0x14>
 8008ed4:	f7ff fece 	bl	8008c74 <__sinit>
 8008ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008edc:	0719      	lsls	r1, r3, #28
 8008ede:	d422      	bmi.n	8008f26 <__swsetup_r+0x62>
 8008ee0:	06da      	lsls	r2, r3, #27
 8008ee2:	d407      	bmi.n	8008ef4 <__swsetup_r+0x30>
 8008ee4:	2209      	movs	r2, #9
 8008ee6:	602a      	str	r2, [r5, #0]
 8008ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ef2:	e033      	b.n	8008f5c <__swsetup_r+0x98>
 8008ef4:	0758      	lsls	r0, r3, #29
 8008ef6:	d512      	bpl.n	8008f1e <__swsetup_r+0x5a>
 8008ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008efa:	b141      	cbz	r1, 8008f0e <__swsetup_r+0x4a>
 8008efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f00:	4299      	cmp	r1, r3
 8008f02:	d002      	beq.n	8008f0a <__swsetup_r+0x46>
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 f91d 	bl	8009144 <_free_r>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	2300      	movs	r3, #0
 8008f18:	6063      	str	r3, [r4, #4]
 8008f1a:	6923      	ldr	r3, [r4, #16]
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	b94b      	cbnz	r3, 8008f3e <__swsetup_r+0x7a>
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f34:	d003      	beq.n	8008f3e <__swsetup_r+0x7a>
 8008f36:	4621      	mov	r1, r4
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 fcef 	bl	800991c <__smakebuf_r>
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	f013 0201 	ands.w	r2, r3, #1
 8008f46:	d00a      	beq.n	8008f5e <__swsetup_r+0x9a>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	60a2      	str	r2, [r4, #8]
 8008f4c:	6962      	ldr	r2, [r4, #20]
 8008f4e:	4252      	negs	r2, r2
 8008f50:	61a2      	str	r2, [r4, #24]
 8008f52:	6922      	ldr	r2, [r4, #16]
 8008f54:	b942      	cbnz	r2, 8008f68 <__swsetup_r+0xa4>
 8008f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f5a:	d1c5      	bne.n	8008ee8 <__swsetup_r+0x24>
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	0799      	lsls	r1, r3, #30
 8008f60:	bf58      	it	pl
 8008f62:	6962      	ldrpl	r2, [r4, #20]
 8008f64:	60a2      	str	r2, [r4, #8]
 8008f66:	e7f4      	b.n	8008f52 <__swsetup_r+0x8e>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7f7      	b.n	8008f5c <__swsetup_r+0x98>
 8008f6c:	20000018 	.word	0x20000018

08008f70 <memmove>:
 8008f70:	4288      	cmp	r0, r1
 8008f72:	b510      	push	{r4, lr}
 8008f74:	eb01 0402 	add.w	r4, r1, r2
 8008f78:	d902      	bls.n	8008f80 <memmove+0x10>
 8008f7a:	4284      	cmp	r4, r0
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	d807      	bhi.n	8008f90 <memmove+0x20>
 8008f80:	1e43      	subs	r3, r0, #1
 8008f82:	42a1      	cmp	r1, r4
 8008f84:	d008      	beq.n	8008f98 <memmove+0x28>
 8008f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f8e:	e7f8      	b.n	8008f82 <memmove+0x12>
 8008f90:	4402      	add	r2, r0
 8008f92:	4601      	mov	r1, r0
 8008f94:	428a      	cmp	r2, r1
 8008f96:	d100      	bne.n	8008f9a <memmove+0x2a>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa2:	e7f7      	b.n	8008f94 <memmove+0x24>

08008fa4 <memset>:
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d100      	bne.n	8008fae <memset+0xa>
 8008fac:	4770      	bx	lr
 8008fae:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb2:	e7f9      	b.n	8008fa8 <memset+0x4>

08008fb4 <_raise_r>:
 8008fb4:	291f      	cmp	r1, #31
 8008fb6:	b538      	push	{r3, r4, r5, lr}
 8008fb8:	4605      	mov	r5, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	d904      	bls.n	8008fc8 <_raise_r+0x14>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fca:	b112      	cbz	r2, 8008fd2 <_raise_r+0x1e>
 8008fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fd0:	b94b      	cbnz	r3, 8008fe6 <_raise_r+0x32>
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f864 	bl	80090a0 <_getpid_r>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4601      	mov	r1, r0
 8008fdc:	4628      	mov	r0, r5
 8008fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe2:	f000 b84b 	b.w	800907c <_kill_r>
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d00a      	beq.n	8009000 <_raise_r+0x4c>
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	d103      	bne.n	8008ff6 <_raise_r+0x42>
 8008fee:	2316      	movs	r3, #22
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7e7      	b.n	8008fc6 <_raise_r+0x12>
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	4798      	blx	r3
 8009000:	2000      	movs	r0, #0
 8009002:	e7e0      	b.n	8008fc6 <_raise_r+0x12>

08009004 <raise>:
 8009004:	4b02      	ldr	r3, [pc, #8]	@ (8009010 <raise+0xc>)
 8009006:	4601      	mov	r1, r0
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	f7ff bfd3 	b.w	8008fb4 <_raise_r>
 800900e:	bf00      	nop
 8009010:	20000018 	.word	0x20000018

08009014 <_close_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4d06      	ldr	r5, [pc, #24]	@ (8009030 <_close_r+0x1c>)
 8009018:	2300      	movs	r3, #0
 800901a:	4604      	mov	r4, r0
 800901c:	4608      	mov	r0, r1
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	f7fb fbf0 	bl	8004804 <_close>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_close_r+0x1a>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_close_r+0x1a>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	200004e4 	.word	0x200004e4

08009034 <_lseek_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d07      	ldr	r5, [pc, #28]	@ (8009054 <_lseek_r+0x20>)
 8009038:	4604      	mov	r4, r0
 800903a:	4608      	mov	r0, r1
 800903c:	4611      	mov	r1, r2
 800903e:	2200      	movs	r2, #0
 8009040:	602a      	str	r2, [r5, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	f7fb fc05 	bl	8004852 <_lseek>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_lseek_r+0x1e>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_lseek_r+0x1e>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	200004e4 	.word	0x200004e4

08009058 <_read_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d07      	ldr	r5, [pc, #28]	@ (8009078 <_read_r+0x20>)
 800905c:	4604      	mov	r4, r0
 800905e:	4608      	mov	r0, r1
 8009060:	4611      	mov	r1, r2
 8009062:	2200      	movs	r2, #0
 8009064:	602a      	str	r2, [r5, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	f7fb fbaf 	bl	80047ca <_read>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_read_r+0x1e>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_read_r+0x1e>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	200004e4 	.word	0x200004e4

0800907c <_kill_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	@ (800909c <_kill_r+0x20>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7fb fb83 	bl	8004794 <_kill>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_kill_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_kill_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	200004e4 	.word	0x200004e4

080090a0 <_getpid_r>:
 80090a0:	f7fb bb70 	b.w	8004784 <_getpid>

080090a4 <_sbrk_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	@ (80090c0 <_sbrk_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7fb fbdc 	bl	800486c <_sbrk>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_sbrk_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_sbrk_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	200004e4 	.word	0x200004e4

080090c4 <_write_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	@ (80090e4 <_write_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 fe16 	bl	8001d04 <_write>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_write_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_write_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	200004e4 	.word	0x200004e4

080090e8 <__errno>:
 80090e8:	4b01      	ldr	r3, [pc, #4]	@ (80090f0 <__errno+0x8>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000018 	.word	0x20000018

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	@ (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	@ (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	@ (8009138 <__libc_init_array+0x44>)
 8009108:	f000 fc66 	bl	80099d8 <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	08009d54 	.word	0x08009d54
 8009130:	08009d54 	.word	0x08009d54
 8009134:	08009d54 	.word	0x08009d54
 8009138:	08009d5c 	.word	0x08009d5c

0800913c <__retarget_lock_init_recursive>:
 800913c:	4770      	bx	lr

0800913e <__retarget_lock_acquire_recursive>:
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_release_recursive>:
 8009140:	4770      	bx	lr
	...

08009144 <_free_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	2900      	cmp	r1, #0
 800914a:	d041      	beq.n	80091d0 <_free_r+0x8c>
 800914c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009150:	1f0c      	subs	r4, r1, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	18e4      	addlt	r4, r4, r3
 8009158:	f7ff fcf4 	bl	8008b44 <__malloc_lock>
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <_free_r+0x90>)
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	b933      	cbnz	r3, 8009170 <_free_r+0x2c>
 8009162:	6063      	str	r3, [r4, #4]
 8009164:	6014      	str	r4, [r2, #0]
 8009166:	4628      	mov	r0, r5
 8009168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916c:	f7ff bcf0 	b.w	8008b50 <__malloc_unlock>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d908      	bls.n	8009186 <_free_r+0x42>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf01      	itttt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	1809      	addeq	r1, r1, r0
 8009182:	6021      	streq	r1, [r4, #0]
 8009184:	e7ed      	b.n	8009162 <_free_r+0x1e>
 8009186:	461a      	mov	r2, r3
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b10b      	cbz	r3, 8009190 <_free_r+0x4c>
 800918c:	42a3      	cmp	r3, r4
 800918e:	d9fa      	bls.n	8009186 <_free_r+0x42>
 8009190:	6811      	ldr	r1, [r2, #0]
 8009192:	1850      	adds	r0, r2, r1
 8009194:	42a0      	cmp	r0, r4
 8009196:	d10b      	bne.n	80091b0 <_free_r+0x6c>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	4401      	add	r1, r0
 800919c:	1850      	adds	r0, r2, r1
 800919e:	4283      	cmp	r3, r0
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	d1e0      	bne.n	8009166 <_free_r+0x22>
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	6053      	str	r3, [r2, #4]
 80091aa:	4408      	add	r0, r1
 80091ac:	6010      	str	r0, [r2, #0]
 80091ae:	e7da      	b.n	8009166 <_free_r+0x22>
 80091b0:	d902      	bls.n	80091b8 <_free_r+0x74>
 80091b2:	230c      	movs	r3, #12
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	e7d6      	b.n	8009166 <_free_r+0x22>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	1821      	adds	r1, r4, r0
 80091bc:	428b      	cmp	r3, r1
 80091be:	bf04      	itt	eq
 80091c0:	6819      	ldreq	r1, [r3, #0]
 80091c2:	685b      	ldreq	r3, [r3, #4]
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	bf04      	itt	eq
 80091c8:	1809      	addeq	r1, r1, r0
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	6054      	str	r4, [r2, #4]
 80091ce:	e7ca      	b.n	8009166 <_free_r+0x22>
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	200003a4 	.word	0x200003a4

080091d8 <__sfputc_r>:
 80091d8:	6893      	ldr	r3, [r2, #8]
 80091da:	3b01      	subs	r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	b410      	push	{r4}
 80091e0:	6093      	str	r3, [r2, #8]
 80091e2:	da08      	bge.n	80091f6 <__sfputc_r+0x1e>
 80091e4:	6994      	ldr	r4, [r2, #24]
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	db01      	blt.n	80091ee <__sfputc_r+0x16>
 80091ea:	290a      	cmp	r1, #10
 80091ec:	d103      	bne.n	80091f6 <__sfputc_r+0x1e>
 80091ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f2:	f7ff be28 	b.w	8008e46 <__swbuf_r>
 80091f6:	6813      	ldr	r3, [r2, #0]
 80091f8:	1c58      	adds	r0, r3, #1
 80091fa:	6010      	str	r0, [r2, #0]
 80091fc:	7019      	strb	r1, [r3, #0]
 80091fe:	4608      	mov	r0, r1
 8009200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009204:	4770      	bx	lr

08009206 <__sfputs_r>:
 8009206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009208:	4606      	mov	r6, r0
 800920a:	460f      	mov	r7, r1
 800920c:	4614      	mov	r4, r2
 800920e:	18d5      	adds	r5, r2, r3
 8009210:	42ac      	cmp	r4, r5
 8009212:	d101      	bne.n	8009218 <__sfputs_r+0x12>
 8009214:	2000      	movs	r0, #0
 8009216:	e007      	b.n	8009228 <__sfputs_r+0x22>
 8009218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921c:	463a      	mov	r2, r7
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ffda 	bl	80091d8 <__sfputc_r>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d1f3      	bne.n	8009210 <__sfputs_r+0xa>
 8009228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800922c <_vfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	460d      	mov	r5, r1
 8009232:	b09d      	sub	sp, #116	@ 0x74
 8009234:	4614      	mov	r4, r2
 8009236:	4698      	mov	r8, r3
 8009238:	4606      	mov	r6, r0
 800923a:	b118      	cbz	r0, 8009244 <_vfiprintf_r+0x18>
 800923c:	6a03      	ldr	r3, [r0, #32]
 800923e:	b90b      	cbnz	r3, 8009244 <_vfiprintf_r+0x18>
 8009240:	f7ff fd18 	bl	8008c74 <__sinit>
 8009244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 8009250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009252:	f7ff ff74 	bl	800913e <__retarget_lock_acquire_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	071b      	lsls	r3, r3, #28
 800925a:	d501      	bpl.n	8009260 <_vfiprintf_r+0x34>
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	b99b      	cbnz	r3, 8009288 <_vfiprintf_r+0x5c>
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff fe2e 	bl	8008ec4 <__swsetup_r>
 8009268:	b170      	cbz	r0, 8009288 <_vfiprintf_r+0x5c>
 800926a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926c:	07dc      	lsls	r4, r3, #31
 800926e:	d504      	bpl.n	800927a <_vfiprintf_r+0x4e>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009274:	b01d      	add	sp, #116	@ 0x74
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	0598      	lsls	r0, r3, #22
 800927e:	d4f7      	bmi.n	8009270 <_vfiprintf_r+0x44>
 8009280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009282:	f7ff ff5d 	bl	8009140 <__retarget_lock_release_recursive>
 8009286:	e7f3      	b.n	8009270 <_vfiprintf_r+0x44>
 8009288:	2300      	movs	r3, #0
 800928a:	9309      	str	r3, [sp, #36]	@ 0x24
 800928c:	2320      	movs	r3, #32
 800928e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009292:	f8cd 800c 	str.w	r8, [sp, #12]
 8009296:	2330      	movs	r3, #48	@ 0x30
 8009298:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009448 <_vfiprintf_r+0x21c>
 800929c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092a0:	f04f 0901 	mov.w	r9, #1
 80092a4:	4623      	mov	r3, r4
 80092a6:	469a      	mov	sl, r3
 80092a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ac:	b10a      	cbz	r2, 80092b2 <_vfiprintf_r+0x86>
 80092ae:	2a25      	cmp	r2, #37	@ 0x25
 80092b0:	d1f9      	bne.n	80092a6 <_vfiprintf_r+0x7a>
 80092b2:	ebba 0b04 	subs.w	fp, sl, r4
 80092b6:	d00b      	beq.n	80092d0 <_vfiprintf_r+0xa4>
 80092b8:	465b      	mov	r3, fp
 80092ba:	4622      	mov	r2, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ffa1 	bl	8009206 <__sfputs_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	f000 80a7 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092cc:	445a      	add	r2, fp
 80092ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 809f 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092da:	2300      	movs	r3, #0
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80092f2:	4654      	mov	r4, sl
 80092f4:	2205      	movs	r2, #5
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	4853      	ldr	r0, [pc, #332]	@ (8009448 <_vfiprintf_r+0x21c>)
 80092fc:	f7f6 ff90 	bl	8000220 <memchr>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	b9d8      	cbnz	r0, 800933c <_vfiprintf_r+0x110>
 8009304:	06d1      	lsls	r1, r2, #27
 8009306:	bf44      	itt	mi
 8009308:	2320      	movmi	r3, #32
 800930a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800930e:	0713      	lsls	r3, r2, #28
 8009310:	bf44      	itt	mi
 8009312:	232b      	movmi	r3, #43	@ 0x2b
 8009314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b2a      	cmp	r3, #42	@ 0x2a
 800931e:	d015      	beq.n	800934c <_vfiprintf_r+0x120>
 8009320:	9a07      	ldr	r2, [sp, #28]
 8009322:	4654      	mov	r4, sl
 8009324:	2000      	movs	r0, #0
 8009326:	f04f 0c0a 	mov.w	ip, #10
 800932a:	4621      	mov	r1, r4
 800932c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009330:	3b30      	subs	r3, #48	@ 0x30
 8009332:	2b09      	cmp	r3, #9
 8009334:	d94b      	bls.n	80093ce <_vfiprintf_r+0x1a2>
 8009336:	b1b0      	cbz	r0, 8009366 <_vfiprintf_r+0x13a>
 8009338:	9207      	str	r2, [sp, #28]
 800933a:	e014      	b.n	8009366 <_vfiprintf_r+0x13a>
 800933c:	eba0 0308 	sub.w	r3, r0, r8
 8009340:	fa09 f303 	lsl.w	r3, r9, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	46a2      	mov	sl, r4
 800934a:	e7d2      	b.n	80092f2 <_vfiprintf_r+0xc6>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfbb      	ittet	lt
 8009358:	425b      	neglt	r3, r3
 800935a:	f042 0202 	orrlt.w	r2, r2, #2
 800935e:	9307      	strge	r3, [sp, #28]
 8009360:	9307      	strlt	r3, [sp, #28]
 8009362:	bfb8      	it	lt
 8009364:	9204      	strlt	r2, [sp, #16]
 8009366:	7823      	ldrb	r3, [r4, #0]
 8009368:	2b2e      	cmp	r3, #46	@ 0x2e
 800936a:	d10a      	bne.n	8009382 <_vfiprintf_r+0x156>
 800936c:	7863      	ldrb	r3, [r4, #1]
 800936e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009370:	d132      	bne.n	80093d8 <_vfiprintf_r+0x1ac>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	1d1a      	adds	r2, r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	9203      	str	r2, [sp, #12]
 800937a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800937e:	3402      	adds	r4, #2
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009458 <_vfiprintf_r+0x22c>
 8009386:	7821      	ldrb	r1, [r4, #0]
 8009388:	2203      	movs	r2, #3
 800938a:	4650      	mov	r0, sl
 800938c:	f7f6 ff48 	bl	8000220 <memchr>
 8009390:	b138      	cbz	r0, 80093a2 <_vfiprintf_r+0x176>
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	eba0 000a 	sub.w	r0, r0, sl
 8009398:	2240      	movs	r2, #64	@ 0x40
 800939a:	4082      	lsls	r2, r0
 800939c:	4313      	orrs	r3, r2
 800939e:	3401      	adds	r4, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4829      	ldr	r0, [pc, #164]	@ (800944c <_vfiprintf_r+0x220>)
 80093a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ac:	2206      	movs	r2, #6
 80093ae:	f7f6 ff37 	bl	8000220 <memchr>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d03f      	beq.n	8009436 <_vfiprintf_r+0x20a>
 80093b6:	4b26      	ldr	r3, [pc, #152]	@ (8009450 <_vfiprintf_r+0x224>)
 80093b8:	bb1b      	cbnz	r3, 8009402 <_vfiprintf_r+0x1d6>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	3308      	adds	r3, #8
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	443b      	add	r3, r7
 80093ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80093cc:	e76a      	b.n	80092a4 <_vfiprintf_r+0x78>
 80093ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d2:	460c      	mov	r4, r1
 80093d4:	2001      	movs	r0, #1
 80093d6:	e7a8      	b.n	800932a <_vfiprintf_r+0xfe>
 80093d8:	2300      	movs	r3, #0
 80093da:	3401      	adds	r4, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	4619      	mov	r1, r3
 80093e0:	f04f 0c0a 	mov.w	ip, #10
 80093e4:	4620      	mov	r0, r4
 80093e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ea:	3a30      	subs	r2, #48	@ 0x30
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d903      	bls.n	80093f8 <_vfiprintf_r+0x1cc>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c6      	beq.n	8009382 <_vfiprintf_r+0x156>
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	e7c4      	b.n	8009382 <_vfiprintf_r+0x156>
 80093f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fc:	4604      	mov	r4, r0
 80093fe:	2301      	movs	r3, #1
 8009400:	e7f0      	b.n	80093e4 <_vfiprintf_r+0x1b8>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b12      	ldr	r3, [pc, #72]	@ (8009454 <_vfiprintf_r+0x228>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4630      	mov	r0, r6
 800940e:	f3af 8000 	nop.w
 8009412:	4607      	mov	r7, r0
 8009414:	1c78      	adds	r0, r7, #1
 8009416:	d1d6      	bne.n	80093c6 <_vfiprintf_r+0x19a>
 8009418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 8009424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009426:	f7ff fe8b 	bl	8009140 <__retarget_lock_release_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	065b      	lsls	r3, r3, #25
 800942e:	f53f af1f 	bmi.w	8009270 <_vfiprintf_r+0x44>
 8009432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009434:	e71e      	b.n	8009274 <_vfiprintf_r+0x48>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4b05      	ldr	r3, [pc, #20]	@ (8009454 <_vfiprintf_r+0x228>)
 800943e:	a904      	add	r1, sp, #16
 8009440:	4630      	mov	r0, r6
 8009442:	f000 f879 	bl	8009538 <_printf_i>
 8009446:	e7e4      	b.n	8009412 <_vfiprintf_r+0x1e6>
 8009448:	08009d18 	.word	0x08009d18
 800944c:	08009d22 	.word	0x08009d22
 8009450:	00000000 	.word	0x00000000
 8009454:	08009207 	.word	0x08009207
 8009458:	08009d1e 	.word	0x08009d1e

0800945c <_printf_common>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	4616      	mov	r6, r2
 8009462:	4698      	mov	r8, r3
 8009464:	688a      	ldr	r2, [r1, #8]
 8009466:	690b      	ldr	r3, [r1, #16]
 8009468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800946c:	4293      	cmp	r3, r2
 800946e:	bfb8      	it	lt
 8009470:	4613      	movlt	r3, r2
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009478:	4607      	mov	r7, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b10a      	cbz	r2, 8009482 <_printf_common+0x26>
 800947e:	3301      	adds	r3, #1
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	0699      	lsls	r1, r3, #26
 8009486:	bf42      	ittt	mi
 8009488:	6833      	ldrmi	r3, [r6, #0]
 800948a:	3302      	addmi	r3, #2
 800948c:	6033      	strmi	r3, [r6, #0]
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	f015 0506 	ands.w	r5, r5, #6
 8009494:	d106      	bne.n	80094a4 <_printf_common+0x48>
 8009496:	f104 0a19 	add.w	sl, r4, #25
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	6832      	ldr	r2, [r6, #0]
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dc26      	bgt.n	80094f2 <_printf_common+0x96>
 80094a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094a8:	6822      	ldr	r2, [r4, #0]
 80094aa:	3b00      	subs	r3, #0
 80094ac:	bf18      	it	ne
 80094ae:	2301      	movne	r3, #1
 80094b0:	0692      	lsls	r2, r2, #26
 80094b2:	d42b      	bmi.n	800950c <_printf_common+0xb0>
 80094b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094b8:	4641      	mov	r1, r8
 80094ba:	4638      	mov	r0, r7
 80094bc:	47c8      	blx	r9
 80094be:	3001      	adds	r0, #1
 80094c0:	d01e      	beq.n	8009500 <_printf_common+0xa4>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	f003 0306 	and.w	r3, r3, #6
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	bf02      	ittt	eq
 80094ce:	68e5      	ldreq	r5, [r4, #12]
 80094d0:	6833      	ldreq	r3, [r6, #0]
 80094d2:	1aed      	subeq	r5, r5, r3
 80094d4:	68a3      	ldr	r3, [r4, #8]
 80094d6:	bf0c      	ite	eq
 80094d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094dc:	2500      	movne	r5, #0
 80094de:	4293      	cmp	r3, r2
 80094e0:	bfc4      	itt	gt
 80094e2:	1a9b      	subgt	r3, r3, r2
 80094e4:	18ed      	addgt	r5, r5, r3
 80094e6:	2600      	movs	r6, #0
 80094e8:	341a      	adds	r4, #26
 80094ea:	42b5      	cmp	r5, r6
 80094ec:	d11a      	bne.n	8009524 <_printf_common+0xc8>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e008      	b.n	8009504 <_printf_common+0xa8>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4652      	mov	r2, sl
 80094f6:	4641      	mov	r1, r8
 80094f8:	4638      	mov	r0, r7
 80094fa:	47c8      	blx	r9
 80094fc:	3001      	adds	r0, #1
 80094fe:	d103      	bne.n	8009508 <_printf_common+0xac>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	3501      	adds	r5, #1
 800950a:	e7c6      	b.n	800949a <_printf_common+0x3e>
 800950c:	18e1      	adds	r1, r4, r3
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	2030      	movs	r0, #48	@ 0x30
 8009512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009516:	4422      	add	r2, r4
 8009518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800951c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009520:	3302      	adds	r3, #2
 8009522:	e7c7      	b.n	80094b4 <_printf_common+0x58>
 8009524:	2301      	movs	r3, #1
 8009526:	4622      	mov	r2, r4
 8009528:	4641      	mov	r1, r8
 800952a:	4638      	mov	r0, r7
 800952c:	47c8      	blx	r9
 800952e:	3001      	adds	r0, #1
 8009530:	d0e6      	beq.n	8009500 <_printf_common+0xa4>
 8009532:	3601      	adds	r6, #1
 8009534:	e7d9      	b.n	80094ea <_printf_common+0x8e>
	...

08009538 <_printf_i>:
 8009538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800953c:	7e0f      	ldrb	r7, [r1, #24]
 800953e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009540:	2f78      	cmp	r7, #120	@ 0x78
 8009542:	4691      	mov	r9, r2
 8009544:	4680      	mov	r8, r0
 8009546:	460c      	mov	r4, r1
 8009548:	469a      	mov	sl, r3
 800954a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800954e:	d807      	bhi.n	8009560 <_printf_i+0x28>
 8009550:	2f62      	cmp	r7, #98	@ 0x62
 8009552:	d80a      	bhi.n	800956a <_printf_i+0x32>
 8009554:	2f00      	cmp	r7, #0
 8009556:	f000 80d2 	beq.w	80096fe <_printf_i+0x1c6>
 800955a:	2f58      	cmp	r7, #88	@ 0x58
 800955c:	f000 80b9 	beq.w	80096d2 <_printf_i+0x19a>
 8009560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009568:	e03a      	b.n	80095e0 <_printf_i+0xa8>
 800956a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800956e:	2b15      	cmp	r3, #21
 8009570:	d8f6      	bhi.n	8009560 <_printf_i+0x28>
 8009572:	a101      	add	r1, pc, #4	@ (adr r1, 8009578 <_printf_i+0x40>)
 8009574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009578:	080095d1 	.word	0x080095d1
 800957c:	080095e5 	.word	0x080095e5
 8009580:	08009561 	.word	0x08009561
 8009584:	08009561 	.word	0x08009561
 8009588:	08009561 	.word	0x08009561
 800958c:	08009561 	.word	0x08009561
 8009590:	080095e5 	.word	0x080095e5
 8009594:	08009561 	.word	0x08009561
 8009598:	08009561 	.word	0x08009561
 800959c:	08009561 	.word	0x08009561
 80095a0:	08009561 	.word	0x08009561
 80095a4:	080096e5 	.word	0x080096e5
 80095a8:	0800960f 	.word	0x0800960f
 80095ac:	0800969f 	.word	0x0800969f
 80095b0:	08009561 	.word	0x08009561
 80095b4:	08009561 	.word	0x08009561
 80095b8:	08009707 	.word	0x08009707
 80095bc:	08009561 	.word	0x08009561
 80095c0:	0800960f 	.word	0x0800960f
 80095c4:	08009561 	.word	0x08009561
 80095c8:	08009561 	.word	0x08009561
 80095cc:	080096a7 	.word	0x080096a7
 80095d0:	6833      	ldr	r3, [r6, #0]
 80095d2:	1d1a      	adds	r2, r3, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6032      	str	r2, [r6, #0]
 80095d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095e0:	2301      	movs	r3, #1
 80095e2:	e09d      	b.n	8009720 <_printf_i+0x1e8>
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	6820      	ldr	r0, [r4, #0]
 80095e8:	1d19      	adds	r1, r3, #4
 80095ea:	6031      	str	r1, [r6, #0]
 80095ec:	0606      	lsls	r6, r0, #24
 80095ee:	d501      	bpl.n	80095f4 <_printf_i+0xbc>
 80095f0:	681d      	ldr	r5, [r3, #0]
 80095f2:	e003      	b.n	80095fc <_printf_i+0xc4>
 80095f4:	0645      	lsls	r5, r0, #25
 80095f6:	d5fb      	bpl.n	80095f0 <_printf_i+0xb8>
 80095f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	da03      	bge.n	8009608 <_printf_i+0xd0>
 8009600:	232d      	movs	r3, #45	@ 0x2d
 8009602:	426d      	negs	r5, r5
 8009604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009608:	4859      	ldr	r0, [pc, #356]	@ (8009770 <_printf_i+0x238>)
 800960a:	230a      	movs	r3, #10
 800960c:	e011      	b.n	8009632 <_printf_i+0xfa>
 800960e:	6821      	ldr	r1, [r4, #0]
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	0608      	lsls	r0, r1, #24
 8009614:	f853 5b04 	ldr.w	r5, [r3], #4
 8009618:	d402      	bmi.n	8009620 <_printf_i+0xe8>
 800961a:	0649      	lsls	r1, r1, #25
 800961c:	bf48      	it	mi
 800961e:	b2ad      	uxthmi	r5, r5
 8009620:	2f6f      	cmp	r7, #111	@ 0x6f
 8009622:	4853      	ldr	r0, [pc, #332]	@ (8009770 <_printf_i+0x238>)
 8009624:	6033      	str	r3, [r6, #0]
 8009626:	bf14      	ite	ne
 8009628:	230a      	movne	r3, #10
 800962a:	2308      	moveq	r3, #8
 800962c:	2100      	movs	r1, #0
 800962e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009632:	6866      	ldr	r6, [r4, #4]
 8009634:	60a6      	str	r6, [r4, #8]
 8009636:	2e00      	cmp	r6, #0
 8009638:	bfa2      	ittt	ge
 800963a:	6821      	ldrge	r1, [r4, #0]
 800963c:	f021 0104 	bicge.w	r1, r1, #4
 8009640:	6021      	strge	r1, [r4, #0]
 8009642:	b90d      	cbnz	r5, 8009648 <_printf_i+0x110>
 8009644:	2e00      	cmp	r6, #0
 8009646:	d04b      	beq.n	80096e0 <_printf_i+0x1a8>
 8009648:	4616      	mov	r6, r2
 800964a:	fbb5 f1f3 	udiv	r1, r5, r3
 800964e:	fb03 5711 	mls	r7, r3, r1, r5
 8009652:	5dc7      	ldrb	r7, [r0, r7]
 8009654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009658:	462f      	mov	r7, r5
 800965a:	42bb      	cmp	r3, r7
 800965c:	460d      	mov	r5, r1
 800965e:	d9f4      	bls.n	800964a <_printf_i+0x112>
 8009660:	2b08      	cmp	r3, #8
 8009662:	d10b      	bne.n	800967c <_printf_i+0x144>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	07df      	lsls	r7, r3, #31
 8009668:	d508      	bpl.n	800967c <_printf_i+0x144>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	6861      	ldr	r1, [r4, #4]
 800966e:	4299      	cmp	r1, r3
 8009670:	bfde      	ittt	le
 8009672:	2330      	movle	r3, #48	@ 0x30
 8009674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009678:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800967c:	1b92      	subs	r2, r2, r6
 800967e:	6122      	str	r2, [r4, #16]
 8009680:	f8cd a000 	str.w	sl, [sp]
 8009684:	464b      	mov	r3, r9
 8009686:	aa03      	add	r2, sp, #12
 8009688:	4621      	mov	r1, r4
 800968a:	4640      	mov	r0, r8
 800968c:	f7ff fee6 	bl	800945c <_printf_common>
 8009690:	3001      	adds	r0, #1
 8009692:	d14a      	bne.n	800972a <_printf_i+0x1f2>
 8009694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009698:	b004      	add	sp, #16
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f043 0320 	orr.w	r3, r3, #32
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	4833      	ldr	r0, [pc, #204]	@ (8009774 <_printf_i+0x23c>)
 80096a8:	2778      	movs	r7, #120	@ 0x78
 80096aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	6831      	ldr	r1, [r6, #0]
 80096b2:	061f      	lsls	r7, r3, #24
 80096b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80096b8:	d402      	bmi.n	80096c0 <_printf_i+0x188>
 80096ba:	065f      	lsls	r7, r3, #25
 80096bc:	bf48      	it	mi
 80096be:	b2ad      	uxthmi	r5, r5
 80096c0:	6031      	str	r1, [r6, #0]
 80096c2:	07d9      	lsls	r1, r3, #31
 80096c4:	bf44      	itt	mi
 80096c6:	f043 0320 	orrmi.w	r3, r3, #32
 80096ca:	6023      	strmi	r3, [r4, #0]
 80096cc:	b11d      	cbz	r5, 80096d6 <_printf_i+0x19e>
 80096ce:	2310      	movs	r3, #16
 80096d0:	e7ac      	b.n	800962c <_printf_i+0xf4>
 80096d2:	4827      	ldr	r0, [pc, #156]	@ (8009770 <_printf_i+0x238>)
 80096d4:	e7e9      	b.n	80096aa <_printf_i+0x172>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	f023 0320 	bic.w	r3, r3, #32
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	e7f6      	b.n	80096ce <_printf_i+0x196>
 80096e0:	4616      	mov	r6, r2
 80096e2:	e7bd      	b.n	8009660 <_printf_i+0x128>
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	6825      	ldr	r5, [r4, #0]
 80096e8:	6961      	ldr	r1, [r4, #20]
 80096ea:	1d18      	adds	r0, r3, #4
 80096ec:	6030      	str	r0, [r6, #0]
 80096ee:	062e      	lsls	r6, r5, #24
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	d501      	bpl.n	80096f8 <_printf_i+0x1c0>
 80096f4:	6019      	str	r1, [r3, #0]
 80096f6:	e002      	b.n	80096fe <_printf_i+0x1c6>
 80096f8:	0668      	lsls	r0, r5, #25
 80096fa:	d5fb      	bpl.n	80096f4 <_printf_i+0x1bc>
 80096fc:	8019      	strh	r1, [r3, #0]
 80096fe:	2300      	movs	r3, #0
 8009700:	6123      	str	r3, [r4, #16]
 8009702:	4616      	mov	r6, r2
 8009704:	e7bc      	b.n	8009680 <_printf_i+0x148>
 8009706:	6833      	ldr	r3, [r6, #0]
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	6032      	str	r2, [r6, #0]
 800970c:	681e      	ldr	r6, [r3, #0]
 800970e:	6862      	ldr	r2, [r4, #4]
 8009710:	2100      	movs	r1, #0
 8009712:	4630      	mov	r0, r6
 8009714:	f7f6 fd84 	bl	8000220 <memchr>
 8009718:	b108      	cbz	r0, 800971e <_printf_i+0x1e6>
 800971a:	1b80      	subs	r0, r0, r6
 800971c:	6060      	str	r0, [r4, #4]
 800971e:	6863      	ldr	r3, [r4, #4]
 8009720:	6123      	str	r3, [r4, #16]
 8009722:	2300      	movs	r3, #0
 8009724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009728:	e7aa      	b.n	8009680 <_printf_i+0x148>
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	4632      	mov	r2, r6
 800972e:	4649      	mov	r1, r9
 8009730:	4640      	mov	r0, r8
 8009732:	47d0      	blx	sl
 8009734:	3001      	adds	r0, #1
 8009736:	d0ad      	beq.n	8009694 <_printf_i+0x15c>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	079b      	lsls	r3, r3, #30
 800973c:	d413      	bmi.n	8009766 <_printf_i+0x22e>
 800973e:	68e0      	ldr	r0, [r4, #12]
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	4298      	cmp	r0, r3
 8009744:	bfb8      	it	lt
 8009746:	4618      	movlt	r0, r3
 8009748:	e7a6      	b.n	8009698 <_printf_i+0x160>
 800974a:	2301      	movs	r3, #1
 800974c:	4632      	mov	r2, r6
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	47d0      	blx	sl
 8009754:	3001      	adds	r0, #1
 8009756:	d09d      	beq.n	8009694 <_printf_i+0x15c>
 8009758:	3501      	adds	r5, #1
 800975a:	68e3      	ldr	r3, [r4, #12]
 800975c:	9903      	ldr	r1, [sp, #12]
 800975e:	1a5b      	subs	r3, r3, r1
 8009760:	42ab      	cmp	r3, r5
 8009762:	dcf2      	bgt.n	800974a <_printf_i+0x212>
 8009764:	e7eb      	b.n	800973e <_printf_i+0x206>
 8009766:	2500      	movs	r5, #0
 8009768:	f104 0619 	add.w	r6, r4, #25
 800976c:	e7f5      	b.n	800975a <_printf_i+0x222>
 800976e:	bf00      	nop
 8009770:	08009d29 	.word	0x08009d29
 8009774:	08009d3a 	.word	0x08009d3a

08009778 <__sflush_r>:
 8009778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	0716      	lsls	r6, r2, #28
 8009782:	4605      	mov	r5, r0
 8009784:	460c      	mov	r4, r1
 8009786:	d454      	bmi.n	8009832 <__sflush_r+0xba>
 8009788:	684b      	ldr	r3, [r1, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	dc02      	bgt.n	8009794 <__sflush_r+0x1c>
 800978e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	dd48      	ble.n	8009826 <__sflush_r+0xae>
 8009794:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009796:	2e00      	cmp	r6, #0
 8009798:	d045      	beq.n	8009826 <__sflush_r+0xae>
 800979a:	2300      	movs	r3, #0
 800979c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097a0:	682f      	ldr	r7, [r5, #0]
 80097a2:	6a21      	ldr	r1, [r4, #32]
 80097a4:	602b      	str	r3, [r5, #0]
 80097a6:	d030      	beq.n	800980a <__sflush_r+0x92>
 80097a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	0759      	lsls	r1, r3, #29
 80097ae:	d505      	bpl.n	80097bc <__sflush_r+0x44>
 80097b0:	6863      	ldr	r3, [r4, #4]
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097b6:	b10b      	cbz	r3, 80097bc <__sflush_r+0x44>
 80097b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	2300      	movs	r3, #0
 80097be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c0:	6a21      	ldr	r1, [r4, #32]
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b0      	blx	r6
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	d106      	bne.n	80097da <__sflush_r+0x62>
 80097cc:	6829      	ldr	r1, [r5, #0]
 80097ce:	291d      	cmp	r1, #29
 80097d0:	d82b      	bhi.n	800982a <__sflush_r+0xb2>
 80097d2:	4a2a      	ldr	r2, [pc, #168]	@ (800987c <__sflush_r+0x104>)
 80097d4:	410a      	asrs	r2, r1
 80097d6:	07d6      	lsls	r6, r2, #31
 80097d8:	d427      	bmi.n	800982a <__sflush_r+0xb2>
 80097da:	2200      	movs	r2, #0
 80097dc:	6062      	str	r2, [r4, #4]
 80097de:	04d9      	lsls	r1, r3, #19
 80097e0:	6922      	ldr	r2, [r4, #16]
 80097e2:	6022      	str	r2, [r4, #0]
 80097e4:	d504      	bpl.n	80097f0 <__sflush_r+0x78>
 80097e6:	1c42      	adds	r2, r0, #1
 80097e8:	d101      	bne.n	80097ee <__sflush_r+0x76>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	b903      	cbnz	r3, 80097f0 <__sflush_r+0x78>
 80097ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80097f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f2:	602f      	str	r7, [r5, #0]
 80097f4:	b1b9      	cbz	r1, 8009826 <__sflush_r+0xae>
 80097f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097fa:	4299      	cmp	r1, r3
 80097fc:	d002      	beq.n	8009804 <__sflush_r+0x8c>
 80097fe:	4628      	mov	r0, r5
 8009800:	f7ff fca0 	bl	8009144 <_free_r>
 8009804:	2300      	movs	r3, #0
 8009806:	6363      	str	r3, [r4, #52]	@ 0x34
 8009808:	e00d      	b.n	8009826 <__sflush_r+0xae>
 800980a:	2301      	movs	r3, #1
 800980c:	4628      	mov	r0, r5
 800980e:	47b0      	blx	r6
 8009810:	4602      	mov	r2, r0
 8009812:	1c50      	adds	r0, r2, #1
 8009814:	d1c9      	bne.n	80097aa <__sflush_r+0x32>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0c6      	beq.n	80097aa <__sflush_r+0x32>
 800981c:	2b1d      	cmp	r3, #29
 800981e:	d001      	beq.n	8009824 <__sflush_r+0xac>
 8009820:	2b16      	cmp	r3, #22
 8009822:	d11e      	bne.n	8009862 <__sflush_r+0xea>
 8009824:	602f      	str	r7, [r5, #0]
 8009826:	2000      	movs	r0, #0
 8009828:	e022      	b.n	8009870 <__sflush_r+0xf8>
 800982a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982e:	b21b      	sxth	r3, r3
 8009830:	e01b      	b.n	800986a <__sflush_r+0xf2>
 8009832:	690f      	ldr	r7, [r1, #16]
 8009834:	2f00      	cmp	r7, #0
 8009836:	d0f6      	beq.n	8009826 <__sflush_r+0xae>
 8009838:	0793      	lsls	r3, r2, #30
 800983a:	680e      	ldr	r6, [r1, #0]
 800983c:	bf08      	it	eq
 800983e:	694b      	ldreq	r3, [r1, #20]
 8009840:	600f      	str	r7, [r1, #0]
 8009842:	bf18      	it	ne
 8009844:	2300      	movne	r3, #0
 8009846:	eba6 0807 	sub.w	r8, r6, r7
 800984a:	608b      	str	r3, [r1, #8]
 800984c:	f1b8 0f00 	cmp.w	r8, #0
 8009850:	dde9      	ble.n	8009826 <__sflush_r+0xae>
 8009852:	6a21      	ldr	r1, [r4, #32]
 8009854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009856:	4643      	mov	r3, r8
 8009858:	463a      	mov	r2, r7
 800985a:	4628      	mov	r0, r5
 800985c:	47b0      	blx	r6
 800985e:	2800      	cmp	r0, #0
 8009860:	dc08      	bgt.n	8009874 <__sflush_r+0xfc>
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	4407      	add	r7, r0
 8009876:	eba8 0800 	sub.w	r8, r8, r0
 800987a:	e7e7      	b.n	800984c <__sflush_r+0xd4>
 800987c:	dfbffffe 	.word	0xdfbffffe

08009880 <_fflush_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	690b      	ldr	r3, [r1, #16]
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b913      	cbnz	r3, 8009890 <_fflush_r+0x10>
 800988a:	2500      	movs	r5, #0
 800988c:	4628      	mov	r0, r5
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	b118      	cbz	r0, 800989a <_fflush_r+0x1a>
 8009892:	6a03      	ldr	r3, [r0, #32]
 8009894:	b90b      	cbnz	r3, 800989a <_fflush_r+0x1a>
 8009896:	f7ff f9ed 	bl	8008c74 <__sinit>
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f3      	beq.n	800988a <_fflush_r+0xa>
 80098a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098a4:	07d0      	lsls	r0, r2, #31
 80098a6:	d404      	bmi.n	80098b2 <_fflush_r+0x32>
 80098a8:	0599      	lsls	r1, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_fflush_r+0x32>
 80098ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ae:	f7ff fc46 	bl	800913e <__retarget_lock_acquire_recursive>
 80098b2:	4628      	mov	r0, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	f7ff ff5f 	bl	8009778 <__sflush_r>
 80098ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098bc:	07da      	lsls	r2, r3, #31
 80098be:	4605      	mov	r5, r0
 80098c0:	d4e4      	bmi.n	800988c <_fflush_r+0xc>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	d4e1      	bmi.n	800988c <_fflush_r+0xc>
 80098c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ca:	f7ff fc39 	bl	8009140 <__retarget_lock_release_recursive>
 80098ce:	e7dd      	b.n	800988c <_fflush_r+0xc>

080098d0 <__swhatbuf_r>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	460c      	mov	r4, r1
 80098d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d8:	2900      	cmp	r1, #0
 80098da:	b096      	sub	sp, #88	@ 0x58
 80098dc:	4615      	mov	r5, r2
 80098de:	461e      	mov	r6, r3
 80098e0:	da0d      	bge.n	80098fe <__swhatbuf_r+0x2e>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098e8:	f04f 0100 	mov.w	r1, #0
 80098ec:	bf14      	ite	ne
 80098ee:	2340      	movne	r3, #64	@ 0x40
 80098f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098f4:	2000      	movs	r0, #0
 80098f6:	6031      	str	r1, [r6, #0]
 80098f8:	602b      	str	r3, [r5, #0]
 80098fa:	b016      	add	sp, #88	@ 0x58
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
 80098fe:	466a      	mov	r2, sp
 8009900:	f000 f848 	bl	8009994 <_fstat_r>
 8009904:	2800      	cmp	r0, #0
 8009906:	dbec      	blt.n	80098e2 <__swhatbuf_r+0x12>
 8009908:	9901      	ldr	r1, [sp, #4]
 800990a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800990e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009912:	4259      	negs	r1, r3
 8009914:	4159      	adcs	r1, r3
 8009916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991a:	e7eb      	b.n	80098f4 <__swhatbuf_r+0x24>

0800991c <__smakebuf_r>:
 800991c:	898b      	ldrh	r3, [r1, #12]
 800991e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009920:	079d      	lsls	r5, r3, #30
 8009922:	4606      	mov	r6, r0
 8009924:	460c      	mov	r4, r1
 8009926:	d507      	bpl.n	8009938 <__smakebuf_r+0x1c>
 8009928:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	2301      	movs	r3, #1
 8009932:	6163      	str	r3, [r4, #20]
 8009934:	b003      	add	sp, #12
 8009936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009938:	ab01      	add	r3, sp, #4
 800993a:	466a      	mov	r2, sp
 800993c:	f7ff ffc8 	bl	80098d0 <__swhatbuf_r>
 8009940:	9f00      	ldr	r7, [sp, #0]
 8009942:	4605      	mov	r5, r0
 8009944:	4639      	mov	r1, r7
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff f87c 	bl	8008a44 <_malloc_r>
 800994c:	b948      	cbnz	r0, 8009962 <__smakebuf_r+0x46>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	059a      	lsls	r2, r3, #22
 8009954:	d4ee      	bmi.n	8009934 <__smakebuf_r+0x18>
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	f043 0302 	orr.w	r3, r3, #2
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	e7e2      	b.n	8009928 <__smakebuf_r+0xc>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	6020      	str	r0, [r4, #0]
 8009966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009972:	b15b      	cbz	r3, 800998c <__smakebuf_r+0x70>
 8009974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009978:	4630      	mov	r0, r6
 800997a:	f000 f81d 	bl	80099b8 <_isatty_r>
 800997e:	b128      	cbz	r0, 800998c <__smakebuf_r+0x70>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	431d      	orrs	r5, r3
 8009990:	81a5      	strh	r5, [r4, #12]
 8009992:	e7cf      	b.n	8009934 <__smakebuf_r+0x18>

08009994 <_fstat_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d07      	ldr	r5, [pc, #28]	@ (80099b4 <_fstat_r+0x20>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	f7fa ff3b 	bl	800481c <_fstat>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d102      	bne.n	80099b0 <_fstat_r+0x1c>
 80099aa:	682b      	ldr	r3, [r5, #0]
 80099ac:	b103      	cbz	r3, 80099b0 <_fstat_r+0x1c>
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	bf00      	nop
 80099b4:	200004e4 	.word	0x200004e4

080099b8 <_isatty_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	@ (80099d4 <_isatty_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7fa ff3a 	bl	800483c <_isatty>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_isatty_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_isatty_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200004e4 	.word	0x200004e4

080099d8 <_init>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr

080099e4 <_fini>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr
