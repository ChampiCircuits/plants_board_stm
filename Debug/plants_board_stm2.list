
plants_board_stm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecd0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800eeb0  0800eeb0  0000feb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f828  0800f828  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800f828  0800f828  00010828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f830  0800f830  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f830  0800f830  00010830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f838  0800f838  00010838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800f840  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000068  0800f8a8  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800f8a8  00011824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038569  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005599  00000000  00000000  00049601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  0004eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab7  00000000  00000000  00050e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027641  00000000  00000000  000528b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b5e  00000000  00000000  00079ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2395  00000000  00000000  0009da56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fdeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b500  00000000  00000000  0018fe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ee98 	.word	0x0800ee98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800ee98 	.word	0x0800ee98

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3308      	adds	r3, #8
 8000be6:	2224      	movs	r2, #36	@ 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d fbf8 	bl	800e3e0 <memset>

	handle_fdcan_ = handle_fdcan;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
	tx_header_.MessageMarker = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800f630 	.word	0x0800f630

08000c30 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <_ZN9ChampiCanC1Ev+0x2c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3308      	adds	r3, #8
 8000c48:	2224      	movs	r2, #36	@ 0x24
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00d fbc7 	bl	800e3e0 <memset>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800f630 	.word	0x0800f630

08000c60 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 fd51 	bl	8009714 <HAL_FDCAN_Start>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e011      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fec6 	bl	8009a20 <HAL_FDCAN_ActivateNotification>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN9ChampiCan10send_frameEmPhm>:
    {
        ret = 1;
    }
    return ret;
}
int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	615a      	str	r2, [r3, #20]

    // D'abord, on attend que la FIFO ne soit plus pleine. J'ai eu des problèmes en essayant d'envoyer 5 frames d'un coup.
    // En regardant la doc, j'ai vu que la fifo est de 4 en effet. TODO à approfondir.
    // Je mets un timeout de 50ms. C'est petit exprès pour voir si on a encore des problèmes après.
    uint32_t ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fe93 	bl	80099fc <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cd6:	6178      	str	r0, [r7, #20]
    uint32_t start_waiting = HAL_GetTick();
 8000cd8:	f008 fa84 	bl	80091e4 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000cde:	e005      	b.n	8000cec <_ZN9ChampiCan10send_frameEmPhm+0x3a>
        ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f008 fe89 	bl	80099fc <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cea:	6178      	str	r0, [r7, #20]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000cf2:	f008 fa77 	bl	80091e4 <HAL_GetTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d904      	bls.n	8000d06 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <_ZN9ChampiCan10send_frameEmPhm+0x56>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e9      	bne.n	8000ce0 <_ZN9ChampiCan10send_frameEmPhm+0x2e>
    }

    return HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3308      	adds	r3, #8
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f008 fd24 	bl	8009764 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
	...

08000d28 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d3c:	d901      	bls.n	8000d42 <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e084      	b.n	8000e4c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4a41      	ldr	r2, [pc, #260]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	6839      	ldr	r1, [r7, #0]
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d60:	089a      	lsrs	r2, r3, #2
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000d74:	2300      	movs	r3, #0
 8000d76:	4403      	add	r3, r0
 8000d78:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d7e:	e053      	b.n	8000e28 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000d80:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	031b      	lsls	r3, r3, #12
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	8bfb      	ldrh	r3, [r7, #30]
 8000d8a:	019b      	lsls	r3, r3, #6
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	827b      	strh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000d9e:	8a7b      	ldrh	r3, [r7, #18]
 8000da0:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000da2:	2306      	movs	r3, #6
 8000da4:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000da6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000da8:	8bfb      	ldrh	r3, [r7, #30]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10a      	bne.n	8000dc6 <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000db4:	fba3 2301 	umull	r2, r3, r3, r1
 8000db8:	089a      	lsrs	r2, r3, #2
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000dc6:	f107 0014 	add.w	r0, r7, #20
 8000dca:	3002      	adds	r0, #2
 8000dcc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	6a3a      	ldr	r2, [r7, #32]
 8000dde:	4619      	mov	r1, r3
 8000de0:	f00d fbcd 	bl	800e57e <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	3302      	adds	r3, #2
 8000de8:	f107 0214 	add.w	r2, r7, #20
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff ff5f 	bl	8000cb2 <_ZN9ChampiCan10send_frameEmPhm>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00e      	beq.n	8000e22 <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	425a      	negs	r2, r3
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	bf58      	it	pl
 8000e16:	4253      	negpl	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e1c:	801a      	strh	r2, [r3, #0]
			return 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e014      	b.n	8000e4c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e2a:	8bfb      	ldrh	r3, [r7, #30]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3a7      	bcc.n	8000d80 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}
    msg_number = (msg_number + 1) % 4;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	425a      	negs	r2, r3
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	bf58      	it	pl
 8000e42:	4253      	negpl	r3, r2
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e48:	801a      	strh	r2, [r3, #0]
    return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3728      	adds	r7, #40	@ 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	aaaaaaab 	.word	0xaaaaaaab
 8000e58:	20000084 	.word	0x20000084

08000e5c <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() = default;
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <_ZN9ChampiCanD1Ev+0x1c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	0800f630 	.word	0x0800f630

08000e7c <_ZN9ChampiCanD0Ev>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ffe9 	bl	8000e5c <_ZN9ChampiCanD1Ev>
 8000e8a:	212c      	movs	r1, #44	@ 0x2c
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f00c fdef 	bl	800da70 <_ZdlPvj>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN11ChampiStateC1Ev>:
 *      Author: arusso
 */

#include <ChampiState.h>

ChampiState::ChampiState() = default;
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <_ZN11ChampiStateC1Ev+0x28>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3330      	adds	r3, #48	@ 0x30
 8000eae:	2278      	movs	r2, #120	@ 0x78
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00d fa94 	bl	800e3e0 <memset>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800f640 	.word	0x0800f640

08000ec8 <_ZN11ChampiStateC1EP9ChampiCanm>:

ChampiState::ChampiState(ChampiCan *champi_can_interface, uint32_t tx_period_ms) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <_ZN11ChampiStateC1EP9ChampiCanm+0x68>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3330      	adds	r3, #48	@ 0x30
 8000ede:	2278      	movs	r2, #120	@ 0x78
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00d fa7c 	bl	800e3e0 <memset>
    status_msg_ = msgs_can_ActStatus_init_zero;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3304      	adds	r3, #4
 8000eec:	2220      	movs	r2, #32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00d fa75 	bl	800e3e0 <memset>
    status_msg_.has_status = true;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	711a      	strb	r2, [r3, #4]
    status_msg_.status.has_status = true;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	741a      	strb	r2, [r3, #16]
    status_msg_.has_plant_count = true;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2201      	movs	r2, #1
 8000f06:	779a      	strb	r2, [r3, #30]
    status_msg_.status.has_error = true;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	749a      	strb	r2, [r3, #18]
    status_msg_.plant_count = 0;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
    champi_can_interface_ = champi_can_interface;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
    tx_period_ms_ = tx_period_ms;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
    last_tx_time_ms_ = 0;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800f640 	.word	0x0800f640

08000f34 <_ZN11ChampiStateD1Ev>:

ChampiState::~ChampiState() = default;
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <_ZN11ChampiStateD1Ev+0x1c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	0800f640 	.word	0x0800f640

08000f54 <_ZN11ChampiStateD0Ev>:
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ffe9 	bl	8000f34 <_ZN11ChampiStateD1Ev>
 8000f62:	21a8      	movs	r1, #168	@ 0xa8
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f00c fd83 	bl	800da70 <_ZdlPvj>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>:


void ChampiState::report_status(msgs_can_ActStatus status) {
 8000f74:	b084      	sub	sp, #16
 8000f76:	b5b0      	push	{r4, r5, r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	f107 001c 	add.w	r0, r7, #28
 8000f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    // If it's different from the current status, we sent to the CAN right away (for not loosing time to report error)
    if(status_msg_.status.status != status.status.status
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7c5a      	ldrb	r2, [r3, #17]
 8000f8a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d110      	bne.n	8000fb4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
        || status_msg_.status.error != status.status.error
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7cda      	ldrb	r2, [r3, #19]
 8000f96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d10a      	bne.n	8000fb4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
        || status_msg_.plant_count != status.plant_count
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
 8000fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d105      	bne.n	8000fb4 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x40>
        || status_msg_.action != status.action) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f5a      	ldrb	r2, [r3, #29]
 8000fac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d00c      	beq.n	8000fce <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus+0x5a>

        status_msg_ = status;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1d1c      	adds	r4, r3, #4
 8000fb8:	f107 051c 	add.w	r5, r7, #28
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        send_status();
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f807 	bl	8000fdc <_ZN11ChampiState11send_statusEv>

        // TODO on pourra ajouter le logging ici plus tard !
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fd8:	b004      	add	sp, #16
 8000fda:	4770      	bx	lr

08000fdc <_ZN11ChampiState11send_statusEv>:
 *
 * Ici, on ne check pas les erreurs d'envoi. Ca permet d'essayer d'envoyer le status si on est dans l'état d'erreur.
 * De toute façon, s'il y a un problème d'envoi, on envoie assez de messages ailleurs pour s'en rendre compte
 * vite.
 */
void ChampiState::send_status() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

    // Init stream TODO can we do that only once ?
    pb_ostream_t stream = pb_ostream_from_buffer(tx_buffer_, sizeof(tx_buffer_));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2278      	movs	r2, #120	@ 0x78
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fbad 	bl	8007750 <pb_ostream_from_buffer>

    // Encode message
    pb_encode(&stream, msgs_can_ActStatus_fields, &status_msg_);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1d1a      	adds	r2, r3, #4
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4909      	ldr	r1, [pc, #36]	@ (8001024 <_ZN11ChampiState11send_statusEv+0x48>)
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f812 	bl	800802a <pb_encode>
    size_t message_length = stream.bytes_written;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	61fb      	str	r3, [r7, #28]

    // Send message
    champi_can_interface_->send_msg(CAN_ID_ACT_STATUS, tx_buffer_, message_length); // TODO make the ID configurable
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2131      	movs	r1, #49	@ 0x31
 8001018:	f7ff fe86 	bl	8000d28 <_ZN9ChampiCan8send_msgEmPhm>
}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800f72c 	.word	0x0800f72c

08001028 <_ZN11ChampiState9spin_onceEv>:

void ChampiState::spin_once() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

    // 1st time: Init and return
    if(last_tx_time_ms_ == 0) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <_ZN11ChampiState9spin_onceEv+0x1c>
        last_tx_time_ms_ = HAL_GetTick();
 8001038:	f008 f8d4 	bl	80091e4 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c
        return;
 8001042:	e010      	b.n	8001066 <_ZN11ChampiState9spin_onceEv+0x3e>
    }

    // Send status if needed
    uint32_t current_time_ms = HAL_GetTick();
 8001044:	f008 f8ce 	bl	80091e4 <HAL_GetTick>
 8001048:	60f8      	str	r0, [r7, #12]
    if(current_time_ms - last_tx_time_ms_ > tx_period_ms_) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	429a      	cmp	r2, r3
 8001058:	d905      	bls.n	8001066 <_ZN11ChampiState9spin_onceEv+0x3e>
        send_status();
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffbe 	bl	8000fdc <_ZN11ChampiState11send_statusEv>
        last_tx_time_ms_ = current_time_ms;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
}
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <_ZN17MessageRecomposerC1Ev+0x3c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3324      	adds	r3, #36	@ 0x24
 800107e:	2413      	movs	r4, #19
 8001080:	461d      	mov	r5, r3
 8001082:	e004      	b.n	800108e <_ZN17MessageRecomposerC1Ev+0x22>
 8001084:	4628      	mov	r0, r5
 8001086:	f00c fd6e 	bl	800db66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800108a:	3c01      	subs	r4, #1
 800108c:	3518      	adds	r5, #24
 800108e:	2c00      	cmp	r4, #0
 8001090:	daf8      	bge.n	8001084 <_ZN17MessageRecomposerC1Ev+0x18>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001098:	4618      	mov	r0, r3
 800109a:	f00c fd64 	bl	800db66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	0800f650 	.word	0x0800f650

080010ac <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b09b      	sub	sp, #108	@ 0x6c
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 80010ba:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80010be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f910 	bl	80012f2 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d8:	429a      	cmp	r2, r3
 80010da:	d019      	beq.n	8001110 <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 80010dc:	4856      	ldr	r0, [pc, #344]	@ (8001238 <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 80010de:	f00d f885 	bl	800e1ec <puts>
        msg_number_ = msg_number;
 80010e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 80010e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010f2:	e008      	b.n	8001106 <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010f8:	4413      	add	r3, r2
 80010fa:	330d      	adds	r3, #13
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001102:	3301      	adds	r3, #1
 8001104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 8001110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	2201      	movs	r2, #1
 8001118:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 800111a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	3320      	adds	r3, #32
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	1d1c      	adds	r4, r3, #4
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c9d      	adds	r5, r3, #2
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3b02      	subs	r3, #2
 8001134:	461e      	mov	r6, r3
 8001136:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800113a:	4618      	mov	r0, r3
 800113c:	f00c fcab 	bl	800da96 <_ZNSaIcEC1Ev>
 8001140:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001144:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001148:	4632      	mov	r2, r6
 800114a:	4629      	mov	r1, r5
 800114c:	f00c fe38 	bl	800ddc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8001150:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001154:	4619      	mov	r1, r3
 8001156:	4620      	mov	r0, r4
 8001158:	f00c fd12 	bl	800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800115c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001160:	4618      	mov	r0, r3
 8001162:	f00c fd07 	bl	800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001166:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800116a:	4618      	mov	r0, r3
 800116c:	f00c fc94 	bl	800da98 <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001174:	e00c      	b.n	8001190 <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800117a:	4413      	add	r3, r2
 800117c:	330d      	adds	r3, #13
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001184:	482d      	ldr	r0, [pc, #180]	@ (800123c <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 8001186:	f00c ffc1 	bl	800e10c <iprintf>
    for(int i=0; i<n_frames_; i++) {
 800118a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800118c:	3301      	adds	r3, #1
 800118e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001196:	429a      	cmp	r2, r3
 8001198:	dbed      	blt.n	8001176 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f8d3 	bl	8001346 <_ZN17MessageRecomposer19all_frames_receivedEv>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d043      	beq.n	800122e <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 80011a6:	4826      	ldr	r0, [pc, #152]	@ (8001240 <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 80011a8:	f00d f820 	bl	800e1ec <puts>
        std::string full_msg;
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00c fcd8 	bl	800db66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80011ba:	e011      	b.n	80011e0 <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 80011bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	3320      	adds	r3, #32
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	1d1a      	adds	r2, r3, #4
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00c fda9 	bl	800dd2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 80011da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011dc:	3301      	adds	r3, #1
 80011de:	657b      	str	r3, [r7, #84]	@ 0x54
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbe8      	blt.n	80011bc <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80011f0:	f107 0210 	add.w	r2, r7, #16
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00c fd20 	bl	800dc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	@ 0x50
 8001206:	e008      	b.n	800121a <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800120c:	4413      	add	r3, r2
 800120e:	330d      	adds	r3, #13
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001216:	3301      	adds	r3, #1
 8001218:	653b      	str	r3, [r7, #80]	@ 0x50
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf1      	blt.n	8001208 <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4618      	mov	r0, r3
 800122a:	f00c fca3 	bl	800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800122e:	bf00      	nop
 8001230:	3764      	adds	r7, #100	@ 0x64
 8001232:	46bd      	mov	sp, r7
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001236:	bf00      	nop
 8001238:	0800eeb0 	.word	0x0800eeb0
 800123c:	0800eebc 	.word	0x0800eebc
 8001240:	0800eed4 	.word	0x0800eed4

08001244 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7b1b      	ldrb	r3, [r3, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f00c fd7a 	bl	800dd6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <_ZN17MessageRecomposerD1Ev+0x48>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fc6b 	bl	800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MessageRecomposer::~MessageRecomposer() {
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3324      	adds	r3, #36	@ 0x24
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00c      	beq.n	80012c0 <_ZN17MessageRecomposerD1Ev+0x3c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3324      	adds	r3, #36	@ 0x24
}
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d004      	beq.n	80012c0 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 80012b6:	3c18      	subs	r4, #24
 80012b8:	4620      	mov	r0, r4
 80012ba:	f00c fc5b 	bl	800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80012be:	e7f6      	b.n	80012ae <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 80012c0:	bf00      	nop
}
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	0800f650 	.word	0x0800f650

080012d0 <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
}
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffd3 	bl	8001284 <_ZN17MessageRecomposerD1Ev>
 80012de:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f00c fbc4 	bl	800da70 <_ZdlPvj>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21b      	sxth	r3, r3
 8001314:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001316:	8afb      	ldrh	r3, [r7, #22]
 8001318:	0b1b      	lsrs	r3, r3, #12
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	b29b      	uxth	r3, r3
 8001328:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e00e      	b.n	8001372 <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	330d      	adds	r3, #13
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e008      	b.n	800137e <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbeb      	blt.n	8001354 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_ZN7SCServoC1EP20__UART_HandleTypeDef>:
#include <SCServo.h>
#include <cstdio>

SCServo::SCServo (UART_HandleTypeDef *huart) : huart_(huart)
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
{
}
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZN7SCServo6PrintfEh>:

void SCServo::Printf(u8 reg)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	1cf9      	adds	r1, r7, #3
 80013ba:	230a      	movs	r3, #10
 80013bc:	2201      	movs	r2, #1
 80013be:	f00b fbd7 	bl	800cb70 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f107 010f 	add.w	r1, r7, #15
 80013ca:	230a      	movs	r3, #10
 80013cc:	2201      	movs	r2, #1
 80013ce:	f00b fc5d 	bl	800cc8c <HAL_UART_Receive>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf()
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 80013e2:	bf00      	nop
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f107 010f 	add.w	r1, r7, #15
 80013ec:	2300      	movs	r3, #0
 80013ee:	2201      	movs	r2, #1
 80013f0:	f00b fc4c 	bl	800cc8c <HAL_UART_Receive>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ef      	bne.n	80013e4 <_ZN7SCServo12fflushRevBufEv+0xa>
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_ZN7SCServo8WritePosEhiih>:
        return ReadBuf(6);
    return 0;
}

int SCServo::WritePos(u8 ID, int position, int velocity, u8 ReturnLevel)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	460b      	mov	r3, r1
 800141c:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 800141e:	2307      	movs	r3, #7
 8001420:	617b      	str	r3, [r7, #20]
    u8 posL = position>>8;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	121b      	asrs	r3, r3, #8
 8001426:	74fb      	strb	r3, [r7, #19]
    u8 posH = position&0xff;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	74bb      	strb	r3, [r7, #18]
    u8 velL = velocity>>8;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	121b      	asrs	r3, r3, #8
 8001430:	747b      	strb	r3, [r7, #17]
    u8 velH = velocity&0xff;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ffcf 	bl	80013da <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 800143c:	21ff      	movs	r1, #255	@ 0xff
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ffb2 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8001444:	21ff      	movs	r1, #255	@ 0xff
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ffae 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	4619      	mov	r1, r3
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ffa9 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(messageLength);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff ffa3 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(INST_WRITE);
 8001462:	2103      	movs	r1, #3
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ff9f 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(P_GOAL_POSITION_L);
 800146a:	212a      	movs	r1, #42	@ 0x2a
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff ff9b 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(posL);
 8001472:	7cfb      	ldrb	r3, [r7, #19]
 8001474:	4619      	mov	r1, r3
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff ff96 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(posH);
 800147c:	7cbb      	ldrb	r3, [r7, #18]
 800147e:	4619      	mov	r1, r3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff ff91 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(velL);
 8001486:	7c7b      	ldrb	r3, [r7, #17]
 8001488:	4619      	mov	r1, r3
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff ff8c 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(velH);
 8001490:	7c3b      	ldrb	r3, [r7, #16]
 8001492:	4619      	mov	r1, r3
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff ff87 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	4413      	add	r3, r2
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	7cfb      	ldrb	r3, [r7, #19]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	7cbb      	ldrb	r3, [r7, #18]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	7c7b      	ldrb	r3, [r7, #17]
 80014b2:	4413      	add	r3, r2
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	7c3b      	ldrb	r3, [r7, #16]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff ff6e 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    if(ID != 16 && ReturnLevel==2)
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d00a      	beq.n	80014e8 <_ZN7SCServo8WritePosEhiih+0xda>
 80014d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d106      	bne.n	80014e8 <_ZN7SCServo8WritePosEhiih+0xda>
        return ReadBuf(6);
 80014da:	2200      	movs	r2, #0
 80014dc:	2106      	movs	r1, #6
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f807 	bl	80014f2 <_ZN7SCServo7ReadBufEtPh>
 80014e4:	4603      	mov	r3, r0
 80014e6:	e000      	b.n	80014ea <_ZN7SCServo8WritePosEhiih+0xdc>
    return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN7SCServo7ReadBufEtPh>:
    Printf(INST_ACTION);
    Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(u16 len, u8 *buf)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	460b      	mov	r3, r1
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	817b      	strh	r3, [r7, #10]
	int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	897a      	ldrh	r2, [r7, #10]
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f00b fbbe 	bl	800cc8c <HAL_UART_Receive>
 8001510:	4603      	mov	r3, r0
 8001512:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <_ZN7SCServo7ReadBufEtPh+0x2c>
    	return len;
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	e001      	b.n	8001522 <_ZN7SCServo7ReadBufEtPh+0x30>
    }
    return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_ZN7SCServo7ReadPosEh>:

int SCServo::ReadPos(u8 ID)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
    u8 buf[8] = {0};
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
    int size;
    int pos=0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff49 	bl	80013da <_ZN7SCServo12fflushRevBufEv>
    Printf(startByte);
 8001548:	21ff      	movs	r1, #255	@ 0xff
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff2c 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(startByte);
 8001550:	21ff      	movs	r1, #255	@ 0xff
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff28 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(ID);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff23 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(4);
 8001562:	2104      	movs	r1, #4
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff1f 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(INST_READ);
 800156a:	2102      	movs	r1, #2
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff1b 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(P_PRESENT_POSITION_L);
 8001572:	2138      	movs	r1, #56	@ 0x38
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff17 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf(2);
 800157a:	2102      	movs	r1, #2
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff13 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    Printf((~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2))&0xFF);
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001588:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800158c:	33bf      	adds	r3, #191	@ 0xbf
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff08 	bl	80013a8 <_ZN7SCServo6PrintfEh>
    size = ReadBuf(8, buf);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	461a      	mov	r2, r3
 800159e:	2108      	movs	r1, #8
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffa6 	bl	80014f2 <_ZN7SCServo7ReadBufEtPh>
 80015a6:	6138      	str	r0, [r7, #16]
    if(size<8)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	dc02      	bgt.n	80015b4 <_ZN7SCServo7ReadPosEh+0x8a>
        return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b2:	e00a      	b.n	80015ca <_ZN7SCServo7ReadPosEh+0xa0>
    pos = buf[5];
 80015b4:	7b7b      	ldrb	r3, [r7, #13]
 80015b6:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    return pos;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_Z22VL53L4CD_SetI2CAddressth>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	460a      	mov	r2, r1
 80015dc:	80fb      	strh	r3, [r7, #6]
 80015de:	4613      	mov	r3, r2
 80015e0:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2101      	movs	r1, #1
 80015f0:	4618      	mov	r0, r3
 80015f2:	f007 fa19 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_Z20VL53L4CD_GetSensorIdtPt>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	6039      	str	r1, [r7, #0]
 8001614:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f240 110f 	movw	r1, #271	@ 0x10f
 8001622:	4618      	mov	r0, r3
 8001624:	f007 f994 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001628:	4603      	mov	r3, r0
 800162a:	461a      	mov	r2, r3
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4313      	orrs	r3, r2
 8001630:	73fb      	strb	r3, [r7, #15]
	return status;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_Z19VL53L4CD_SensorInitt>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 8001652:	f107 0209 	add.w	r2, r7, #9
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	21e5      	movs	r1, #229	@ 0xe5
 800165a:	4618      	mov	r0, r3
 800165c:	f007 f9b2 	bl	80089c4 <_Z15VL53L4CD_RdBytettPh>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4313      	orrs	r3, r2
 8001668:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 800166a:	7a7b      	ldrb	r3, [r7, #9]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d102      	bne.n	8001676 <_Z19VL53L4CD_SensorInitt+0x3a>
		{
			continue_loop = (uint8_t)0;
 8001670:	2300      	movs	r3, #0
 8001672:	737b      	strb	r3, [r7, #13]
 8001674:	e00b      	b.n	800168e <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800167c:	d203      	bcs.n	8001686 <_Z19VL53L4CD_SensorInitt+0x4a>
		{
			i++;
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	3301      	adds	r3, #1
 8001682:	817b      	strh	r3, [r7, #10]
 8001684:	e003      	b.n	800168e <_Z19VL53L4CD_SensorInitt+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8001686:	2300      	movs	r3, #0
 8001688:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800168a:	23ff      	movs	r3, #255	@ 0xff
 800168c:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fa52 	bl	8008b3c <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d0d9      	beq.n	8001652 <_Z19VL53L4CD_SensorInitt+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 800169e:	232d      	movs	r3, #45	@ 0x2d
 80016a0:	73bb      	strb	r3, [r7, #14]
 80016a2:	e011      	b.n	80016c8 <_Z19VL53L4CD_SensorInitt+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	3b2d      	subs	r3, #45	@ 0x2d
 80016ac:	4a44      	ldr	r2, [pc, #272]	@ (80017c0 <_Z19VL53L4CD_SensorInitt+0x184>)
 80016ae:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f007 f9b8 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4313      	orrs	r3, r2
 80016c0:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	3301      	adds	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b87      	cmp	r3, #135	@ 0x87
 80016cc:	d9ea      	bls.n	80016a4 <_Z19VL53L4CD_SensorInitt+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2240      	movs	r2, #64	@ 0x40
 80016d2:	2187      	movs	r1, #135	@ 0x87
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 f9a7 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80016ec:	f107 0209 	add.w	r2, r7, #9
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f8c5 	bl	8001884 <_Z26VL53L4CD_CheckForDataReadytPh>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4313      	orrs	r3, r2
 8001702:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8001704:	7a7b      	ldrb	r3, [r7, #9]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d102      	bne.n	8001710 <_Z19VL53L4CD_SensorInitt+0xd4>
		{
			continue_loop = (uint8_t)0;
 800170a:	2300      	movs	r3, #0
 800170c:	737b      	strb	r3, [r7, #13]
 800170e:	e00b      	b.n	8001728 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8001710:	897b      	ldrh	r3, [r7, #10]
 8001712:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001716:	d203      	bcs.n	8001720 <_Z19VL53L4CD_SensorInitt+0xe4>
		{
			i++;
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	3301      	adds	r3, #1
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	e003      	b.n	8001728 <_Z19VL53L4CD_SensorInitt+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8001720:	2300      	movs	r3, #0
 8001722:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8001724:	23ff      	movs	r3, #255	@ 0xff
 8001726:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	2101      	movs	r1, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fa05 	bl	8008b3c <_Z6WaitMstm>
	}while(continue_loop == (uint8_t)1);
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d0d9      	beq.n	80016ec <_Z19VL53L4CD_SensorInitt+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f842 	bl	80017c4 <_Z23VL53L4CD_ClearInterruptt>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	4313      	orrs	r3, r2
 8001748:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f882 	bl	8001856 <_Z20VL53L4CD_StopRangingt>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4313      	orrs	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	2209      	movs	r2, #9
 8001760:	2108      	movs	r1, #8
 8001762:	4618      	mov	r0, r3
 8001764:	f007 f960 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	4313      	orrs	r3, r2
 8001770:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2200      	movs	r2, #0
 8001776:	210b      	movs	r1, #11
 8001778:	4618      	mov	r0, r3
 800177a:	f007 f955 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	4313      	orrs	r3, r2
 8001786:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800178e:	2124      	movs	r1, #36	@ 0x24
 8001790:	4618      	mov	r0, r3
 8001792:	f007 f971 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	4313      	orrs	r3, r2
 800179e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	2200      	movs	r2, #0
 80017a4:	2132      	movs	r1, #50	@ 0x32
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f8b0 	bl	800190c <_Z23VL53L4CD_SetRangeTimingtmm>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	73fb      	strb	r3, [r7, #15]

	return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	0800f658 	.word	0x0800f658

080017c4 <_Z23VL53L4CD_ClearInterruptt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2201      	movs	r2, #1
 80017d6:	2186      	movs	r1, #134	@ 0x86
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 f925 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	73fb      	strb	r3, [r7, #15]
	return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_Z21VL53L4CD_StartRangingt>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	216c      	movs	r1, #108	@ 0x6c
 8001808:	4618      	mov	r0, r3
 800180a:	f007 f865 	bl	80088d8 <_Z16VL53L4CD_RdDWordttPm>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	4313      	orrs	r3, r2
 8001816:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10b      	bne.n	8001836 <_Z21VL53L4CD_StartRangingt+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	2221      	movs	r2, #33	@ 0x21
 8001822:	2187      	movs	r1, #135	@ 0x87
 8001824:	4618      	mov	r0, r3
 8001826:	f007 f8ff 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	4313      	orrs	r3, r2
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e00a      	b.n	800184c <_Z21VL53L4CD_StartRangingt+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2240      	movs	r2, #64	@ 0x40
 800183a:	2187      	movs	r1, #135	@ 0x87
 800183c:	4618      	mov	r0, r3
 800183e:	f007 f8f3 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4313      	orrs	r3, r2
 800184a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_Z20VL53L4CD_StopRangingt>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2200      	movs	r2, #0
 8001868:	2187      	movs	r1, #135	@ 0x87
 800186a:	4618      	mov	r0, r3
 800186c:	f007 f8dc 	bl	8008a28 <_Z15VL53L4CD_WrBytetth>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4313      	orrs	r3, r2
 8001878:	73fb      	strb	r3, [r7, #15]
	return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_Z26VL53L4CD_CheckForDataReadytPh>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001890:	2300      	movs	r3, #0
 8001892:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8001894:	f107 020d 	add.w	r2, r7, #13
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	2130      	movs	r1, #48	@ 0x30
 800189c:	4618      	mov	r0, r3
 800189e:	f007 f891 	bl	80089c4 <_Z15VL53L4CD_RdBytettPh>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 80018b6:	7b7b      	ldrb	r3, [r7, #13]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 80018be:	7b7b      	ldrb	r3, [r7, #13]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <_Z26VL53L4CD_CheckForDataReadytPh+0x46>
	{
		int_pol = (uint8_t)0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <_Z26VL53L4CD_CheckForDataReadytPh+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80018ce:	f107 020d 	add.w	r2, r7, #13
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2131      	movs	r1, #49	@ 0x31
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 f874 	bl	80089c4 <_Z15VL53L4CD_RdBytettPh>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d103      	bne.n	80018fa <_Z26VL53L4CD_CheckForDataReadytPh+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e002      	b.n	8001900 <_Z26VL53L4CD_CheckForDataReadytPh+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001900:	7bbb      	ldrb	r3, [r7, #14]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <_Z23VL53L4CD_SetRangeTimingtmm>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8001928:	4b84      	ldr	r3, [pc, #528]	@ (8001b3c <_Z23VL53L4CD_SetRangeTimingtmm+0x230>)
 800192a:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	2106      	movs	r1, #6
 8001934:	4618      	mov	r0, r3
 8001936:	f007 f80b 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001942:	4313      	orrs	r3, r2
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(osc_frequency != (uint16_t)0)
 8001948:	8abb      	ldrh	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d012      	beq.n	8001974 <_Z23VL53L4CD_SetRangeTimingtmm+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 800195a:	8abb      	ldrh	r3, [r7, #20]
 800195c:	461a      	mov	r2, r3
 800195e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001962:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001972:	e005      	b.n	8001980 <_Z23VL53L4CD_SetRangeTimingtmm+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001978:	f063 0301 	orn	r3, r3, #1
 800197c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b09      	cmp	r3, #9
 8001984:	d906      	bls.n	8001994 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2bc8      	cmp	r3, #200	@ 0xc8
 800198a:	d803      	bhi.n	8001994 <_Z23VL53L4CD_SetRangeTimingtmm+0x88>
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <_Z23VL53L4CD_SetRangeTimingtmm+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001998:	f063 0301 	orn	r3, r3, #1
 800199c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80019a0:	e05e      	b.n	8001a60 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <_Z23VL53L4CD_SetRangeTimingtmm+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	2200      	movs	r2, #0
 80019ac:	216c      	movs	r1, #108	@ 0x6c
 80019ae:	4618      	mov	r0, r3
 80019b0:	f007 f890 	bl	8008ad4 <_Z16VL53L4CD_WrDWordttm>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019bc:	4313      	orrs	r3, r2
 80019be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		timing_budget_us -= (uint32_t)2500;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ca:	e049      	b.n	8001a60 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d93f      	bls.n	8001a54 <_Z23VL53L4CD_SetRangeTimingtmm+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 80019d4:	f107 0216 	add.w	r2, r7, #22
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	21de      	movs	r1, #222	@ 0xde
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 ffb7 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a08:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 8001a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1a:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8001a1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	ee17 2a90 	vmov	r2, s15
 8001a2c:	216c      	movs	r1, #108	@ 0x6c
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f007 f850 	bl	8008ad4 <_Z16VL53L4CD_WrDWordttm>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f5a3 5386 	sub.w	r3, r3, #4288	@ 0x10c0
 8001a48:	3b0c      	subs	r3, #12
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
		timing_budget_us /= (uint32_t)2;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	e005      	b.n	8001a60 <_Z23VL53L4CD_SetRangeTimingtmm+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001a54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a58:	f063 0301 	orn	r3, r3, #1
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8001a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a64:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a66:	d063      	beq.n	8001b30 <_Z23VL53L4CD_SetRangeTimingtmm+0x224>
	{
				ms_byte = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				timing_budget_us = timing_budget_us << 12;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
				tmp = macro_period_us*(uint32_t)16;
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	09da      	lsrs	r2, r3, #7
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	441a      	add	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001a8c:	e005      	b.n	8001a9a <_Z23VL53L4CD_SetRangeTimingtmm+0x18e>
						 ls_byte = ls_byte >> 1;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001a94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a96:	3301      	adds	r3, #1
 8001a98:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2bff      	cmp	r3, #255	@ 0xff
 8001a9e:	d8f6      	bhi.n	8001a8e <_Z23VL53L4CD_SetRangeTimingtmm+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001aa0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001aae:	4413      	add	r3, r2
 8001ab0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8001ab2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	215e      	movs	r1, #94	@ 0x5e
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f006 ffdd 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				ms_byte = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8001ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	09da      	lsrs	r2, r3, #7
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	441a      	add	r2, r3
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001af0:	e005      	b.n	8001afe <_Z23VL53L4CD_SetRangeTimingtmm+0x1f2>
						 ls_byte = ls_byte >> 1;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001af8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2bff      	cmp	r3, #255	@ 0xff
 8001b02:	d8f6      	bhi.n	8001af2 <_Z23VL53L4CD_SetRangeTimingtmm+0x1e6>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001b04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001b12:	4413      	add	r3, r2
 8001b14:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8001b16:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	2161      	movs	r1, #97	@ 0x61
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f006 ffab 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return status;
 8001b30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	3f870a3d 	.word	0x3f870a3d

08001b40 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8001b52:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x15c>)
 8001b54:	f107 0408 	add.w	r4, r7, #8
 8001b58:	461d      	mov	r5, r3
 8001b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b62:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8001b66:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2189      	movs	r1, #137	@ 0x89
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 ff28 	bl	80089c4 <_Z15VL53L4CD_RdBytettPh>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8001b82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (temp_8 < (uint8_t)24)
 8001b90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b94:	2b17      	cmp	r3, #23
 8001b96:	d807      	bhi.n	8001ba8 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8001b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b9c:	3328      	adds	r3, #40	@ 0x28
 8001b9e:	443b      	add	r3, r7
 8001ba0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	p_result->range_status = temp_8;
 8001ba8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8001bb0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	218c      	movs	r1, #140	@ 0x8c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 fec9 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8001bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8001bd6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	218e      	movs	r1, #142	@ 0x8e
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 feb6 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bec:	4313      	orrs	r3, r2
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8001bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8001bfc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2190      	movs	r1, #144	@ 0x90
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 fea3 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8001c18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8001c22:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2192      	movs	r1, #146	@ 0x92
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f006 fe90 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8001c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8001c48:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	2196      	movs	r1, #150	@ 0x96
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 fe7d 	bl	8008950 <_Z15VL53L4CD_RdWordttPt>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8001c64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	899b      	ldrh	r3, [r3, #12]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	b29a      	uxth	r2, r3
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	899b      	ldrh	r3, [r3, #12]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	b29a      	uxth	r2, r3
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	80da      	strh	r2, [r3, #6]

	return status;
 8001c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800eee8 	.word	0x0800eee8

08001ca0 <_Z18VL53L4CD_SetOffsetts>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	80fb      	strh	r3, [r7, #6]
 8001cac:	4613      	mov	r3, r2
 8001cae:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 8001cba:	89ba      	ldrh	r2, [r7, #12]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	211e      	movs	r1, #30
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 fed9 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f006 fece 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2122      	movs	r1, #34	@ 0x22
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 fec3 	bl	8008a78 <_Z15VL53L4CD_WrWordttt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	73fb      	strb	r3, [r7, #15]
	return status;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0c:	f3bf 8f4f 	dsb	sy
}
 8001d10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <__NVIC_SystemReset+0x24>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d1a:	4904      	ldr	r1, [pc, #16]	@ (8001d2c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_SystemReset+0x28>)
 8001d1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d22:	f3bf 8f4f 	dsb	sy
}
 8001d26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <__NVIC_SystemReset+0x20>
 8001d2c:	e000ed00 	.word	0xe000ed00
 8001d30:	05fa0004 	.word	0x05fa0004

08001d34 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>:



class Stepper {
public:
  Stepper(unsigned long (*get_time_us)(), GPIO_TypeDef *gpio_port_step, uint16_t gpio_pin_step, GPIO_TypeDef *gpio_port_dir, uint16_t gpio_pin_dir) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	807b      	strh	r3, [r7, #2]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	761a      	strb	r2, [r3, #24]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d60:	621a      	str	r2, [r3, #32]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	220a      	movs	r2, #10
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    this->gpio_port_step = gpio_port_step;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
    this->gpio_pin_step = gpio_pin_step;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	887a      	ldrh	r2, [r7, #2]
 8001d92:	809a      	strh	r2, [r3, #4]
    this->gpio_port_dir = gpio_port_dir;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]
    this->gpio_pin_dir = gpio_pin_dir;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8bba      	ldrh	r2, [r7, #28]
 8001d9e:	819a      	strh	r2, [r3, #12]

    this->get_time_us = get_time_us;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f008 fb17 	bl	800a3e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, GPIO_PIN_RESET);
 8001db2:	8bbb      	ldrh	r3, [r7, #28]
 8001db4:	2200      	movs	r2, #0
 8001db6:	4619      	mov	r1, r3
 8001db8:	69b8      	ldr	r0, [r7, #24]
 8001dba:	f008 fb11 	bl	800a3e0 <HAL_GPIO_WritePin>

  }
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZN7Stepper9set_speedEm>:

  void set_speed(unsigned long speed) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    this->speed = speed;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	621a      	str	r2, [r3, #32]
    time_step = 10000000 / speed;
 8001dd8:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <_ZN7Stepper9set_speedEm+0x28>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	00989680 	.word	0x00989680

08001df4 <_ZN7Stepper8set_goalEib>:

  void set_goal(int goal, bool keep_previous_speed = false) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	71fb      	strb	r3, [r7, #7]

    this->goal = goal;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	61da      	str	r2, [r3, #28]
    state.state = State::HIGH;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	761a      	strb	r2, [r3, #24]
    state.direction = goal > state.pos ? 1 : -1;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dd01      	ble.n	8001e1c <_ZN7Stepper8set_goalEib+0x28>
 8001e18:	2201      	movs	r2, #1
 8001e1a:	e001      	b.n	8001e20 <_ZN7Stepper8set_goalEib+0x2c>
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	615a      	str	r2, [r3, #20]
    time_start_step = get_time_us();
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4798      	blx	r3
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    time_start_high = time_start_step;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_GPIO_WritePin(gpio_port_dir, gpio_pin_dir, state.direction == 1 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6898      	ldr	r0, [r3, #8]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8999      	ldrh	r1, [r3, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f008 fac6 	bl	800a3e0 <HAL_GPIO_WritePin>

    if (keep_previous_speed) {
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <_ZN7Stepper8set_goalEib+0x72>
      current_speed = speed;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
      current_speed = 0;
    }
  }
 8001e64:	e002      	b.n	8001e6c <_ZN7Stepper8set_goalEib+0x78>
      current_speed = 0;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN7Stepper7set_posEi>:

  int get_pos() {
    return state.pos;
  }

  void set_pos(int pos) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    state.pos = pos;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	611a      	str	r2, [r3, #16]
  }
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZN7Stepper9spin_onceEv>:

  void spin_once() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

    if (state.state == State::STOPPED) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e1b      	ldrb	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d065      	beq.n	8001f6c <_ZN7Stepper9spin_onceEv+0xdc>
      return;
    }

    compute_time_step();
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f879 	bl	8001f98 <_ZN7Stepper17compute_time_stepEv>

    if (state.state == State::HIGH) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7e1b      	ldrb	r3, [r3, #24]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d11b      	bne.n	8001ee6 <_ZN7Stepper9spin_onceEv+0x56>
      if (get_time_us() - time_start_high > time_high) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4798      	blx	r3
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	1ad2      	subs	r2, r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	bf8c      	ite	hi
 8001ec4:	2301      	movhi	r3, #1
 8001ec6:	2300      	movls	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03d      	beq.n	8001f4a <_ZN7Stepper9spin_onceEv+0xba>
        // Set low
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_RESET);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	889b      	ldrh	r3, [r3, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f008 fa81 	bl	800a3e0 <HAL_GPIO_WritePin>
        state.state = State::LOW;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	761a      	strb	r2, [r3, #24]
 8001ee4:	e031      	b.n	8001f4a <_ZN7Stepper9spin_onceEv+0xba>
      }
    } else if (state.state == State::LOW) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7e1b      	ldrb	r3, [r3, #24]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d12d      	bne.n	8001f4a <_ZN7Stepper9spin_onceEv+0xba>
      if (get_time_us() - time_start_step > time_step) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4798      	blx	r3
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	bf8c      	ite	hi
 8001f04:	2301      	movhi	r3, #1
 8001f06:	2300      	movls	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01d      	beq.n	8001f4a <_ZN7Stepper9spin_onceEv+0xba>
        // Set high
        HAL_GPIO_WritePin(gpio_port_step, gpio_pin_step, GPIO_PIN_SET);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f008 fa61 	bl	800a3e0 <HAL_GPIO_WritePin>
        state.state = State::HIGH;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	761a      	strb	r2, [r3, #24]
        time_start_high = get_time_us();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	4798      	blx	r3
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
        time_start_step = get_time_us();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4798      	blx	r3
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
        state.pos += state.direction;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]
      }
    }

    if (state.pos == goal) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d10b      	bne.n	8001f6e <_ZN7Stepper9spin_onceEv+0xde>
      state.state = State::STOPPED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	761a      	strb	r2, [r3, #24]
      speed_when_stopped = current_speed;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
      current_speed = 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f6a:	e000      	b.n	8001f6e <_ZN7Stepper9spin_onceEv+0xde>
      return;
 8001f6c:	bf00      	nop
    }
  }
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_ZN7Stepper10is_stoppedEv>:

  bool is_stopped() {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    return state.state == State::STOPPED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
  }
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_ZN7Stepper17compute_time_stepEv>:

  void compute_time_step() {
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

    // We compute the new speed every 5ms (return if we are not there yet)
    static unsigned long last_time = 0;
    if (get_time_us() - last_time < 5000 && last_time != 0) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4798      	blx	r3
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d805      	bhi.n	8001fc2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_ZN7Stepper17compute_time_stepEv+0x2a>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <_ZN7Stepper17compute_time_stepEv+0x2c>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d152      	bne.n	800206e <_ZN7Stepper17compute_time_stepEv+0xd6>
      return;
    }
    last_time = get_time_us();
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	4798      	blx	r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <_ZN7Stepper17compute_time_stepEv+0xf0>)
 8001fd2:	6013      	str	r3, [r2, #0]


    if (current_speed == speed) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d047      	beq.n	8002072 <_ZN7Stepper17compute_time_stepEv+0xda>
      return;
    }

    if (current_speed < speed) {
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d222      	bcs.n	8002036 <_ZN7Stepper17compute_time_stepEv+0x9e>
      current_speed += (long) (((double) max_acceleration) * 0.005); // 5ms (0.005s
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fbdd 	bl	80007b8 <__aeabi_i2d>
 8001ffe:	a320      	add	r3, pc, #128	@ (adr r3, 8002080 <_ZN7Stepper17compute_time_stepEv+0xe8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe f95c 	bl	80002c0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fc3c 	bl	800088c <__aeabi_d2iz>
 8002014:	4603      	mov	r3, r0
 8002016:	18e2      	adds	r2, r4, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed > speed) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	429a      	cmp	r2, r3
 8002028:	d918      	bls.n	800205c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34
 8002034:	e012      	b.n	800205c <_ZN7Stepper17compute_time_stepEv+0xc4>
      }
    } else {
      current_speed -= max_acceleration;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203e:	1ad2      	subs	r2, r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	635a      	str	r2, [r3, #52]	@ 0x34
      if (current_speed < speed) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	429a      	cmp	r2, r3
 8002050:	d204      	bcs.n	800205c <_ZN7Stepper17compute_time_stepEv+0xc4>
        current_speed = speed;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
      }
    }

    time_step = 10000000 / current_speed;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <_ZN7Stepper17compute_time_stepEv+0xf4>)
 8002062:	fb92 f3f3 	sdiv	r3, r2, r3
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
 800206c:	e002      	b.n	8002074 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <_ZN7Stepper17compute_time_stepEv+0xdc>
      return;
 8002072:	bf00      	nop
  }
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	47ae147b 	.word	0x47ae147b
 8002084:	3f747ae1 	.word	0x3f747ae1
 8002088:	20000088 	.word	0x20000088
 800208c:	00989680 	.word	0x00989680

08002090 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>:
#include "VL53L4CD_api.h"


class LaserSensor {
public:
	LaserSensor(GPIO_TypeDef *port, uint16_t pin, Dev_t address, int16_t offset) : pin(pin), port(port), address(address), offset(offset)
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	460b      	mov	r3, r1
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88ba      	ldrh	r2, [r7, #4]
 80020b6:	811a      	strh	r2, [r3, #8]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	330a      	adds	r3, #10
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8b3a      	ldrh	r2, [r7, #24]
 80020ca:	835a      	strh	r2, [r3, #26]
	{

	}
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN11LaserSensorD1Ev>:

	// destructor
	~LaserSensor()
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_StopRanging(address);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	891b      	ldrh	r3, [r3, #8]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fbb5 	bl	8001856 <_Z20VL53L4CD_StopRangingt>
	}
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <_ZN11LaserSensor5setupEv>:

	int setup()
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	{
		uint16_t sensor_id;
		uint8_t status;
		printf("SENSOR_PIN: %d\n", pin);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	4845      	ldr	r0, [pc, #276]	@ (800221c <_ZN11LaserSensor5setupEv+0x124>)
 8002108:	f00c f800 	bl	800e10c <iprintf>

		HAL_Delay(5);
 800210c:	2005      	movs	r0, #5
 800210e:	f007 f875 	bl	80091fc <HAL_Delay>
		// set the pin to high to enable the sensor
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6858      	ldr	r0, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	2201      	movs	r2, #1
 800211c:	4619      	mov	r1, r3
 800211e:	f008 f95f 	bl	800a3e0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8002122:	2005      	movs	r0, #5
 8002124:	f007 f86a 	bl	80091fc <HAL_Delay>

		// set I2C address (other unset addresses XSHUT have to be pull to low before)
		status = VL53L4CD_SetI2CAddress(0x52, address); // 0x52 is the default address
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	2052      	movs	r0, #82	@ 0x52
 8002132:	f7ff fa4e 	bl	80015d2 <_Z22VL53L4CD_SetI2CAddressth>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]
		if (status)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <_ZN11LaserSensor5setupEv+0x56>
		{
			printf("VL53L4CD_SetI2CAddress failed with status %u\n", status);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	4619      	mov	r1, r3
 8002144:	4836      	ldr	r0, [pc, #216]	@ (8002220 <_ZN11LaserSensor5setupEv+0x128>)
 8002146:	f00b ffe1 	bl	800e10c <iprintf>
			return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	e061      	b.n	8002212 <_ZN11LaserSensor5setupEv+0x11a>
		}

		/* (Optional) Check if there is a VL53L4CD sensor connected */
		printf("Checking for laser sensor at address %x\n", address);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	891b      	ldrh	r3, [r3, #8]
 8002152:	4619      	mov	r1, r3
 8002154:	4833      	ldr	r0, [pc, #204]	@ (8002224 <_ZN11LaserSensor5setupEv+0x12c>)
 8002156:	f00b ffd9 	bl	800e10c <iprintf>
		status = VL53L4CD_GetSensorId(address, &sensor_id);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	891b      	ldrh	r3, [r3, #8]
 800215e:	f107 020c 	add.w	r2, r7, #12
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa50 	bl	800160a <_Z20VL53L4CD_GetSensorIdtPt>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]

		if (status || (sensor_id != 0xEBAA))
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <_ZN11LaserSensor5setupEv+0x86>
 8002174:	89bb      	ldrh	r3, [r7, #12]
 8002176:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <_ZN11LaserSensor5setupEv+0x90>
		{
			printf("VL53L4CD not detected at requested address\n");
 800217e:	482a      	ldr	r0, [pc, #168]	@ (8002228 <_ZN11LaserSensor5setupEv+0x130>)
 8002180:	f00c f834 	bl	800e1ec <puts>
			return status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	e044      	b.n	8002212 <_ZN11LaserSensor5setupEv+0x11a>
		}
		printf("VL53L4CD detected at address %x\n", address);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	891b      	ldrh	r3, [r3, #8]
 800218c:	4619      	mov	r1, r3
 800218e:	4827      	ldr	r0, [pc, #156]	@ (800222c <_ZN11LaserSensor5setupEv+0x134>)
 8002190:	f00b ffbc 	bl	800e10c <iprintf>

		/* (Mandatory) Init VL53L4CD sensor */
		printf("Initializing laser sensor\n");
 8002194:	4826      	ldr	r0, [pc, #152]	@ (8002230 <_ZN11LaserSensor5setupEv+0x138>)
 8002196:	f00c f829 	bl	800e1ec <puts>
		status = VL53L4CD_SensorInit(address);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	891b      	ldrh	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fa4c 	bl	800163c <_Z19VL53L4CD_SensorInitt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
		if (status)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <_ZN11LaserSensor5setupEv+0xc0>
		{
			printf("VL53L4CD ULD Loading failed\n");
 80021ae:	4821      	ldr	r0, [pc, #132]	@ (8002234 <_ZN11LaserSensor5setupEv+0x13c>)
 80021b0:	f00c f81c 	bl	800e1ec <puts>
			return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	e02c      	b.n	8002212 <_ZN11LaserSensor5setupEv+0x11a>
		}

		// set the offset
		status = VL53L4CD_SetOffset(address, offset);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	891a      	ldrh	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff fd6b 	bl	8001ca0 <_Z18VL53L4CD_SetOffsetts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
		if (status)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <_ZN11LaserSensor5setupEv+0xea>
		{
			printf("VL53L4CD_SetOffset failed with status %u\n", status);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4817      	ldr	r0, [pc, #92]	@ (8002238 <_ZN11LaserSensor5setupEv+0x140>)
 80021da:	f00b ff97 	bl	800e10c <iprintf>
			return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	e017      	b.n	8002212 <_ZN11LaserSensor5setupEv+0x11a>
		}

		status = VL53L4CD_StartRanging(address);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	891b      	ldrh	r3, [r3, #8]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fb03 	bl	80017f2 <_Z21VL53L4CD_StartRangingt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
		if (status)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <_ZN11LaserSensor5setupEv+0x10c>
		{
			printf("VL53L4CD_StartRanging failed with status %u\n", status);
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4810      	ldr	r0, [pc, #64]	@ (800223c <_ZN11LaserSensor5setupEv+0x144>)
 80021fc:	f00b ff86 	bl	800e10c <iprintf>
			return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	e006      	b.n	8002212 <_ZN11LaserSensor5setupEv+0x11a>
		}

		printf("VL53L4CD ULD ready at address %x ready\n", address);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	891b      	ldrh	r3, [r3, #8]
 8002208:	4619      	mov	r1, r3
 800220a:	480d      	ldr	r0, [pc, #52]	@ (8002240 <_ZN11LaserSensor5setupEv+0x148>)
 800220c:	f00b ff7e 	bl	800e10c <iprintf>
		return 0;
 8002210:	2300      	movs	r3, #0
	}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	0800ef00 	.word	0x0800ef00
 8002220:	0800ef10 	.word	0x0800ef10
 8002224:	0800ef40 	.word	0x0800ef40
 8002228:	0800ef6c 	.word	0x0800ef6c
 800222c:	0800ef98 	.word	0x0800ef98
 8002230:	0800efbc 	.word	0x0800efbc
 8002234:	0800efd8 	.word	0x0800efd8
 8002238:	0800eff4 	.word	0x0800eff4
 800223c:	0800f020 	.word	0x0800f020
 8002240:	0800f050 	.word	0x0800f050

08002244 <_ZN11LaserSensor11get_dist_mmEv>:


	int get_dist_mm()
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	{
		int status = update_distance();
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f821 	bl	8002294 <_ZN11LaserSensor15update_distanceEv>
 8002252:	60f8      	str	r0, [r7, #12]
		if (status)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <_ZN11LaserSensor11get_dist_mmEv+0x24>
		{
			printf("VL53L4CD_GetResult failed with status %u\n", status);
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4805      	ldr	r0, [pc, #20]	@ (8002274 <_ZN11LaserSensor11get_dist_mmEv+0x30>)
 800225e:	f00b ff55 	bl	800e10c <iprintf>
			return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002266:	e001      	b.n	800226c <_ZN11LaserSensor11get_dist_mmEv+0x28>
		}
		return results.distance_mm;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	899b      	ldrh	r3, [r3, #12]
	}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	0800f078 	.word	0x0800f078

08002278 <_ZN11LaserSensor15clear_interruptEv>:


	void clear_interrupt()
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	{
		VL53L4CD_ClearInterrupt(address);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	891b      	ldrh	r3, [r3, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fa9d 	bl	80017c4 <_Z23VL53L4CD_ClearInterruptt>
	}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <_ZN11LaserSensor15update_distanceEv>:
	VL53L4CD_ResultsData_t results = {};
	int16_t offset;



	int update_distance()
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	{
		// We don't want to read data at too high frequency, so we store previous time and check against HAL_GetTick(). (5ms min)
		static uint32_t last_read_time = 0;
		if (HAL_GetTick() - last_read_time < 5)
 800229c:	f006 ffa2 	bl	80091e4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_ZN11LaserSensor15update_distanceEv+0x64>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_ZN11LaserSensor15update_distanceEv+0x26>
		{
			return 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e01a      	b.n	80022f0 <_ZN11LaserSensor15update_distanceEv+0x5c>
		/* Use polling function to know when a new measurement is ready.
		 * Another way can be to wait for HW interrupt raised on PIN 7
		 * (GPIO 1) when a new measurement is ready */

		uint8_t isReady;
		uint8_t status = VL53L4CD_CheckForDataReady(address, &isReady);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	891b      	ldrh	r3, [r3, #8]
 80022be:	f107 020e 	add.w	r2, r7, #14
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fadd 	bl	8001884 <_Z26VL53L4CD_CheckForDataReadytPh>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]

		if (isReady)
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <_ZN11LaserSensor15update_distanceEv+0x5a>
		{
			/* (Mandatory) Clear HW interrupt to restart measurements */
			VL53L4CD_ClearInterrupt(address);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	891b      	ldrh	r3, [r3, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa73 	bl	80017c4 <_Z23VL53L4CD_ClearInterruptt>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(address, &results);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	891a      	ldrh	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	330a      	adds	r3, #10
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f7ff fc29 	bl	8001b40 <_Z18VL53L4CD_GetResulttP22VL53L4CD_ResultsData_t>
		}

		return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
	}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000008c 	.word	0x2000008c

080022fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZNKSt14_Bit_referencecvbEv>:
#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    operator bool() const _GLIBCXX_NOEXCEPT
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_ZNSt14_Bit_referenceaSEb>:

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e009      	b.n	800239e <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
      return *this;
 800239e:	687b      	ldr	r3, [r7, #4]
    }
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    _GLIBCXX20_CONSTEXPR
    void
    _M_bump_up()
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	1c59      	adds	r1, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6051      	str	r1, [r2, #4]
 80023e4:	2b1f      	cmp	r3, #31
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1d1a      	adds	r2, r3, #4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
	}
    }
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	da00      	bge.n	800242e <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 800242c:	331f      	adds	r3, #31
 800242e:	115b      	asrs	r3, r3, #5
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	425a      	negs	r2, r3
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	bf58      	it	pl
 8002446:	4253      	negpl	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da07      	bge.n	8002460 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3320      	adds	r3, #32
 8002454:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1f1a      	subs	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]
    }
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZStmiRKSt18_Bit_iterator_baseS1_>:
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }
#endif // three-way comparison

    friend _GLIBCXX20_CONSTEXPR ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    {
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	461a      	mov	r2, r3
	      + __x._M_offset - __y._M_offset);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	441a      	add	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	1ad3      	subs	r3, r2, r3
    }
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff7b 	bl	80023ac <_ZNSt18_Bit_iterator_baseC1EPmj>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff6a 	bl	80023ac <_ZNSt18_Bit_iterator_baseC1EPmj>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff09 	bl	8002314 <_ZNSt14_Bit_referenceC1EPmm>
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZNSt13_Bit_iteratorppEv>:

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator++()
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5c 	bl	80023d2 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 800251a:	687b      	ldr	r3, [r7, #4]
    }
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff6b 	bl	800240e <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8002538:	687b      	ldr	r3, [r7, #4]
    }
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_ZNKSt13_Bit_iteratorixEi>:
      return *this;
    }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator[](difference_type __i) const
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f80b 	bl	8002572 <_ZStplRKSt13_Bit_iteratori>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f107 0210 	add.w	r2, r7, #16
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffbc 	bl	80024e2 <_ZNKSt13_Bit_iteratordeEv>
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_ZStplRKSt13_Bit_iteratori>:

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002586:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ffc9 	bl	8002524 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8002592:	bf00      	nop
    }
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_ZNSt19_Bit_const_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fefc 	bl	80023ac <_ZNSt18_Bit_iterator_baseC1EPmj>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>:

    _GLIBCXX20_CONSTEXPR
    _Bit_const_iterator(const _Bit_iterator& __x)
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f7ff feea 	bl	80023ac <_ZNSt18_Bit_iterator_baseC1EPmj>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C"
{
int _write(int file, char *ptr, int len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e00b      	b.n	800260e <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	1c4b      	adds	r3, r1, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002600:	2201      	movs	r2, #1
 8002602:	4807      	ldr	r0, [pc, #28]	@ (8002620 <_write+0x3c>)
 8002604:	f00a fab4 	bl	800cb70 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbef      	blt.n	80025f6 <_write+0x12>
   return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000228 	.word	0x20000228

08002624 <HAL_TIM_PeriodElapsedCallback>:
}

unsigned long seconds_elapsed = 0;
// TIM2 interrupt callback (reaches ARR every second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d104      	bne.n	8002640 <HAL_TIM_PeriodElapsedCallback+0x1c>
    seconds_elapsed++;
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a03      	ldr	r2, [pc, #12]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800263e:	6013      	str	r3, [r2, #0]
  }
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	200002bc 	.word	0x200002bc

08002650 <_Z11get_time_usv>:

unsigned long get_time_us() {
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
  unsigned long time_us = htim2.Instance->CNT;
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <_Z11get_time_usv+0x28>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	607b      	str	r3, [r7, #4]

  return seconds_elapsed * 1000000 + time_us;
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <_Z11get_time_usv+0x2c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a07      	ldr	r2, [pc, #28]	@ (8002680 <_Z11get_time_usv+0x30>)
 8002664:	fb03 f202 	mul.w	r2, r3, r2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4413      	add	r3, r2
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000148 	.word	0x20000148
 800267c:	200002bc 	.word	0x200002bc
 8002680:	000f4240 	.word	0x000f4240

08002684 <_Z20Error_Handler_CAN_okv>:

/**
 * @brief Error handler we call when CAN might still work.
 * It blinks the built-in LED at 1Hz AND sends status on CAN bus.
 */
void Error_Handler_CAN_ok() {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

  // Blink the built-in LED at 1Hz
  uint32_t last_time = HAL_GetTick();
 800268a:	f006 fdab 	bl	80091e4 <HAL_GetTick>
 800268e:	6078      	str	r0, [r7, #4]
  while (true) {
    champi_state.spin_once();
 8002690:	480d      	ldr	r0, [pc, #52]	@ (80026c8 <_Z20Error_Handler_CAN_okv+0x44>)
 8002692:	f7fe fcc9 	bl	8001028 <_ZN11ChampiState9spin_onceEv>
    HAL_Delay(10); // 10ms required to match the main loop frequency (for control)
 8002696:	200a      	movs	r0, #10
 8002698:	f006 fdb0 	bl	80091fc <HAL_Delay>

    if (HAL_GetTick() - last_time > 500) {
 800269c:	f006 fda2 	bl	80091e4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026aa:	bf8c      	ite	hi
 80026ac:	2301      	movhi	r3, #1
 80026ae:	2300      	movls	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ec      	beq.n	8002690 <_Z20Error_Handler_CAN_okv+0xc>
      last_time = HAL_GetTick();
 80026b6:	f006 fd95 	bl	80091e4 <HAL_GetTick>
 80026ba:	6078      	str	r0, [r7, #4]
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80026bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <_Z20Error_Handler_CAN_okv+0x48>)
 80026c2:	f007 fea5 	bl	800a410 <HAL_GPIO_TogglePin>
    champi_state.spin_once();
 80026c6:	e7e3      	b.n	8002690 <_Z20Error_Handler_CAN_okv+0xc>
 80026c8:	20000508 	.word	0x20000508
 80026cc:	48000400 	.word	0x48000400

080026d0 <_Z14tx_ok_or_resetv>:
/**
 * @brief Fonction qui attend que le l'envoi de données sur le CAN fonctionne. Ca envoie un message de test
 * à répétition jusqu'à ce que ça fonctionne.
 * Also blinks the built-in LED at 5 Hz.
 */
void tx_ok_or_reset() {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
  uint8_t buff[20] = {0}; // We need a big message to fill the FIFO
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]

  // Send a message to test if the can bus works (at least 1 node up)
  uint32_t ret = champi_can.send_msg(CAN_ID_ACT_TEST, (uint8_t *) buff, 20);
 80026e8:	1d3a      	adds	r2, r7, #4
 80026ea:	2314      	movs	r3, #20
 80026ec:	f240 2103 	movw	r1, #515	@ 0x203
 80026f0:	480f      	ldr	r0, [pc, #60]	@ (8002730 <_Z14tx_ok_or_resetv+0x60>)
 80026f2:	f7fe fb19 	bl	8000d28 <_ZN9ChampiCan8send_msgEmPhm>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]

  if(ret==0){
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d012      	beq.n	8002726 <_Z14tx_ok_or_resetv+0x56>
  }

  // If we get an error, retry doesn't work sometimes. So we reset the stm to try again. Also blink the led 10Hz

  // blink the built-in LED for 1s
  for (int i = 0; i < 10; i++) {
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e00a      	b.n	800271c <_Z14tx_ok_or_resetv+0x4c>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800270a:	480a      	ldr	r0, [pc, #40]	@ (8002734 <_Z14tx_ok_or_resetv+0x64>)
 800270c:	f007 fe80 	bl	800a410 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8002710:	2064      	movs	r0, #100	@ 0x64
 8002712:	f006 fd73 	bl	80091fc <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b09      	cmp	r3, #9
 8002720:	ddf1      	ble.n	8002706 <_Z14tx_ok_or_resetv+0x36>
  }

  // Then reset the stm
  NVIC_SystemReset();
 8002722:	f7ff faf1 	bl	8001d08 <__NVIC_SystemReset>
    return;
 8002726:	bf00      	nop

}
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200002c0 	.word	0x200002c0
 8002734:	48000400 	.word	0x48000400

08002738 <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	b09b      	sub	sp, #108	@ 0x6c
 800273c:	af06      	add	r7, sp, #24
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

    // Attention !! Quand on met un breakpoint dans cette fonction, on ne reçoit plus que 2 messages au lieu du
    // bon nombre.

    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d04a      	beq.n	80027e2 <HAL_FDCAN_RxFifo0Callback+0xaa>
        /* Retrieve Rx messages from RX FIFO0 */
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800274c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	2140      	movs	r1, #64	@ 0x40
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f007 f848 	bl	80097ec <HAL_FDCAN_GetRxMessage>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d014      	beq.n	8002796 <HAL_FDCAN_RxFifo0Callback+0x5e>
            status_msg.status.status = msgs_can_Status_StatusType_ERROR;
 800276c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ec <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800276e:	2203      	movs	r2, #3
 8002770:	735a      	strb	r2, [r3, #13]
            status_msg.status.error = msgs_can_Status_ErrorType_CAN_RX;
 8002772:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8002774:	2207      	movs	r2, #7
 8002776:	73da      	strb	r2, [r3, #15]
            champi_state.report_status(status_msg);
 8002778:	4e1c      	ldr	r6, [pc, #112]	@ (80027ec <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800277a:	466d      	mov	r5, sp
 800277c:	f106 040c 	add.w	r4, r6, #12
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	602b      	str	r3, [r5, #0]
 8002788:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800278c:	4818      	ldr	r0, [pc, #96]	@ (80027f0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800278e:	f7fe fbf1 	bl	8000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>
            Error_Handler_CAN_ok();
 8002792:	f7ff ff77 	bl	8002684 <_Z20Error_Handler_CAN_okv>
         * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
         * à ne pas modifier trop de variables partagées, et de priviligier la modifcation de variables
         * de 32 bits ou moins (pour que leur modification soit une opération atomique)
         * */

        if (RxHeader.Identifier == CAN_ID_ACT_ACTION) {
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b32      	cmp	r3, #50	@ 0x32
 800279a:	d11d      	bne.n	80027d8 <HAL_FDCAN_RxFifo0Callback+0xa0>
            msg_recomposer_action.add_frame(RxData, RxHeader.DataLength);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027a4:	4619      	mov	r1, r3
 80027a6:	4813      	ldr	r0, [pc, #76]	@ (80027f4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027a8:	f7fe fc80 	bl	80010ac <_ZN17MessageRecomposer9add_frameEPhh>

            if (msg_recomposer_action.check_if_new_full_msg()) {
 80027ac:	4811      	ldr	r0, [pc, #68]	@ (80027f4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027ae:	f7fe fd49 	bl	8001244 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00f      	beq.n	80027d8 <HAL_FDCAN_RxFifo0Callback+0xa0>
                std::string proto_msg = msg_recomposer_action.get_full_msg();
 80027b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027bc:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fd4c 	bl	800125c <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
                on_receive_action(proto_msg);
 80027c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f815 	bl	80027f8 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

            }
 80027ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00b f9ce 	bl	800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }

      if (RxHeader.Identifier == CAN_ID_ACT_RESET) {
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d101      	bne.n	80027e2 <HAL_FDCAN_RxFifo0Callback+0xaa>
        NVIC_SystemReset();
 80027de:	f7ff fa93 	bl	8001d08 <__NVIC_SystemReset>
      }

    }
}
 80027e2:	bf00      	nop
 80027e4:	3754      	adds	r7, #84	@ 0x54
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200005b0 	.word	0x200005b0
 80027f0:	20000508 	.word	0x20000508
 80027f4:	200002ec 	.word	0x200002ec

080027f8 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


// ------------------------------------------ ON RECEIVE FUNCTIONS -----------------------------------------------

void on_receive_action(const std::string& proto_msg)
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b08f      	sub	sp, #60	@ 0x3c
 80027fc:	af06      	add	r7, sp, #24
 80027fe:	6078      	str	r0, [r7, #4]
  // Allocate space for the decoded message.
  msgs_can_ActCmd ret_action = msgs_can_ActCmd_init_zero;
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
  // Create a stream that reads from the buffer.
  pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char*)proto_msg.c_str(), proto_msg.size());
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f00b fa92 	bl	800dd34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002810:	4604      	mov	r4, r0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f00b f9e2 	bl	800dbdc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002818:	4602      	mov	r2, r0
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	4621      	mov	r1, r4
 8002820:	4618      	mov	r0, r3
 8002822:	f003 fa89 	bl	8005d38 <pb_istream_from_buffer>
  // Now we are ready to decode the message.
  if (!pb_decode(&stream_ret, msgs_can_ActCmd_fields, &ret_action)) {
 8002826:	f107 0218 	add.w	r2, r7, #24
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	491a      	ldr	r1, [pc, #104]	@ (8002898 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fbbb 	bl	8006fac <pb_decode>
 8002836:	4603      	mov	r3, r0
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>
    // Decoding failed
    status_msg.status.status = msgs_can_Status_StatusType_ERROR;
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8002844:	2203      	movs	r2, #3
 8002846:	735a      	strb	r2, [r3, #13]
    status_msg.status.error = msgs_can_Status_ErrorType_PROTO_DECODE;
 8002848:	4b14      	ldr	r3, [pc, #80]	@ (800289c <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 800284a:	2204      	movs	r2, #4
 800284c:	73da      	strb	r2, [r3, #15]
    champi_state.report_status(status_msg);
 800284e:	4e13      	ldr	r6, [pc, #76]	@ (800289c <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8002850:	466d      	mov	r5, sp
 8002852:	f106 040c 	add.w	r4, r6, #12
 8002856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002862:	480f      	ldr	r0, [pc, #60]	@ (80028a0 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8002864:	f7fe fb86 	bl	8000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>
    Error_Handler_CAN_ok();
 8002868:	f7ff ff0c 	bl	8002684 <_Z20Error_Handler_CAN_okv>
  }

  // Use message

  switch (ret_action.action)
 800286c:	7e7b      	ldrb	r3, [r7, #25]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d009      	beq.n	8002886 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e>
 8002872:	2b02      	cmp	r3, #2
 8002874:	dc09      	bgt.n	800288a <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x92>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
 800287a:	2b01      	cmp	r3, #1
 800287c:	d007      	beq.n	800288e <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
      // TODO
      break;
    case msgs_can_ActActions_RELEASE_PLANT:
      break;
    default:
      break;
 800287e:	e004      	b.n	800288a <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x92>
      request_store_plants();
 8002880:	f000 fd26 	bl	80032d0 <_Z20request_store_plantsv>
      break;
 8002884:	e004      	b.n	8002890 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <_Z17on_receive_actionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
      break;
 800288e:	bf00      	nop
  }
}
 8002890:	bf00      	nop
 8002892:	3724      	adds	r7, #36	@ 0x24
 8002894:	46bd      	mov	sp, r7
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002898:	0800f6f8 	.word	0x0800f6f8
 800289c:	200005b0 	.word	0x200005b0
 80028a0:	20000508 	.word	0x20000508

080028a4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f001 fa6f 	bl	8003d90 <_ZNSaI11LaserSensorED1Ev>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZN11SystemStateC1Ev>:
  SERVO_CIRCLE_PLANT_ID,
  SERVO_PUSH_PLANT_ID
};


struct SystemState
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	709a      	strb	r2, [r3, #2]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1d1c      	adds	r4, r3, #4
 80028da:	2300      	movs	r3, #0
 80028dc:	743b      	strb	r3, [r7, #16]
 80028de:	2300      	movs	r3, #0
 80028e0:	747b      	strb	r3, [r7, #17]
 80028e2:	2300      	movs	r3, #0
 80028e4:	74bb      	strb	r3, [r7, #18]
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	2303      	movs	r3, #3
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 fac1 	bl	8003e7c <_ZNSaIbEC1Ev>
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	f107 0208 	add.w	r2, r7, #8
 8002902:	ca06      	ldmia	r2, {r1, r2}
 8002904:	4620      	mov	r0, r4
 8002906:	f001 fad1 	bl	8003eac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fac0 	bl	8003e94 <_ZNSaIbED1Ev>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}

0800291e <_ZN14ReservoirStateC1Ev>:
  bool storing = false;
  std::vector<bool> servos_ok = {false, false, false};

} system_state;

struct ReservoirState
 800291e:	b590      	push	{r4, r7, lr}
 8002920:	b08b      	sub	sp, #44	@ 0x2c
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	687c      	ldr	r4, [r7, #4]
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	f8c3 200b 	str.w	r2, [r3, #11]
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	230f      	movs	r3, #15
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fa98 	bl	8003e7c <_ZNSaIbEC1Ev>
 800294c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002950:	f107 020c 	add.w	r2, r7, #12
 8002954:	ca06      	ldmia	r2, {r1, r2}
 8002956:	4620      	mov	r0, r4
 8002958:	f001 faa8 	bl	8003eac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>
 800295c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fa97 	bl	8003e94 <_ZNSaIbED1Ev>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	372c      	adds	r7, #44	@ 0x2c
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <_Z15print_reservoirv>:
  int head = 0;
  int nb_stored = 0;
} reservoir_state;

void print_reservoir()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
  // print reservoir state
  printf("\n");
 8002982:	200a      	movs	r0, #10
 8002984:	f00b fbd4 	bl	800e130 <putchar>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e016      	b.n	80029bc <_Z15print_reservoirv+0x40>
  {
    printf("%s", reservoir_state.slots[i] ? "1" : "0");
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	491a      	ldr	r1, [pc, #104]	@ (80029fc <_Z15print_reservoirv+0x80>)
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fad4 	bl	8003f42 <_ZNSt6vectorIbSaIbEEixEj>
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fccc 	bl	800233a <_ZNKSt14_Bit_referencecvbEv>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <_Z15print_reservoirv+0x30>
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <_Z15print_reservoirv+0x84>)
 80029aa:	e000      	b.n	80029ae <_Z15print_reservoirv+0x32>
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <_Z15print_reservoirv+0x88>)
 80029ae:	4619      	mov	r1, r3
 80029b0:	4815      	ldr	r0, [pc, #84]	@ (8002a08 <_Z15print_reservoirv+0x8c>)
 80029b2:	f00b fbab 	bl	800e10c <iprintf>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	480f      	ldr	r0, [pc, #60]	@ (80029fc <_Z15print_reservoirv+0x80>)
 80029be:	f001 faa3 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf8c      	ite	hi
 80029ca:	2301      	movhi	r3, #1
 80029cc:	2300      	movls	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1dc      	bne.n	800298e <_Z15print_reservoirv+0x12>

  }
  printf("nb stored: %d\n", reservoir_state.nb_stored);
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <_Z15print_reservoirv+0x80>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4619      	mov	r1, r3
 80029da:	480c      	ldr	r0, [pc, #48]	@ (8002a0c <_Z15print_reservoirv+0x90>)
 80029dc:	f00b fb96 	bl	800e10c <iprintf>
  printf("head: %d\n", reservoir_state.head);
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <_Z15print_reservoirv+0x80>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4619      	mov	r1, r3
 80029e6:	480a      	ldr	r0, [pc, #40]	@ (8002a10 <_Z15print_reservoirv+0x94>)
 80029e8:	f00b fb90 	bl	800e10c <iprintf>
  printf("\n");
 80029ec:	200a      	movs	r0, #10
 80029ee:	f00b fb9f 	bl	800e130 <putchar>
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200006b0 	.word	0x200006b0
 8002a00:	0800f0a4 	.word	0x0800f0a4
 8002a04:	0800f0a8 	.word	0x0800f0a8
 8002a08:	0800f0ac 	.word	0x0800f0ac
 8002a0c:	0800f0b0 	.word	0x0800f0b0
 8002a10:	0800f0c0 	.word	0x0800f0c0

08002a14 <_Z11ping_servosv>:

// ================================================ DIAGNOSTIC FUNCTIONS ===============================================

int ping_servos()
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
  int res = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	e021      	b.n	8002a68 <_Z11ping_servosv+0x54>
  {
    int id = servo_ids_to_check[i];
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4818      	ldr	r0, [pc, #96]	@ (8002a8c <_Z11ping_servosv+0x78>)
 8002a2a:	f001 fa17 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	607b      	str	r3, [r7, #4]
    int pos = servos.ReadPos(id);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4815      	ldr	r0, [pc, #84]	@ (8002a90 <_Z11ping_servosv+0x7c>)
 8002a3c:	f7fe fd75 	bl	800152a <_ZN7SCServo7ReadPosEh>
 8002a40:	6038      	str	r0, [r7, #0]

    if(pos == -1)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a48:	d107      	bne.n	8002a5a <_Z11ping_servosv+0x46>
    {
      printf("Error reading servo %d\n", id);
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <_Z11ping_servosv+0x80>)
 8002a4e:	f00b fb5d 	bl	800e10c <iprintf>
      res = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e003      	b.n	8002a62 <_Z11ping_servosv+0x4e>
    }
    else
    {
      printf("Servo %d was ping successfully\n", id);
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	480e      	ldr	r0, [pc, #56]	@ (8002a98 <_Z11ping_servosv+0x84>)
 8002a5e:	f00b fb55 	bl	800e10c <iprintf>
  for(int i = 0; i < servo_ids_to_check.size(); i++)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	4808      	ldr	r0, [pc, #32]	@ (8002a8c <_Z11ping_servosv+0x78>)
 8002a6a:	f001 fa82 	bl	8003f72 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	bf8c      	ite	hi
 8002a76:	2301      	movhi	r3, #1
 8002a78:	2300      	movls	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1d1      	bne.n	8002a24 <_Z11ping_servosv+0x10>
    }
  }
  return res;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000068c 	.word	0x2000068c
 8002a90:	20000688 	.word	0x20000688
 8002a94:	0800f0cc 	.word	0x0800f0cc
 8002a98:	0800f0e4 	.word	0x0800f0e4

08002a9c <_Z12setup_lasersv>:
 * @brief Setup the distance sensors
 *
 * @return int 0 if all sensors are setup correctly, otherwise the error code
 */
int setup_lasers()
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  /* Toggle Xshut pin to reset the sensors so that their addresses can be set individually*/
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	4819      	ldr	r0, [pc, #100]	@ (8002b0c <_Z12setup_lasersv+0x70>)
 8002aa8:	f007 fc9a 	bl	800a3e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2120      	movs	r1, #32
 8002ab0:	4816      	ldr	r0, [pc, #88]	@ (8002b0c <_Z12setup_lasersv+0x70>)
 8002ab2:	f007 fc95 	bl	800a3e0 <HAL_GPIO_WritePin>

  /* Setup the first laser sensor */
  int status = sensors[LEFT].setup();
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4815      	ldr	r0, [pc, #84]	@ (8002b10 <_Z12setup_lasersv+0x74>)
 8002aba:	f001 fa6a 	bl	8003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb19 	bl	80020f8 <_ZN11LaserSensor5setupEv>
 8002ac6:	6078      	str	r0, [r7, #4]

  if(status)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <_Z12setup_lasersv+0x36>
  {
    return status;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	e018      	b.n	8002b04 <_Z12setup_lasersv+0x68>
  }

  /* Setup the second laser sensor */
  status = sensors[RIGHT].setup();
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	480e      	ldr	r0, [pc, #56]	@ (8002b10 <_Z12setup_lasersv+0x74>)
 8002ad6:	f001 fa5c 	bl	8003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fb0b 	bl	80020f8 <_ZN11LaserSensor5setupEv>
 8002ae2:	6078      	str	r0, [r7, #4]

  if(status)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_Z12setup_lasersv+0x52>
  {
    return status;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	e00a      	b.n	8002b04 <_Z12setup_lasersv+0x68>
  }

  // AFTER ALL SETUPS WE PULL TO HIGH THE SHUTPINS to enable the sensors
  HAL_GPIO_WritePin(XSHUT_LEFT_GPIO_Port, XSHUT_LEFT_Pin, GPIO_PIN_SET);
 8002aee:	2201      	movs	r2, #1
 8002af0:	2110      	movs	r1, #16
 8002af2:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <_Z12setup_lasersv+0x70>)
 8002af4:	f007 fc74 	bl	800a3e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_RIGHT_GPIO_Port, XSHUT_RIGHT_Pin, GPIO_PIN_SET);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2120      	movs	r1, #32
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <_Z12setup_lasersv+0x70>)
 8002afe:	f007 fc6f 	bl	800a3e0 <HAL_GPIO_WritePin>

  return 0;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	200005f4 	.word	0x200005f4

08002b14 <_Z29reservoir_initialize_and_testv>:


void reservoir_initialize_and_test()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  reservoir_rotate(2);
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f000 f9df 	bl	8002edc <_Z16reservoir_rotatei>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <_Z24lift_initialize_and_testv>:

void lift_initialize_and_test()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  // Initialization steps:
  // 1. If button pressed, move up a little
  // 2. Move down until button is pressed

  stepper_lift.set_pos(0);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4817      	ldr	r0, [pc, #92]	@ (8002b88 <_Z24lift_initialize_and_testv+0x64>)
 8002b2c:	f7ff f9a2 	bl	8001e74 <_ZN7Stepper7set_posEi>

  // 1
  if(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_RESET)
 8002b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b38:	f007 fc3a 	bl	800a3b0 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <_Z24lift_initialize_and_testv+0x54>
  {
	printf("Lift Goes Up...\n");
 8002b4c:	480f      	ldr	r0, [pc, #60]	@ (8002b8c <_Z24lift_initialize_and_testv+0x68>)
 8002b4e:	f00b fb4d 	bl	800e1ec <puts>
    stepper_lift.set_goal(3200);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002b58:	480b      	ldr	r0, [pc, #44]	@ (8002b88 <_Z24lift_initialize_and_testv+0x64>)
 8002b5a:	f7ff f94b 	bl	8001df4 <_ZN7Stepper8set_goalEib>
    while(!stepper_lift.is_stopped())
 8002b5e:	e002      	b.n	8002b66 <_Z24lift_initialize_and_testv+0x42>
    {
      stepper_lift.spin_once();
 8002b60:	4809      	ldr	r0, [pc, #36]	@ (8002b88 <_Z24lift_initialize_and_testv+0x64>)
 8002b62:	f7ff f995 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
    while(!stepper_lift.is_stopped())
 8002b66:	4808      	ldr	r0, [pc, #32]	@ (8002b88 <_Z24lift_initialize_and_testv+0x64>)
 8002b68:	f7ff fa04 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f3      	bne.n	8002b60 <_Z24lift_initialize_and_testv+0x3c>
    }
  }

  printf("Lift Goes Down...\n");
 8002b78:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <_Z24lift_initialize_and_testv+0x6c>)
 8002b7a:	f00b fb37 	bl	800e1ec <puts>

  // 2
  lift_go_down();
 8002b7e:	f000 f81d 	bl	8002bbc <_Z12lift_go_downv>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000600 	.word	0x20000600
 8002b8c:	0800f104 	.word	0x0800f104
 8002b90:	0800f114 	.word	0x0800f114

08002b94 <_Z27hoppers_initialize_and_testv>:
/**
 * Close then open the hoppers
 *
 */
void hoppers_initialize_and_test()
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  hopper_close(LEFT);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f8af 	bl	8002cfc <_Z12hopper_closei>
  hopper_close(RIGHT);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 f8ac 	bl	8002cfc <_Z12hopper_closei>

  HAL_Delay(1000); // Because hoppers functions are not blocking
 8002ba4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ba8:	f006 fb28 	bl	80091fc <HAL_Delay>

  hopper_open(LEFT);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f000 f8cb 	bl	8002d48 <_Z11hopper_openi>
  hopper_open(RIGHT);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f000 f8c8 	bl	8002d48 <_Z11hopper_openi>
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_Z12lift_go_downv>:


// ----------------------------------------- LIFT -----------------------------------------

void lift_go_down()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(-100000);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4919      	ldr	r1, [pc, #100]	@ (8002c28 <_Z12lift_go_downv+0x6c>)
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002bc6:	f7ff f915 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 8002bca:	e002      	b.n	8002bd2 <_Z12lift_go_downv+0x16>
  {
    stepper_lift.spin_once();
 8002bcc:	4817      	ldr	r0, [pc, #92]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002bce:	f7ff f95f 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(F_COURSE_LIFT_GPIO_Port, F_COURSE_LIFT_Pin) == GPIO_PIN_SET)
 8002bd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bda:	f007 fbe9 	bl	800a3b0 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ee      	bne.n	8002bcc <_Z12lift_go_downv+0x10>
  }


  // Turn (offset)
  stepper_lift.set_pos(0);
 8002bee:	2100      	movs	r1, #0
 8002bf0:	480e      	ldr	r0, [pc, #56]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002bf2:	f7ff f93f 	bl	8001e74 <_ZN7Stepper7set_posEi>
  stepper_lift.set_goal(LIFT_OFFSET_FROM_BUTTON, true);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8002bfc:	480b      	ldr	r0, [pc, #44]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002bfe:	f7ff f8f9 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002c02:	e002      	b.n	8002c0a <_Z12lift_go_downv+0x4e>
  {
    stepper_lift.spin_once();
 8002c04:	4809      	ldr	r0, [pc, #36]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002c06:	f7ff f943 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002c0a:	4808      	ldr	r0, [pc, #32]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002c0c:	f7ff f9b2 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f3      	bne.n	8002c04 <_Z12lift_go_downv+0x48>
  }

  stepper_lift.set_pos(0);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <_Z12lift_go_downv+0x70>)
 8002c20:	f7ff f928 	bl	8001e74 <_ZN7Stepper7set_posEi>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	fffe7960 	.word	0xfffe7960
 8002c2c:	20000600 	.word	0x20000600

08002c30 <_Z10lift_go_upv>:


void lift_go_up()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_UP);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 8002c3a:	4809      	ldr	r0, [pc, #36]	@ (8002c60 <_Z10lift_go_upv+0x30>)
 8002c3c:	f7ff f8da 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002c40:	e002      	b.n	8002c48 <_Z10lift_go_upv+0x18>
  {
    stepper_lift.spin_once();
 8002c42:	4807      	ldr	r0, [pc, #28]	@ (8002c60 <_Z10lift_go_upv+0x30>)
 8002c44:	f7ff f924 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002c48:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <_Z10lift_go_upv+0x30>)
 8002c4a:	f7ff f993 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f3      	bne.n	8002c42 <_Z10lift_go_upv+0x12>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000600 	.word	0x20000600

08002c64 <_Z14lift_go_middlev>:


void lift_go_middle()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  stepper_lift.set_goal(LIFT_POS_MIDDLE);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002c6e:	4809      	ldr	r0, [pc, #36]	@ (8002c94 <_Z14lift_go_middlev+0x30>)
 8002c70:	f7ff f8c0 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_lift.is_stopped())
 8002c74:	e002      	b.n	8002c7c <_Z14lift_go_middlev+0x18>
  {
    stepper_lift.spin_once();
 8002c76:	4807      	ldr	r0, [pc, #28]	@ (8002c94 <_Z14lift_go_middlev+0x30>)
 8002c78:	f7ff f90a 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_lift.is_stopped())
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <_Z14lift_go_middlev+0x30>)
 8002c7e:	f7ff f979 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f083 0301 	eor.w	r3, r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f3      	bne.n	8002c76 <_Z14lift_go_middlev+0x12>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000600 	.word	0x20000600

08002c98 <_Z14grabber_extendv>:

// ----------------------------------------- GRABBER -----------------------------------------

void grabber_extend()
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_EXTEND, 1000);
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002caa:	2108      	movs	r1, #8
 8002cac:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <_Z14grabber_extendv+0x28>)
 8002cae:	f7fe fbae 	bl	800140e <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(1000);
 8002cb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cb6:	f006 faa1 	bl	80091fc <HAL_Delay>
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000688 	.word	0x20000688

08002cc4 <_Z15grabber_retractb>:


void grabber_retract(bool block)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  servos.WritePos(SERVO_GRABBER_ID ,SERVO_GRABBER_POS_RETRACT, 500);
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cd6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002cda:	2108      	movs	r1, #8
 8002cdc:	4806      	ldr	r0, [pc, #24]	@ (8002cf8 <_Z15grabber_retractb+0x34>)
 8002cde:	f7fe fb96 	bl	800140e <_ZN7SCServo8WritePosEhiih>
  if(block) HAL_Delay(500);
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <_Z15grabber_retractb+0x2c>
 8002ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cec:	f006 fa86 	bl	80091fc <HAL_Delay>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000688 	.word	0x20000688

08002cfc <_Z12hopper_closei>:


// ----------------------------------------- HOPPERS -----------------------------------------

void hopper_close(int side)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_close[side], 1000);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4619      	mov	r1, r3
 8002d08:	480c      	ldr	r0, [pc, #48]	@ (8002d3c <_Z12hopper_closei+0x40>)
 8002d0a:	f001 f8a7 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b2dc      	uxtb	r4, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4809      	ldr	r0, [pc, #36]	@ (8002d40 <_Z12hopper_closei+0x44>)
 8002d1a:	f001 f89f 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <_Z12hopper_closei+0x48>)
 8002d2e:	f7fe fb6e 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200005d0 	.word	0x200005d0
 8002d40:	200005e8 	.word	0x200005e8
 8002d44:	20000688 	.word	0x20000688

08002d48 <_Z11hopper_openi>:


void hopper_open(int side)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	6078      	str	r0, [r7, #4]
  servos.WritePos(hoppers_ids[side], hoppers_pos_open[side], 500);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4619      	mov	r1, r3
 8002d54:	480c      	ldr	r0, [pc, #48]	@ (8002d88 <_Z11hopper_openi+0x40>)
 8002d56:	f001 f881 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b2dc      	uxtb	r4, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4809      	ldr	r0, [pc, #36]	@ (8002d8c <_Z11hopper_openi+0x44>)
 8002d66:	f001 f879 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d76:	4621      	mov	r1, r4
 8002d78:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <_Z11hopper_openi+0x48>)
 8002d7a:	f7fe fb48 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200005d0 	.word	0x200005d0
 8002d8c:	200005dc 	.word	0x200005dc
 8002d90:	20000688 	.word	0x20000688

08002d94 <_Z16reservoir_rotateb>:


// ---------------------------------------- RESERVOIR ----------------------------------------

void reservoir_rotate(bool keep_speed=false)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  // Set big goal. When button is pressed, reset current pos to 0 and stop the motor
  stepper_res.set_pos(0);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	482d      	ldr	r0, [pc, #180]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002da2:	f7ff f867 	bl	8001e74 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(100000, keep_speed);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	461a      	mov	r2, r3
 8002daa:	492c      	ldr	r1, [pc, #176]	@ (8002e5c <_Z16reservoir_rotateb+0xc8>)
 8002dac:	482a      	ldr	r0, [pc, #168]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002dae:	f7ff f821 	bl	8001df4 <_ZN7Stepper8set_goalEib>

  // Turn untill the button is released
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8002db2:	e002      	b.n	8002dba <_Z16reservoir_rotateb+0x26>
  {
    stepper_res.spin_once();
 8002db4:	4828      	ldr	r0, [pc, #160]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002db6:	f7ff f86b 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_RESET)
 8002dba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc2:	f007 faf5 	bl	800a3b0 <HAL_GPIO_ReadPin>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ee      	bne.n	8002db4 <_Z16reservoir_rotateb+0x20>
  }

  // Debouncing: spin for 200ms
  unsigned long start = HAL_GetTick();
 8002dd6:	f006 fa05 	bl	80091e4 <HAL_GetTick>
 8002dda:	60f8      	str	r0, [r7, #12]
  while(HAL_GetTick() - start < 200)
 8002ddc:	e002      	b.n	8002de4 <_Z16reservoir_rotateb+0x50>
  {
    stepper_res.spin_once();
 8002dde:	481e      	ldr	r0, [pc, #120]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002de0:	f7ff f856 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(HAL_GetTick() - start < 200)
 8002de4:	f006 f9fe 	bl	80091e4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2bc7      	cmp	r3, #199	@ 0xc7
 8002df0:	bf94      	ite	ls
 8002df2:	2301      	movls	r3, #1
 8002df4:	2300      	movhi	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <_Z16reservoir_rotateb+0x4a>
  }

  // Turn untill the button is pressed (reservoir in position)
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002dfc:	e002      	b.n	8002e04 <_Z16reservoir_rotateb+0x70>
  {
    stepper_res.spin_once();
 8002dfe:	4816      	ldr	r0, [pc, #88]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002e00:	f7ff f846 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(HAL_GPIO_ReadPin(FIN_COURSE_RES_GPIO_Port, FIN_COURSE_RES_Pin) == GPIO_PIN_SET)
 8002e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e0c:	f007 fad0 	bl	800a3b0 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <_Z16reservoir_rotateb+0x6a>
  }

  // Turn (offset)
  stepper_res.set_pos(0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	480d      	ldr	r0, [pc, #52]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002e24:	f7ff f826 	bl	8001e74 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FROM_BUTTON, true);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2164      	movs	r1, #100	@ 0x64
 8002e2c:	480a      	ldr	r0, [pc, #40]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002e2e:	f7fe ffe1 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002e32:	e002      	b.n	8002e3a <_Z16reservoir_rotateb+0xa6>
  {
    stepper_res.spin_once();
 8002e34:	4808      	ldr	r0, [pc, #32]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002e36:	f7ff f82b 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002e3a:	4807      	ldr	r0, [pc, #28]	@ (8002e58 <_Z16reservoir_rotateb+0xc4>)
 8002e3c:	f7ff f89a 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f083 0301 	eor.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f3      	bne.n	8002e34 <_Z16reservoir_rotateb+0xa0>
  }

}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000644 	.word	0x20000644
 8002e5c:	000186a0 	.word	0x000186a0

08002e60 <_Z27reservoir_align_with_outputv>:

void reservoir_align_with_output()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 8002e64:	2100      	movs	r1, #0
 8002e66:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <_Z27reservoir_align_with_outputv+0x38>)
 8002e68:	f7ff f804 	bl	8001e74 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(RES_OFFSET_FOR_OUTPUT);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002e72:	4809      	ldr	r0, [pc, #36]	@ (8002e98 <_Z27reservoir_align_with_outputv+0x38>)
 8002e74:	f7fe ffbe 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002e78:	e002      	b.n	8002e80 <_Z27reservoir_align_with_outputv+0x20>
  {
    stepper_res.spin_once();
 8002e7a:	4807      	ldr	r0, [pc, #28]	@ (8002e98 <_Z27reservoir_align_with_outputv+0x38>)
 8002e7c:	f7ff f808 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002e80:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <_Z27reservoir_align_with_outputv+0x38>)
 8002e82:	f7ff f877 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f3      	bne.n	8002e7a <_Z27reservoir_align_with_outputv+0x1a>
  }
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000644 	.word	0x20000644

08002e9c <_Z22reservoir_realign_backv>:

void reservoir_realign_back()
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  // Turn (offset)
  stepper_res.set_pos(0);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	480c      	ldr	r0, [pc, #48]	@ (8002ed4 <_Z22reservoir_realign_backv+0x38>)
 8002ea4:	f7fe ffe6 	bl	8001e74 <_ZN7Stepper7set_posEi>
  stepper_res.set_goal(-RES_OFFSET_FOR_OUTPUT);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	490b      	ldr	r1, [pc, #44]	@ (8002ed8 <_Z22reservoir_realign_backv+0x3c>)
 8002eac:	4809      	ldr	r0, [pc, #36]	@ (8002ed4 <_Z22reservoir_realign_backv+0x38>)
 8002eae:	f7fe ffa1 	bl	8001df4 <_ZN7Stepper8set_goalEib>
  while(!stepper_res.is_stopped())
 8002eb2:	e002      	b.n	8002eba <_Z22reservoir_realign_backv+0x1e>
  {
    stepper_res.spin_once();
 8002eb4:	4807      	ldr	r0, [pc, #28]	@ (8002ed4 <_Z22reservoir_realign_backv+0x38>)
 8002eb6:	f7fe ffeb 	bl	8001e90 <_ZN7Stepper9spin_onceEv>
  while(!stepper_res.is_stopped())
 8002eba:	4806      	ldr	r0, [pc, #24]	@ (8002ed4 <_Z22reservoir_realign_backv+0x38>)
 8002ebc:	f7ff f85a 	bl	8001f74 <_ZN7Stepper10is_stoppedEv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f3      	bne.n	8002eb4 <_Z22reservoir_realign_backv+0x18>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000644 	.word	0x20000644
 8002ed8:	fffffce0 	.word	0xfffffce0

08002edc <_Z16reservoir_rotatei>:


void reservoir_rotate(int n_slots)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < n_slots; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e00b      	b.n	8002f02 <_Z16reservoir_rotatei+0x26>
  {
    reservoir_rotate(i>0);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfcc      	ite	gt
 8002ef0:	2301      	movgt	r3, #1
 8002ef2:	2300      	movle	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff4c 	bl	8002d94 <_Z16reservoir_rotateb>
  for(int i = 0; i < n_slots; i++)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	dbef      	blt.n	8002eea <_Z16reservoir_rotatei+0xe>
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_Z14close_fildeferv>:

void close_fildefer()
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_CLOSED, 1000);
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f22:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002f26:	2112      	movs	r1, #18
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <_Z14close_fildeferv+0x20>)
 8002f2a:	f7fe fa70 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000688 	.word	0x20000688

08002f38 <_Z13hide_fildeferv>:

void hide_fildefer()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af02      	add	r7, sp, #8
  servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f46:	22c8      	movs	r2, #200	@ 0xc8
 8002f48:	2112      	movs	r1, #18
 8002f4a:	4803      	ldr	r0, [pc, #12]	@ (8002f58 <_Z13hide_fildeferv+0x20>)
 8002f4c:	f7fe fa5f 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000688 	.word	0x20000688

08002f5c <_Z19fildefer_initializev>:

void fildefer_initialize()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  // servos.WritePos(FILDEFER_ID, FILDEFER_POS_HIDDEN, 1000);
  hide_fildefer();
 8002f60:	f7ff ffea 	bl	8002f38 <_Z13hide_fildeferv>
  HAL_Delay(1000);
 8002f64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f68:	f006 f948 	bl	80091fc <HAL_Delay>
  close_fildefer();
 8002f6c:	f7ff ffd2 	bl	8002f14 <_Z14close_fildeferv>
  HAL_Delay(1000);
 8002f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f74:	f006 f942 	bl	80091fc <HAL_Delay>
  hide_fildefer();
 8002f78:	f7ff ffde 	bl	8002f38 <_Z13hide_fildeferv>
  HAL_Delay(1000);
 8002f7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f80:	f006 f93c 	bl	80091fc <HAL_Delay>
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_Z10push_plantv>:

void push_plant()
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_PUSHED, 500);
 8002f8e:	2301      	movs	r3, #1
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f96:	22dc      	movs	r2, #220	@ 0xdc
 8002f98:	2109      	movs	r1, #9
 8002f9a:	4803      	ldr	r0, [pc, #12]	@ (8002fa8 <_Z10push_plantv+0x20>)
 8002f9c:	f7fe fa37 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000688 	.word	0x20000688

08002fac <_Z19retract_servo_plantv>:
void retract_servo_plant()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED, 200);
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	23c8      	movs	r3, #200	@ 0xc8
 8002fb8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8002fbc:	2109      	movs	r1, #9
 8002fbe:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <_Z19retract_servo_plantv+0x20>)
 8002fc0:	f7fe fa25 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000688 	.word	0x20000688

08002fd0 <_Z17open_circle_plantv>:

void open_circle_plant()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN, 200);
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	23c8      	movs	r3, #200	@ 0xc8
 8002fdc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <_Z17open_circle_plantv+0x20>)
 8002fe4:	f7fe fa13 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000688 	.word	0x20000688

08002ff4 <_Z22open_circle_plant_morev>:
void open_circle_plant_more()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_OPEN_MORE, 200);
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	23c8      	movs	r3, #200	@ 0xc8
 8003000:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003004:	2110      	movs	r1, #16
 8003006:	4803      	ldr	r0, [pc, #12]	@ (8003014 <_Z22open_circle_plant_morev+0x20>)
 8003008:	f7fe fa01 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000688 	.word	0x20000688

08003018 <_Z18close_circle_plantv>:
void close_circle_plant()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af02      	add	r7, sp, #8
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE, 200);
 800301e:	2301      	movs	r3, #1
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	23c8      	movs	r3, #200	@ 0xc8
 8003024:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003028:	2110      	movs	r1, #16
 800302a:	4803      	ldr	r0, [pc, #12]	@ (8003038 <_Z18close_circle_plantv+0x20>)
 800302c:	f7fe f9ef 	bl	800140e <_ZN7SCServo8WritePosEhiih>
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000688 	.word	0x20000688

0800303c <_Z28pusher_and_circle_initializev>:

void pusher_and_circle_initialize()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af02      	add	r7, sp, #8
  // init circle
  servos.WritePos(SERVO_CIRCLE_PLANT_ID, SERVO_CIRCLE_POS_CLOSE+50, 200);
 8003042:	2301      	movs	r3, #1
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	23c8      	movs	r3, #200	@ 0xc8
 8003048:	f240 224e 	movw	r2, #590	@ 0x24e
 800304c:	2110      	movs	r1, #16
 800304e:	4811      	ldr	r0, [pc, #68]	@ (8003094 <_Z28pusher_and_circle_initializev+0x58>)
 8003050:	f7fe f9dd 	bl	800140e <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 8003054:	20c8      	movs	r0, #200	@ 0xc8
 8003056:	f006 f8d1 	bl	80091fc <HAL_Delay>
  close_circle_plant();
 800305a:	f7ff ffdd 	bl	8003018 <_Z18close_circle_plantv>

  //init pusher
  retract_servo_plant();
 800305e:	f7ff ffa5 	bl	8002fac <_Z19retract_servo_plantv>
  HAL_Delay(500);
 8003062:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003066:	f006 f8c9 	bl	80091fc <HAL_Delay>
  servos.WritePos(SERVO_PUSH_PLANT_ID, SERVO_PUSH_POSE_RETRACTED-50, 200);
 800306a:	2301      	movs	r3, #1
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	23c8      	movs	r3, #200	@ 0xc8
 8003070:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003074:	2109      	movs	r1, #9
 8003076:	4807      	ldr	r0, [pc, #28]	@ (8003094 <_Z28pusher_and_circle_initializev+0x58>)
 8003078:	f7fe f9c9 	bl	800140e <_ZN7SCServo8WritePosEhiih>
  HAL_Delay(200);
 800307c:	20c8      	movs	r0, #200	@ 0xc8
 800307e:	f006 f8bd 	bl	80091fc <HAL_Delay>
  retract_servo_plant();
 8003082:	f7ff ff93 	bl	8002fac <_Z19retract_servo_plantv>
  HAL_Delay(500);
 8003086:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800308a:	f006 f8b7 	bl	80091fc <HAL_Delay>
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000688 	.word	0x20000688

08003098 <_Z25search_next_plant_to_pushv>:

int search_next_plant_to_push()
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
  // the output is aligned with the head + 5
  // we search in reverse order till we find a plant
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e02b      	b.n	80030fc <_Z25search_next_plant_to_pushv+0x64>
  {
    int index = (reservoir_state.head + 5 - i) % reservoir_state.slots.size();
 80030a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <_Z25search_next_plant_to_pushv+0x88>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	1d5a      	adds	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	461c      	mov	r4, r3
 80030b0:	481b      	ldr	r0, [pc, #108]	@ (8003120 <_Z25search_next_plant_to_pushv+0x88>)
 80030b2:	f000 ff29 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80030b6:	4603      	mov	r3, r0
 80030b8:	fbb4 f2f3 	udiv	r2, r4, r3
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	1ae3      	subs	r3, r4, r3
 80030c2:	60bb      	str	r3, [r7, #8]
    if (index < 0)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da06      	bge.n	80030d8 <_Z25search_next_plant_to_pushv+0x40>
    {
      index += reservoir_state.slots.size();
 80030ca:	4815      	ldr	r0, [pc, #84]	@ (8003120 <_Z25search_next_plant_to_pushv+0x88>)
 80030cc:	f000 ff1c 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
    }

    if (reservoir_state.slots[index])
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	463b      	mov	r3, r7
 80030dc:	4910      	ldr	r1, [pc, #64]	@ (8003120 <_Z25search_next_plant_to_pushv+0x88>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 ff2f 	bl	8003f42 <_ZNSt6vectorIbSaIbEEixEj>
 80030e4:	463b      	mov	r3, r7
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f927 	bl	800233a <_ZNKSt14_Bit_referencecvbEv>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <_Z25search_next_plant_to_pushv+0x5e>
    {
      return i;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	e010      	b.n	8003118 <_Z25search_next_plant_to_pushv+0x80>
  for (int i = 0; i < reservoir_state.slots.size(); i++)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	4808      	ldr	r0, [pc, #32]	@ (8003120 <_Z25search_next_plant_to_pushv+0x88>)
 80030fe:	f000 ff03 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	429a      	cmp	r2, r3
 8003108:	bf8c      	ite	hi
 800310a:	2301      	movhi	r3, #1
 800310c:	2300      	movls	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1c7      	bne.n	80030a4 <_Z25search_next_plant_to_pushv+0xc>
    }
  }
  return -1;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	200006b0 	.word	0x200006b0

08003124 <_Z18push_one_plant_outv>:

void push_one_plant_out()
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
  // search for a plant to push
  int nb_slot_till_next_plant = search_next_plant_to_push();
 800312a:	f7ff ffb5 	bl	8003098 <_Z25search_next_plant_to_pushv>
 800312e:	60f8      	str	r0, [r7, #12]
  printf("\n\n");
 8003130:	484e      	ldr	r0, [pc, #312]	@ (800326c <_Z18push_one_plant_outv+0x148>)
 8003132:	f00b f85b 	bl	800e1ec <puts>
  printf("next plant to push: %d\n", nb_slot_till_next_plant);
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	484d      	ldr	r0, [pc, #308]	@ (8003270 <_Z18push_one_plant_outv+0x14c>)
 800313a:	f00a ffe7 	bl	800e10c <iprintf>
  if (nb_slot_till_next_plant == -1)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003144:	f000 808e 	beq.w	8003264 <_Z18push_one_plant_outv+0x140>
  {
    return;
  }
  HAL_Delay(2000);
 8003148:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800314c:	f006 f856 	bl	80091fc <HAL_Delay>
  // rotate the reservoir to the right position
  printf("rotate the reservoir to the right position\n");
 8003150:	4848      	ldr	r0, [pc, #288]	@ (8003274 <_Z18push_one_plant_outv+0x150>)
 8003152:	f00b f84b 	bl	800e1ec <puts>
  reservoir_rotate(nb_slot_till_next_plant );
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fec0 	bl	8002edc <_Z16reservoir_rotatei>
  HAL_Delay(2000);
 800315c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003160:	f006 f84c 	bl	80091fc <HAL_Delay>


  // rotate the reservoir by the right offset
  printf("align reservoir \n");
 8003164:	4844      	ldr	r0, [pc, #272]	@ (8003278 <_Z18push_one_plant_outv+0x154>)
 8003166:	f00b f841 	bl	800e1ec <puts>
  reservoir_align_with_output();
 800316a:	f7ff fe79 	bl	8002e60 <_Z27reservoir_align_with_outputv>
  HAL_Delay(2000);
 800316e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003172:	f006 f843 	bl	80091fc <HAL_Delay>
  printf("open circle \n");
 8003176:	4841      	ldr	r0, [pc, #260]	@ (800327c <_Z18push_one_plant_outv+0x158>)
 8003178:	f00b f838 	bl	800e1ec <puts>
  open_circle_plant();
 800317c:	f7ff ff28 	bl	8002fd0 <_Z17open_circle_plantv>
  printf("push plant \n");
 8003180:	483f      	ldr	r0, [pc, #252]	@ (8003280 <_Z18push_one_plant_outv+0x15c>)
 8003182:	f00b f833 	bl	800e1ec <puts>
  push_plant();
 8003186:	f7ff feff 	bl	8002f88 <_Z10push_plantv>
  HAL_Delay(1300);
 800318a:	f240 5014 	movw	r0, #1300	@ 0x514
 800318e:	f006 f835 	bl	80091fc <HAL_Delay>
  printf("retract servo plant \n");
 8003192:	483c      	ldr	r0, [pc, #240]	@ (8003284 <_Z18push_one_plant_outv+0x160>)
 8003194:	f00b f82a 	bl	800e1ec <puts>
  retract_servo_plant();
 8003198:	f7ff ff08 	bl	8002fac <_Z19retract_servo_plantv>
  printf("retract circle\n");
 800319c:	483a      	ldr	r0, [pc, #232]	@ (8003288 <_Z18push_one_plant_outv+0x164>)
 800319e:	f00b f825 	bl	800e1ec <puts>
  open_circle_plant_more();
 80031a2:	f7ff ff27 	bl	8002ff4 <_Z22open_circle_plant_morev>
  HAL_Delay(200);
 80031a6:	20c8      	movs	r0, #200	@ 0xc8
 80031a8:	f006 f828 	bl	80091fc <HAL_Delay>
  close_circle_plant();
 80031ac:	f7ff ff34 	bl	8003018 <_Z18close_circle_plantv>
  reservoir_realign_back();
 80031b0:	f7ff fe74 	bl	8002e9c <_Z22reservoir_realign_backv>

  // update reservoir state at the head + 5
  printf("on veut enlever à %d \n",(reservoir_state.head+5-nb_slot_till_next_plant)%reservoir_state.slots.size());
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	1d5a      	adds	r2, r3, #5
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	461c      	mov	r4, r3
 80031c0:	4832      	ldr	r0, [pc, #200]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 80031c2:	f000 fea1 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80031c6:	4603      	mov	r3, r0
 80031c8:	fbb4 f2f3 	udiv	r2, r4, r3
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	1ae3      	subs	r3, r4, r3
 80031d2:	4619      	mov	r1, r3
 80031d4:	482e      	ldr	r0, [pc, #184]	@ (8003290 <_Z18push_one_plant_outv+0x16c>)
 80031d6:	f00a ff99 	bl	800e10c <iprintf>
  reservoir_state.slots[(reservoir_state.head+5-nb_slot_till_next_plant) % reservoir_state.slots.size()] = false;
 80031da:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	1d5a      	adds	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	461c      	mov	r4, r3
 80031e6:	4829      	ldr	r0, [pc, #164]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 80031e8:	f000 fe8e 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80031ec:	4603      	mov	r3, r0
 80031ee:	fbb4 f2f3 	udiv	r2, r4, r3
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	1ae2      	subs	r2, r4, r3
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	4924      	ldr	r1, [pc, #144]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fea0 	bl	8003f42 <_ZNSt6vectorIbSaIbEEixEj>
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f8ac 	bl	8002364 <_ZNSt14_Bit_referenceaSEb>
  reservoir_state.nb_stored--;
 800320c:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	3b01      	subs	r3, #1
 8003212:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003214:	6193      	str	r3, [r2, #24]
  reservoir_state.head = reservoir_state.head - nb_slot_till_next_plant;
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003220:	6153      	str	r3, [r2, #20]
  if (reservoir_state.head < 0)
 8003222:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da0a      	bge.n	8003240 <_Z18push_one_plant_outv+0x11c>
  {
    reservoir_state.head += reservoir_state.slots.size();
 800322a:	4818      	ldr	r0, [pc, #96]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 800322c:	f000 fe6c 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003230:	4603      	mov	r3, r0
 8003232:	4a16      	ldr	r2, [pc, #88]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003234:	6952      	ldr	r2, [r2, #20]
 8003236:	4413      	add	r3, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 800323c:	615a      	str	r2, [r3, #20]
 800323e:	e00e      	b.n	800325e <_Z18push_one_plant_outv+0x13a>
  }
  else
  {
    reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 8003240:	4b12      	ldr	r3, [pc, #72]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	461c      	mov	r4, r3
 8003246:	4811      	ldr	r0, [pc, #68]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 8003248:	f000 fe5e 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800324c:	4603      	mov	r3, r0
 800324e:	fbb4 f2f3 	udiv	r2, r4, r3
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1ae3      	subs	r3, r4, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <_Z18push_one_plant_outv+0x168>)
 800325c:	615a      	str	r2, [r3, #20]
  }
  print_reservoir();
 800325e:	f7ff fb8d 	bl	800297c <_Z15print_reservoirv>
 8003262:	e000      	b.n	8003266 <_Z18push_one_plant_outv+0x142>
    return;
 8003264:	bf00      	nop
}
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	0800f128 	.word	0x0800f128
 8003270:	0800f12c 	.word	0x0800f12c
 8003274:	0800f144 	.word	0x0800f144
 8003278:	0800f170 	.word	0x0800f170
 800327c:	0800f184 	.word	0x0800f184
 8003280:	0800f194 	.word	0x0800f194
 8003284:	0800f1a0 	.word	0x0800f1a0
 8003288:	0800f1b8 	.word	0x0800f1b8
 800328c:	200006b0 	.word	0x200006b0
 8003290:	0800f1c8 	.word	0x0800f1c8

08003294 <_Z31hopper_wait_and_close_spin_oncei>:

// =============================================== HIGH LEVEL ACTIONS =================================================


bool hopper_wait_and_close_spin_once(int side)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  // Check if distance < 50mm for left plant
  int dist = sensors[side].get_dist_mm();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	480a      	ldr	r0, [pc, #40]	@ (80032cc <_Z31hopper_wait_and_close_spin_oncei+0x38>)
 80032a2:	f000 fe76 	bl	8003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe ffcb 	bl	8002244 <_ZN11LaserSensor11get_dist_mmEv>
 80032ae:	60f8      	str	r0, [r7, #12]
  if(dist < 50)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b31      	cmp	r3, #49	@ 0x31
 80032b4:	dc04      	bgt.n	80032c0 <_Z31hopper_wait_and_close_spin_oncei+0x2c>
  {
    // Close the hopper
    hopper_close(side);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fd20 	bl	8002cfc <_Z12hopper_closei>
    return true;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <_Z31hopper_wait_and_close_spin_oncei+0x2e>
  }
  return false;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200005f4 	.word	0x200005f4

080032d0 <_Z20request_store_plantsv>:


void request_store_plants()
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af06      	add	r7, sp, #24
  system_state.storing = true;
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <_Z20request_store_plantsv+0x54>)
 80032d8:	2201      	movs	r2, #1
 80032da:	709a      	strb	r2, [r3, #2]

  status_msg.action = msgs_can_ActActions_START_GRAB_PLANTS;
 80032dc:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <_Z20request_store_plantsv+0x58>)
 80032de:	2200      	movs	r2, #0
 80032e0:	765a      	strb	r2, [r3, #25]
  champi_state.report_status(status_msg);
 80032e2:	4e11      	ldr	r6, [pc, #68]	@ (8003328 <_Z20request_store_plantsv+0x58>)
 80032e4:	466d      	mov	r5, sp
 80032e6:	f106 040c 	add.w	r4, r6, #12
 80032ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80032f6:	480d      	ldr	r0, [pc, #52]	@ (800332c <_Z20request_store_plantsv+0x5c>)
 80032f8:	f7fd fe3c 	bl	8000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>

  // Clear distance sensors buffers (?)
  sensors[LEFT].clear_interrupt();
 80032fc:	2100      	movs	r1, #0
 80032fe:	480c      	ldr	r0, [pc, #48]	@ (8003330 <_Z20request_store_plantsv+0x60>)
 8003300:	f000 fe47 	bl	8003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8003304:	4603      	mov	r3, r0
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ffb6 	bl	8002278 <_ZN11LaserSensor15clear_interruptEv>
  sensors[RIGHT].clear_interrupt();
 800330c:	2101      	movs	r1, #1
 800330e:	4808      	ldr	r0, [pc, #32]	@ (8003330 <_Z20request_store_plantsv+0x60>)
 8003310:	f000 fe3f 	bl	8003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>
 8003314:	4603      	mov	r3, r0
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ffae 	bl	8002278 <_ZN11LaserSensor15clear_interruptEv>
}
 800331c:	bf00      	nop
 800331e:	3704      	adds	r7, #4
 8003320:	46bd      	mov	sp, r7
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003324:	20000698 	.word	0x20000698
 8003328:	200005b0 	.word	0x200005b0
 800332c:	20000508 	.word	0x20000508
 8003330:	200005f4 	.word	0x200005f4

08003334 <_Z22store_plants_spin_oncev>:


// /!\ DELAY IN THIS FUNCTION
void store_plants_spin_once()
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0

  if(!system_state.storing)
 800333a:	4b64      	ldr	r3, [pc, #400]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 800333c:	789b      	ldrb	r3, [r3, #2]
 800333e:	f083 0301 	eor.w	r3, r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 80bd 	bne.w	80034c4 <_Z22store_plants_spin_oncev+0x190>
  {
    return;
  }

  if(!system_state.hopper_left_closed)
 800334a:	4b60      	ldr	r3, [pc, #384]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	f083 0301 	eor.w	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <_Z22store_plants_spin_oncev+0x32>
  {
    system_state.hopper_left_closed = hopper_wait_and_close_spin_once(LEFT);
 8003358:	2000      	movs	r0, #0
 800335a:	f7ff ff9b 	bl	8003294 <_Z31hopper_wait_and_close_spin_oncei>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b5a      	ldr	r3, [pc, #360]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 8003364:	701a      	strb	r2, [r3, #0]
  }

  if(!system_state.hopper_right_closed)
 8003366:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <_Z22store_plants_spin_oncev+0x4e>
  {
    system_state.hopper_right_closed = hopper_wait_and_close_spin_once(RIGHT);
 8003374:	2001      	movs	r0, #1
 8003376:	f7ff ff8d 	bl	8003294 <_Z31hopper_wait_and_close_spin_oncei>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 8003380:	705a      	strb	r2, [r3, #1]
  }

  if(system_state.hopper_left_closed && system_state.hopper_right_closed)
 8003382:	4b52      	ldr	r3, [pc, #328]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 809d 	beq.w	80034c6 <_Z22store_plants_spin_oncev+0x192>
 800338c:	4b4f      	ldr	r3, [pc, #316]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8098 	beq.w	80034c6 <_Z22store_plants_spin_oncev+0x192>
  {
    HAL_Delay(1500); // Because hoppers functions are not blocking // TODO ADD NON BLOCKING DELAY
 8003396:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800339a:	f005 ff2f 	bl	80091fc <HAL_Delay>
    lift_go_up();
 800339e:	f7ff fc47 	bl	8002c30 <_Z10lift_go_upv>
    grabber_extend();
 80033a2:	f7ff fc79 	bl	8002c98 <_Z14grabber_extendv>
    HAL_Delay(500);
 80033a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033aa:	f005 ff27 	bl	80091fc <HAL_Delay>
    lift_go_middle();
 80033ae:	f7ff fc59 	bl	8002c64 <_Z14lift_go_middlev>
    grabber_retract(false);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7ff fc86 	bl	8002cc4 <_Z15grabber_retractb>
    lift_go_down();
 80033b8:	f7ff fc00 	bl	8002bbc <_Z12lift_go_downv>
    hide_fildefer();
 80033bc:	f7ff fdbc 	bl	8002f38 <_Z13hide_fildeferv>
    HAL_Delay(2000);
 80033c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033c4:	f005 ff1a 	bl	80091fc <HAL_Delay>
    close_fildefer();
 80033c8:	f7ff fda4 	bl	8002f14 <_Z14close_fildeferv>
    hopper_open(LEFT);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff fcbb 	bl	8002d48 <_Z11hopper_openi>
    hopper_open(RIGHT);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f7ff fcb8 	bl	8002d48 <_Z11hopper_openi>
    HAL_Delay(2000);
 80033d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033dc:	f005 ff0e 	bl	80091fc <HAL_Delay>
    hide_fildefer();
 80033e0:	f7ff fdaa 	bl	8002f38 <_Z13hide_fildeferv>
    system_state.storing = false;
 80033e4:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	709a      	strb	r2, [r3, #2]
    system_state.hopper_left_closed = false;
 80033ea:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
    system_state.hopper_right_closed = false;
 80033f0:	4b36      	ldr	r3, [pc, #216]	@ (80034cc <_Z22store_plants_spin_oncev+0x198>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	705a      	strb	r2, [r3, #1]

    int nb_to_turn = 3;
 80033f6:	2303      	movs	r3, #3
 80033f8:	617b      	str	r3, [r7, #20]
    reservoir_rotate(nb_to_turn);
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff fd6e 	bl	8002edc <_Z16reservoir_rotatei>
    print_reservoir();
 8003400:	f7ff fabc 	bl	800297c <_Z15print_reservoirv>

    // fill the reservoir state. 2 have to be set to true, and one skipped
    reservoir_state.slots[reservoir_state.head] = true;
 8003404:	4b32      	ldr	r3, [pc, #200]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	461a      	mov	r2, r3
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4930      	ldr	r1, [pc, #192]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fd97 	bl	8003f42 <_ZNSt6vectorIbSaIbEEixEj>
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ffa3 	bl	8002364 <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.slots[(reservoir_state.head + 1) % reservoir_state.slots.size()] = true;
 800341e:	4b2c      	ldr	r3, [pc, #176]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	3301      	adds	r3, #1
 8003424:	461c      	mov	r4, r3
 8003426:	482a      	ldr	r0, [pc, #168]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003428:	f000 fd6e 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800342c:	4603      	mov	r3, r0
 800342e:	fbb4 f2f3 	udiv	r2, r4, r3
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	1ae2      	subs	r2, r4, r3
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	4924      	ldr	r1, [pc, #144]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd7f 	bl	8003f42 <_ZNSt6vectorIbSaIbEEixEj>
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe ff8a 	bl	8002364 <_ZNSt14_Bit_referenceaSEb>
    reservoir_state.nb_stored += 2;
 8003450:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	3302      	adds	r3, #2
 8003456:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003458:	6193      	str	r3, [r2, #24]

    reservoir_state.head = reservoir_state.head - nb_to_turn;
 800345a:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003464:	6153      	str	r3, [r2, #20]
    printf("head:%d \n", reservoir_state.head);
 8003466:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4619      	mov	r1, r3
 800346c:	4819      	ldr	r0, [pc, #100]	@ (80034d4 <_Z22store_plants_spin_oncev+0x1a0>)
 800346e:	f00a fe4d 	bl	800e10c <iprintf>
    if (reservoir_state.head < 0)
 8003472:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da12      	bge.n	80034a0 <_Z22store_plants_spin_oncev+0x16c>
    {
      printf("head += %d \n", reservoir_state.slots.size());
 800347a:	4815      	ldr	r0, [pc, #84]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800347c:	f000 fd44 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003480:	4603      	mov	r3, r0
 8003482:	4619      	mov	r1, r3
 8003484:	4814      	ldr	r0, [pc, #80]	@ (80034d8 <_Z22store_plants_spin_oncev+0x1a4>)
 8003486:	f00a fe41 	bl	800e10c <iprintf>
      reservoir_state.head += reservoir_state.slots.size();
 800348a:	4811      	ldr	r0, [pc, #68]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800348c:	f000 fd3c 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8003490:	4603      	mov	r3, r0
 8003492:	4a0f      	ldr	r2, [pc, #60]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 8003494:	6952      	ldr	r2, [r2, #20]
 8003496:	4413      	add	r3, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 800349c:	615a      	str	r2, [r3, #20]
 800349e:	e00e      	b.n	80034be <_Z22store_plants_spin_oncev+0x18a>
    }
    else
    {
      reservoir_state.head = reservoir_state.head % reservoir_state.slots.size();
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	461c      	mov	r4, r3
 80034a6:	480a      	ldr	r0, [pc, #40]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 80034a8:	f000 fd2e 	bl	8003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80034ac:	4603      	mov	r3, r0
 80034ae:	fbb4 f2f3 	udiv	r2, r4, r3
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1ae3      	subs	r3, r4, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <_Z22store_plants_spin_oncev+0x19c>)
 80034bc:	615a      	str	r2, [r3, #20]
    }
    print_reservoir();
 80034be:	f7ff fa5d 	bl	800297c <_Z15print_reservoirv>
 80034c2:	e000      	b.n	80034c6 <_Z22store_plants_spin_oncev+0x192>
    return;
 80034c4:	bf00      	nop
  }
}
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd90      	pop	{r4, r7, pc}
 80034cc:	20000698 	.word	0x20000698
 80034d0:	200006b0 	.word	0x200006b0
 80034d4:	0800f1e0 	.word	0x0800f1e0
 80034d8:	0800f1ec 	.word	0x0800f1ec

080034dc <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 80034dc:	b4b0      	push	{r4, r5, r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f102 0408 	add.w	r4, r2, #8
 80034f6:	f103 0508 	add.w	r5, r3, #8
 80034fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bcb0      	pop	{r4, r5, r7}
 8003510:	4770      	bx	lr

08003512 <_ZN11ChampiStateaSERKS_>:
#include "can_ids.hpp"

#define LIMIT_LENGTH_MSG 20 // max nb of frames per message. TODO uniformize and document ChampiCAN protocol


class ChampiState {
 8003512:	b4b0      	push	{r4, r5, r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1d14      	adds	r4, r2, #4
 8003522:	1d1d      	adds	r5, r3, #4
 8003524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003528:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800352c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800354e:	2277      	movs	r2, #119	@ 0x77
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	3330      	adds	r3, #48	@ 0x30
 8003554:	e004      	b.n	8003560 <_ZN11ChampiStateaSERKS_+0x4e>
 8003556:	7818      	ldrb	r0, [r3, #0]
 8003558:	7008      	strb	r0, [r1, #0]
 800355a:	3a01      	subs	r2, #1
 800355c:	3101      	adds	r1, #1
 800355e:	3301      	adds	r3, #1
 8003560:	2a00      	cmp	r2, #0
 8003562:	daf8      	bge.n	8003556 <_ZN11ChampiStateaSERKS_+0x44>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bcb0      	pop	{r4, r5, r7}
 800356e:	4770      	bx	lr

08003570 <_Z5setupv>:




void setup()
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b0bd      	sub	sp, #244	@ 0xf4
 8003574:	af06      	add	r7, sp, #24

  printf("Setup Begins...\n");
 8003576:	486c      	ldr	r0, [pc, #432]	@ (8003728 <_Z5setupv+0x1b8>)
 8003578:	f00a fe38 	bl	800e1ec <puts>

  // Initialize the status message / set has_... fields to true
  status_msg = msgs_can_ActStatus_init_zero;
 800357c:	4b6b      	ldr	r3, [pc, #428]	@ (800372c <_Z5setupv+0x1bc>)
 800357e:	4618      	mov	r0, r3
 8003580:	2320      	movs	r3, #32
 8003582:	461a      	mov	r2, r3
 8003584:	2100      	movs	r1, #0
 8003586:	f00a ff2b 	bl	800e3e0 <memset>
  status_msg.has_status = true;
 800358a:	4b68      	ldr	r3, [pc, #416]	@ (800372c <_Z5setupv+0x1bc>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
  status_msg.status.has_status = true;
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <_Z5setupv+0x1bc>)
 8003592:	2201      	movs	r2, #1
 8003594:	731a      	strb	r2, [r3, #12]
  status_msg.status.has_error = true;
 8003596:	4b65      	ldr	r3, [pc, #404]	@ (800372c <_Z5setupv+0x1bc>)
 8003598:	2201      	movs	r2, #1
 800359a:	739a      	strb	r2, [r3, #14]
  status_msg.has_plant_count = true;
 800359c:	4b63      	ldr	r3, [pc, #396]	@ (800372c <_Z5setupv+0x1bc>)
 800359e:	2201      	movs	r2, #1
 80035a0:	769a      	strb	r2, [r3, #26]
  status_msg.has_action = true;
 80035a2:	4b62      	ldr	r3, [pc, #392]	@ (800372c <_Z5setupv+0x1bc>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	761a      	strb	r2, [r3, #24]

  status_msg.status.status = msgs_can_Status_StatusType_INIT;
 80035a8:	4b60      	ldr	r3, [pc, #384]	@ (800372c <_Z5setupv+0x1bc>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	735a      	strb	r2, [r3, #13]
  status_msg.status.error = msgs_can_Status_ErrorType_NONE;
 80035ae:	4b5f      	ldr	r3, [pc, #380]	@ (800372c <_Z5setupv+0x1bc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	73da      	strb	r2, [r3, #15]
  status_msg.action = msgs_can_ActActions_INITIALIZING;
 80035b4:	4b5d      	ldr	r3, [pc, #372]	@ (800372c <_Z5setupv+0x1bc>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	765a      	strb	r2, [r3, #25]
  status_msg.plant_count = 0;
 80035ba:	4b5c      	ldr	r3, [pc, #368]	@ (800372c <_Z5setupv+0x1bc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	61da      	str	r2, [r3, #28]



  // Init Steppers (and start the timer for the time_us function)
  HAL_TIM_Base_Start_IT(&htim2);
 80035c0:	485b      	ldr	r0, [pc, #364]	@ (8003730 <_Z5setupv+0x1c0>)
 80035c2:	f008 fd51 	bl	800c068 <HAL_TIM_Base_Start_IT>
  stepper_lift.set_speed(5000);
 80035c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80035ca:	485a      	ldr	r0, [pc, #360]	@ (8003734 <_Z5setupv+0x1c4>)
 80035cc:	f7fe fbfc 	bl	8001dc8 <_ZN7Stepper9set_speedEm>

  printf("Setup lasers...\n");
 80035d0:	4859      	ldr	r0, [pc, #356]	@ (8003738 <_Z5setupv+0x1c8>)
 80035d2:	f00a fe0b 	bl	800e1ec <puts>

  // Initialize the sensors
  if(setup_lasers() != 0)
 80035d6:	f7ff fa61 	bl	8002a9c <_Z12setup_lasersv>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <_Z5setupv+0x84>
  {
    printf("Error setting up the sensors\n");
 80035ea:	4854      	ldr	r0, [pc, #336]	@ (800373c <_Z5setupv+0x1cc>)
 80035ec:	f00a fdfe 	bl	800e1ec <puts>
    Error_Handler();
 80035f0:	f000 fb68 	bl	8003cc4 <Error_Handler>
  }

  printf("Setup servos...\n");
 80035f4:	4852      	ldr	r0, [pc, #328]	@ (8003740 <_Z5setupv+0x1d0>)
 80035f6:	f00a fdf9 	bl	800e1ec <puts>

  if(ping_servos() != 0)
 80035fa:	f7ff fa0b 	bl	8002a14 <_Z11ping_servosv>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <_Z5setupv+0xa8>
  {
    printf("Error pinging servos\n");
 800360e:	484d      	ldr	r0, [pc, #308]	@ (8003744 <_Z5setupv+0x1d4>)
 8003610:	f00a fdec 	bl	800e1ec <puts>
    Error_Handler();
 8003614:	f000 fb56 	bl	8003cc4 <Error_Handler>
  }

  champi_can = ChampiCan(&hfdcan1);
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	494b      	ldr	r1, [pc, #300]	@ (8003748 <_Z5setupv+0x1d8>)
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fad5 	bl	8000bcc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4849      	ldr	r0, [pc, #292]	@ (800374c <_Z5setupv+0x1dc>)
 8003628:	f7ff ff58 	bl	80034dc <_ZN9ChampiCanaSERKS_>
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fc14 	bl	8000e5c <_ZN9ChampiCanD1Ev>


  if (champi_can.start() != 0) {
 8003634:	4845      	ldr	r0, [pc, #276]	@ (800374c <_Z5setupv+0x1dc>)
 8003636:	f7fd fb13 	bl	8000c60 <_ZN9ChampiCan5startEv>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <_Z5setupv+0xde>
    // TODO: On n'a jamais rencontré cette erreur.
    Error_Handler();
 800364a:	f000 fb3b 	bl	8003cc4 <Error_Handler>
  }

  // This is required: when the Raspberry Pi starts up, transmit CAN frames returns error.

  tx_ok_or_reset();
 800364e:	f7ff f83f 	bl	80026d0 <_Z14tx_ok_or_resetv>

  printf("Setup CAN Done.\n");
 8003652:	483f      	ldr	r0, [pc, #252]	@ (8003750 <_Z5setupv+0x1e0>)
 8003654:	f00a fdca 	bl	800e1ec <puts>

  champi_state = ChampiState(&champi_can, 500);
 8003658:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800365c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003660:	493a      	ldr	r1, [pc, #232]	@ (800374c <_Z5setupv+0x1dc>)
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fc30 	bl	8000ec8 <_ZN11ChampiStateC1EP9ChampiCanm>
 8003668:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800366c:	4619      	mov	r1, r3
 800366e:	4839      	ldr	r0, [pc, #228]	@ (8003754 <_Z5setupv+0x1e4>)
 8003670:	f7ff ff4f 	bl	8003512 <_ZN11ChampiStateaSERKS_>
 8003674:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fc5b 	bl	8000f34 <_ZN11ChampiStateD1Ev>

  status_msg.status.status = msgs_can_Status_StatusType_OK;
 800367e:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <_Z5setupv+0x1bc>)
 8003680:	2200      	movs	r2, #0
 8003682:	735a      	strb	r2, [r3, #13]
  champi_state.report_status(status_msg);
 8003684:	4e29      	ldr	r6, [pc, #164]	@ (800372c <_Z5setupv+0x1bc>)
 8003686:	466d      	mov	r5, sp
 8003688:	f106 040c 	add.w	r4, r6, #12
 800368c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003698:	482e      	ldr	r0, [pc, #184]	@ (8003754 <_Z5setupv+0x1e4>)
 800369a:	f7fd fc6b 	bl	8000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>


  printf("Begin actuators initialization...\n");
 800369e:	482e      	ldr	r0, [pc, #184]	@ (8003758 <_Z5setupv+0x1e8>)
 80036a0:	f00a fda4 	bl	800e1ec <puts>

  // Initialize / move actuators
  printf("Test pusher and circle...\n");
 80036a4:	482d      	ldr	r0, [pc, #180]	@ (800375c <_Z5setupv+0x1ec>)
 80036a6:	f00a fda1 	bl	800e1ec <puts>
  pusher_and_circle_initialize();
 80036aa:	f7ff fcc7 	bl	800303c <_Z28pusher_and_circle_initializev>
  printf("Test fildefer...\n");
 80036ae:	482c      	ldr	r0, [pc, #176]	@ (8003760 <_Z5setupv+0x1f0>)
 80036b0:	f00a fd9c 	bl	800e1ec <puts>
  fildefer_initialize();
 80036b4:	f7ff fc52 	bl	8002f5c <_Z19fildefer_initializev>
  printf("Test reservoir...\n");
 80036b8:	482a      	ldr	r0, [pc, #168]	@ (8003764 <_Z5setupv+0x1f4>)
 80036ba:	f00a fd97 	bl	800e1ec <puts>
  reservoir_initialize_and_test();
 80036be:	f7ff fa29 	bl	8002b14 <_Z29reservoir_initialize_and_testv>
  printf("Test hoppers...\n");
 80036c2:	4829      	ldr	r0, [pc, #164]	@ (8003768 <_Z5setupv+0x1f8>)
 80036c4:	f00a fd92 	bl	800e1ec <puts>
  hoppers_initialize_and_test();
 80036c8:	f7ff fa64 	bl	8002b94 <_Z27hoppers_initialize_and_testv>
  HAL_Delay(200);
 80036cc:	20c8      	movs	r0, #200	@ 0xc8
 80036ce:	f005 fd95 	bl	80091fc <HAL_Delay>
  printf("Test grabber...\n");
 80036d2:	4826      	ldr	r0, [pc, #152]	@ (800376c <_Z5setupv+0x1fc>)
 80036d4:	f00a fd8a 	bl	800e1ec <puts>
  grabber_retract();
 80036d8:	2001      	movs	r0, #1
 80036da:	f7ff faf3 	bl	8002cc4 <_Z15grabber_retractb>
  printf("Test lift...\n");
 80036de:	4824      	ldr	r0, [pc, #144]	@ (8003770 <_Z5setupv+0x200>)
 80036e0:	f00a fd84 	bl	800e1ec <puts>
  lift_initialize_and_test();
 80036e4:	f7ff fa1e 	bl	8002b24 <_Z24lift_initialize_and_testv>

  printf("Initialization Done\n");
 80036e8:	4822      	ldr	r0, [pc, #136]	@ (8003774 <_Z5setupv+0x204>)
 80036ea:	f00a fd7f 	bl	800e1ec <puts>
  //request_store_plants();



  // Switch led ON to indicate that we're running
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036f4:	4820      	ldr	r0, [pc, #128]	@ (8003778 <_Z5setupv+0x208>)
 80036f6:	f006 fe73 	bl	800a3e0 <HAL_GPIO_WritePin>

  status_msg.action = msgs_can_ActActions_FREE;
 80036fa:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <_Z5setupv+0x1bc>)
 80036fc:	2205      	movs	r2, #5
 80036fe:	765a      	strb	r2, [r3, #25]
  champi_state.report_status(status_msg);
 8003700:	4e0a      	ldr	r6, [pc, #40]	@ (800372c <_Z5setupv+0x1bc>)
 8003702:	466d      	mov	r5, sp
 8003704:	f106 040c 	add.w	r4, r6, #12
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	602b      	str	r3, [r5, #0]
 8003710:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003714:	480f      	ldr	r0, [pc, #60]	@ (8003754 <_Z5setupv+0x1e4>)
 8003716:	f7fd fc2d 	bl	8000f74 <_ZN11ChampiState13report_statusE19_msgs_can_ActStatus>

  print_reservoir();
 800371a:	f7ff f92f 	bl	800297c <_Z15print_reservoirv>
}
 800371e:	bf00      	nop
 8003720:	37dc      	adds	r7, #220	@ 0xdc
 8003722:	46bd      	mov	sp, r7
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003726:	bf00      	nop
 8003728:	0800f1fc 	.word	0x0800f1fc
 800372c:	200005b0 	.word	0x200005b0
 8003730:	20000148 	.word	0x20000148
 8003734:	20000600 	.word	0x20000600
 8003738:	0800f20c 	.word	0x0800f20c
 800373c:	0800f21c 	.word	0x0800f21c
 8003740:	0800f23c 	.word	0x0800f23c
 8003744:	0800f24c 	.word	0x0800f24c
 8003748:	20000090 	.word	0x20000090
 800374c:	200002c0 	.word	0x200002c0
 8003750:	0800f264 	.word	0x0800f264
 8003754:	20000508 	.word	0x20000508
 8003758:	0800f274 	.word	0x0800f274
 800375c:	0800f298 	.word	0x0800f298
 8003760:	0800f2b4 	.word	0x0800f2b4
 8003764:	0800f2c8 	.word	0x0800f2c8
 8003768:	0800f2dc 	.word	0x0800f2dc
 800376c:	0800f2ec 	.word	0x0800f2ec
 8003770:	0800f2fc 	.word	0x0800f2fc
 8003774:	0800f30c 	.word	0x0800f30c
 8003778:	48000400 	.word	0x48000400

0800377c <_Z4loopv>:



void loop()
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  // Print distances
  // printf("Left: %d mm, Right: %d mm\n", sensors[LEFT].get_dist_mm(), sensors[RIGHT].get_dist_mm());

  store_plants_spin_once();
 8003780:	f7ff fdd8 	bl	8003334 <_Z22store_plants_spin_oncev>

  if (reservoir_state.nb_stored == 4)
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <_Z4loopv+0x2c>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <_Z4loopv+0x20>
  {
    push_one_plant_out();
 800378c:	f7ff fcca 	bl	8003124 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8003790:	f7ff fcc8 	bl	8003124 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8003794:	f7ff fcc6 	bl	8003124 <_Z18push_one_plant_outv>
    push_one_plant_out();
 8003798:	f7ff fcc4 	bl	8003124 <_Z18push_one_plant_outv>
  }

  champi_state.spin_once(); // Send status on CAN bus
 800379c:	4803      	ldr	r0, [pc, #12]	@ (80037ac <_Z4loopv+0x30>)
 800379e:	f7fd fc43 	bl	8001028 <_ZN11ChampiState9spin_onceEv>

}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200006b0 	.word	0x200006b0
 80037ac:	20000508 	.word	0x20000508

080037b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037b4:	f005 fcb1 	bl	800911a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037b8:	f000 f811 	bl	80037de <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037bc:	f000 fa1e 	bl	8003bfc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80037c0:	f000 f9bc 	bl	8003b3c <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80037c4:	f000 f958 	bl	8003a78 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 80037c8:	f000 f85e 	bl	8003888 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 80037cc:	f000 f8a8 	bl	8003920 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80037d0:	f000 f8f4 	bl	80039bc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 80037d4:	f7ff fecc 	bl	8003570 <_Z5setupv>


    while (1)
    {

      loop();
 80037d8:	f7ff ffd0 	bl	800377c <_Z4loopv>
 80037dc:	e7fc      	b.n	80037d8 <main+0x28>

080037de <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b094      	sub	sp, #80	@ 0x50
 80037e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e4:	f107 0318 	add.w	r3, r7, #24
 80037e8:	2238      	movs	r2, #56	@ 0x38
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f00a fdf7 	bl	800e3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003800:	2000      	movs	r0, #0
 8003802:	f007 fc07 	bl	800b014 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003806:	2302      	movs	r3, #2
 8003808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800380a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003810:	2340      	movs	r3, #64	@ 0x40
 8003812:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003814:	2302      	movs	r3, #2
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003818:	2302      	movs	r3, #2
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800381c:	2304      	movs	r3, #4
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003820:	2355      	movs	r3, #85	@ 0x55
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003824:	2302      	movs	r3, #2
 8003826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003828:	2302      	movs	r3, #2
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800382c:	2302      	movs	r3, #2
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	4618      	mov	r0, r3
 8003836:	f007 fca1 	bl	800b17c <HAL_RCC_OscConfig>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800384a:	f000 fa3b 	bl	8003cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800384e:	230f      	movs	r3, #15
 8003850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003852:	2303      	movs	r3, #3
 8003854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2104      	movs	r1, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f007 ff9a 	bl	800b7a0 <HAL_RCC_ClockConfig>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800387c:	f000 fa22 	bl	8003cc4 <Error_Handler>
  }
}
 8003880:	bf00      	nop
 8003882:	3750      	adds	r7, #80	@ 0x50
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800388c:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 800388e:	4a23      	ldr	r2, [pc, #140]	@ (800391c <_ZL14MX_FDCAN1_Initv+0x94>)
 8003890:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003892:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003898:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80038a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80038b6:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038b8:	220a      	movs	r2, #10
 80038ba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80038bc:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038be:	2201      	movs	r2, #1
 80038c0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80038c2:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038c4:	220e      	movs	r2, #14
 80038c6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038ca:	2202      	movs	r2, #2
 80038cc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038d0:	220a      	movs	r2, #10
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80038d4:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80038da:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038dc:	220e      	movs	r2, #14
 80038de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038e2:	2202      	movs	r2, #2
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80038e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80038f8:	4807      	ldr	r0, [pc, #28]	@ (8003918 <_ZL14MX_FDCAN1_Initv+0x90>)
 80038fa:	f005 fdb1 	bl	8009460 <HAL_FDCAN_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800390e:	f000 f9d9 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000090 	.word	0x20000090
 800391c:	40006400 	.word	0x40006400

08003920 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003924:	4b22      	ldr	r3, [pc, #136]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003926:	4a23      	ldr	r2, [pc, #140]	@ (80039b4 <_ZL12MX_I2C1_Initv+0x94>)
 8003928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800392a:	4b21      	ldr	r3, [pc, #132]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 800392c:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <_ZL12MX_I2C1_Initv+0x98>)
 800392e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003930:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003936:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003938:	2201      	movs	r2, #1
 800393a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800393c:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003954:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003956:	2200      	movs	r2, #0
 8003958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800395a:	4815      	ldr	r0, [pc, #84]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 800395c:	f006 fd72 	bl	800a444 <HAL_I2C_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003970:	f000 f9a8 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003974:	2100      	movs	r1, #0
 8003976:	480e      	ldr	r0, [pc, #56]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003978:	f007 fab4 	bl	800aee4 <HAL_I2CEx_ConfigAnalogFilter>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800398c:	f000 f99a 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003990:	2100      	movs	r1, #0
 8003992:	4807      	ldr	r0, [pc, #28]	@ (80039b0 <_ZL12MX_I2C1_Initv+0x90>)
 8003994:	f007 faf1 	bl	800af7a <HAL_I2CEx_ConfigDigitalFilter>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80039a8:	f000 f98c 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200000f4 	.word	0x200000f4
 80039b4:	40005400 	.word	0x40005400
 80039b8:	30a0a7fb 	.word	0x30a0a7fb

080039bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80039e2:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039e4:	2210      	movs	r2, #16
 80039e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e8:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80039ee:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039f0:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <_ZL12MX_TIM2_Initv+0xb8>)
 80039f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a00:	481b      	ldr	r0, [pc, #108]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a02:	f008 fad9 	bl	800bfb8 <HAL_TIM_Base_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8003a16:	f000 f955 	bl	8003cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	4619      	mov	r1, r3
 8003a26:	4812      	ldr	r0, [pc, #72]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a28:	f008 fcd8 	bl	800c3dc <HAL_TIM_ConfigClockSource>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8003a3c:	f000 f942 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4808      	ldr	r0, [pc, #32]	@ (8003a70 <_ZL12MX_TIM2_Initv+0xb4>)
 8003a4e:	f008 ff1f 	bl	800c890 <HAL_TIMEx_MasterConfigSynchronization>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8003a62:	f000 f92f 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000148 	.word	0x20000148
 8003a74:	000f4240 	.word	0x000f4240

08003a78 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a84:	4a2c      	ldr	r2, [pc, #176]	@ (8003b38 <_ZL19MX_USART1_UART_Initv+0xc0>)
 8003a86:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a88:	4b29      	ldr	r3, [pc, #164]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a8e:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a94:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a9a:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a9c:	220c      	movs	r2, #12
 8003a9e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aac:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003abe:	481c      	ldr	r0, [pc, #112]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac0:	f008 fffe 	bl	800cac0 <HAL_HalfDuplex_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8003ad4:	f000 f8f6 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4815      	ldr	r0, [pc, #84]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003adc:	f009 fefd 	bl	800d8da <HAL_UARTEx_SetTxFifoThreshold>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <_ZL19MX_USART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8003af0:	f000 f8e8 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003af4:	2100      	movs	r1, #0
 8003af6:	480e      	ldr	r0, [pc, #56]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003af8:	f009 ff2d 	bl	800d956 <HAL_UARTEx_SetRxFifoThreshold>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <_ZL19MX_USART1_UART_Initv+0x98>
  {
    Error_Handler();
 8003b0c:	f000 f8da 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003b10:	4807      	ldr	r0, [pc, #28]	@ (8003b30 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b12:	f009 fe6e 	bl	800d7f2 <HAL_UARTEx_EnableFifoMode>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <_ZL19MX_USART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8003b26:	f000 f8cd 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000194 	.word	0x20000194
 8003b34:	40013800 	.word	0x40013800
 8003b38:	000f4240 	.word	0x000f4240

08003b3c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b40:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b42:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8003b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b46:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4e:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b62:	220c      	movs	r2, #12
 8003b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b66:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b78:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b84:	481b      	ldr	r0, [pc, #108]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003b86:	f008 ff4b 	bl	800ca20 <HAL_UART_Init>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8003b9a:	f000 f893 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4814      	ldr	r0, [pc, #80]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003ba2:	f009 fe9a 	bl	800d8da <HAL_UARTEx_SetTxFifoThreshold>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8003bb6:	f000 f885 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bba:	2100      	movs	r1, #0
 8003bbc:	480d      	ldr	r0, [pc, #52]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bbe:	f009 feca 	bl	800d956 <HAL_UARTEx_SetRxFifoThreshold>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8003bd2:	f000 f877 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003bd6:	4807      	ldr	r0, [pc, #28]	@ (8003bf4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003bd8:	f009 fe46 	bl	800d868 <HAL_UARTEx_DisableFifoMode>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8003bec:	f000 f86a 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000228 	.word	0x20000228
 8003bf8:	40004400 	.word	0x40004400

08003bfc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c16:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1e:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	4a23      	ldr	r2, [pc, #140]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <_ZL12MX_GPIO_Initv+0xc0>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2192      	movs	r1, #146	@ 0x92
 8003c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c4a:	f006 fbc9 	bl	800a3e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f240 1171 	movw	r1, #369	@ 0x171
 8003c54:	481a      	ldr	r0, [pc, #104]	@ (8003cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8003c56:	f006 fbc3 	bl	800a3e0 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_RES_Pin ENABLE_PIN_Pin DIR_LIFT_Pin */
  GPIO_InitStruct.Pin = STEP_RES_Pin|ENABLE_PIN_Pin|DIR_LIFT_Pin;
 8003c5a:	2392      	movs	r3, #146	@ 0x92
 8003c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c74:	f006 fa1a 	bl	800a0ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_RES_Pin XSHUT_LEFT_Pin XSHUT_RIGHT_Pin STEP_LIFT_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_RES_Pin|XSHUT_LEFT_Pin|XSHUT_RIGHT_Pin|STEP_LIFT_Pin
 8003c78:	f240 1371 	movw	r3, #369	@ 0x171
 8003c7c:	60fb      	str	r3, [r7, #12]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	4619      	mov	r1, r3
 8003c90:	480b      	ldr	r0, [pc, #44]	@ (8003cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8003c92:	f006 fa0b 	bl	800a0ac <HAL_GPIO_Init>

  /*Configure GPIO pins : F_COURSE_LIFT_Pin FIN_COURSE_RES_Pin */
  GPIO_InitStruct.Pin = F_COURSE_LIFT_Pin|FIN_COURSE_RES_Pin;
 8003c96:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8003c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cae:	f006 f9fd 	bl	800a0ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cb2:	bf00      	nop
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	48000400 	.word	0x48000400

08003cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc8:	b672      	cpsid	i
}
 8003cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <Error_Handler+0x8>

08003cd0 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f96d 	bl	8003fb8 <_ZNSt15__new_allocatorIiEC1Ev>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f96c 	bl	8003fce <_ZNSt15__new_allocatorIiED1Ev>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	1d38      	adds	r0, r7, #4
 8003d0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d0e:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f971 	bl	8003ffc <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f995 	bl	800404c <_ZNKSt16initializer_listIiE5beginEv>
 8003d22:	4604      	mov	r4, r0
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f99c 	bl	8004064 <_ZNKSt16initializer_listIiE3endEv>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	462b      	mov	r3, r5
 8003d30:	4621      	mov	r1, r4
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9a8 	bl	8004088 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}

08003d42 <_ZNSt6vectorIiSaIiEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8003d42:	b5b0      	push	{r4, r5, r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681c      	ldr	r4, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f9d0 	bl	80040fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003d5a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4620      	mov	r0, r4
 8003d62:	f000 f9d5 	bl	8004110 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f956 	bl	800401a <_ZNSt12_Vector_baseIiSaIiEED1Ev>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}

08003d78 <_ZNSaI11LaserSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f9d3 	bl	800412c <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZNSaI11LaserSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f9d2 	bl	8004142 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	1d38      	adds	r0, r7, #4
 8003db2:	e880 0006 	stmia.w	r0, {r1, r2}
 8003db6:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f9cb 	bl	8004158 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f9d6 	bl	8004176 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 f9dd 	bl	800418e <_ZNKSt16initializer_listI11LaserSensorE3endEv>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	4621      	mov	r1, r4
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9ec 	bl	80041b8 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bdb0      	pop	{r4, r5, r7, pc}

08003dea <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003dea:	b5b0      	push	{r4, r5, r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fa17 	bl	8004230 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e02:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e04:	461a      	mov	r2, r3
 8003e06:	4629      	mov	r1, r5
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 fa1c 	bl	8004246 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>
      }
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f805 	bl	8003e20 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bdb0      	pop	{r4, r5, r7, pc}

08003e20 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	109b      	asrs	r3, r3, #2
 8003e38:	4a07      	ldr	r2, [pc, #28]	@ (8003e58 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EED1Ev+0x38>)
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa1c 	bl	800427e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fd2b 	bl	80028a4 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implD1Ev>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	b6db6db7 	.word	0xb6db6db7

08003e5c <_ZNSt6vectorIiSaIiEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
      }
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZNSaIbEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fa0d 	bl	80042a4 <_ZNSt15__new_allocatorIbEC1Ev>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZNSaIbED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa0c 	bl	80042ba <_ZNSt15__new_allocatorIbED1Ev>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNSt6vectorIbSaIbEEC1ESt16initializer_listIbERKS0_>:
	_M_initialize(__x.size());
	_M_copy_aligned(__x.begin(), __x.end(), begin());
      }

      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<bool> __l,
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	1d38      	adds	r0, r7, #4
 8003eb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003eba:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa11 	bl	80042e8 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>
      {
	_M_initialize_range(__l.begin(), __l.end(),
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fa39 	bl	8004340 <_ZNKSt16initializer_listIbE5beginEv>
 8003ece:	4604      	mov	r4, r0
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa40 	bl	8004358 <_ZNKSt16initializer_listIbE3endEv>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	462b      	mov	r3, r5
 8003edc:	4621      	mov	r1, r4
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fa4b 	bl	800437a <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}

08003eee <_ZNSt6vectorIbSaIbEED1Ev>:
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT { }
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa11 	bl	8004320 <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZNKSt6vectorIbSaIbEE4sizeEv>:
      { return const_reverse_iterator(begin()); }
#endif

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
      { return size_type(end() - begin()); }
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fa53 	bl	80043c2 <_ZNKSt6vectorIbSaIbEE3endEv>
 8003f1c:	f107 0310 	add.w	r3, r7, #16
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa5c 	bl	80043e0 <_ZNKSt6vectorIbSaIbEE5beginEv>
 8003f28:	f107 0210 	add.w	r2, r7, #16
 8003f2c:	f107 0308 	add.w	r3, r7, #8
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fa9d 	bl	8002472 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZNSt6vectorIbSaIbEEixEj>:
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n)
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8003f4e:	f107 0310 	add.w	r3, r7, #16
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa53 	bl	8004400 <_ZNSt6vectorIbSaIbEE5beginEv>
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f107 0110 	add.w	r1, r7, #16
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe faed 	bl	8002542 <_ZNKSt13_Bit_iteratorixEi>
 8003f68:	bf00      	nop
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	109b      	asrs	r3, r3, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <_ZNSt6vectorI11LaserSensorSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
      }
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_ZNSt15__new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fe7b 	bl	8003ce8 <_ZNSaIiED1Ev>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZNSt12_Vector_baseIiSaIiEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fa08 	bl	8004420 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8004032:	461a      	mov	r2, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa05 	bl	8004444 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      }
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ffd1 	bl	8003fe4 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ffed 	bl	800404c <_ZNKSt16initializer_listIiE5beginEv>
 8004072:	4604      	mov	r4, r0
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9f8 	bl	800446a <_ZNKSt16initializer_listIiE4sizeEv>
 800407a:	4603      	mov	r3, r0
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4423      	add	r3, r4
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bd90      	pop	{r4, r7, pc}

08004088 <_ZNSt6vectorIiSaIiEE19_M_range_initializeIPKiEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68b8      	ldr	r0, [r7, #8]
 800409a:	f000 f9f2 	bl	8004482 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800409e:	4603      	mov	r3, r0
 80040a0:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80040a2:	68fc      	ldr	r4, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f827 	bl	80040fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4619      	mov	r1, r3
 80040b0:	6978      	ldr	r0, [r7, #20]
 80040b2:	f000 f9fb 	bl	80044ac <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4619      	mov	r1, r3
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 fa1e 	bl	80044fc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f80d 	bl	80040fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80040e0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80040e2:	4622      	mov	r2, r4
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	68b8      	ldr	r0, [r7, #8]
 80040e8:	f000 fa1c 	bl	8004524 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 80040ec:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]
	}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}

080040fa <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa11 	bl	8004546 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_ZNSt15__new_allocatorI11LaserSensorEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_ZNSt15__new_allocatorI11LaserSensorED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f9fa 	bl	8004560 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_ZNKSt16initializer_listI11LaserSensorE3endEv>:
      end() const noexcept { return begin() + size(); }
 800418e:	b590      	push	{r4, r7, lr}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ffed 	bl	8004176 <_ZNKSt16initializer_listI11LaserSensorE5beginEv>
 800419c:	4604      	mov	r4, r0
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9f0 	bl	8004584 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4423      	add	r3, r4
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}

080041b8 <_ZNSt6vectorI11LaserSensorSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	68b8      	ldr	r0, [r7, #8]
 80041ca:	f000 f9e7 	bl	800459c <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80041ce:	4603      	mov	r3, r0
 80041d0:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80041d2:	68fc      	ldr	r4, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f82a 	bl	8004230 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 80041dc:	4603      	mov	r3, r0
 80041de:	4619      	mov	r1, r3
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f000 f9ef 	bl	80045c4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4619      	mov	r1, r3
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fa12 	bl	8004614 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	18ca      	adds	r2, r1, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f80d 	bl	8004230 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8004216:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8004218:	4622      	mov	r2, r4
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68b8      	ldr	r0, [r7, #8]
 800421e:	f000 fa0d 	bl	800463c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8004222:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
	}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}

08004230 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <_ZSt8_DestroyIP11LaserSensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fa02 	bl	800465e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>
    }
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <_ZNSaI11LaserSensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa02 	bl	8004678 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
	if (__p)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f9fa 	bl	8004690 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>
      }
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZNSt15__new_allocatorIbEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <_ZNSt15__new_allocatorIbED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f9f5 	bl	80046c8 <_ZNSaImED1Ev>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZNSt13_Bvector_baseISaIbEEC1ERKS0_>:
      _Bvector_base(const allocator_type& __a)
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80042f2:	687c      	ldr	r4, [r7, #4]
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f9d7 	bl	80046ae <_ZNSaImEC1IbEERKSaIT_E>
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4619      	mov	r1, r3
 8004306:	4620      	mov	r0, r4
 8004308:	f000 f9ea 	bl	80046e0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>
 800430c:	f107 030c 	add.w	r3, r7, #12
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f9d9 	bl	80046c8 <_ZNSaImED1Ev>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bd90      	pop	{r4, r7, pc}

08004320 <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f9eb 	bl	8004704 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ffcd 	bl	80042d0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <_ZNKSt16initializer_listIbE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_ZNKSt16initializer_listIbE3endEv>:
      end() const noexcept { return begin() + size(); }
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ffed 	bl	8004340 <_ZNKSt16initializer_listIbE5beginEv>
 8004366:	4604      	mov	r4, r0
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f9f0 	bl	800474e <_ZNKSt16initializer_listIbE4sizeEv>
 800436e:	4603      	mov	r3, r0
 8004370:	4423      	add	r3, r4
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}

0800437a <_ZNSt6vectorIbSaIbEE19_M_initialize_rangeIPKbEEvT_S5_St20forward_iterator_tag>:
	}

      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
 800437a:	b580      	push	{r7, lr}
 800437c:	b08c      	sub	sp, #48	@ 0x30
 800437e:	af02      	add	r7, sp, #8
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	68b8      	ldr	r0, [r7, #8]
 800438c:	f000 f9eb 	bl	8004766 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8004390:	4603      	mov	r3, r0
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
	  _M_initialize(__n);
 8004394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f9f9 	bl	800478e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>
	  std::copy(__first, __last, begin());
 800439c:	f107 031c 	add.w	r3, r7, #28
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f82c 	bl	8004400 <_ZNSt6vectorIbSaIbEE5beginEv>
 80043a8:	f107 0014 	add.w	r0, r7, #20
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	f000 fa26 	bl	8004806 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>
	}
 80043ba:	bf00      	nop
 80043bc:	3728      	adds	r7, #40	@ 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <_ZNKSt6vectorIbSaIbEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	3308      	adds	r3, #8
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fe f8f3 	bl	80025be <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZNKSt6vectorIbSaIbEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fe f8d2 	bl	800259c <_ZNSt19_Bit_const_iteratorC1EPmj>
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_ZNSt6vectorIbSaIbEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fe f854 	bl	80024c0 <_ZNSt13_Bit_iteratorC1EPmj>
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa09 	bl	8004844 <_ZNSaIiEC1ERKS_>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fa13 	bl	8004860 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
	if (__p)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa13 	bl	8004888 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004482:	b5b0      	push	{r4, r5, r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800448c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa08 	bl	80048a6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8004496:	462a      	mov	r2, r5
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4620      	mov	r0, r4
 800449c:	f000 fa0e 	bl	80048bc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80044a0:	4603      	mov	r3, r0
    }
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080044ac <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80044b6:	f107 030c 	add.w	r3, r7, #12
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f9c1 	bl	8004844 <_ZNSaIiEC1ERKS_>
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fa08 	bl	80048dc <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bf8c      	ite	hi
 80044d4:	2301      	movhi	r3, #1
 80044d6:	2300      	movls	r3, #0
 80044d8:	b2dc      	uxtb	r4, r3
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fc02 	bl	8003ce8 <_ZNSaIiED1Ev>
 80044e4:	2c00      	cmp	r4, #0
 80044e6:	d002      	beq.n	80044ee <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80044e8:	4803      	ldr	r0, [pc, #12]	@ (80044f8 <_ZNSt6vectorIiSaIiEE17_S_check_init_lenEjRKS0_+0x4c>)
 80044ea:	f009 fadf 	bl	800daac <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80044ee:	687b      	ldr	r3, [r7, #4]
      }
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	0800f320 	.word	0x0800f320

080044fc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f9fd 	bl	8004910 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8004516:	4603      	mov	r3, r0
 8004518:	e000      	b.n	800451c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 800451a:	2300      	movs	r3, #0
      }
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f9f9 	bl	800492e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 800453c:	4603      	mov	r3, r0
    }
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9ff 	bl	8004956 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800456a:	6839      	ldr	r1, [r7, #0]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fe78 	bl	8004262 <_ZNSaI11LaserSensorEC1ERKS0_>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f9f9 	bl	800496c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZNKSt16initializer_listI11LaserSensorE4sizeEv>:
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_ZSt8distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80045a6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f9f2 	bl	8004994 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80045b0:	462a      	mov	r2, r5
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	4620      	mov	r0, r4
 80045b6:	f000 f9f9 	bl	80049ac <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80045ba:	4603      	mov	r3, r0
    }
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bdb0      	pop	{r4, r5, r7, pc}

080045c4 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80045ce:	f107 030c 	add.w	r3, r7, #12
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe44 	bl	8004262 <_ZNSaI11LaserSensorEC1ERKS0_>
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f9fa 	bl	80049d8 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bf8c      	ite	hi
 80045ec:	2301      	movhi	r3, #1
 80045ee:	2300      	movls	r3, #0
 80045f0:	b2dc      	uxtb	r4, r3
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fbca 	bl	8003d90 <_ZNSaI11LaserSensorED1Ev>
 80045fc:	2c00      	cmp	r4, #0
 80045fe:	d002      	beq.n	8004606 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8004600:	4803      	ldr	r0, [pc, #12]	@ (8004610 <_ZNSt6vectorI11LaserSensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8004602:	f009 fa53 	bl	800daac <_ZSt20__throw_length_errorPKc>
	return __n;
 8004606:	687b      	ldr	r3, [r7, #4]
      }
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	0800f320 	.word	0x0800f320

08004614 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x1e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f9f1 	bl	8004a10 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>
 800462e:	4603      	mov	r3, r0
 8004630:	e000      	b.n	8004634 <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE11_M_allocateEj+0x20>
 8004632:	2300      	movs	r3, #0
      }
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZSt22__uninitialized_copy_aIPK11LaserSensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f9ed 	bl	8004a2e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8004654:	4603      	mov	r3, r0
    }
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_ZSt8_DestroyIP11LaserSensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9f3 	bl	8004a56 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>
    }
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_ZNSt15__new_allocatorI11LaserSensorEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <_ZNSt16allocator_traitsISaI11LaserSensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f9f1 	bl	8004a88 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_ZNSaImEC1IbEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9f8 	bl	8004aae <_ZNSt15__new_allocatorImEC1Ev>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f9f7 	bl	8004ac4 <_ZNSt15__new_allocatorImED1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1ERKSaImE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f9f4 	bl	8004ada <_ZNSaImEC1ERKS_>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f9fe 	bl	8004af6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
	{ }
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fa02 	bl	8004b20 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	109b      	asrs	r3, r3, #2
 8004726:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8004728:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8004734:	4413      	add	r3, r2
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4619      	mov	r1, r3
 800473a:	f000 fa07 	bl	8004b4c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_reset();
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa12 	bl	8004b6a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>
      }
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZNKSt16initializer_listIbE4sizeEv>:
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_ZSt8distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8004766:	b5b0      	push	{r4, r5, r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8004770:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa0d 	bl	8004b94 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800477a:	462a      	mov	r2, r5
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4620      	mov	r0, r4
 8004780:	f000 fa13 	bl	8004baa <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8004784:	4603      	mov	r3, r0
    }
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bdb0      	pop	{r4, r5, r7, pc}

0800478e <_ZNSt6vectorIbSaIbEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 800478e:	b590      	push	{r4, r7, lr}
 8004790:	b089      	sub	sp, #36	@ 0x24
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
	if (__n)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02f      	beq.n	80047fe <_ZNSt6vectorIbSaIbEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fa10 	bl	8004bc8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 80047a8:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 80047aa:	68b8      	ldr	r0, [r7, #8]
 80047ac:	f000 fa20 	bl	8004bf0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 80047b0:	4603      	mov	r3, r0
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	441a      	add	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 80047bc:	69f8      	ldr	r0, [r7, #28]
 80047be:	f000 fa24 	bl	8004c0a <_ZSt11__addressofImEPT_RS0_>
 80047c2:	4601      	mov	r1, r0
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	2200      	movs	r2, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fe78 	bl	80024c0 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047dc:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	68fc      	ldr	r4, [r7, #12]
 80047e4:	463b      	mov	r3, r7
 80047e6:	f107 0114 	add.w	r1, r7, #20
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd fec1 	bl	8002572 <_ZStplRKSt13_Bit_iteratori>
 80047f0:	f104 0308 	add.w	r3, r4, #8
 80047f4:	463a      	mov	r2, r7
 80047f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047fa:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 80047fe:	bf00      	nop
 8004800:	3724      	adds	r7, #36	@ 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}

08004806 <_ZSt4copyIPKbSt13_Bit_iteratorET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004806:	b082      	sub	sp, #8
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f000 fa02 	bl	8004c20 <_ZSt12__miter_baseIPKbET_S2_>
 800481c:	4604      	mov	r4, r0
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9fe 	bl	8004c20 <_ZSt12__miter_baseIPKbET_S2_>
 8004824:	4602      	mov	r2, r0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	4621      	mov	r1, r4
 8004830:	f000 fa01 	bl	8004c36 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004834:	bf00      	nop
    }
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004840:	b002      	add	sp, #8
 8004842:	4770      	bx	lr

08004844 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa21 	bl	8004c98 <_ZNSt15__new_allocatorIiEC1ERKS0_>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
	{ }
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa09 	bl	8004cb0 <_ZNSt15__new_allocatorIiE10deallocateEPij>
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80048ae:	bf00      	nop
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	109b      	asrs	r3, r3, #2
    }
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80048e4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80048e8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9f0 	bl	8004cd0 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 80048f0:	4603      	mov	r3, r0
 80048f2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80048f4:	f107 0208 	add.w	r2, r7, #8
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f9f2 	bl	8004ce8 <_ZSt3minIjERKT_S2_S2_>
 8004904:	4603      	mov	r3, r0
 8004906:	681b      	ldr	r3, [r3, #0]
      }
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800491a:	2200      	movs	r2, #0
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9f6 	bl	8004d10 <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 8004924:	4603      	mov	r3, r0
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800493e:	2301      	movs	r3, #1
 8004940:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa0b 	bl	8004d62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 800494c:	4603      	mov	r3, r0
    }
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <_ZNSt12_Vector_baseI11LaserSensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
	{ }
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZSt19__iterator_categoryIPK11LaserSensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800499c:	bf00      	nop
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	109b      	asrs	r3, r3, #2
 80049c0:	4a04      	ldr	r2, [pc, #16]	@ (80049d4 <_ZSt10__distanceIPK11LaserSensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
    }
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	b6db6db7 	.word	0xb6db6db7

080049d8 <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80049e0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <_ZNSt6vectorI11LaserSensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80049e2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f9cc 	bl	8004d82 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>
 80049ea:	4603      	mov	r3, r0
 80049ec:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80049ee:	f107 0208 	add.w	r2, r7, #8
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f975 	bl	8004ce8 <_ZSt3minIjERKT_S2_S2_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	681b      	ldr	r3, [r3, #0]
      }
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	04924924 	.word	0x04924924

08004a10 <_ZNSt16allocator_traitsISaI11LaserSensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9bc 	bl	8004d9c <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <_ZSt18uninitialized_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9d6 	bl	8004df8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>
 8004a4c:	4603      	mov	r3, r0
    }
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004a60:	e009      	b.n	8004a76 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9d8 	bl	8004e18 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f9df 	bl	8004e2e <_ZSt8_DestroyI11LaserSensorEvPT_>
	  for (; __first != __last; ++__first)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	331c      	adds	r3, #28
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d1f1      	bne.n	8004a62 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11LaserSensorEEvT_S4_+0xc>
	}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_ZNSt15__new_allocatorI11LaserSensorE10deallocateEPS0_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68b8      	ldr	r0, [r7, #8]
 8004aa2:	f008 ffe5 	bl	800da70 <_ZdlPvj>
      }
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <_ZNSt15__new_allocatorImEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9ac 	bl	8004e44 <_ZNSt15__new_allocatorImEC1ERKS0_>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd fcce 	bl	80024a2 <_ZNSt13_Bit_iteratorC1Ev>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd fcc9 	bl	80024a2 <_ZNSt13_Bit_iteratorC1Ev>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
	{ }
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f867 	bl	8004c0a <_ZSt11__addressofImEPT_RS0_>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	3304      	adds	r3, #4
 8004b40:	e000      	b.n	8004b44 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8004b42:	2300      	movs	r3, #0
	}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f97d 	bl	8004e5c <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 8004b6a:	b5b0      	push	{r4, r5, r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ffbd 	bl	8004af6 <_ZNSt13_Bvector_baseISaIbEE18_Bvector_impl_dataC1Ev>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	461d      	mov	r5, r3
 8004b80:	f107 040c 	add.w	r4, r7, #12
 8004b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	bf00      	nop
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bdb0      	pop	{r4, r5, r7, pc}

08004b94 <_ZSt19__iterator_categoryIPKbENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004b9c:	bf00      	nop
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <_ZSt10__distanceIPKbENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
    }
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 8004bd2:	687c      	ldr	r4, [r7, #4]
 8004bd4:	6838      	ldr	r0, [r7, #0]
 8004bd6:	f000 f80b 	bl	8004bf0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 f94c 	bl	8004e7c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8004be4:	60f8      	str	r0, [r7, #12]
	return __p;
 8004be6:	68fb      	ldr	r3, [r7, #12]
      }
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	331f      	adds	r3, #31
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <_ZSt11__addressofImEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <_ZSt12__miter_baseIPKbET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <_ZSt13__copy_move_aILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c36:	b082      	sub	sp, #8
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	b08a      	sub	sp, #40	@ 0x28
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
      return std::__niter_wrap(__result,
 8004c46:	68b8      	ldr	r0, [r7, #8]
 8004c48:	f000 f927 	bl	8004e9a <_ZSt12__niter_baseIPKbET_S2_>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f923 	bl	8004e9a <_ZSt12__niter_baseIPKbET_S2_>
 8004c54:	4605      	mov	r5, r0
 8004c56:	f107 0010 	add.w	r0, r7, #16
 8004c5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c62:	f000 f925 	bl	8004eb0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004c66:	f107 0018 	add.w	r0, r7, #24
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	462a      	mov	r2, r5
 8004c72:	4621      	mov	r1, r4
 8004c74:	f000 f930 	bl	8004ed8 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8004c7e:	f107 0318 	add.w	r3, r7, #24
 8004c82:	cb0c      	ldmia	r3, {r2, r3}
 8004c84:	f000 f940 	bl	8004f08 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>
					     std::__niter_base(__result)));
 8004c88:	bf00      	nop
    }
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004c94:	b002      	add	sp, #8
 8004c96:	4770      	bx	lr

08004c98 <_ZNSt15__new_allocatorIiEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f008 fed4 	bl	800da70 <_ZdlPvj>
      }
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f92a 	bl	8004f32 <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 8004cde:	4603      	mov	r3, r0
      }
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d201      	bcs.n	8004d02 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	e000      	b.n	8004d04 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004d02:	687b      	ldr	r3, [r7, #4]
    }
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f914 	bl	8004f4a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4293      	cmp	r3, r2
 8004d28:	bf8c      	ite	hi
 8004d2a:	2301      	movhi	r3, #1
 8004d2c:	2300      	movls	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d301      	bcc.n	8004d4a <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004d46:	f008 feab 	bl	800daa0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004d4a:	f008 fea6 	bl	800da9a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f008 fe8e 	bl	800da74 <_Znwj>
 8004d58:	4603      	mov	r3, r0
      }
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f8f5 	bl	8004f62 <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <_ZNSt16allocator_traitsISaI11LaserSensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f901 	bl	8004f92 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>
 8004d90:	4603      	mov	r3, r0
      }
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f8ff 	bl	8004fac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bf8c      	ite	hi
 8004db6:	2301      	movhi	r3, #1
 8004db8:	2300      	movls	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x58>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <_ZNSt15__new_allocatorI11LaserSensorE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004dd2:	f008 fe65 	bl	800daa0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004dd6:	f008 fe60 	bl	800da9a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f008 fe45 	bl	800da74 <_Znwj>
 8004dea:	4603      	mov	r3, r0
      }
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	09249249 	.word	0x09249249

08004df8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK11LaserSensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f8dd 	bl	8004fc8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_ZSt11__addressofI11LaserSensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <_ZSt8_DestroyI11LaserSensorEvPT_>:
    _Destroy(_Tp* __pointer)
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd f94f 	bl	80020da <_ZN11LaserSensorD1Ev>
    }
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZNSt15__new_allocatorImEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_ZNSt15__new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f008 fdfe 	bl	800da70 <_ZdlPvj>
      }
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004e86:	2200      	movs	r2, #0
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8bc 	bl	8005008 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZSt12__niter_baseIPKbET_S2_>:
    __niter_base(_Iterator __it)
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ec8:	e882 0003 	stmia.w	r2, {r0, r1}
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_ZSt14__copy_move_a1ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004ed8:	b082      	sub	sp, #8
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af02      	add	r7, sp, #8
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	61fb      	str	r3, [r7, #28]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	f000 f8b1 	bl	800505a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>
 8004ef8:	bf00      	nop
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f04:	b002      	add	sp, #8
 8004f06:	4770      	bx	lr

08004f08 <_ZSt12__niter_wrapISt13_Bit_iteratorET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4639      	mov	r1, r7
 8004f14:	e881 000c 	stmia.w	r1, {r2, r3}
    { return __res; }
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f22:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f805 	bl	8004f4a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004f52:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_ZSt4copyIPKiPiET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004f62:	b590      	push	{r4, r7, lr}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f88b 	bl	800508a <_ZSt12__miter_baseIPKiET_S2_>
 8004f74:	4604      	mov	r4, r0
 8004f76:	68b8      	ldr	r0, [r7, #8]
 8004f78:	f000 f887 	bl	800508a <_ZSt12__miter_baseIPKiET_S2_>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 f88c 	bl	80050a0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8004f88:	4603      	mov	r3, r0
    }
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}

08004f92 <_ZNKSt15__new_allocatorI11LaserSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f806 	bl	8004fac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <_ZNKSt15__new_allocatorI11LaserSensorE11_M_max_sizeEv+0x18>)
      }
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	04924924 	.word	0x04924924

08004fc8 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8004fd8:	e00d      	b.n	8004ff6 <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x2e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff1c 	bl	8004e18 <_ZSt11__addressofI11LaserSensorEPT_RS1_>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f87e 	bl	80050e6 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	331c      	adds	r3, #28
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	331c      	adds	r3, #28
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d1ed      	bne.n	8004fda <_ZSt16__do_uninit_copyIPK11LaserSensorPS0_ET0_T_S5_S4_+0x12>
	  return __cur;
 8004ffe:	697b      	ldr	r3, [r7, #20]
    }
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f880 	bl	800511a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4293      	cmp	r3, r2
 8005020:	bf8c      	ite	hi
 8005022:	2301      	movhi	r3, #1
 8005024:	2300      	movls	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d301      	bcc.n	8005042 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800503e:	f008 fd2f 	bl	800daa0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8005042:	f008 fd2a 	bl	800da9a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f008 fd12 	bl	800da74 <_Znwj>
 8005050:	4603      	mov	r3, r0
      }
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_ZSt14__copy_move_a2ILb0EPKbSt13_Bit_iteratorET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800505a:	b082      	sub	sp, #8
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	61fb      	str	r3, [r7, #28]
			      _Category>::__copy_m(__first, __last, __result);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	f000 f85c 	bl	8005132 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>
 800507a:	bf00      	nop
    }
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005086:	b002      	add	sp, #8
 8005088:	4770      	bx	lr

0800508a <_ZSt12__miter_baseIPKiET_S2_>:
    __miter_base(_Iterator __it)
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f87a 	bl	80051a6 <_ZSt12__niter_baseIPKiET_S2_>
 80050b2:	4604      	mov	r4, r0
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f000 f876 	bl	80051a6 <_ZSt12__niter_baseIPKiET_S2_>
 80050ba:	4605      	mov	r5, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f87c 	bl	80051bc <_ZSt12__niter_baseIPiET_S1_>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	4629      	mov	r1, r5
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f881 	bl	80051d2 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>
 80050d0:	4602      	mov	r2, r0
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f88b 	bl	80051f2 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 80050dc:	4603      	mov	r3, r0
    }
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bdb0      	pop	{r4, r5, r7, pc}

080050e6 <_ZSt10_ConstructI11LaserSensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80050e6:	b5b0      	push	{r4, r5, r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4619      	mov	r1, r3
 80050f4:	201c      	movs	r0, #28
 80050f6:	f7fd f901 	bl	80022fc <_ZnwjPv>
 80050fa:	4604      	mov	r4, r0
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f000 f884 	bl	800520a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>
 8005102:	4603      	mov	r3, r0
 8005104:	461d      	mov	r5, r3
 8005106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800510a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800510e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bdb0      	pop	{r4, r5, r7, pc}

0800511a <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005122:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8005132:	b082      	sub	sp, #8
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e01a      	b.n	8005182 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x50>
	      *__result = *__first;
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f7fd f9c3 	bl	80024e2 <_ZNKSt13_Bit_iteratordeEv>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	4611      	mov	r1, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd f8fc 	bl	8002364 <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
	      ++__result;
 8005172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd f9c7 	bl	800250a <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3b01      	subs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dce1      	bgt.n	800514c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKbSt13_Bit_iteratorEET0_T_S7_S6_+0x1a>
	  return __result;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	461a      	mov	r2, r3
 800518c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005190:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005194:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a2:	b002      	add	sp, #8
 80051a4:	4770      	bx	lr

080051a6 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <_ZSt14__copy_move_a1ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f81c 	bl	8005220 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
    { return __res; }
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <_ZSt7forwardIRK11LaserSensorEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f805 	bl	8005240 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8005236:	4603      	mov	r3, r0
    }
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	109b      	asrs	r3, r3, #2
 8005254:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	461a      	mov	r2, r3
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f009 f8a1 	bl	800e3ac <memmove>
	  return __result + _Num;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4413      	add	r3, r2
	}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZN14ReservoirStateD1Ev>:
struct ReservoirState
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fe32 	bl	8003eee <_ZNSt6vectorIbSaIbEED1Ev>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_ZN11SystemStateD1Ev>:
struct SystemState
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe fe24 	bl	8003eee <_ZNSt6vectorIbSaIbEED1Ev>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b0af      	sub	sp, #188	@ 0xbc
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 80f5 	bne.w	80054ac <_Z41__static_initialization_and_destruction_0ii+0x1fc>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052c8:	4293      	cmp	r3, r2
 80052ca:	f040 80ef 	bne.w	80054ac <_Z41__static_initialization_and_destruction_0ii+0x1fc>
ChampiCan champi_can;
 80052ce:	488c      	ldr	r0, [pc, #560]	@ (8005500 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80052d0:	f7fb fcae 	bl	8000c30 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_action;
 80052d4:	488b      	ldr	r0, [pc, #556]	@ (8005504 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80052d6:	f7fb fec9 	bl	800106c <_ZN17MessageRecomposerC1Ev>
ChampiState champi_state;
 80052da:	488b      	ldr	r0, [pc, #556]	@ (8005508 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80052dc:	f7fb fdde 	bl	8000e9c <_ZN11ChampiStateC1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80052e0:	4a8a      	ldr	r2, [pc, #552]	@ (800550c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	2302      	movs	r3, #2
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	f107 031c 	add.w	r3, r7, #28
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fce7 	bl	8003cd0 <_ZNSaIiEC1Ev>
 8005302:	f107 031c 	add.w	r3, r7, #28
 8005306:	f107 020c 	add.w	r2, r7, #12
 800530a:	ca06      	ldmia	r2, {r1, r2}
 800530c:	4880      	ldr	r0, [pc, #512]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800530e:	f7fe fcf7 	bl	8003d00 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8005312:	f107 031c 	add.w	r3, r7, #28
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fce6 	bl	8003ce8 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 800531c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005322:	2300      	movs	r3, #0
 8005324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800532a:	623b      	str	r3, [r7, #32]
 800532c:	2302      	movs	r3, #2
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005330:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fccb 	bl	8003cd0 <_ZNSaIiEC1Ev>
 800533a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800533e:	f107 0220 	add.w	r2, r7, #32
 8005342:	ca06      	ldmia	r2, {r1, r2}
 8005344:	4873      	ldr	r0, [pc, #460]	@ (8005514 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005346:	f7fe fcdb 	bl	8003d00 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 800534a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe fcca 	bl	8003ce8 <_ZNSaIiED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 8005354:	4a70      	ldr	r2, [pc, #448]	@ (8005518 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005356:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800535a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800535e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005362:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
 8005368:	2302      	movs	r3, #2
 800536a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800536c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fcad 	bl	8003cd0 <_ZNSaIiEC1Ev>
 8005376:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800537a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800537e:	ca06      	ldmia	r2, {r1, r2}
 8005380:	4866      	ldr	r0, [pc, #408]	@ (800551c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005382:	f7fe fcbd 	bl	8003d00 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8005386:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fcac 	bl	8003ce8 <_ZNSaIiED1Ev>
auto sensors = std::vector<LaserSensor>({
 8005390:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8005394:	f06f 0309 	mvn.w	r3, #9
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	2301      	movs	r3, #1
 800539c:	2210      	movs	r2, #16
 800539e:	4960      	ldr	r1, [pc, #384]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80053a0:	f7fc fe76 	bl	8002090 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 80053a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053a8:	f103 001c 	add.w	r0, r3, #28
 80053ac:	f06f 0307 	mvn.w	r3, #7
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2305      	movs	r3, #5
 80053b4:	2220      	movs	r2, #32
 80053b6:	495a      	ldr	r1, [pc, #360]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80053b8:	f7fc fe6a 	bl	8002090 <_ZN11LaserSensorC1EP12GPIO_TypeDeftts>
 80053bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c2:	2302      	movs	r3, #2
 80053c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe fcd4 	bl	8003d78 <_ZNSaI11LaserSensorEC1Ev>
 80053d0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80053d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80053d8:	ca06      	ldmia	r2, {r1, r2}
 80053da:	4852      	ldr	r0, [pc, #328]	@ (8005524 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80053dc:	f7fe fce4 	bl	8003da8 <_ZNSt6vectorI11LaserSensorSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 80053e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fe fcd3 	bl	8003d90 <_ZNSaI11LaserSensorED1Ev>
});
 80053ea:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80053ee:	3438      	adds	r4, #56	@ 0x38
auto sensors = std::vector<LaserSensor>({
 80053f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d004      	beq.n	8005402 <_Z41__static_initialization_and_destruction_0ii+0x152>
});
 80053f8:	3c1c      	subs	r4, #28
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7fc fe6d 	bl	80020da <_ZN11LaserSensorD1Ev>
auto sensors = std::vector<LaserSensor>({
 8005400:	e7f6      	b.n	80053f0 <_Z41__static_initialization_and_destruction_0ii+0x140>
Stepper stepper_lift = Stepper(get_time_us, STEP_LIFT_GPIO_Port, STEP_LIFT_Pin, DIR_LIFT_GPIO_Port, DIR_LIFT_Pin);
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2340      	movs	r3, #64	@ 0x40
 800540e:	4a44      	ldr	r2, [pc, #272]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005410:	4945      	ldr	r1, [pc, #276]	@ (8005528 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005412:	4846      	ldr	r0, [pc, #280]	@ (800552c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005414:	f7fc fc8e 	bl	8001d34 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
Stepper stepper_res = Stepper(get_time_us, STEP_RES_GPIO_Port, STEP_RES_Pin, DIR_RES_GPIO_Port, DIR_RES_Pin);
 8005418:	2301      	movs	r3, #1
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	4b40      	ldr	r3, [pc, #256]	@ (8005520 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2302      	movs	r3, #2
 8005422:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8005426:	4940      	ldr	r1, [pc, #256]	@ (8005528 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005428:	4841      	ldr	r0, [pc, #260]	@ (8005530 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800542a:	f7fc fc83 	bl	8001d34 <_ZN7StepperC1EPFmvEP12GPIO_TypeDeftS3_t>
SCServo servos = SCServo(&huart1);
 800542e:	4941      	ldr	r1, [pc, #260]	@ (8005534 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005430:	4841      	ldr	r0, [pc, #260]	@ (8005538 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005432:	f7fb ffaa 	bl	800138a <_ZN7SCServoC1EP20__UART_HandleTypeDef>
std::vector<int> servo_ids_to_check = {
 8005436:	2308      	movs	r3, #8
 8005438:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  hoppers_ids[LEFT],
 800543c:	2100      	movs	r1, #0
 800543e:	4834      	ldr	r0, [pc, #208]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005440:	f7fe fd0c 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8005444:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  hoppers_ids[RIGHT],
 800544c:	2101      	movs	r1, #1
 800544e:	4830      	ldr	r0, [pc, #192]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005450:	f7fe fd04 	bl	8003e5c <_ZNSt6vectorIiSaIiEEixEj>
 8005454:	4603      	mov	r3, r0
std::vector<int> servo_ids_to_check = {
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800545c:	2312      	movs	r3, #18
 800545e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005462:	2310      	movs	r3, #16
 8005464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005468:	2309      	movs	r3, #9
 800546a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800546e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005476:	2306      	movs	r3, #6
 8005478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800547c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fc25 	bl	8003cd0 <_ZNSaIiEC1Ev>
 8005486:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800548a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800548e:	ca06      	ldmia	r2, {r1, r2}
 8005490:	482a      	ldr	r0, [pc, #168]	@ (800553c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005492:	f7fe fc35 	bl	8003d00 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
 8005496:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fc24 	bl	8003ce8 <_ZNSaIiED1Ev>
} system_state;
 80054a0:	4827      	ldr	r0, [pc, #156]	@ (8005540 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80054a2:	f7fd fa0b 	bl	80028bc <_ZN11SystemStateC1Ev>
} reservoir_state;
 80054a6:	4827      	ldr	r0, [pc, #156]	@ (8005544 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80054a8:	f7fd fa39 	bl	800291e <_ZN14ReservoirStateC1Ev>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d122      	bne.n	80054f8 <_Z41__static_initialization_and_destruction_0ii+0x248>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d11d      	bne.n	80054f8 <_Z41__static_initialization_and_destruction_0ii+0x248>
 80054bc:	4821      	ldr	r0, [pc, #132]	@ (8005544 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80054be:	f7ff fedc 	bl	800527a <_ZN14ReservoirStateD1Ev>
} system_state;
 80054c2:	481f      	ldr	r0, [pc, #124]	@ (8005540 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80054c4:	f7ff fee6 	bl	8005294 <_ZN11SystemStateD1Ev>
std::vector<int> servo_ids_to_check = {
 80054c8:	481c      	ldr	r0, [pc, #112]	@ (800553c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80054ca:	f7fe fc3a 	bl	8003d42 <_ZNSt6vectorIiSaIiEED1Ev>
auto sensors = std::vector<LaserSensor>({
 80054ce:	4815      	ldr	r0, [pc, #84]	@ (8005524 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80054d0:	f7fe fc8b 	bl	8003dea <_ZNSt6vectorI11LaserSensorSaIS0_EED1Ev>
std::vector<int> hoppers_pos_close = {600, 430};
 80054d4:	4811      	ldr	r0, [pc, #68]	@ (800551c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80054d6:	f7fe fc34 	bl	8003d42 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_pos_open = {1023, 0};
 80054da:	480e      	ldr	r0, [pc, #56]	@ (8005514 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80054dc:	f7fe fc31 	bl	8003d42 <_ZNSt6vectorIiSaIiEED1Ev>
std::vector<int> hoppers_ids = {7, 14};
 80054e0:	480b      	ldr	r0, [pc, #44]	@ (8005510 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80054e2:	f7fe fc2e 	bl	8003d42 <_ZNSt6vectorIiSaIiEED1Ev>
ChampiState champi_state;
 80054e6:	4808      	ldr	r0, [pc, #32]	@ (8005508 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80054e8:	f7fb fd24 	bl	8000f34 <_ZN11ChampiStateD1Ev>
MessageRecomposer msg_recomposer_action;
 80054ec:	4805      	ldr	r0, [pc, #20]	@ (8005504 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80054ee:	f7fb fec9 	bl	8001284 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 80054f2:	4803      	ldr	r0, [pc, #12]	@ (8005500 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80054f4:	f7fb fcb2 	bl	8000e5c <_ZN9ChampiCanD1Ev>
}
 80054f8:	bf00      	nop
 80054fa:	37b4      	adds	r7, #180	@ 0xb4
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}
 8005500:	200002c0 	.word	0x200002c0
 8005504:	200002ec 	.word	0x200002ec
 8005508:	20000508 	.word	0x20000508
 800550c:	0800f354 	.word	0x0800f354
 8005510:	200005d0 	.word	0x200005d0
 8005514:	200005dc 	.word	0x200005dc
 8005518:	0800f35c 	.word	0x0800f35c
 800551c:	200005e8 	.word	0x200005e8
 8005520:	48000400 	.word	0x48000400
 8005524:	200005f4 	.word	0x200005f4
 8005528:	08002651 	.word	0x08002651
 800552c:	20000600 	.word	0x20000600
 8005530:	20000644 	.word	0x20000644
 8005534:	20000194 	.word	0x20000194
 8005538:	20000688 	.word	0x20000688
 800553c:	2000068c 	.word	0x2000068c
 8005540:	20000698 	.word	0x20000698
 8005544:	200006b0 	.word	0x200006b0

08005548 <_GLOBAL__sub_I_hfdcan1>:
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
 800554c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005550:	2001      	movs	r0, #1
 8005552:	f7ff fead 	bl	80052b0 <_Z41__static_initialization_and_destruction_0ii>
 8005556:	bd80      	pop	{r7, pc}

08005558 <_GLOBAL__sub_D_hfdcan1>:
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
 800555c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005560:	2000      	movs	r0, #0
 8005562:	f7ff fea5 	bl	80052b0 <_Z41__static_initialization_and_destruction_0ii>
 8005566:	bd80      	pop	{r7, pc}

08005568 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8005568:	b480      	push	{r7}
 800556a:	b08f      	sub	sp, #60	@ 0x3c
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	891a      	ldrh	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	8a1b      	ldrh	r3, [r3, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d301      	bcc.n	8005582 <load_descriptor_values+0x1a>
        return false;
 800557e:	2300      	movs	r3, #0
 8005580:	e156      	b.n	8005830 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	895b      	ldrh	r3, [r3, #10]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	b2da      	uxtb	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d05a      	beq.n	800565e <load_descriptor_values+0xf6>
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	f200 8094 	bhi.w	80056d6 <load_descriptor_values+0x16e>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <load_descriptor_values+0x50>
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d01f      	beq.n	80055f6 <load_descriptor_values+0x8e>
 80055b6:	e08e      	b.n	80056d6 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	0f1b      	lsrs	r3, r3, #28
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	825a      	strh	r2, [r3, #18]
            break;
 80055f4:	e0b4      	b.n	8005760 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	895b      	ldrh	r3, [r3, #10]
 8005600:	3301      	adds	r3, #1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	b29b      	uxth	r3, r3
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	b29b      	uxth	r3, r3
 8005620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005624:	b29a      	uxth	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	0f1b      	lsrs	r3, r3, #28
 800562a:	b29b      	uxth	r3, r3
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8005638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563a:	0f1b      	lsrs	r3, r3, #28
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	b29b      	uxth	r3, r3
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	b29b      	uxth	r3, r3
 8005652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	825a      	strh	r2, [r3, #18]
            break;
 800565c:	e080      	b.n	8005760 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	895b      	ldrh	r3, [r3, #10]
 8005668:	3301      	adds	r3, #1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	895b      	ldrh	r3, [r3, #10]
 800567c:	3302      	adds	r3, #2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	895b      	ldrh	r3, [r3, #10]
 8005690:	3303      	adds	r3, #3
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80056a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a6:	089b      	lsrs	r3, r3, #2
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	019b      	lsls	r3, r3, #6
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	825a      	strh	r2, [r3, #18]
            break;
 80056d4:	e044      	b.n	8005760 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	895b      	ldrh	r3, [r3, #10]
 80056e0:	3301      	adds	r3, #1
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	895b      	ldrh	r3, [r3, #10]
 80056f4:	3302      	adds	r3, #2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	895b      	ldrh	r3, [r3, #10]
 8005708:	3303      	adds	r3, #3
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	895b      	ldrh	r3, [r3, #10]
 800571c:	3304      	adds	r3, #4
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	b29b      	uxth	r3, r3
 8005734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005738:	b29a      	uxth	r2, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b29b      	uxth	r3, r3
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	b29b      	uxth	r3, r3
 8005744:	4313      	orrs	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	825a      	strh	r2, [r3, #18]
            break;
 800575e:	bf00      	nop
        }
    }

    if (!iter->message)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	621a      	str	r2, [r3, #32]
 8005774:	e041      	b.n	80057fa <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577c:	441a      	add	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8005782:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005792:	425b      	negs	r3, r3
 8005794:	441a      	add	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]
 800579a:	e01a      	b.n	80057d2 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7d9b      	ldrb	r3, [r3, #22]
 80057a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d111      	bne.n	80057cc <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7d9b      	ldrb	r3, [r3, #22]
 80057ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7d9b      	ldrb	r3, [r3, #22]
 80057b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80057bc:	2b80      	cmp	r3, #128	@ 0x80
 80057be:	d105      	bne.n	80057cc <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f103 0214 	add.w	r2, r3, #20
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]
 80057ca:	e002      	b.n	80057d2 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7d9b      	ldrb	r3, [r3, #22]
 80057d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057da:	2b80      	cmp	r3, #128	@ 0x80
 80057dc:	d109      	bne.n	80057f2 <load_descriptor_values+0x28a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	61da      	str	r2, [r3, #28]
 80057f0:	e003      	b.n	80057fa <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7d9b      	ldrb	r3, [r3, #22]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	2b08      	cmp	r3, #8
 8005804:	d005      	beq.n	8005812 <load_descriptor_values+0x2aa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7d9b      	ldrb	r3, [r3, #22]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	2b09      	cmp	r3, #9
 8005810:	d10a      	bne.n	8005828 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	89db      	ldrh	r3, [r3, #14]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24
 8005826:	e002      	b.n	800582e <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 800582e:	2301      	movs	r3, #1
}
 8005830:	4618      	mov	r0, r3
 8005832:	373c      	adds	r7, #60	@ 0x3c
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
    iter->index++;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	891b      	ldrh	r3, [r3, #8]
 8005848:	3301      	adds	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	891a      	ldrh	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	8a1b      	ldrh	r3, [r3, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	d30c      	bcc.n	8005878 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8005876:	e03b      	b.n	80058f0 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	895b      	ldrh	r3, [r3, #10]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2201      	movs	r2, #1
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	895a      	ldrh	r2, [r3, #10]
 80058a2:	893b      	ldrh	r3, [r7, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	899b      	ldrh	r3, [r3, #12]
 80058b0:	7afa      	ldrb	r2, [r7, #11]
 80058b2:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	bf0c      	ite	eq
 80058ba:	2201      	moveq	r2, #1
 80058bc:	2200      	movne	r2, #0
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	4413      	add	r3, r2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	89da      	ldrh	r2, [r3, #14]
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d004      	beq.n	80058e0 <advance_iterator+0xa4>
 80058d6:	7afb      	ldrb	r3, [r7, #11]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d101      	bne.n	80058e4 <advance_iterator+0xa8>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <advance_iterator+0xaa>
 80058e4:	2300      	movs	r3, #0
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	81da      	strh	r2, [r3, #14]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8005908:	2228      	movs	r2, #40	@ 0x28
 800590a:	2100      	movs	r1, #0
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f008 fd67 	bl	800e3e0 <memset>

    iter->descriptor = desc;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff fe22 	bl	8005568 <load_descriptor_values>
 8005924:	4603      	mov	r3, r0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005950:	2b80      	cmp	r3, #128	@ 0x80
 8005952:	d109      	bne.n	8005968 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	461a      	mov	r2, r3
 800595a:	6939      	ldr	r1, [r7, #16]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ffcd 	bl	80058fc <pb_field_iter_begin>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
 8005966:	e008      	b.n	800597a <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	461a      	mov	r2, r3
 800596e:	6939      	ldr	r1, [r7, #16]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ffc3 	bl	80058fc <pb_field_iter_begin>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f103 020c 	add.w	r2, r3, #12
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	621a      	str	r2, [r3, #32]
    return status;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff50 	bl	800583c <advance_iterator>
    (void)load_descriptor_values(iter);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fde3 	bl	8005568 <load_descriptor_values>
    return iter->index != 0;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	891b      	ldrh	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8a1b      	ldrh	r3, [r3, #16]
 80059c6:	461a      	mov	r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80059ce:	2301      	movs	r3, #1
 80059d0:	e044      	b.n	8005a5c <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	8a9b      	ldrh	r3, [r3, #20]
 80059d8:	461a      	mov	r2, r3
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <pb_field_iter_find+0x2c>
    {
        return false;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e03b      	b.n	8005a5c <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	891b      	ldrh	r3, [r3, #8]
 80059e8:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8a1b      	ldrh	r3, [r3, #16]
 80059ee:	461a      	mov	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d204      	bcs.n	8005a00 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	8a1a      	ldrh	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff1b 	bl	800583c <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	895b      	ldrh	r3, [r3, #10]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	089a      	lsrs	r2, r3, #2
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	4053      	eors	r3, r2
 8005a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d110      	bne.n	8005a4a <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff fd9d 	bl	8005568 <load_descriptor_values>

                if (iter->tag == tag &&
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8a1b      	ldrh	r3, [r3, #16]
 8005a32:	461a      	mov	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d107      	bne.n	8005a4a <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7d9b      	ldrb	r3, [r3, #22]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8005a42:	2b0a      	cmp	r3, #10
 8005a44:	d001      	beq.n	8005a4a <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e008      	b.n	8005a5c <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	891b      	ldrh	r3, [r3, #8]
 8005a4e:	89fa      	ldrh	r2, [r7, #14]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1d5      	bne.n	8005a00 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fd87 	bl	8005568 <load_descriptor_values>
        return false;
 8005a5a:	2300      	movs	r3, #0
    }
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	7d9b      	ldrb	r3, [r3, #22]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	2b0a      	cmp	r3, #10
 8005a76:	d101      	bne.n	8005a7c <pb_field_iter_find_extension+0x18>
    {
        return true;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e022      	b.n	8005ac2 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	891b      	ldrh	r3, [r3, #8]
 8005a80:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff feda 	bl	800583c <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	895b      	ldrh	r3, [r3, #10]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	2b0a      	cmp	r3, #10
 8005aa4:	d104      	bne.n	8005ab0 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fd5e 	bl	8005568 <load_descriptor_values>
 8005aac:	4603      	mov	r3, r0
 8005aae:	e008      	b.n	8005ac2 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	89fa      	ldrh	r2, [r7, #14]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d1e3      	bne.n	8005a82 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fd54 	bl	8005568 <load_descriptor_values>
        return false;
 8005ac0:	2300      	movs	r3, #0
    }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ffea 	bl	8005aca <pb_const_cast>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fefd 	bl	80058fc <pb_field_iter_begin>
 8005b02:	4603      	mov	r3, r0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8005b16:	6838      	ldr	r0, [r7, #0]
 8005b18:	f7ff ffd7 	bl	8005aca <pb_const_cast>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ff04 	bl	800592e <pb_field_iter_begin_extension>
 8005b26:	4603      	mov	r3, r0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8a5b      	ldrh	r3, [r3, #18]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d125      	bne.n	8005b90 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <pb_default_field_callback+0x40>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	3204      	adds	r2, #4
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	e010      	b.n	8005b92 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <pb_default_field_callback+0x60>
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	3204      	adds	r2, #4
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	4798      	blx	r3
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	e000      	b.n	8005b92 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8005b90:	2301      	movs	r3, #1

}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6979      	ldr	r1, [r7, #20]
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f008 fcdb 	bl	800e57e <memcpy>
    }
    
    return true;
 8005bc8:	2301      	movs	r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <pb_read+0x16>
        return true;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e05f      	b.n	8005caa <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d123      	bne.n	8005c38 <pb_read+0x64>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb4 <pb_read+0xe0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01e      	beq.n	8005c38 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8005bfa:	e011      	b.n	8005c20 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8005bfc:	f107 0310 	add.w	r3, r7, #16
 8005c00:	2210      	movs	r2, #16
 8005c02:	4619      	mov	r1, r3
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ffe5 	bl	8005bd4 <pb_read>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f083 0301 	eor.w	r3, r3, #1
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <pb_read+0x46>
				return false;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e047      	b.n	8005caa <pb_read+0xd6>
			
			count -= 16;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3b10      	subs	r3, #16
 8005c1e:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d8ea      	bhi.n	8005bfc <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8005c26:	f107 0310 	add.w	r3, r7, #16
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ffd0 	bl	8005bd4 <pb_read>
 8005c34:	4603      	mov	r3, r0
 8005c36:	e038      	b.n	8005caa <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d90b      	bls.n	8005c5a <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <pb_read+0x7c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	e000      	b.n	8005c52 <pb_read+0x7e>
 8005c50:	4b19      	ldr	r3, [pc, #100]	@ (8005cb8 <pb_read+0xe4>)
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	60d3      	str	r3, [r2, #12]
 8005c56:	2300      	movs	r3, #0
 8005c58:	e027      	b.n	8005caa <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	f083 0301 	eor.w	r3, r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <pb_read+0xac>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	e000      	b.n	8005c82 <pb_read+0xae>
 8005c80:	4b0e      	ldr	r3, [pc, #56]	@ (8005cbc <pb_read+0xe8>)
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	60d3      	str	r3, [r2, #12]
 8005c86:	2300      	movs	r3, #0
 8005c88:	e00f      	b.n	8005caa <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d903      	bls.n	8005c9c <pb_read+0xc8>
        stream->bytes_left = 0;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	e005      	b.n	8005ca8 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	609a      	str	r2, [r3, #8]

    return true;
 8005ca8:	2301      	movs	r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08005b9b 	.word	0x08005b9b
 8005cb8:	0800f364 	.word	0x0800f364
 8005cbc:	0800f374 	.word	0x0800f374

08005cc0 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <pb_readbyte+0x20>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	e000      	b.n	8005ce2 <pb_readbyte+0x22>
 8005ce0:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <pb_readbyte+0x70>)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	60d3      	str	r3, [r2, #12]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e01d      	b.n	8005d26 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f083 0301 	eor.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <pb_readbyte+0x50>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	e000      	b.n	8005d12 <pb_readbyte+0x52>
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <pb_readbyte+0x74>)
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	60d3      	str	r3, [r2, #12]
 8005d16:	2300      	movs	r3, #0
 8005d18:	e005      	b.n	8005d26 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	609a      	str	r2, [r3, #8]
    
    return true;    
 8005d24:	2301      	movs	r3, #1
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	0800f364 	.word	0x0800f364
 8005d34:	0800f374 	.word	0x0800f374

08005d38 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8005d38:	b490      	push	{r4, r7}
 8005d3a:	b08a      	sub	sp, #40	@ 0x28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <pb_istream_from_buffer+0x38>)
 8005d46:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	461c      	mov	r4, r3
 8005d5c:	f107 0318 	add.w	r3, r7, #24
 8005d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	3728      	adds	r7, #40	@ 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc90      	pop	{r4, r7}
 8005d6e:	4770      	bx	lr
 8005d70:	08005b9b 	.word	0x08005b9b

08005d74 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8005d80:	f107 0315 	add.w	r3, r7, #21
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff ff9a 	bl	8005cc0 <pb_readbyte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e084      	b.n	8005eba <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8005db0:	7d7b      	ldrb	r3, [r7, #21]
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db02      	blt.n	8005dbe <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8005db8:	7d7b      	ldrb	r3, [r7, #21]
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e079      	b.n	8005eb2 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8005dbe:	2307      	movs	r3, #7
 8005dc0:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8005dc2:	7d7b      	ldrb	r3, [r7, #21]
 8005dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc8:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8005dca:	f107 0315 	add.w	r3, r7, #21
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ff75 	bl	8005cc0 <pb_readbyte>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f083 0301 	eor.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <pb_decode_varint32_eof+0x72>
                return false;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e069      	b.n	8005eba <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b1f      	cmp	r3, #31
 8005dea:	d92f      	bls.n	8005e4c <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b3e      	cmp	r3, #62	@ 0x3e
 8005df0:	d801      	bhi.n	8005df6 <pb_decode_varint32_eof+0x82>
 8005df2:	23ff      	movs	r3, #255	@ 0xff
 8005df4:	e000      	b.n	8005df8 <pb_decode_varint32_eof+0x84>
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005dfa:	7d7b      	ldrb	r3, [r7, #21]
 8005dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005e04:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da05      	bge.n	8005e16 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005e0a:	7d7b      	ldrb	r3, [r7, #21]
 8005e0c:	7dfa      	ldrb	r2, [r7, #23]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d101      	bne.n	8005e16 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <pb_decode_varint32_eof+0xa4>
 8005e16:	2300      	movs	r3, #0
 8005e18:	75bb      	strb	r3, [r7, #22]
 8005e1a:	7dbb      	ldrb	r3, [r7, #22]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e26:	d805      	bhi.n	8005e34 <pb_decode_varint32_eof+0xc0>
 8005e28:	7dbb      	ldrb	r3, [r7, #22]
 8005e2a:	f083 0301 	eor.w	r3, r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d037      	beq.n	8005ea4 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <pb_decode_varint32_eof+0xce>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	e000      	b.n	8005e44 <pb_decode_varint32_eof+0xd0>
 8005e42:	4b20      	ldr	r3, [pc, #128]	@ (8005ec4 <pb_decode_varint32_eof+0x150>)
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	60d3      	str	r3, [r2, #12]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e036      	b.n	8005eba <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b1c      	cmp	r3, #28
 8005e50:	d11f      	bne.n	8005e92 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8005e52:	7d7b      	ldrb	r3, [r7, #21]
 8005e54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <pb_decode_varint32_eof+0x10a>
 8005e5c:	7d7b      	ldrb	r3, [r7, #21]
 8005e5e:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8005e62:	2b78      	cmp	r3, #120	@ 0x78
 8005e64:	d00b      	beq.n	8005e7e <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <pb_decode_varint32_eof+0x100>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	e000      	b.n	8005e76 <pb_decode_varint32_eof+0x102>
 8005e74:	4b13      	ldr	r3, [pc, #76]	@ (8005ec4 <pb_decode_varint32_eof+0x150>)
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	60d3      	str	r3, [r2, #12]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e01d      	b.n	8005eba <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8005e7e:	7d7b      	ldrb	r3, [r7, #21]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e008      	b.n	8005ea4 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8005e92:	7d7b      	ldrb	r3, [r7, #21]
 8005e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8005eaa:	7d7b      	ldrb	r3, [r7, #21]
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	db8b      	blt.n	8005dca <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	601a      	str	r2, [r3, #0]
   return true;
 8005eb8:	2301      	movs	r3, #1
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	0800f380 	.word	0x0800f380

08005ec8 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff4c 	bl	8005d74 <pb_decode_varint32_eof>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8005ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eec:	b08a      	sub	sp, #40	@ 0x28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8005f04:	f107 0317 	add.w	r3, r7, #23
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff fed8 	bl	8005cc0 <pb_readbyte>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f083 0301 	eor.w	r3, r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <pb_decode_varint+0x38>
            return false;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e041      	b.n	8005fa4 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f24:	d910      	bls.n	8005f48 <pb_decode_varint+0x60>
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <pb_decode_varint+0x56>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	e000      	b.n	8005f40 <pb_decode_varint+0x58>
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <pb_decode_varint+0xc8>)
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	60d3      	str	r3, [r2, #12]
 8005f44:	2300      	movs	r3, #0
 8005f46:	e02d      	b.n	8005fa4 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8005f58:	f04f 0900 	mov.w	r9, #0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	f1a3 0120 	sub.w	r1, r3, #32
 8005f62:	f1c3 0220 	rsb	r2, r3, #32
 8005f66:	fa09 f503 	lsl.w	r5, r9, r3
 8005f6a:	fa08 f101 	lsl.w	r1, r8, r1
 8005f6e:	430d      	orrs	r5, r1
 8005f70:	fa28 f202 	lsr.w	r2, r8, r2
 8005f74:	4315      	orrs	r5, r2
 8005f76:	fa08 f403 	lsl.w	r4, r8, r3
 8005f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7e:	ea42 0a04 	orr.w	sl, r2, r4
 8005f82:	ea43 0b05 	orr.w	fp, r3, r5
 8005f86:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	b25b      	sxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dbb5      	blt.n	8005f04 <pb_decode_varint+0x1c>
    
    *dest = result;
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9e:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8005fa2:	2301      	movs	r3, #1
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3728      	adds	r7, #40	@ 0x28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fae:	bf00      	nop
 8005fb0:	0800f380 	.word	0x0800f380

08005fb4 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8005fbc:	f107 030f 	add.w	r3, r7, #15
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fe05 	bl	8005bd4 <pb_read>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f083 0301 	eor.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <pb_skip_varint+0x26>
            return false;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e004      	b.n	8005fe4 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dbec      	blt.n	8005fbc <pb_skip_varint+0x8>
    return true;
 8005fe2:	2301      	movs	r3, #1
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff64 	bl	8005ec8 <pb_decode_varint32>
 8006000:	4603      	mov	r3, r0
 8006002:	f083 0301 	eor.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <pb_skip_string+0x24>
        return false;
 800600c:	2300      	movs	r3, #0
 800600e:	e006      	b.n	800601e <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	2100      	movs	r1, #0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fddc 	bl	8005bd4 <pb_read>
 800601c:	4603      	mov	r3, r0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8006046:	f107 0314 	add.w	r3, r7, #20
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4619      	mov	r1, r3
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fe90 	bl	8005d74 <pb_decode_varint32_eof>
 8006054:	4603      	mov	r3, r0
 8006056:	f083 0301 	eor.w	r3, r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <pb_decode_tag+0x3e>
    {
        return false;
 8006060:	2300      	movs	r3, #0
 8006062:	e00b      	b.n	800607c <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	08da      	lsrs	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	701a      	strb	r2, [r3, #0]
    return true;
 800607a:	2301      	movs	r3, #1
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d826      	bhi.n	80060e4 <pb_skip_field+0x60>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <pb_skip_field+0x18>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bf 	.word	0x080060bf
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060d7 	.word	0x080060d7
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff7d 	bl	8005fb4 <pb_skip_varint>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e01d      	b.n	80060fa <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80060be:	2208      	movs	r2, #8
 80060c0:	2100      	movs	r1, #0
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fd86 	bl	8005bd4 <pb_read>
 80060c8:	4603      	mov	r3, r0
 80060ca:	e016      	b.n	80060fa <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff8d 	bl	8005fec <pb_skip_string>
 80060d2:	4603      	mov	r3, r0
 80060d4:	e011      	b.n	80060fa <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80060d6:	2204      	movs	r2, #4
 80060d8:	2100      	movs	r1, #0
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fd7a 	bl	8005bd4 <pb_read>
 80060e0:	4603      	mov	r3, r0
 80060e2:	e00a      	b.n	80060fa <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <pb_skip_field+0x6e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	e000      	b.n	80060f4 <pb_skip_field+0x70>
 80060f2:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <pb_skip_field+0x80>)
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	60d3      	str	r3, [r2, #12]
 80060f8:	2300      	movs	r3, #0
    }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	0800f390 	.word	0x0800f390

08006108 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	460b      	mov	r3, r1
 8006116:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	2b05      	cmp	r3, #5
 8006122:	d03f      	beq.n	80061a4 <read_raw_value+0x9c>
 8006124:	2b05      	cmp	r3, #5
 8006126:	dc47      	bgt.n	80061b8 <read_raw_value+0xb0>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <read_raw_value+0x2a>
 800612c:	2b01      	cmp	r3, #1
 800612e:	d02f      	beq.n	8006190 <read_raw_value+0x88>
 8006130:	e042      	b.n	80061b8 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	429a      	cmp	r2, r3
 800614a:	d20b      	bcs.n	8006164 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <read_raw_value+0x52>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	e000      	b.n	800615c <read_raw_value+0x54>
 800615a:	4b1f      	ldr	r3, [pc, #124]	@ (80061d8 <read_raw_value+0xd0>)
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	60d3      	str	r3, [r2, #12]
 8006160:	2300      	movs	r3, #0
 8006162:	e034      	b.n	80061ce <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8006164:	2201      	movs	r2, #1
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fd33 	bl	8005bd4 <pb_read>
 800616e:	4603      	mov	r3, r0
 8006170:	f083 0301 	eor.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <read_raw_value+0x76>
                    return false;
 800617a:	2300      	movs	r3, #0
 800617c:	e027      	b.n	80061ce <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b25b      	sxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	dbd5      	blt.n	8006138 <read_raw_value+0x30>
            return true;
 800618c:	2301      	movs	r3, #1
 800618e:	e01e      	b.n	80061ce <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2208      	movs	r2, #8
 8006194:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8006196:	2208      	movs	r2, #8
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fd1a 	bl	8005bd4 <pb_read>
 80061a0:	4603      	mov	r3, r0
 80061a2:	e014      	b.n	80061ce <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2204      	movs	r2, #4
 80061a8:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80061aa:	2204      	movs	r2, #4
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fd10 	bl	8005bd4 <pb_read>
 80061b4:	4603      	mov	r3, r0
 80061b6:	e00a      	b.n	80061ce <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <read_raw_value+0xbe>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	e000      	b.n	80061c8 <read_raw_value+0xc0>
 80061c6:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <read_raw_value+0xd4>)
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	60d3      	str	r3, [r2, #12]
 80061cc:	2300      	movs	r3, #0
    }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	0800f380 	.word	0x0800f380
 80061dc:	0800f390 	.word	0x0800f390

080061e0 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff fe69 	bl	8005ec8 <pb_decode_varint32>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f083 0301 	eor.w	r3, r3, #1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <pb_make_string_substream+0x26>
        return false;
 8006202:	2300      	movs	r3, #0
 8006204:	e020      	b.n	8006248 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4614      	mov	r4, r2
 800620c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800620e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d20b      	bcs.n	8006234 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <pb_make_string_substream+0x4a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	e000      	b.n	800622c <pb_make_string_substream+0x4c>
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <pb_make_string_substream+0x70>)
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	60d3      	str	r3, [r2, #12]
 8006230:	2300      	movs	r3, #0
 8006232:	e009      	b.n	8006248 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]
    return true;
 8006246:	2301      	movs	r3, #1
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	bd90      	pop	{r4, r7, pc}
 8006250:	0800f3a4 	.word	0x0800f3a4

08006254 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	461a      	mov	r2, r3
 800626c:	2100      	movs	r1, #0
 800626e:	6838      	ldr	r0, [r7, #0]
 8006270:	f7ff fcb0 	bl	8005bd4 <pb_read>
 8006274:	4603      	mov	r3, r0
 8006276:	f083 0301 	eor.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <pb_close_string_substream+0x30>
            return false;
 8006280:	2300      	movs	r3, #0
 8006282:	e008      	b.n	8006296 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8006294:	2301      	movs	r3, #1
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	460b      	mov	r3, r1
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7d9b      	ldrb	r3, [r3, #22]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	2b0b      	cmp	r3, #11
 80062b8:	f200 80d4 	bhi.w	8006464 <decode_basic_field+0x1c4>
 80062bc:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <decode_basic_field+0x24>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	08006325 	.word	0x08006325
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006325 	.word	0x08006325
 80062d4:	08006355 	.word	0x08006355
 80062d8:	08006389 	.word	0x08006389
 80062dc:	080063bd 	.word	0x080063bd
 80062e0:	080063e7 	.word	0x080063e7
 80062e4:	08006411 	.word	0x08006411
 80062e8:	08006411 	.word	0x08006411
 80062ec:	08006465 	.word	0x08006465
 80062f0:	0800643b 	.word	0x0800643b
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <decode_basic_field+0x78>
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	2bff      	cmp	r3, #255	@ 0xff
 80062fe:	d00b      	beq.n	8006318 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <decode_basic_field+0x6e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	e000      	b.n	8006310 <decode_basic_field+0x70>
 800630e:	4b5d      	ldr	r3, [pc, #372]	@ (8006484 <decode_basic_field+0x1e4>)
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	60d3      	str	r3, [r2, #12]
 8006314:	2300      	movs	r3, #0
 8006316:	e0b0      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fef6 	bl	800710c <pb_dec_bool>
 8006320:	4603      	mov	r3, r0
 8006322:	e0aa      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <decode_basic_field+0xa8>
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	2bff      	cmp	r3, #255	@ 0xff
 800632e:	d00b      	beq.n	8006348 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <decode_basic_field+0x9e>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	e000      	b.n	8006340 <decode_basic_field+0xa0>
 800633e:	4b51      	ldr	r3, [pc, #324]	@ (8006484 <decode_basic_field+0x1e4>)
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	60d3      	str	r3, [r2, #12]
 8006344:	2300      	movs	r3, #0
 8006346:	e098      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 feee 	bl	800712c <pb_dec_varint>
 8006350:	4603      	mov	r3, r0
 8006352:	e092      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8006354:	7afb      	ldrb	r3, [r7, #11]
 8006356:	2b05      	cmp	r3, #5
 8006358:	d00e      	beq.n	8006378 <decode_basic_field+0xd8>
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	2bff      	cmp	r3, #255	@ 0xff
 800635e:	d00b      	beq.n	8006378 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <decode_basic_field+0xce>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	e000      	b.n	8006370 <decode_basic_field+0xd0>
 800636e:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <decode_basic_field+0x1e4>)
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	60d3      	str	r3, [r2, #12]
 8006374:	2300      	movs	r3, #0
 8006376:	e080      	b.n	800647a <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	4619      	mov	r1, r3
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fe8a 	bl	8007098 <pb_decode_fixed32>
 8006384:	4603      	mov	r3, r0
 8006386:	e078      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8006388:	7afb      	ldrb	r3, [r7, #11]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d00e      	beq.n	80063ac <decode_basic_field+0x10c>
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	2bff      	cmp	r3, #255	@ 0xff
 8006392:	d00b      	beq.n	80063ac <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <decode_basic_field+0x102>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	e000      	b.n	80063a4 <decode_basic_field+0x104>
 80063a2:	4b38      	ldr	r3, [pc, #224]	@ (8006484 <decode_basic_field+0x1e4>)
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	60d3      	str	r3, [r2, #12]
 80063a8:	2300      	movs	r3, #0
 80063aa:	e066      	b.n	800647a <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4619      	mov	r1, r3
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fe8c 	bl	80070d0 <pb_decode_fixed64>
 80063b8:	4603      	mov	r3, r0
 80063ba:	e05e      	b.n	800647a <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80063bc:	7afb      	ldrb	r3, [r7, #11]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d00b      	beq.n	80063da <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <decode_basic_field+0x130>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	e000      	b.n	80063d2 <decode_basic_field+0x132>
 80063d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006484 <decode_basic_field+0x1e4>)
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	60d3      	str	r3, [r2, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	e04f      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 ffd1 	bl	8007384 <pb_dec_bytes>
 80063e2:	4603      	mov	r3, r0
 80063e4:	e049      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d00b      	beq.n	8006404 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <decode_basic_field+0x15a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	e000      	b.n	80063fc <decode_basic_field+0x15c>
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <decode_basic_field+0x1e4>)
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	60d3      	str	r3, [r2, #12]
 8006400:	2300      	movs	r3, #0
 8006402:	e03a      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f001 f830 	bl	800746c <pb_dec_string>
 800640c:	4603      	mov	r3, r0
 800640e:	e034      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d00b      	beq.n	800642e <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <decode_basic_field+0x184>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	e000      	b.n	8006426 <decode_basic_field+0x186>
 8006424:	4b17      	ldr	r3, [pc, #92]	@ (8006484 <decode_basic_field+0x1e4>)
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	60d3      	str	r3, [r2, #12]
 800642a:	2300      	movs	r3, #0
 800642c:	e025      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 f897 	bl	8007564 <pb_dec_submessage>
 8006436:	4603      	mov	r3, r0
 8006438:	e01f      	b.n	800647a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d00b      	beq.n	8006458 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <decode_basic_field+0x1ae>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	e000      	b.n	8006450 <decode_basic_field+0x1b0>
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <decode_basic_field+0x1e4>)
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	60d3      	str	r3, [r2, #12]
 8006454:	2300      	movs	r3, #0
 8006456:	e010      	b.n	800647a <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 f90c 	bl	8007678 <pb_dec_fixed_length_bytes>
 8006460:	4603      	mov	r3, r0
 8006462:	e00a      	b.n	800647a <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <decode_basic_field+0x1d2>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	e000      	b.n	8006474 <decode_basic_field+0x1d4>
 8006472:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <decode_basic_field+0x1e8>)
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	60d3      	str	r3, [r2, #12]
 8006478:	2300      	movs	r3, #0
    }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	0800f3bc 	.word	0x0800f3bc
 8006488:	0800f3cc 	.word	0x0800f3cc

0800648c <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b096      	sub	sp, #88	@ 0x58
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	460b      	mov	r3, r1
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7d9b      	ldrb	r3, [r3, #22]
 800649e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064a2:	2b30      	cmp	r3, #48	@ 0x30
 80064a4:	f000 80c2 	beq.w	800662c <decode_static_field+0x1a0>
 80064a8:	2b30      	cmp	r3, #48	@ 0x30
 80064aa:	f200 811a 	bhi.w	80066e2 <decode_static_field+0x256>
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d01f      	beq.n	80064f2 <decode_static_field+0x66>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	f200 8115 	bhi.w	80066e2 <decode_static_field+0x256>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <decode_static_field+0x36>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d008      	beq.n	80064d2 <decode_static_field+0x46>
 80064c0:	e10f      	b.n	80066e2 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4619      	mov	r1, r3
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff fee9 	bl	80062a0 <decode_basic_field>
 80064ce:	4603      	mov	r3, r0
 80064d0:	e112      	b.n	80066f8 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fed9 	bl	80062a0 <decode_basic_field>
 80064ee:	4603      	mov	r3, r0
 80064f0:	e102      	b.n	80066f8 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d16c      	bne.n	80065d2 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7d9b      	ldrb	r3, [r3, #22]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2b05      	cmp	r3, #5
 8006502:	d866      	bhi.n	80065d2 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	8a52      	ldrh	r2, [r2, #18]
 8006518:	4611      	mov	r1, r2
 800651a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800651c:	8812      	ldrh	r2, [r2, #0]
 800651e:	fb01 f202 	mul.w	r2, r1, r2
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8006528:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fe56 	bl	80061e0 <pb_make_string_substream>
 8006534:	4603      	mov	r3, r0
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01f      	beq.n	8006580 <decode_static_field+0xf4>
                    return false;
 8006540:	2300      	movs	r3, #0
 8006542:	e0d9      	b.n	80066f8 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8006544:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	21ff      	movs	r1, #255	@ 0xff
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fea7 	bl	80062a0 <decode_basic_field>
 8006552:	4603      	mov	r3, r0
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <decode_static_field+0xda>
                    {
                        status = false;
 800655e:	2300      	movs	r3, #0
 8006560:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8006564:	e015      	b.n	8006592 <decode_static_field+0x106>
                    }
                    (*size)++;
 8006566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	3301      	adds	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006570:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	8a52      	ldrh	r2, [r2, #18]
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8006580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <decode_static_field+0x106>
 8006586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006588:	881a      	ldrh	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8a9b      	ldrh	r3, [r3, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d3d8      	bcc.n	8006544 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8006592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <decode_static_field+0x11a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	e000      	b.n	80065a8 <decode_static_field+0x11c>
 80065a6:	4b56      	ldr	r3, [pc, #344]	@ (8006700 <decode_static_field+0x274>)
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	60d3      	str	r3, [r2, #12]
 80065ac:	2300      	movs	r3, #0
 80065ae:	e0a3      	b.n	80066f8 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80065b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80065b4:	4619      	mov	r1, r3
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fe4c 	bl	8006254 <pb_close_string_substream>
 80065bc:	4603      	mov	r3, r0
 80065be:	f083 0301 	eor.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <decode_static_field+0x140>
                    return false;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e095      	b.n	80066f8 <decode_static_field+0x26c>

                return status;
 80065cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065d0:	e092      	b.n	80066f8 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	8a52      	ldrh	r2, [r2, #18]
 80065e0:	4611      	mov	r1, r2
 80065e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	fb01 f202 	mul.w	r2, r1, r2
 80065ea:	441a      	add	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80065f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	b291      	uxth	r1, r2
 80065f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065fa:	8011      	strh	r1, [r2, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	8a92      	ldrh	r2, [r2, #20]
 8006600:	4293      	cmp	r3, r2
 8006602:	d30b      	bcc.n	800661c <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <decode_static_field+0x186>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	e000      	b.n	8006614 <decode_static_field+0x188>
 8006612:	4b3b      	ldr	r3, [pc, #236]	@ (8006700 <decode_static_field+0x274>)
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	60d3      	str	r3, [r2, #12]
 8006618:	2300      	movs	r3, #0
 800661a:	e06d      	b.n	80066f8 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4619      	mov	r1, r3
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fe3c 	bl	80062a0 <decode_basic_field>
 8006628:	4603      	mov	r3, r0
 800662a:	e065      	b.n	80066f8 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7d9b      	ldrb	r3, [r3, #22]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2b08      	cmp	r3, #8
 8006636:	d005      	beq.n	8006644 <decode_static_field+0x1b8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	7d9b      	ldrb	r3, [r3, #22]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2b09      	cmp	r3, #9
 8006642:	d141      	bne.n	80066c8 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800664e:	429a      	cmp	r2, r3
 8006650:	d03a      	beq.n	80066c8 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69d8      	ldr	r0, [r3, #28]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8a5b      	ldrh	r3, [r3, #18]
 800665a:	461a      	mov	r2, r3
 800665c:	2100      	movs	r1, #0
 800665e:	f007 febf 	bl	800e3e0 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8006672:	2b00      	cmp	r3, #0
 8006674:	d105      	bne.n	8006682 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d022      	beq.n	80066c8 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f934 	bl	80058fc <pb_field_iter_begin>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800669a:	f107 0314 	add.w	r3, r7, #20
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa4d 	bl	8006b3e <pb_message_set_to_defaults>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <decode_static_field+0x232>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	e000      	b.n	80066c0 <decode_static_field+0x234>
 80066be:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <decode_static_field+0x278>)
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	60d3      	str	r3, [r2, #12]
 80066c4:	2300      	movs	r3, #0
 80066c6:	e017      	b.n	80066f8 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	8a12      	ldrh	r2, [r2, #16]
 80066d0:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff fde1 	bl	80062a0 <decode_basic_field>
 80066de:	4603      	mov	r3, r0
 80066e0:	e00a      	b.n	80066f8 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <decode_static_field+0x264>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	e000      	b.n	80066f2 <decode_static_field+0x266>
 80066f0:	4b05      	ldr	r3, [pc, #20]	@ (8006708 <decode_static_field+0x27c>)
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	60d3      	str	r3, [r2, #12]
 80066f6:	2300      	movs	r3, #0
    }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3758      	adds	r7, #88	@ 0x58
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	0800f3e0 	.word	0x0800f3e0
 8006704:	0800f3f0 	.word	0x0800f3f0
 8006708:	0800f3cc 	.word	0x0800f3cc

0800670c <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	460b      	mov	r3, r1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <decode_pointer_field+0x1c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	e000      	b.n	800672a <decode_pointer_field+0x1e>
 8006728:	4b04      	ldr	r3, [pc, #16]	@ (800673c <decode_pointer_field+0x30>)
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	60d3      	str	r3, [r2, #12]
 800672e:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	0800f408 	.word	0x0800f408

08006740 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b097      	sub	sp, #92	@ 0x5c
 8006744:	af00      	add	r7, sp, #0
 8006746:	61f8      	str	r0, [r7, #28]
 8006748:	460b      	mov	r3, r1
 800674a:	617a      	str	r2, [r7, #20]
 800674c:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8006758:	7efb      	ldrb	r3, [r7, #27]
 800675a:	4619      	mov	r1, r3
 800675c:	69f8      	ldr	r0, [r7, #28]
 800675e:	f7ff fc91 	bl	8006084 <pb_skip_field>
 8006762:	4603      	mov	r3, r0
 8006764:	e070      	b.n	8006848 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8006766:	7efb      	ldrb	r3, [r7, #27]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d145      	bne.n	80067f8 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 800676c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006770:	4619      	mov	r1, r3
 8006772:	69f8      	ldr	r0, [r7, #28]
 8006774:	f7ff fd34 	bl	80061e0 <pb_make_string_substream>
 8006778:	4603      	mov	r3, r0
 800677a:	f083 0301 	eor.w	r3, r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <decode_callback_field+0x48>
            return false;
 8006784:	2300      	movs	r3, #0
 8006786:	e05f      	b.n	8006848 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8006788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	2100      	movs	r1, #0
 800679a:	4798      	blx	r3
 800679c:	4603      	mov	r3, r0
 800679e:	f083 0301 	eor.w	r3, r3, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d010      	beq.n	80067ca <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <decode_callback_field+0x76>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	e005      	b.n	80067c2 <decode_callback_field+0x82>
 80067b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <decode_callback_field+0x80>
 80067bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067be:	e000      	b.n	80067c2 <decode_callback_field+0x82>
 80067c0:	4b23      	ldr	r3, [pc, #140]	@ (8006850 <decode_callback_field+0x110>)
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	60d3      	str	r3, [r2, #12]
                return false;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e03e      	b.n	8006848 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80067ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <decode_callback_field+0x98>
 80067d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d8d7      	bhi.n	8006788 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 80067d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80067dc:	4619      	mov	r1, r3
 80067de:	69f8      	ldr	r0, [r7, #28]
 80067e0:	f7ff fd38 	bl	8006254 <pb_close_string_substream>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f083 0301 	eor.w	r3, r3, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <decode_callback_field+0xb4>
            return false;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e029      	b.n	8006848 <decode_callback_field+0x108>

        return true;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e027      	b.n	8006848 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80067f8:	230a      	movs	r3, #10
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80067fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006800:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006804:	7ef9      	ldrb	r1, [r7, #27]
 8006806:	69f8      	ldr	r0, [r7, #28]
 8006808:	f7ff fc7e 	bl	8006108 <read_raw_value>
 800680c:	4603      	mov	r3, r0
 800680e:	f083 0301 	eor.w	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <decode_callback_field+0xdc>
            return false;
 8006818:	2300      	movs	r3, #0
 800681a:	e015      	b.n	8006848 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 800681c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681e:	463b      	mov	r3, r7
 8006820:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fa87 	bl	8005d38 <pb_istream_from_buffer>
 800682a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800682e:	463b      	mov	r3, r7
 8006830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	2100      	movs	r1, #0
 8006844:	4798      	blx	r3
 8006846:	4603      	mov	r3, r0
    }
}
 8006848:	4618      	mov	r0, r3
 800684a:	375c      	adds	r7, #92	@ 0x5c
 800684c:	46bd      	mov	sp, r7
 800684e:	bd90      	pop	{r4, r7, pc}
 8006850:	0800f41c 	.word	0x0800f41c

08006854 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	460b      	mov	r3, r1
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7d9b      	ldrb	r3, [r3, #22]
 8006866:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800686a:	2b80      	cmp	r3, #128	@ 0x80
 800686c:	d00e      	beq.n	800688c <decode_field+0x38>
 800686e:	2b80      	cmp	r3, #128	@ 0x80
 8006870:	d81c      	bhi.n	80068ac <decode_field+0x58>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <decode_field+0x28>
 8006876:	2b40      	cmp	r3, #64	@ 0x40
 8006878:	d010      	beq.n	800689c <decode_field+0x48>
 800687a:	e017      	b.n	80068ac <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4619      	mov	r1, r3
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fe02 	bl	800648c <decode_static_field>
 8006888:	4603      	mov	r3, r0
 800688a:	e01a      	b.n	80068c2 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 800688c:	7afb      	ldrb	r3, [r7, #11]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4619      	mov	r1, r3
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff ff3a 	bl	800670c <decode_pointer_field>
 8006898:	4603      	mov	r3, r0
 800689a:	e012      	b.n	80068c2 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	4619      	mov	r1, r3
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff ff4c 	bl	8006740 <decode_callback_field>
 80068a8:	4603      	mov	r3, r0
 80068aa:	e00a      	b.n	80068c2 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <decode_field+0x66>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	e000      	b.n	80068bc <decode_field+0x68>
 80068ba:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <decode_field+0x78>)
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	60d3      	str	r3, [r2, #12]
 80068c0:	2300      	movs	r3, #0
    }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	0800f3cc 	.word	0x0800f3cc

080068d0 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	@ 0x38
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff f822 	bl	800592e <pb_field_iter_begin_extension>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <default_extension_decoder+0x34>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	e000      	b.n	8006906 <default_extension_decoder+0x36>
 8006904:	4b0e      	ldr	r3, [pc, #56]	@ (8006940 <default_extension_decoder+0x70>)
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	60d3      	str	r3, [r2, #12]
 800690a:	2300      	movs	r3, #0
 800690c:	e014      	b.n	8006938 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 800690e:	8c3b      	ldrh	r3, [r7, #32]
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4293      	cmp	r3, r2
 8006916:	d102      	bne.n	800691e <default_extension_decoder+0x4e>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <default_extension_decoder+0x52>
        return true;
 800691e:	2301      	movs	r3, #1
 8006920:	e00a      	b.n	8006938 <default_extension_decoder+0x68>

    extension->found = true;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2201      	movs	r2, #1
 8006926:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8006928:	f107 0210 	add.w	r2, r7, #16
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff8f 	bl	8006854 <decode_field>
 8006936:	4603      	mov	r3, r0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	@ 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	0800f42c 	.word	0x0800f42c

08006944 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800695a:	e022      	b.n	80069a2 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681c      	ldr	r4, [r3, #0]
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	47a0      	blx	r4
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]
 800697a:	e007      	b.n	800698c <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff ffa4 	bl	80068d0 <default_extension_decoder>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]

        if (!status)
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	f083 0301 	eor.w	r3, r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <decode_extension+0x58>
            return false;
 8006998:	2300      	movs	r3, #0
 800699a:	e00b      	b.n	80069b4 <decode_extension+0x70>
        
        extension = extension->next;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <decode_extension+0x6e>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d0d4      	beq.n	800695c <decode_extension+0x18>
    }
    
    return true;
 80069b2:	2301      	movs	r3, #1
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	@ 0x38
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7d9b      	ldrb	r3, [r3, #22]
 80069c8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80069cc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	2b0a      	cmp	r3, #10
 80069d6:	d124      	bne.n	8006a22 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80069e0:	e01b      	b.n	8006a1a <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe ffa0 	bl	800592e <pb_field_iter_begin_extension>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00f      	beq.n	8006a14 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	2200      	movs	r2, #0
 80069f8:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f89d 	bl	8006b3e <pb_message_set_to_defaults>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f083 0301 	eor.w	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <pb_field_set_to_default+0x58>
                    return false;
 8006a10:	2300      	movs	r3, #0
 8006a12:	e090      	b.n	8006b36 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e0      	bne.n	80069e2 <pb_field_set_to_default+0x26>
 8006a20:	e088      	b.n	8006b34 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006a22:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d166      	bne.n	8006afc <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8006a34:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d108      	bne.n	8006a52 <pb_field_set_to_default+0x96>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e012      	b.n	8006a78 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006a52:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d005      	beq.n	8006a6a <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006a5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006a66:	2b30      	cmp	r3, #48	@ 0x30
 8006a68:	d106      	bne.n	8006a78 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8006a78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d059      	beq.n	8006b34 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7d9b      	ldrb	r3, [r3, #22]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d005      	beq.n	8006a98 <pb_field_set_to_default+0xdc>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7d9b      	ldrb	r3, [r3, #22]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2b09      	cmp	r3, #9
 8006a96:	d128      	bne.n	8006aea <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d018      	beq.n	8006aea <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	f107 0308 	add.w	r3, r7, #8
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe ff19 	bl	80058fc <pb_field_iter_begin>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d030      	beq.n	8006b32 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 f832 	bl	8006b3e <pb_message_set_to_defaults>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f083 0301 	eor.w	r3, r3, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d025      	beq.n	8006b32 <pb_field_set_to_default+0x176>
                        return false;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e025      	b.n	8006b36 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69d8      	ldr	r0, [r3, #28]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8a5b      	ldrh	r3, [r3, #18]
 8006af2:	461a      	mov	r2, r3
 8006af4:	2100      	movs	r1, #0
 8006af6:	f007 fc73 	bl	800e3e0 <memset>
 8006afa:	e01b      	b.n	8006b34 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8006afc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b04:	2b80      	cmp	r3, #128	@ 0x80
 8006b06:	d115      	bne.n	8006b34 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006b10:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d005      	beq.n	8006b28 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006b24:	2b30      	cmp	r3, #48	@ 0x30
 8006b26:	d105      	bne.n	8006b34 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e000      	b.n	8006b34 <pb_field_set_to_default+0x178>
            {
 8006b32:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8006b34:	2301      	movs	r3, #1
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3738      	adds	r7, #56	@ 0x38
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8006b3e:	b590      	push	{r4, r7, lr}
 8006b40:	b08d      	sub	sp, #52	@ 0x34
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8006b46:	f107 0320 	add.w	r3, r7, #32
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	609a      	str	r2, [r3, #8]
 8006b52:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d020      	beq.n	8006ba8 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f8e0 	bl	8005d38 <pb_istream_from_buffer>
 8006b78:	f107 0420 	add.w	r4, r7, #32
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006b84:	f107 031a 	add.w	r3, r7, #26
 8006b88:	f107 021c 	add.w	r2, r7, #28
 8006b8c:	f107 011b 	add.w	r1, r7, #27
 8006b90:	f107 0020 	add.w	r0, r7, #32
 8006b94:	f7ff fa47 	bl	8006026 <pb_decode_tag>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f083 0301 	eor.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <pb_message_set_to_defaults+0x6a>
            return false;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e043      	b.n	8006c30 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8006ba8:	6978      	ldr	r0, [r7, #20]
 8006baa:	f7ff ff07 	bl	80069bc <pb_field_set_to_default>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f083 0301 	eor.w	r3, r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <pb_message_set_to_defaults+0x80>
            return false;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e038      	b.n	8006c30 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d02e      	beq.n	8006c22 <pb_message_set_to_defaults+0xe4>
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	8a1b      	ldrh	r3, [r3, #16]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d128      	bne.n	8006c22 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8006bd0:	7ef9      	ldrb	r1, [r7, #27]
 8006bd2:	f107 0320 	add.w	r3, r7, #32
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fe3b 	bl	8006854 <decode_field>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <pb_message_set_to_defaults+0xb0>
                return false;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e020      	b.n	8006c30 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006bee:	f107 031a 	add.w	r3, r7, #26
 8006bf2:	f107 021c 	add.w	r2, r7, #28
 8006bf6:	f107 011b 	add.w	r1, r7, #27
 8006bfa:	f107 0020 	add.w	r0, r7, #32
 8006bfe:	f7ff fa12 	bl	8006026 <pb_decode_tag>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f083 0301 	eor.w	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <pb_message_set_to_defaults+0xd4>
                return false;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e00e      	b.n	8006c30 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8006c22:	6978      	ldr	r0, [r7, #20]
 8006c24:	f7fe feb3 	bl	800598e <pb_field_iter_next>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1bc      	bne.n	8006ba8 <pb_message_set_to_defaults+0x6a>

    return true;
 8006c2e:	2301      	movs	r3, #1
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3734      	adds	r7, #52	@ 0x34
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd90      	pop	{r4, r7, pc}

08006c38 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b09a      	sub	sp, #104	@ 0x68
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8006c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c52:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8006c62:	2300      	movs	r3, #0
 8006c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c66:	2300      	movs	r3, #0
 8006c68:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8006c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c6e:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8006c70:	f107 0318 	add.w	r3, r7, #24
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe fe3f 	bl	80058fc <pb_field_iter_begin>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8102 	beq.w	8006e8a <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 80fc 	bne.w	8006e8a <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ff51 	bl	8006b3e <pb_message_set_to_defaults>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f083 0301 	eor.w	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80f0 	beq.w	8006e8a <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <pb_decode_inner+0x80>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	e000      	b.n	8006cba <pb_decode_inner+0x82>
 8006cb8:	4b99      	ldr	r3, [pc, #612]	@ (8006f20 <pb_decode_inner+0x2e8>)
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	60d3      	str	r3, [r2, #12]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e16d      	b.n	8006f9e <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006cc2:	f107 0312 	add.w	r3, r7, #18
 8006cc6:	f107 0214 	add.w	r2, r7, #20
 8006cca:	f107 0113 	add.w	r1, r7, #19
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff f9a9 	bl	8006026 <pb_decode_tag>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f083 0301 	eor.w	r3, r3, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <pb_decode_inner+0xb4>
        {
            if (eof)
 8006ce0:	7cbb      	ldrb	r3, [r7, #18]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 80d7 	bne.w	8006e96 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e158      	b.n	8006f9e <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d111      	bne.n	8006d16 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 80ce 	bne.w	8006e9a <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <pb_decode_inner+0xd4>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	e000      	b.n	8006d0e <pb_decode_inner+0xd6>
 8006d0c:	4b85      	ldr	r3, [pc, #532]	@ (8006f24 <pb_decode_inner+0x2ec>)
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	60d3      	str	r3, [r2, #12]
 8006d12:	2300      	movs	r3, #0
 8006d14:	e143      	b.n	8006f9e <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	f107 0318 	add.w	r3, r7, #24
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fe4a 	bl	80059b8 <pb_field_iter_find>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <pb_decode_inner+0x104>
 8006d30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	2b0a      	cmp	r3, #10
 8006d3a:	d13c      	bne.n	8006db6 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d112      	bne.n	8006d68 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8006d42:	f107 0318 	add.w	r3, r7, #24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fe8c 	bl	8005a64 <pb_field_iter_find_extension>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8006d58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d5a:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8006d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d66:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d815      	bhi.n	8006d9c <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	7cfa      	ldrb	r2, [r7, #19]
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fde1 	bl	8006944 <decode_extension>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f083 0301 	eor.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <pb_decode_inner+0x15a>
                    return false;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e105      	b.n	8006f9e <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d173      	bne.n	8006e84 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8006d9c:	7cfb      	ldrb	r3, [r7, #19]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff f96f 	bl	8006084 <pb_skip_field>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f083 0301 	eor.w	r3, r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d06a      	beq.n	8006e88 <pb_decode_inner+0x250>
                return false;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e0f3      	b.n	8006f9e <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8006db6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d12e      	bne.n	8006e20 <pb_decode_inner+0x1e8>
 8006dc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dc4:	f107 0318 	add.w	r3, r7, #24
 8006dc8:	3314      	adds	r3, #20
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d128      	bne.n	8006e20 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8006dce:	8c3b      	ldrh	r3, [r7, #32]
 8006dd0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d020      	beq.n	8006e1a <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8006dd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d011      	beq.n	8006e08 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8006de4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8006de8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d00b      	beq.n	8006e08 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <pb_decode_inner+0x1c6>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	e000      	b.n	8006e00 <pb_decode_inner+0x1c8>
 8006dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8006f28 <pb_decode_inner+0x2f0>)
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	60d3      	str	r3, [r2, #12]
 8006e04:	2300      	movs	r3, #0
 8006e06:	e0ca      	b.n	8006f9e <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8006e08:	8c3b      	ldrh	r3, [r7, #32]
 8006e0a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8006e14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006e16:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8006e1a:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8006e20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11c      	bne.n	8006e66 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8006e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e30:	d819      	bhi.n	8006e66 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2201      	movs	r2, #1
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8006e40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3368      	adds	r3, #104	@ 0x68
 8006e4a:	443b      	add	r3, r7
 8006e4c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8006e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4619      	mov	r1, r3
 8006e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	008b      	lsls	r3, r1, #2
 8006e5e:	3368      	adds	r3, #104	@ 0x68
 8006e60:	443b      	add	r3, r7
 8006e62:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8006e66:	7cfb      	ldrb	r3, [r7, #19]
 8006e68:	f107 0218 	add.w	r2, r7, #24
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff fcf0 	bl	8006854 <decode_field>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <pb_decode_inner+0x252>
            return false;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e08c      	b.n	8006f9e <pb_decode_inner+0x366>
                    continue;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <pb_decode_inner+0x252>
            continue;
 8006e88:	bf00      	nop
    while (stream->bytes_left)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f47f af17 	bne.w	8006cc2 <pb_decode_inner+0x8a>
 8006e94:	e002      	b.n	8006e9c <pb_decode_inner+0x264>
                break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <pb_decode_inner+0x264>
            break;
 8006e9a:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8006e9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d011      	beq.n	8006ecc <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8006ea8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8006eac:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d00b      	beq.n	8006ecc <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <pb_decode_inner+0x28a>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	e000      	b.n	8006ec4 <pb_decode_inner+0x28c>
 8006ec2:	4b19      	ldr	r3, [pc, #100]	@ (8006f28 <pb_decode_inner+0x2f0>)
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	60d3      	str	r3, [r2, #12]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e068      	b.n	8006f9e <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	8a5b      	ldrh	r3, [r3, #18]
 8006ed0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8006ed4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d05f      	beq.n	8006f9c <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8006edc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d902      	bls.n	8006eea <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8006ee4:	2340      	movs	r3, #64	@ 0x40
 8006ee6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006ef0:	e023      	b.n	8006f3a <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8006ef2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3368      	adds	r3, #104	@ 0x68
 8006efa:	443b      	add	r3, r7
 8006efc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006f00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d014      	beq.n	8006f30 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <pb_decode_inner+0x2dc>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	e000      	b.n	8006f16 <pb_decode_inner+0x2de>
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <pb_decode_inner+0x2f4>)
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	60d3      	str	r3, [r2, #12]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e03f      	b.n	8006f9e <pb_decode_inner+0x366>
 8006f1e:	bf00      	nop
 8006f20:	0800f3f0 	.word	0x0800f3f0
 8006f24:	0800f440 	.word	0x0800f440
 8006f28:	0800f44c 	.word	0x0800f44c
 8006f2c:	0800f470 	.word	0x0800f470
            for (i = 0; i < (req_field_count >> 5); i++)
 8006f30:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006f34:	3301      	adds	r3, #1
 8006f36:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006f3a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3d3      	bcc.n	8006ef2 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8006f4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d022      	beq.n	8006f9c <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006f56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	3368      	adds	r3, #104	@ 0x68
 8006f62:	443b      	add	r3, r7
 8006f64:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8006f68:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f1c3 0320 	rsb	r3, r3, #32
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f7e:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d00b      	beq.n	8006f9c <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <pb_decode_inner+0x35a>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	e000      	b.n	8006f94 <pb_decode_inner+0x35c>
 8006f92:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <pb_decode_inner+0x370>)
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	60d3      	str	r3, [r2, #12]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e000      	b.n	8006f9e <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8006f9c:	2301      	movs	r3, #1
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3768      	adds	r7, #104	@ 0x68
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	0800f470 	.word	0x0800f470

08006fac <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fe3a 	bl	8006c38 <pb_decode_inner>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fe ff70 	bl	8005ec8 <pb_decode_varint32>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f083 0301 	eor.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <pb_decode_bool+0x26>
        return false;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e008      	b.n	800700a <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	701a      	strb	r2, [r3, #0]
    return true;
 8007008:	2301      	movs	r3, #1
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8007012:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800701e:	f107 0308 	add.w	r3, r7, #8
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe ff5f 	bl	8005ee8 <pb_decode_varint>
 800702a:	4603      	mov	r3, r0
 800702c:	f083 0301 	eor.w	r3, r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <pb_decode_svarint+0x28>
        return false;
 8007036:	2300      	movs	r3, #0
 8007038:	e029      	b.n	800708e <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800703a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703e:	f002 0401 	and.w	r4, r2, #1
 8007042:	2500      	movs	r5, #0
 8007044:	ea54 0305 	orrs.w	r3, r4, r5
 8007048:	d013      	beq.n	8007072 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 800704a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	0842      	lsrs	r2, r0, #1
 8007058:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800705c:	084b      	lsrs	r3, r1, #1
 800705e:	ea6f 0802 	mvn.w	r8, r2
 8007062:	ea6f 0903 	mvn.w	r9, r3
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	e9c1 2300 	strd	r2, r3, [r1]
 8007070:	e00c      	b.n	800708c <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8007072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	0842      	lsrs	r2, r0, #1
 8007080:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007084:	084b      	lsrs	r3, r1, #1
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 800708c:	2301      	movs	r3, #1
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007098 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80070a2:	f107 030c 	add.w	r3, r7, #12
 80070a6:	2204      	movs	r2, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fe fd92 	bl	8005bd4 <pb_read>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f083 0301 	eor.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <pb_decode_fixed32+0x28>
        return false;
 80070bc:	2300      	movs	r3, #0
 80070be:	e003      	b.n	80070c8 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80070c6:	2301      	movs	r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80070da:	f107 0308 	add.w	r3, r7, #8
 80070de:	2208      	movs	r2, #8
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fe fd76 	bl	8005bd4 <pb_read>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f083 0301 	eor.w	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <pb_decode_fixed64+0x28>
        return false;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e005      	b.n	8007104 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80070f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8007102:	2301      	movs	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ff58 	bl	8006fd2 <pb_decode_bool>
 8007122:	4603      	mov	r3, r0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800712c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007130:	b094      	sub	sp, #80	@ 0x50
 8007132:	af00      	add	r7, sp, #0
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24
 8007136:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	7d9b      	ldrb	r3, [r3, #22]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	2b02      	cmp	r3, #2
 8007142:	d179      	bne.n	8007238 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8007144:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007148:	4619      	mov	r1, r3
 800714a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800714c:	f7fe fecc 	bl	8005ee8 <pb_decode_varint>
 8007150:	4603      	mov	r3, r0
 8007152:	f083 0301 	eor.w	r3, r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <pb_dec_varint+0x34>
            return false;
 800715c:	2300      	movs	r3, #0
 800715e:	e107      	b.n	8007370 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	8a5b      	ldrh	r3, [r3, #18]
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10a      	bne.n	800717e <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007170:	e9c1 2300 	strd	r2, r3, [r1]
 8007174:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007178:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800717c:	e046      	b.n	800720c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	8a5b      	ldrh	r3, [r3, #18]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d10e      	bne.n	80071a4 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8007186:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4602      	mov	r2, r0
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	617a      	str	r2, [r7, #20]
 800719a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800719e:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071a2:	e033      	b.n	800720c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	8a5b      	ldrh	r3, [r3, #18]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d10f      	bne.n	80071cc <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80071ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	b282      	uxth	r2, r0
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2200      	movs	r2, #0
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	60fa      	str	r2, [r7, #12]
 80071c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80071c6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071ca:	e01f      	b.n	800720c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	8a5b      	ldrh	r3, [r3, #18]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10f      	bne.n	80071f4 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80071d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	b2c2      	uxtb	r2, r0
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2200      	movs	r2, #0
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80071f2:	e00b      	b.n	800720c <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <pb_dec_varint+0xd6>
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	e000      	b.n	8007204 <pb_dec_varint+0xd8>
 8007202:	4b5e      	ldr	r3, [pc, #376]	@ (800737c <pb_dec_varint+0x250>)
 8007204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007206:	60d3      	str	r3, [r2, #12]
 8007208:	2300      	movs	r3, #0
 800720a:	e0b1      	b.n	8007370 <pb_dec_varint+0x244>

        if (clamped != value)
 800720c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007210:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007214:	4299      	cmp	r1, r3
 8007216:	bf08      	it	eq
 8007218:	4290      	cmpeq	r0, r2
 800721a:	d00b      	beq.n	8007234 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <pb_dec_varint+0xfe>
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	e000      	b.n	800722c <pb_dec_varint+0x100>
 800722a:	4b55      	ldr	r3, [pc, #340]	@ (8007380 <pb_dec_varint+0x254>)
 800722c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722e:	60d3      	str	r3, [r2, #12]
 8007230:	2300      	movs	r3, #0
 8007232:	e09d      	b.n	8007370 <pb_dec_varint+0x244>

        return true;
 8007234:	2301      	movs	r3, #1
 8007236:	e09b      	b.n	8007370 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	7d9b      	ldrb	r3, [r3, #22]
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	2b03      	cmp	r3, #3
 8007242:	d10d      	bne.n	8007260 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8007244:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007248:	4619      	mov	r1, r3
 800724a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800724c:	f7ff fee1 	bl	8007012 <pb_decode_svarint>
 8007250:	4603      	mov	r3, r0
 8007252:	f083 0301 	eor.w	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d022      	beq.n	80072a2 <pb_dec_varint+0x176>
                return false;
 800725c:	2300      	movs	r3, #0
 800725e:	e087      	b.n	8007370 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8007260:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007264:	4619      	mov	r1, r3
 8007266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007268:	f7fe fe3e 	bl	8005ee8 <pb_decode_varint>
 800726c:	4603      	mov	r3, r0
 800726e:	f083 0301 	eor.w	r3, r3, #1
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <pb_dec_varint+0x150>
                return false;
 8007278:	2300      	movs	r3, #0
 800727a:	e079      	b.n	8007370 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	8a5b      	ldrh	r3, [r3, #18]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d104      	bne.n	800728e <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8007284:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007288:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800728c:	e009      	b.n	80072a2 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800728e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007292:	4613      	mov	r3, r2
 8007294:	17da      	asrs	r2, r3, #31
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	61fa      	str	r2, [r7, #28]
 800729a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800729e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	8a5b      	ldrh	r3, [r3, #18]
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d10a      	bne.n	80072c0 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	69d9      	ldr	r1, [r3, #28]
 80072ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072b2:	e9c1 2300 	strd	r2, r3, [r1]
 80072b6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80072ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80072be:	e042      	b.n	8007346 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	8a5b      	ldrh	r3, [r3, #18]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d10c      	bne.n	80072e2 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80072c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	4602      	mov	r2, r0
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	17da      	asrs	r2, r3, #31
 80072d8:	469a      	mov	sl, r3
 80072da:	4693      	mov	fp, r2
 80072dc:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80072e0:	e031      	b.n	8007346 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	8a5b      	ldrh	r3, [r3, #18]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d10e      	bne.n	8007308 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80072ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	b202      	sxth	r2, r0
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072fa:	b21b      	sxth	r3, r3
 80072fc:	17da      	asrs	r2, r3, #31
 80072fe:	4698      	mov	r8, r3
 8007300:	4691      	mov	r9, r2
 8007302:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8007306:	e01e      	b.n	8007346 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	8a5b      	ldrh	r3, [r3, #18]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10e      	bne.n	800732e <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8007310:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	b242      	sxtb	r2, r0
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	f993 3000 	ldrsb.w	r3, [r3]
 8007320:	b25b      	sxtb	r3, r3
 8007322:	17da      	asrs	r2, r3, #31
 8007324:	461c      	mov	r4, r3
 8007326:	4615      	mov	r5, r2
 8007328:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 800732c:	e00b      	b.n	8007346 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <pb_dec_varint+0x210>
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	e000      	b.n	800733e <pb_dec_varint+0x212>
 800733c:	4b0f      	ldr	r3, [pc, #60]	@ (800737c <pb_dec_varint+0x250>)
 800733e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007340:	60d3      	str	r3, [r2, #12]
 8007342:	2300      	movs	r3, #0
 8007344:	e014      	b.n	8007370 <pb_dec_varint+0x244>

        if (clamped != svalue)
 8007346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800734a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800734e:	4299      	cmp	r1, r3
 8007350:	bf08      	it	eq
 8007352:	4290      	cmpeq	r0, r2
 8007354:	d00b      	beq.n	800736e <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <pb_dec_varint+0x238>
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	e000      	b.n	8007366 <pb_dec_varint+0x23a>
 8007364:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <pb_dec_varint+0x254>)
 8007366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007368:	60d3      	str	r3, [r2, #12]
 800736a:	2300      	movs	r3, #0
 800736c:	e000      	b.n	8007370 <pb_dec_varint+0x244>

        return true;
 800736e:	2301      	movs	r3, #1
    }
}
 8007370:	4618      	mov	r0, r3
 8007372:	3750      	adds	r7, #80	@ 0x50
 8007374:	46bd      	mov	sp, r7
 8007376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800737a:	bf00      	nop
 800737c:	0800f488 	.word	0x0800f488
 8007380:	0800f49c 	.word	0x0800f49c

08007384 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800738e:	f107 030c 	add.w	r3, r7, #12
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fe fd97 	bl	8005ec8 <pb_decode_varint32>
 800739a:	4603      	mov	r3, r0
 800739c:	f083 0301 	eor.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <pb_dec_bytes+0x26>
        return false;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e055      	b.n	8007456 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b0:	d30b      	bcc.n	80073ca <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <pb_dec_bytes+0x3c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	e000      	b.n	80073c2 <pb_dec_bytes+0x3e>
 80073c0:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <pb_dec_bytes+0xdc>)
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	60d3      	str	r3, [r2, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	e045      	b.n	8007456 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3302      	adds	r3, #2
 80073ce:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d20b      	bcs.n	80073f0 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <pb_dec_bytes+0x62>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	e000      	b.n	80073e8 <pb_dec_bytes+0x64>
 80073e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007464 <pb_dec_bytes+0xe0>)
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	60d3      	str	r3, [r2, #12]
 80073ec:	2300      	movs	r3, #0
 80073ee:	e032      	b.n	8007456 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	7d9b      	ldrb	r3, [r3, #22]
 80073f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073f8:	2b80      	cmp	r3, #128	@ 0x80
 80073fa:	d10b      	bne.n	8007414 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <pb_dec_bytes+0x86>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	e000      	b.n	800740c <pb_dec_bytes+0x88>
 800740a:	4b17      	ldr	r3, [pc, #92]	@ (8007468 <pb_dec_bytes+0xe4>)
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	60d3      	str	r3, [r2, #12]
 8007410:	2300      	movs	r3, #0
 8007412:	e020      	b.n	8007456 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	8a5b      	ldrh	r3, [r3, #18]
 8007418:	461a      	mov	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4293      	cmp	r3, r2
 800741e:	d90b      	bls.n	8007438 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <pb_dec_bytes+0xaa>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	e000      	b.n	8007430 <pb_dec_bytes+0xac>
 800742e:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <pb_dec_bytes+0xdc>)
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	60d3      	str	r3, [r2, #12]
 8007434:	2300      	movs	r3, #0
 8007436:	e00e      	b.n	8007456 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	b29a      	uxth	r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3302      	adds	r3, #2
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fe fbc0 	bl	8005bd4 <pb_read>
 8007454:	4603      	mov	r3, r0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	0800f4b0 	.word	0x0800f4b0
 8007464:	0800f4c0 	.word	0x0800f4c0
 8007468:	0800f408 	.word	0x0800f408

0800746c <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe fd20 	bl	8005ec8 <pb_decode_varint32>
 8007488:	4603      	mov	r3, r0
 800748a:	f083 0301 	eor.w	r3, r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <pb_dec_string+0x2c>
        return false;
 8007494:	2300      	movs	r3, #0
 8007496:	e05a      	b.n	800754e <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800749e:	d10b      	bne.n	80074b8 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <pb_dec_string+0x42>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	e000      	b.n	80074b0 <pb_dec_string+0x44>
 80074ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007558 <pb_dec_string+0xec>)
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	60d3      	str	r3, [r2, #12]
 80074b4:	2300      	movs	r3, #0
 80074b6:	e04a      	b.n	800754e <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d20b      	bcs.n	80074de <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <pb_dec_string+0x68>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	e000      	b.n	80074d6 <pb_dec_string+0x6a>
 80074d4:	4b20      	ldr	r3, [pc, #128]	@ (8007558 <pb_dec_string+0xec>)
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	60d3      	str	r3, [r2, #12]
 80074da:	2300      	movs	r3, #0
 80074dc:	e037      	b.n	800754e <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	7d9b      	ldrb	r3, [r3, #22]
 80074e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074e6:	2b80      	cmp	r3, #128	@ 0x80
 80074e8:	d10b      	bne.n	8007502 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <pb_dec_string+0x8c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	e000      	b.n	80074fa <pb_dec_string+0x8e>
 80074f8:	4b18      	ldr	r3, [pc, #96]	@ (800755c <pb_dec_string+0xf0>)
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	60d3      	str	r3, [r2, #12]
 80074fe:	2300      	movs	r3, #0
 8007500:	e025      	b.n	800754e <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	8a5b      	ldrh	r3, [r3, #18]
 8007506:	461a      	mov	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4293      	cmp	r3, r2
 800750c:	d90b      	bls.n	8007526 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <pb_dec_string+0xb0>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	e000      	b.n	800751e <pb_dec_string+0xb2>
 800751c:	4b10      	ldr	r3, [pc, #64]	@ (8007560 <pb_dec_string+0xf4>)
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	60d3      	str	r3, [r2, #12]
 8007522:	2300      	movs	r3, #0
 8007524:	e013      	b.n	800754e <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4413      	add	r3, r2
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	461a      	mov	r2, r3
 8007534:	6979      	ldr	r1, [r7, #20]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fe fb4c 	bl	8005bd4 <pb_read>
 800753c:	4603      	mov	r3, r0
 800753e:	f083 0301 	eor.w	r3, r3, #1
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <pb_dec_string+0xe0>
        return false;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 800754c:	2301      	movs	r3, #1
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	0800f4c0 	.word	0x0800f4c0
 800755c:	0800f408 	.word	0x0800f408
 8007560:	0800f4d0 	.word	0x0800f4d0

08007564 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	@ 0x28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
    bool status = true;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800757a:	f107 030c 	add.w	r3, r7, #12
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7fe fe2d 	bl	80061e0 <pb_make_string_substream>
 8007586:	4603      	mov	r3, r0
 8007588:	f083 0301 	eor.w	r3, r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <pb_dec_submessage+0x32>
        return false;
 8007592:	2300      	movs	r3, #0
 8007594:	e069      	b.n	800766a <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <pb_dec_submessage+0x48>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	e000      	b.n	80075ae <pb_dec_submessage+0x4a>
 80075ac:	4b31      	ldr	r3, [pc, #196]	@ (8007674 <pb_dec_submessage+0x110>)
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	60d3      	str	r3, [r2, #12]
 80075b2:	2300      	movs	r3, #0
 80075b4:	e059      	b.n	800766a <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	7d9b      	ldrb	r3, [r3, #22]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	2b09      	cmp	r3, #9
 80075c0:	d11c      	bne.n	80075fc <pb_dec_submessage+0x98>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	3b08      	subs	r3, #8
 80075d0:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d010      	beq.n	80075fc <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	3204      	adds	r2, #4
 80075e2:	f107 000c 	add.w	r0, r7, #12
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80075fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007600:	2b00      	cmp	r3, #0
 8007602:	d022      	beq.n	800764a <pb_dec_submessage+0xe6>
 8007604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007608:	f083 0301 	eor.w	r3, r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01b      	beq.n	800764a <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	7d9b      	ldrb	r3, [r3, #22]
 800761a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	7d9b      	ldrb	r3, [r3, #22]
 8007626:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800762a:	2b20      	cmp	r3, #32
 800762c:	d001      	beq.n	8007632 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 800762e:	2301      	movs	r3, #1
 8007630:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	f107 000c 	add.w	r0, r7, #12
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	f7ff fafa 	bl	8006c38 <pb_decode_inner>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fe fdff 	bl	8006254 <pb_close_string_substream>
 8007656:	4603      	mov	r3, r0
 8007658:	f083 0301 	eor.w	r3, r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <pb_dec_submessage+0x102>
        return false;
 8007662:	2300      	movs	r3, #0
 8007664:	e001      	b.n	800766a <pb_dec_submessage+0x106>

    return status;
 8007666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	@ 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	0800f4e0 	.word	0x0800f4e0

08007678 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8007682:	f107 030c 	add.w	r3, r7, #12
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fe fc1d 	bl	8005ec8 <pb_decode_varint32>
 800768e:	4603      	mov	r3, r0
 8007690:	f083 0301 	eor.w	r3, r3, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <pb_dec_fixed_length_bytes+0x26>
        return false;
 800769a:	2300      	movs	r3, #0
 800769c:	e037      	b.n	800770e <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d30b      	bcc.n	80076be <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <pb_dec_fixed_length_bytes+0x3c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	e000      	b.n	80076b6 <pb_dec_fixed_length_bytes+0x3e>
 80076b4:	4b18      	ldr	r3, [pc, #96]	@ (8007718 <pb_dec_fixed_length_bytes+0xa0>)
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	60d3      	str	r3, [r2, #12]
 80076ba:	2300      	movs	r3, #0
 80076bc:	e027      	b.n	800770e <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	69d8      	ldr	r0, [r3, #28]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	8a5b      	ldrh	r3, [r3, #18]
 80076cc:	461a      	mov	r2, r3
 80076ce:	2100      	movs	r1, #0
 80076d0:	f006 fe86 	bl	800e3e0 <memset>
        return true;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e01a      	b.n	800770e <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	8a5b      	ldrh	r3, [r3, #18]
 80076dc:	461a      	mov	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d00b      	beq.n	80076fc <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <pb_dec_fixed_length_bytes+0x7a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	e000      	b.n	80076f4 <pb_dec_fixed_length_bytes+0x7c>
 80076f2:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <pb_dec_fixed_length_bytes+0xa4>)
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	60d3      	str	r3, [r2, #12]
 80076f8:	2300      	movs	r3, #0
 80076fa:	e008      	b.n	800770e <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	8a5b      	ldrh	r3, [r3, #18]
 8007704:	461a      	mov	r2, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fe fa64 	bl	8005bd4 <pb_read>
 800770c:	4603      	mov	r3, r0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	0800f4b0 	.word	0x0800f4b0
 800771c:	0800f4fc 	.word	0x0800f4fc

08007720 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f006 ff1c 	bl	800e57e <memcpy>
    
    return true;
 8007746:	2301      	movs	r3, #1
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8007750:	b4b0      	push	{r4, r5, r7}
 8007752:	b08b      	sub	sp, #44	@ 0x2c
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800775c:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <pb_ostream_from_buffer+0x3c>)
 800775e:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	461d      	mov	r5, r3
 8007774:	f107 0414 	add.w	r4, r7, #20
 8007778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800777a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	602b      	str	r3, [r5, #0]
}
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	372c      	adds	r7, #44	@ 0x2c
 8007784:	46bd      	mov	sp, r7
 8007786:	bcb0      	pop	{r4, r5, r7}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	08007721 	.word	0x08007721

08007790 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d037      	beq.n	8007812 <pb_write+0x82>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d033      	beq.n	8007812 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d307      	bcc.n	80077ca <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	441a      	add	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d90b      	bls.n	80077e2 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <pb_write+0x48>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	e000      	b.n	80077da <pb_write+0x4a>
 80077d8:	4b13      	ldr	r3, [pc, #76]	@ (8007828 <pb_write+0x98>)
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	6113      	str	r3, [r2, #16]
 80077de:	2300      	movs	r3, #0
 80077e0:	e01e      	b.n	8007820 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	f083 0301 	eor.w	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <pb_write+0x78>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	e000      	b.n	800780a <pb_write+0x7a>
 8007808:	4b08      	ldr	r3, [pc, #32]	@ (800782c <pb_write+0x9c>)
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	6113      	str	r3, [r2, #16]
 800780e:	2300      	movs	r3, #0
 8007810:	e006      	b.n	8007820 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]
    return true;
 800781e:	2301      	movs	r3, #1
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	0800f520 	.word	0x0800f520
 800782c:	0800f52c 	.word	0x0800f52c

08007830 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e00a      	b.n	8007858 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <safe_read_bool+0x22>
            return true;
 800784e:	2301      	movs	r3, #1
 8007850:	e006      	b.n	8007860 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f1      	beq.n	8007842 <safe_read_bool+0x12>
    }
    return false;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800786c:	b5b0      	push	{r4, r5, r7, lr}
 800786e:	b08c      	sub	sp, #48	@ 0x30
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 800787e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <encode_array+0x1c>
        return true;
 8007884:	2301      	movs	r3, #1
 8007886:	e13d      	b.n	8007b04 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	7d9b      	ldrb	r3, [r3, #22]
 800788c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007890:	2b80      	cmp	r3, #128	@ 0x80
 8007892:	d010      	beq.n	80078b6 <encode_array+0x4a>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	8a9b      	ldrh	r3, [r3, #20]
 8007898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800789a:	429a      	cmp	r2, r3
 800789c:	d90b      	bls.n	80078b6 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <encode_array+0x40>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	e000      	b.n	80078ae <encode_array+0x42>
 80078ac:	4b97      	ldr	r3, [pc, #604]	@ (8007b0c <encode_array+0x2a0>)
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6113      	str	r3, [r2, #16]
 80078b2:	2300      	movs	r3, #0
 80078b4:	e126      	b.n	8007b04 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	7d9b      	ldrb	r3, [r3, #22]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	2b05      	cmp	r3, #5
 80078c0:	f200 80b3 	bhi.w	8007a2a <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	8a1b      	ldrh	r3, [r3, #16]
 80078c8:	461a      	mov	r2, r3
 80078ca:	2102      	movs	r1, #2
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcdd 	bl	800828c <pb_encode_tag>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f083 0301 	eor.w	r3, r3, #1
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <encode_array+0x76>
            return false;
 80078de:	2300      	movs	r3, #0
 80078e0:	e110      	b.n	8007b04 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	7d9b      	ldrb	r3, [r3, #22]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d103      	bne.n	80078f6 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 80078ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078f4:	e047      	b.n	8007986 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	7d9b      	ldrb	r3, [r3, #22]
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d103      	bne.n	800790a <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8007902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007908:	e03d      	b.n	8007986 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007924:	e026      	b.n	8007974 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8007926:	f107 0308 	add.w	r3, r7, #8
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fdef 	bl	8008510 <pb_enc_varint>
 8007932:	4603      	mov	r3, r0
 8007934:	f083 0301 	eor.w	r3, r3, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <encode_array+0xe0>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	e005      	b.n	8007958 <encode_array+0xec>
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <encode_array+0xea>
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	e000      	b.n	8007958 <encode_array+0xec>
 8007956:	4b6e      	ldr	r3, [pc, #440]	@ (8007b10 <encode_array+0x2a4>)
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6113      	str	r3, [r2, #16]
 800795c:	2300      	movs	r3, #0
 800795e:	e0d1      	b.n	8007b04 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	8a52      	ldrh	r2, [r2, #18]
 8007968:	441a      	add	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800796e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007970:	3301      	adds	r3, #1
 8007972:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007974:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007978:	429a      	cmp	r2, r3
 800797a:	d3d4      	bcc.n	8007926 <encode_array+0xba>
            }
            field->pData = pData_orig;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	2200      	movs	r2, #0
 800798a:	461c      	mov	r4, r3
 800798c:	4615      	mov	r5, r2
 800798e:	4622      	mov	r2, r4
 8007990:	462b      	mov	r3, r5
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbf7 	bl	8008186 <pb_encode_varint>
 8007998:	4603      	mov	r3, r0
 800799a:	f083 0301 	eor.w	r3, r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <encode_array+0x13c>
            return false;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e0ad      	b.n	8007b04 <encode_array+0x298>
        
        if (stream->callback == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80079b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff feeb 	bl	8007790 <pb_write>
 80079ba:	4603      	mov	r3, r0
 80079bc:	e0a2      	b.n	8007b04 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80079c2:	e02d      	b.n	8007a20 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	7d9b      	ldrb	r3, [r3, #22]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d005      	beq.n	80079dc <encode_array+0x170>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	7d9b      	ldrb	r3, [r3, #22]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	2b05      	cmp	r3, #5
 80079da:	d10b      	bne.n	80079f4 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fe58 	bl	8008694 <pb_enc_fixed>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f083 0301 	eor.w	r3, r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00d      	beq.n	8007a0c <encode_array+0x1a0>
                    return false;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e087      	b.n	8007b04 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fd8a 	bl	8008510 <pb_enc_varint>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f083 0301 	eor.w	r3, r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <encode_array+0x1a0>
                    return false;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e07b      	b.n	8007b04 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	8a52      	ldrh	r2, [r2, #18]
 8007a14:	441a      	add	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8007a1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007a20:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d3cd      	bcc.n	80079c4 <encode_array+0x158>
 8007a28:	e06b      	b.n	8007b02 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007a2e:	e064      	b.n	8007afa <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	7d9b      	ldrb	r3, [r3, #22]
 8007a34:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a38:	2b80      	cmp	r3, #128	@ 0x80
 8007a3a:	d147      	bne.n	8007acc <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	7d9b      	ldrb	r3, [r3, #22]
 8007a40:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	d005      	beq.n	8007a54 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	7d9b      	ldrb	r3, [r3, #22]
 8007a4c:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007a50:	2b06      	cmp	r3, #6
 8007a52:	d13b      	bne.n	8007acc <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d11c      	bne.n	8007aa6 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fc36 	bl	80082e0 <pb_encode_tag_for_field>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fb7f 	bl	8008186 <pb_encode_varint>
 8007a88:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <encode_array+0x226>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <encode_array+0x228>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	e006      	b.n	8007ab4 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f951 	bl	8007d50 <encode_basic_field>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	61da      	str	r2, [r3, #28]

                if (!status)
 8007aba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007abe:	f083 0301 	eor.w	r3, r3, #1
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <encode_array+0x278>
                    return false;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e01b      	b.n	8007b04 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f93e 	bl	8007d50 <encode_basic_field>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f083 0301 	eor.w	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <encode_array+0x27a>
                    return false;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e00f      	b.n	8007b04 <encode_array+0x298>
            {
 8007ae4:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	8a52      	ldrh	r2, [r2, #18]
 8007aee:	441a      	add	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8007af4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007af6:	3301      	adds	r3, #1
 8007af8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007afa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d396      	bcc.n	8007a30 <encode_array+0x1c4>
        }
    }
    
    return true;
 8007b02:	2301      	movs	r3, #1
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	@ 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b0c:	0800f538 	.word	0x0800f538
 8007b10:	0800f550 	.word	0x0800f550

08007b14 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b092      	sub	sp, #72	@ 0x48
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7d9b      	ldrb	r3, [r3, #22]
 8007b20:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007b24:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b28:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 80c9 	bne.w	8007cc4 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8007b32:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e100      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007b42:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d108      	bne.n	8007b60 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	e0f1      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8007b60:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b68:	2b30      	cmp	r3, #48	@ 0x30
 8007b6a:	d108      	bne.n	8007b7e <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bf0c      	ite	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	2300      	movne	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e0e2      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8007b7e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007b82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d115      	bne.n	8007bb6 <pb_check_proto3_default_value+0xa2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fe4a 	bl	8007830 <safe_read_bool>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f083 0301 	eor.w	r3, r3, #1
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	e0c6      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e0bf      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8007bc4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007bc8:	f003 030f 	and.w	r3, r3, #15
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	d81c      	bhi.n	8007c0a <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007bdc:	e00d      	b.n	8007bfa <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8007bde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007be2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007be4:	4413      	add	r3, r2
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e0a9      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8007bf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8a5b      	ldrh	r3, [r3, #18]
 8007bfe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d3eb      	bcc.n	8007bde <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e09c      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8007c0a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	2b06      	cmp	r3, #6
 8007c14:	d10a      	bne.n	8007c2c <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bf0c      	ite	eq
 8007c24:	2301      	moveq	r3, #1
 8007c26:	2300      	movne	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	e08b      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8007c2c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	d108      	bne.n	8007c4a <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	e07c      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8007c4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	2b0b      	cmp	r3, #11
 8007c54:	d107      	bne.n	8007c66 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	8a5b      	ldrh	r3, [r3, #18]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bf0c      	ite	eq
 8007c5e:	2301      	moveq	r3, #1
 8007c60:	2300      	movne	r3, #0
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	e06e      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8007c66:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d005      	beq.n	8007c7e <pb_check_proto3_default_value+0x16a>
 8007c72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d161      	bne.n	8007d42 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69da      	ldr	r2, [r3, #28]
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fe36 	bl	80058fc <pb_field_iter_begin>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d014      	beq.n	8007cc0 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff ff3a 	bl	8007b14 <pb_check_proto3_default_value>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f083 0301 	eor.w	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e049      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd fe6a 	bl	800598e <pb_field_iter_next>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ea      	bne.n	8007c96 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e03f      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8007cc4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007cc8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ccc:	2b80      	cmp	r3, #128	@ 0x80
 8007cce:	d107      	bne.n	8007ce0 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf0c      	ite	eq
 8007cd8:	2301      	moveq	r3, #1
 8007cda:	2300      	movne	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	e031      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8007ce0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007ce4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ce8:	2b40      	cmp	r3, #64	@ 0x40
 8007cea:	d12a      	bne.n	8007d42 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8007cec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d10a      	bne.n	8007d0e <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	e01a      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	4a0d      	ldr	r2, [pc, #52]	@ (8007d4c <pb_check_proto3_default_value+0x238>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10a      	bne.n	8007d30 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8007d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	e009      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf0c      	ite	eq
 8007d3a:	2301      	moveq	r3, #1
 8007d3c:	2300      	movne	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	e000      	b.n	8007d44 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3748      	adds	r7, #72	@ 0x48
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08005b31 	.word	0x08005b31

08007d50 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e061      	b.n	8007e2a <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fab9 	bl	80082e0 <pb_encode_tag_for_field>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f083 0301 	eor.w	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <encode_basic_field+0x2e>
        return false;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e055      	b.n	8007e2a <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	7d9b      	ldrb	r3, [r3, #22]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	2b0b      	cmp	r3, #11
 8007d88:	d844      	bhi.n	8007e14 <encode_basic_field+0xc4>
 8007d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <encode_basic_field+0x40>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007dc1 	.word	0x08007dc1
 8007d94:	08007dcd 	.word	0x08007dcd
 8007d98:	08007dcd 	.word	0x08007dcd
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007dd9 	.word	0x08007dd9
 8007da8:	08007de5 	.word	0x08007de5
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007e15 	.word	0x08007e15
 8007dbc:	08007e09 	.word	0x08007e09
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fb8a 	bl	80084dc <pb_enc_bool>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	e02e      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fb9e 	bl	8008510 <pb_enc_varint>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	e028      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fc5a 	bl	8008694 <pb_enc_fixed>
 8007de0:	4603      	mov	r3, r0
 8007de2:	e022      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fc82 	bl	80086f0 <pb_enc_bytes>
 8007dec:	4603      	mov	r3, r0
 8007dee:	e01c      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fcba 	bl	800876c <pb_enc_string>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	e016      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fd12 	bl	8008828 <pb_enc_submessage>
 8007e04:	4603      	mov	r3, r0
 8007e06:	e010      	b.n	8007e2a <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fd52 	bl	80088b4 <pb_enc_fixed_length_bytes>
 8007e10:	4603      	mov	r3, r0
 8007e12:	e00a      	b.n	8007e2a <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <encode_basic_field+0xd2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	e000      	b.n	8007e24 <encode_basic_field+0xd4>
 8007e22:	4b04      	ldr	r3, [pc, #16]	@ (8007e34 <encode_basic_field+0xe4>)
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6113      	str	r3, [r2, #16]
 8007e28:	2300      	movs	r3, #0
    }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	0800f558 	.word	0x0800f558

08007e38 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	2000      	movs	r0, #0
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f083 0301 	eor.w	r3, r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <encode_callback_field+0x3c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	e000      	b.n	8007e76 <encode_callback_field+0x3e>
 8007e74:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <encode_callback_field+0x50>)
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6113      	str	r3, [r2, #16]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <encode_callback_field+0x48>
    }
    return true;
 8007e7e:	2301      	movs	r3, #1
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	0800f56c 	.word	0x0800f56c

08007e8c <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	7d9b      	ldrb	r3, [r3, #22]
 8007e9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e9e:	2b30      	cmp	r3, #48	@ 0x30
 8007ea0:	d108      	bne.n	8007eb4 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	8a1b      	ldrh	r3, [r3, #16]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d026      	beq.n	8007efe <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e059      	b.n	8007f68 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	7d9b      	ldrb	r3, [r3, #22]
 8007eb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d11e      	bne.n	8007efe <encode_field+0x72>
    {
        if (field->pSize)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00c      	beq.n	8007ee2 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fcaf 	bl	8007830 <safe_read_bool>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f083 0301 	eor.w	r3, r3, #1
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00f      	beq.n	8007efe <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e042      	b.n	8007f68 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	7d9b      	ldrb	r3, [r3, #22]
 8007ee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f7ff fe10 	bl	8007b14 <pb_check_proto3_default_value>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <encode_field+0x72>
                return true;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e034      	b.n	8007f68 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d113      	bne.n	8007f2e <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	7d9b      	ldrb	r3, [r3, #22]
 8007f0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <encode_field+0x94>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	e000      	b.n	8007f22 <encode_field+0x96>
 8007f20:	4b13      	ldr	r3, [pc, #76]	@ (8007f70 <encode_field+0xe4>)
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6113      	str	r3, [r2, #16]
 8007f26:	2300      	movs	r3, #0
 8007f28:	e01e      	b.n	8007f68 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e01c      	b.n	8007f68 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	7d9b      	ldrb	r3, [r3, #22]
 8007f32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d105      	bne.n	8007f46 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ff7b 	bl	8007e38 <encode_callback_field>
 8007f42:	4603      	mov	r3, r0
 8007f44:	e010      	b.n	8007f68 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	7d9b      	ldrb	r3, [r3, #22]
 8007f4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d105      	bne.n	8007f5e <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff fc89 	bl	800786c <encode_array>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	e004      	b.n	8007f68 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fef5 	bl	8007d50 <encode_basic_field>
 8007f66:	4603      	mov	r3, r0
    }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	0800f57c 	.word	0x0800f57c

08007f74 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	@ 0x30
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fd fdc1 	bl	8005b0c <pb_field_iter_begin_extension_const>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f083 0301 	eor.w	r3, r3, #1
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <default_extension_encoder+0x30>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	e000      	b.n	8007fa6 <default_extension_encoder+0x32>
 8007fa4:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <default_extension_encoder+0x50>)
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6113      	str	r3, [r2, #16]
 8007faa:	2300      	movs	r3, #0
 8007fac:	e006      	b.n	8007fbc <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff ff69 	bl	8007e8c <encode_field>
 8007fba:	4603      	mov	r3, r0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3730      	adds	r7, #48	@ 0x30
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	0800f594 	.word	0x0800f594

08007fc8 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]

    while (extension)
 8007fda:	e01e      	b.n	800801a <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d008      	beq.n	8007ff8 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	72fb      	strb	r3, [r7, #11]
 8007ff6:	e005      	b.n	8008004 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff ffba 	bl	8007f74 <default_extension_encoder>
 8008000:	4603      	mov	r3, r0
 8008002:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	f083 0301 	eor.w	r3, r3, #1
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <encode_extension_field+0x4c>
            return false;
 8008010:	2300      	movs	r3, #0
 8008012:	e006      	b.n	8008022 <encode_extension_field+0x5a>
        
        extension = extension->next;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60fb      	str	r3, [r7, #12]
    while (extension)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1dd      	bne.n	8007fdc <encode_extension_field+0x14>
    }
    
    return true;
 8008020:	2301      	movs	r3, #1
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b08e      	sub	sp, #56	@ 0x38
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8008036:	f107 0310 	add.w	r3, r7, #16
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd fd50 	bl	8005ae4 <pb_field_iter_begin_const>
 8008044:	4603      	mov	r3, r0
 8008046:	f083 0301 	eor.w	r3, r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <pb_encode+0x2a>
        return true; /* Empty message type */
 8008050:	2301      	movs	r3, #1
 8008052:	e02a      	b.n	80080aa <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8008054:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2b0a      	cmp	r3, #10
 800805e:	d10d      	bne.n	800807c <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	4619      	mov	r1, r3
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ffae 	bl	8007fc8 <encode_extension_field>
 800806c:	4603      	mov	r3, r0
 800806e:	f083 0301 	eor.w	r3, r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00f      	beq.n	8008098 <pb_encode+0x6e>
                return false;
 8008078:	2300      	movs	r3, #0
 800807a:	e016      	b.n	80080aa <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	4619      	mov	r1, r3
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ff02 	bl	8007e8c <encode_field>
 8008088:	4603      	mov	r3, r0
 800808a:	f083 0301 	eor.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <pb_encode+0x6e>
                return false;
 8008094:	2300      	movs	r3, #0
 8008096:	e008      	b.n	80080aa <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8008098:	f107 0310 	add.w	r3, r7, #16
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fc76 	bl	800598e <pb_field_iter_next>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1d5      	bne.n	8008054 <pb_encode+0x2a>
    
    return true;
 80080a8:	2301      	movs	r3, #1
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3738      	adds	r7, #56	@ 0x38
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ca:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	09db      	lsrs	r3, r3, #7
 80080d0:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 80080d2:	e013      	b.n	80080fc <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 80080d4:	7efb      	ldrb	r3, [r7, #27]
 80080d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080da:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	61fa      	str	r2, [r7, #28]
 80080e2:	3320      	adds	r3, #32
 80080e4:	443b      	add	r3, r7
 80080e6:	7efa      	ldrb	r2, [r7, #27]
 80080e8:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080f4:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	09db      	lsrs	r3, r3, #7
 80080fa:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d805      	bhi.n	800810e <pb_encode_varint_32+0x5c>
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e5      	bne.n	80080d4 <pb_encode_varint_32+0x22>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e2      	bne.n	80080d4 <pb_encode_varint_32+0x22>
    }

    if (high)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d024      	beq.n	800815e <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008120:	b2da      	uxtb	r2, r3
 8008122:	7efb      	ldrb	r3, [r7, #27]
 8008124:	4313      	orrs	r3, r2
 8008126:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	607b      	str	r3, [r7, #4]

        while (high)
 800812e:	e013      	b.n	8008158 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8008130:	7efb      	ldrb	r3, [r7, #27]
 8008132:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008136:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	61fa      	str	r2, [r7, #28]
 800813e:	3320      	adds	r3, #32
 8008140:	443b      	add	r3, r7
 8008142:	7efa      	ldrb	r2, [r7, #27]
 8008144:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008150:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	09db      	lsrs	r3, r3, #7
 8008156:	607b      	str	r3, [r7, #4]
        while (high)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e8      	bne.n	8008130 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	61fa      	str	r2, [r7, #28]
 8008164:	3320      	adds	r3, #32
 8008166:	443b      	add	r3, r7
 8008168:	7efa      	ldrb	r2, [r7, #27]
 800816a:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800816e:	f107 0310 	add.w	r3, r7, #16
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	4619      	mov	r1, r3
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fb0a 	bl	8007790 <pb_write>
 800817c:	4603      	mov	r3, r0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8008186:	b590      	push	{r4, r7, lr}
 8008188:	b087      	sub	sp, #28
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	2a80      	cmp	r2, #128	@ 0x80
 8008198:	f173 0300 	sbcs.w	r3, r3, #0
 800819c:	d20a      	bcs.n	80081b4 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800819e:	783b      	ldrb	r3, [r7, #0]
 80081a0:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 80081a2:	f107 0317 	add.w	r3, r7, #23
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff faf0 	bl	8007790 <pb_write>
 80081b0:	4603      	mov	r3, r0
 80081b2:	e00f      	b.n	80081d4 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 80081b4:	683c      	ldr	r4, [r7, #0]
 80081b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	000a      	movs	r2, r1
 80081c4:	2300      	movs	r3, #0
 80081c6:	4613      	mov	r3, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4621      	mov	r1, r4
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f7ff ff70 	bl	80080b2 <pb_encode_varint_32>
 80081d2:	4603      	mov	r3, r0
#endif
    }
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd90      	pop	{r4, r7, pc}

080081dc <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 80081dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e0:	b08a      	sub	sp, #40	@ 0x28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6178      	str	r0, [r7, #20]
 80081e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80081f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80081f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da15      	bge.n	800822a <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80081fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008206:	ea00 0402 	and.w	r4, r0, r2
 800820a:	ea01 0503 	and.w	r5, r1, r3
 800820e:	1923      	adds	r3, r4, r4
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	eb45 0305 	adc.w	r3, r5, r5
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821c:	ea6f 0a02 	mvn.w	sl, r2
 8008220:	ea6f 0b03 	mvn.w	fp, r3
 8008224:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8008228:	e007      	b.n	800823a <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800822a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800822e:	eb12 0802 	adds.w	r8, r2, r2
 8008232:	eb43 0903 	adc.w	r9, r3, r3
 8008236:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 800823a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f7ff ffa1 	bl	8008186 <pb_encode_varint>
 8008244:	4603      	mov	r3, r0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	@ 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008250 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800825a:	2204      	movs	r2, #4
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fa96 	bl	8007790 <pb_write>
 8008264:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8008278:	2208      	movs	r2, #8
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fa87 	bl	8007790 <pb_write>
 8008282:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800828c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008290:	b088      	sub	sp, #32
 8008292:	af00      	add	r7, sp, #0
 8008294:	6178      	str	r0, [r7, #20]
 8008296:	460b      	mov	r3, r1
 8008298:	60fa      	str	r2, [r7, #12]
 800829a:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	469a      	mov	sl, r3
 80082a2:	4693      	mov	fp, r2
 80082a4:	ea4f 755a 	mov.w	r5, sl, lsr #29
 80082a8:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80082ac:	7cfb      	ldrb	r3, [r7, #19]
 80082ae:	2200      	movs	r2, #0
 80082b0:	4698      	mov	r8, r3
 80082b2:	4691      	mov	r9, r2
 80082b4:	ea44 0308 	orr.w	r3, r4, r8
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	ea45 0309 	orr.w	r3, r5, r9
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80082c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 80082c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082cc:	6978      	ldr	r0, [r7, #20]
 80082ce:	f7ff ff5a 	bl	8008186 <pb_encode_varint>
 80082d2:	4603      	mov	r3, r0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080082e0 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	7d9b      	ldrb	r3, [r3, #22]
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	2b0b      	cmp	r3, #11
 80082f4:	d826      	bhi.n	8008344 <pb_encode_tag_for_field+0x64>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <pb_encode_tag_for_field+0x1c>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	0800832d 	.word	0x0800832d
 8008300:	0800832d 	.word	0x0800832d
 8008304:	0800832d 	.word	0x0800832d
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008333 	.word	0x08008333
 8008310:	08008339 	.word	0x08008339
 8008314:	0800833f 	.word	0x0800833f
 8008318:	0800833f 	.word	0x0800833f
 800831c:	0800833f 	.word	0x0800833f
 8008320:	0800833f 	.word	0x0800833f
 8008324:	08008345 	.word	0x08008345
 8008328:	0800833f 	.word	0x0800833f
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
            break;
 8008330:	e014      	b.n	800835c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 8008332:	2305      	movs	r3, #5
 8008334:	73fb      	strb	r3, [r7, #15]
            break;
 8008336:	e011      	b.n	800835c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
            break;
 800833c:	e00e      	b.n	800835c <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800833e:	2302      	movs	r3, #2
 8008340:	73fb      	strb	r3, [r7, #15]
            break;
 8008342:	e00b      	b.n	800835c <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <pb_encode_tag_for_field+0x72>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	e000      	b.n	8008354 <pb_encode_tag_for_field+0x74>
 8008352:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <pb_encode_tag_for_field+0x98>)
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6113      	str	r3, [r2, #16]
 8008358:	2300      	movs	r3, #0
 800835a:	e008      	b.n	800836e <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	8a1b      	ldrh	r3, [r3, #16]
 8008360:	461a      	mov	r2, r3
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff ff90 	bl	800828c <pb_encode_tag>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	0800f558 	.word	0x0800f558

0800837c <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800837c:	b5b0      	push	{r4, r5, r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	461c      	mov	r4, r3
 800838e:	4615      	mov	r5, r2
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff fef6 	bl	8008186 <pb_encode_varint>
 800839a:	4603      	mov	r3, r0
 800839c:	f083 0301 	eor.w	r3, r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <pb_encode_string+0x2e>
        return false;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e005      	b.n	80083b6 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff f9ee 	bl	8007790 <pb_write>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080083c0 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80083c0:	b5b0      	push	{r4, r5, r7, lr}
 80083c2:	b08c      	sub	sp, #48	@ 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80083dc:	f107 0314 	add.w	r3, r7, #20
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fe20 	bl	800802a <pb_encode>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f083 0301 	eor.w	r3, r3, #1
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80083f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e065      	b.n	80084cc <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	2200      	movs	r2, #0
 8008408:	461c      	mov	r4, r3
 800840a:	4615      	mov	r5, r2
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff feb8 	bl	8008186 <pb_encode_varint>
 8008416:	4603      	mov	r3, r0
 8008418:	f083 0301 	eor.w	r3, r3, #1
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <pb_encode_submessage+0x66>
        return false;
 8008422:	2300      	movs	r3, #0
 8008424:	e052      	b.n	80084cc <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800842e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008430:	2100      	movs	r1, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff f9ac 	bl	8007790 <pb_write>
 8008438:	4603      	mov	r3, r0
 800843a:	e047      	b.n	80084cc <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008442:	441a      	add	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d90b      	bls.n	8008464 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <pb_encode_submessage+0x9a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	e000      	b.n	800845c <pb_encode_submessage+0x9c>
 800845a:	4b1e      	ldr	r3, [pc, #120]	@ (80084d4 <pb_encode_submessage+0x114>)
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	6113      	str	r3, [r2, #16]
 8008460:	2300      	movs	r3, #0
 8008462:	e033      	b.n	80084cc <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8008470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008472:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800847c:	f107 0314 	add.w	r3, r7, #20
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff fdd0 	bl	800802a <pb_encode>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	441a      	add	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80084a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d00b      	beq.n	80084c8 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <pb_encode_submessage+0xfe>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	e000      	b.n	80084c0 <pb_encode_submessage+0x100>
 80084be:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <pb_encode_submessage+0x118>)
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	6113      	str	r3, [r2, #16]
 80084c4:	2300      	movs	r3, #0
 80084c6:	e001      	b.n	80084cc <pb_encode_submessage+0x10c>
    
    return status;
 80084c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3730      	adds	r7, #48	@ 0x30
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bdb0      	pop	{r4, r5, r7, pc}
 80084d4:	0800f520 	.word	0x0800f520
 80084d8:	0800f5a8 	.word	0x0800f5a8

080084dc <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff f9a0 	bl	8007830 <safe_read_bool>
 80084f0:	4603      	mov	r3, r0
 80084f2:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	461c      	mov	r4, r3
 80084fa:	4615      	mov	r5, r2
 80084fc:	4622      	mov	r2, r4
 80084fe:	462b      	mov	r3, r5
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fe40 	bl	8008186 <pb_encode_varint>
 8008506:	4603      	mov	r3, r0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bdb0      	pop	{r4, r5, r7, pc}

08008510 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8008510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008514:	b08c      	sub	sp, #48	@ 0x30
 8008516:	af00      	add	r7, sp, #0
 8008518:	61f8      	str	r0, [r7, #28]
 800851a:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	7d9b      	ldrb	r3, [r3, #22]
 8008520:	f003 030f 	and.w	r3, r3, #15
 8008524:	2b02      	cmp	r3, #2
 8008526:	d152      	bne.n	80085ce <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	8a5b      	ldrh	r3, [r3, #18]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10b      	bne.n	8008554 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2200      	movs	r2, #0
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	617a      	str	r2, [r7, #20]
 800854a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800854e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8008552:	e035      	b.n	80085c0 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	8a5b      	ldrh	r3, [r3, #18]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d10b      	bne.n	8008574 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	2200      	movs	r2, #0
 8008566:	60bb      	str	r3, [r7, #8]
 8008568:	60fa      	str	r2, [r7, #12]
 800856a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800856e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8008572:	e025      	b.n	80085c0 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	8a5b      	ldrh	r3, [r3, #18]
 8008578:	2b04      	cmp	r3, #4
 800857a:	d10a      	bne.n	8008592 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2200      	movs	r2, #0
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	e9d7 3400 	ldrd	r3, r4, [r7]
 800858c:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8008590:	e016      	b.n	80085c0 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	8a5b      	ldrh	r3, [r3, #18]
 8008596:	2b08      	cmp	r3, #8
 8008598:	d106      	bne.n	80085a8 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80085a6:	e00b      	b.n	80085c0 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <pb_enc_varint+0xa6>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	e000      	b.n	80085b8 <pb_enc_varint+0xa8>
 80085b6:	4b36      	ldr	r3, [pc, #216]	@ (8008690 <pb_enc_varint+0x180>)
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	6113      	str	r3, [r2, #16]
 80085bc:	2300      	movs	r3, #0
 80085be:	e061      	b.n	8008684 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 80085c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085c4:	69f8      	ldr	r0, [r7, #28]
 80085c6:	f7ff fdde 	bl	8008186 <pb_encode_varint>
 80085ca:	4603      	mov	r3, r0
 80085cc:	e05a      	b.n	8008684 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	8a5b      	ldrh	r3, [r3, #18]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d10a      	bne.n	80085f8 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f993 3000 	ldrsb.w	r3, [r3]
 80085ea:	b25b      	sxtb	r3, r3
 80085ec:	17da      	asrs	r2, r3, #31
 80085ee:	469a      	mov	sl, r3
 80085f0:	4693      	mov	fp, r2
 80085f2:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80085f6:	e032      	b.n	800865e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	8a5b      	ldrh	r3, [r3, #18]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d10a      	bne.n	8008616 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008608:	b21b      	sxth	r3, r3
 800860a:	17da      	asrs	r2, r3, #31
 800860c:	4698      	mov	r8, r3
 800860e:	4691      	mov	r9, r2
 8008610:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8008614:	e023      	b.n	800865e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	8a5b      	ldrh	r3, [r3, #18]
 800861a:	2b04      	cmp	r3, #4
 800861c:	d108      	bne.n	8008630 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	17da      	asrs	r2, r3, #31
 8008626:	461c      	mov	r4, r3
 8008628:	4615      	mov	r5, r2
 800862a:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800862e:	e016      	b.n	800865e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	8a5b      	ldrh	r3, [r3, #18]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d106      	bne.n	8008646 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008644:	e00b      	b.n	800865e <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <pb_enc_varint+0x144>
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	e000      	b.n	8008656 <pb_enc_varint+0x146>
 8008654:	4b0e      	ldr	r3, [pc, #56]	@ (8008690 <pb_enc_varint+0x180>)
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	6113      	str	r3, [r2, #16]
 800865a:	2300      	movs	r3, #0
 800865c:	e012      	b.n	8008684 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	7d9b      	ldrb	r3, [r3, #22]
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	2b03      	cmp	r3, #3
 8008668:	d106      	bne.n	8008678 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 800866a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800866e:	69f8      	ldr	r0, [r7, #28]
 8008670:	f7ff fdb4 	bl	80081dc <pb_encode_svarint>
 8008674:	4603      	mov	r3, r0
 8008676:	e005      	b.n	8008684 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8008678:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800867c:	69f8      	ldr	r0, [r7, #28]
 800867e:	f7ff fd82 	bl	8008186 <pb_encode_varint>
 8008682:	4603      	mov	r3, r0

    }
}
 8008684:	4618      	mov	r0, r3
 8008686:	3730      	adds	r7, #48	@ 0x30
 8008688:	46bd      	mov	sp, r7
 800868a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868e:	bf00      	nop
 8008690:	0800f5bc 	.word	0x0800f5bc

08008694 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	8a5b      	ldrh	r3, [r3, #18]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d107      	bne.n	80086b6 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fdcf 	bl	8008250 <pb_encode_fixed32>
 80086b2:	4603      	mov	r3, r0
 80086b4:	e016      	b.n	80086e4 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	8a5b      	ldrh	r3, [r3, #18]
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d107      	bne.n	80086ce <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff fdd2 	bl	800826e <pb_encode_fixed64>
 80086ca:	4603      	mov	r3, r0
 80086cc:	e00a      	b.n	80086e4 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <pb_enc_fixed+0x48>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	e000      	b.n	80086de <pb_enc_fixed+0x4a>
 80086dc:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <pb_enc_fixed+0x58>)
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6113      	str	r3, [r2, #16]
 80086e2:	2300      	movs	r3, #0
    }
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	0800f5bc 	.word	0x0800f5bc

080086f0 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fe34 	bl	800837c <pb_encode_string>
 8008714:	4603      	mov	r3, r0
 8008716:	e022      	b.n	800875e <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	7d9b      	ldrb	r3, [r3, #22]
 800871c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d113      	bne.n	800874c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	8a5b      	ldrh	r3, [r3, #18]
 800872e:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008730:	429a      	cmp	r2, r3
 8008732:	d90b      	bls.n	800874c <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <pb_enc_bytes+0x52>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	e000      	b.n	8008744 <pb_enc_bytes+0x54>
 8008742:	4b09      	ldr	r3, [pc, #36]	@ (8008768 <pb_enc_bytes+0x78>)
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6113      	str	r3, [r2, #16]
 8008748:	2300      	movs	r3, #0
 800874a:	e008      	b.n	800875e <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	1c99      	adds	r1, r3, #2
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff fe10 	bl	800837c <pb_encode_string>
 800875c:	4603      	mov	r3, r0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	0800f5d0 	.word	0x0800f5d0

0800876c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	8a5b      	ldrh	r3, [r3, #18]
 800877e:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	7d9b      	ldrb	r3, [r3, #22]
 800878a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800878e:	2b80      	cmp	r3, #128	@ 0x80
 8008790:	d103      	bne.n	800879a <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	e011      	b.n	80087be <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10b      	bne.n	80087b8 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <pb_enc_string+0x42>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	e000      	b.n	80087b0 <pb_enc_string+0x44>
 80087ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <pb_enc_string+0xb4>)
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6113      	str	r3, [r2, #16]
 80087b4:	2300      	movs	r3, #0
 80087b6:	e02f      	b.n	8008818 <pb_enc_string+0xac>

        max_size -= 1;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e020      	b.n	800880c <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 80087ce:	e005      	b.n	80087dc <pb_enc_string+0x70>
        {
            size++;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3301      	adds	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
            p++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d203      	bcs.n	80087ec <pb_enc_string+0x80>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f1      	bne.n	80087d0 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <pb_enc_string+0x96>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	e000      	b.n	8008804 <pb_enc_string+0x98>
 8008802:	4b08      	ldr	r3, [pc, #32]	@ (8008824 <pb_enc_string+0xb8>)
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6113      	str	r3, [r2, #16]
 8008808:	2300      	movs	r3, #0
 800880a:	e005      	b.n	8008818 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fdb3 	bl	800837c <pb_encode_string>
 8008816:	4603      	mov	r3, r0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	0800f5e4 	.word	0x0800f5e4
 8008824:	0800f5f8 	.word	0x0800f5f8

08008828 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <pb_enc_submessage+0x20>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	e000      	b.n	800884a <pb_enc_submessage+0x22>
 8008848:	4b19      	ldr	r3, [pc, #100]	@ (80088b0 <pb_enc_submessage+0x88>)
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6113      	str	r3, [r2, #16]
 800884e:	2300      	movs	r3, #0
 8008850:	e029      	b.n	80088a6 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	7d9b      	ldrb	r3, [r3, #22]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	2b09      	cmp	r3, #9
 800885c:	d11a      	bne.n	8008894 <pb_enc_submessage+0x6c>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	3b08      	subs	r3, #8
 800886c:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00e      	beq.n	8008894 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	3204      	adds	r2, #4
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	4603      	mov	r3, r0
 8008886:	f083 0301 	eor.w	r3, r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <pb_enc_submessage+0x6c>
                return false;
 8008890:	2300      	movs	r3, #0
 8008892:	e008      	b.n	80088a6 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	461a      	mov	r2, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fd8e 	bl	80083c0 <pb_encode_submessage>
 80088a4:	4603      	mov	r3, r0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	0800f60c 	.word	0x0800f60c

080088b4 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	69d9      	ldr	r1, [r3, #28]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	8a5b      	ldrh	r3, [r3, #18]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fd57 	bl	800837c <pb_encode_string>
 80088ce:	4603      	mov	r3, r0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_Z16VL53L4CD_RdDWordttPm>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af02      	add	r7, sp, #8
 80088de:	4603      	mov	r3, r0
 80088e0:	603a      	str	r2, [r7, #0]
 80088e2:	80fb      	strh	r3, [r7, #6]
 80088e4:	460b      	mov	r3, r1
 80088e6:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80088ec:	88bb      	ldrh	r3, [r7, #4]
 80088ee:	0a1b      	lsrs	r3, r3, #8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80088f6:	88bb      	ldrh	r3, [r7, #4]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80088fc:	f107 020c 	add.w	r2, r7, #12
 8008900:	88f9      	ldrh	r1, [r7, #6]
 8008902:	2364      	movs	r3, #100	@ 0x64
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	2302      	movs	r3, #2
 8008908:	4810      	ldr	r0, [pc, #64]	@ (800894c <_Z16VL53L4CD_RdDWordttPm+0x74>)
 800890a:	f001 fe37 	bl	800a57c <HAL_I2C_Master_Transmit>
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8008912:	f107 0208 	add.w	r2, r7, #8
 8008916:	88f9      	ldrh	r1, [r7, #6]
 8008918:	2364      	movs	r3, #100	@ 0x64
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2304      	movs	r3, #4
 800891e:	480b      	ldr	r0, [pc, #44]	@ (800894c <_Z16VL53L4CD_RdDWordttPm+0x74>)
 8008920:	f001 ff44 	bl	800a7ac <HAL_I2C_Master_Receive>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8008928:	7a3b      	ldrb	r3, [r7, #8]
 800892a:	061a      	lsls	r2, r3, #24
 800892c:	7a7b      	ldrb	r3, [r7, #9]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8008932:	7abb      	ldrb	r3, [r7, #10]
 8008934:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8008936:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	4313      	orrs	r3, r2
 800893c:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	601a      	str	r2, [r3, #0]
	return status;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200000f4 	.word	0x200000f4

08008950 <_Z15VL53L4CD_RdWordttPt>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af02      	add	r7, sp, #8
 8008956:	4603      	mov	r3, r0
 8008958:	603a      	str	r2, [r7, #0]
 800895a:	80fb      	strh	r3, [r7, #6]
 800895c:	460b      	mov	r3, r1
 800895e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008964:	88bb      	ldrh	r3, [r7, #4]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	b2db      	uxtb	r3, r3
 800896c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800896e:	88bb      	ldrh	r3, [r7, #4]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8008974:	f107 020c 	add.w	r2, r7, #12
 8008978:	88f9      	ldrh	r1, [r7, #6]
 800897a:	2364      	movs	r3, #100	@ 0x64
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	2302      	movs	r3, #2
 8008980:	480f      	ldr	r0, [pc, #60]	@ (80089c0 <_Z15VL53L4CD_RdWordttPt+0x70>)
 8008982:	f001 fdfb 	bl	800a57c <HAL_I2C_Master_Transmit>
 8008986:	4603      	mov	r3, r0
 8008988:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 800898a:	f107 0208 	add.w	r2, r7, #8
 800898e:	88f9      	ldrh	r1, [r7, #6]
 8008990:	2364      	movs	r3, #100	@ 0x64
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2302      	movs	r3, #2
 8008996:	480a      	ldr	r0, [pc, #40]	@ (80089c0 <_Z15VL53L4CD_RdWordttPt+0x70>)
 8008998:	f001 ff08 	bl	800a7ac <HAL_I2C_Master_Receive>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 80089a0:	7a3b      	ldrb	r3, [r7, #8]
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	b21a      	sxth	r2, r3
 80089a6:	7a7b      	ldrb	r3, [r7, #9]
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	801a      	strh	r2, [r3, #0]
	return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	200000f4 	.word	0x200000f4

080089c4 <_Z15VL53L4CD_RdBytettPh>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	4603      	mov	r3, r0
 80089cc:	603a      	str	r2, [r7, #0]
 80089ce:	80fb      	strh	r3, [r7, #6]
 80089d0:	460b      	mov	r3, r1
 80089d2:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80089d8:	88bb      	ldrh	r3, [r7, #4]
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b29b      	uxth	r3, r3
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80089e2:	88bb      	ldrh	r3, [r7, #4]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80089e8:	f107 020c 	add.w	r2, r7, #12
 80089ec:	88f9      	ldrh	r1, [r7, #6]
 80089ee:	2364      	movs	r3, #100	@ 0x64
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	2302      	movs	r3, #2
 80089f4:	480b      	ldr	r0, [pc, #44]	@ (8008a24 <_Z15VL53L4CD_RdBytettPh+0x60>)
 80089f6:	f001 fdc1 	bl	800a57c <HAL_I2C_Master_Transmit>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 80089fe:	f107 0208 	add.w	r2, r7, #8
 8008a02:	88f9      	ldrh	r1, [r7, #6]
 8008a04:	2364      	movs	r3, #100	@ 0x64
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4806      	ldr	r0, [pc, #24]	@ (8008a24 <_Z15VL53L4CD_RdBytettPh+0x60>)
 8008a0c:	f001 fece 	bl	800a7ac <HAL_I2C_Master_Receive>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8008a14:	7a3a      	ldrb	r2, [r7, #8]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
	return status;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200000f4 	.word	0x200000f4

08008a28 <_Z15VL53L4CD_WrBytetth>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	4603      	mov	r3, r0
 8008a30:	80fb      	strh	r3, [r7, #6]
 8008a32:	460b      	mov	r3, r1
 8008a34:	80bb      	strh	r3, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008a3e:	88bb      	ldrh	r3, [r7, #4]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8008a48:	88bb      	ldrh	r3, [r7, #4]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8008a52:	f107 020c 	add.w	r2, r7, #12
 8008a56:	88f9      	ldrh	r1, [r7, #6]
 8008a58:	2364      	movs	r3, #100	@ 0x64
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	4805      	ldr	r0, [pc, #20]	@ (8008a74 <_Z15VL53L4CD_WrBytetth+0x4c>)
 8008a60:	f001 fd8c 	bl	800a57c <HAL_I2C_Master_Transmit>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
	return status;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200000f4 	.word	0x200000f4

08008a78 <_Z15VL53L4CD_WrWordttt>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	4603      	mov	r3, r0
 8008a80:	80fb      	strh	r3, [r7, #6]
 8008a82:	460b      	mov	r3, r1
 8008a84:	80bb      	strh	r3, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008a8e:	88bb      	ldrh	r3, [r7, #4]
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8008a98:	88bb      	ldrh	r3, [r7, #4]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8008aa8:	887b      	ldrh	r3, [r7, #2]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	88f9      	ldrh	r1, [r7, #6]
 8008ab4:	2364      	movs	r3, #100	@ 0x64
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	2304      	movs	r3, #4
 8008aba:	4805      	ldr	r0, [pc, #20]	@ (8008ad0 <_Z15VL53L4CD_WrWordttt+0x58>)
 8008abc:	f001 fd5e 	bl	800a57c <HAL_I2C_Master_Transmit>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]
	return status;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200000f4 	.word	0x200000f4

08008ad4 <_Z16VL53L4CD_WrDWordttm>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	4603      	mov	r3, r0
 8008adc:	603a      	str	r2, [r7, #0]
 8008ade:	80fb      	strh	r3, [r7, #6]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8008ae8:	88bb      	ldrh	r3, [r7, #4]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8008af2:	88bb      	ldrh	r3, [r7, #4]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8008b16:	f107 0208 	add.w	r2, r7, #8
 8008b1a:	88f9      	ldrh	r1, [r7, #6]
 8008b1c:	2364      	movs	r3, #100	@ 0x64
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2306      	movs	r3, #6
 8008b22:	4805      	ldr	r0, [pc, #20]	@ (8008b38 <_Z16VL53L4CD_WrDWordttm+0x64>)
 8008b24:	f001 fd2a 	bl	800a57c <HAL_I2C_Master_Transmit>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]
	return status;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200000f4 	.word	0x200000f4

08008b3c <_Z6WaitMstm>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	6039      	str	r1, [r7, #0]
 8008b46:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8008b48:	6838      	ldr	r0, [r7, #0]
 8008b4a:	f000 fb57 	bl	80091fc <HAL_Delay>
	return 0;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b62:	4a0e      	ldr	r2, [pc, #56]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	607b      	str	r3, [r7, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b76:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b7a:	4a08      	ldr	r2, [pc, #32]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b82:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <HAL_MspInit+0x44>)
 8008b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008b8e:	f002 fae5 	bl	800b15c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	40021000 	.word	0x40021000

08008ba0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b09a      	sub	sp, #104	@ 0x68
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ba8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	609a      	str	r2, [r3, #8]
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008bb8:	f107 0310 	add.w	r3, r7, #16
 8008bbc:	2244      	movs	r2, #68	@ 0x44
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f005 fc0d 	bl	800e3e0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a24      	ldr	r2, [pc, #144]	@ (8008c5c <HAL_FDCAN_MspInit+0xbc>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d141      	bne.n	8008c54 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8008bd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bda:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f002 fff9 	bl	800bbd8 <HAL_RCCEx_PeriphCLKConfig>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8008bec:	f7fb f86a 	bl	8003cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bfc:	4b18      	ldr	r3, [pc, #96]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c08:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c0c:	4a14      	ldr	r2, [pc, #80]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c14:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <HAL_FDCAN_MspInit+0xc0>)
 8008c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	60bb      	str	r3, [r7, #8]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c26:	2302      	movs	r3, #2
 8008c28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008c32:	2309      	movs	r3, #9
 8008c34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c40:	f001 fa34 	bl	800a0ac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	2015      	movs	r0, #21
 8008c4a:	f000 fbd4 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8008c4e:	2015      	movs	r0, #21
 8008c50:	f000 fbeb 	bl	800942a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8008c54:	bf00      	nop
 8008c56:	3768      	adds	r7, #104	@ 0x68
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40006400 	.word	0x40006400
 8008c60:	40021000 	.word	0x40021000

08008c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b09c      	sub	sp, #112	@ 0x70
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	609a      	str	r2, [r3, #8]
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c7c:	f107 0318 	add.w	r3, r7, #24
 8008c80:	2244      	movs	r2, #68	@ 0x44
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f005 fbab 	bl	800e3e0 <memset>
  if(hi2c->Instance==I2C1)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8008d44 <HAL_I2C_MspInit+0xe0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d153      	bne.n	8008d3c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008c94:	2340      	movs	r3, #64	@ 0x40
 8008c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c9c:	f107 0318 	add.w	r3, r7, #24
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 ff99 	bl	800bbd8 <HAL_RCCEx_PeriphCLKConfig>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008cac:	f7fb f80a 	bl	8003cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cb0:	4b25      	ldr	r3, [pc, #148]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cb4:	4a24      	ldr	r2, [pc, #144]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cb6:	f043 0301 	orr.w	r3, r3, #1
 8008cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cbc:	4b22      	ldr	r3, [pc, #136]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]
 8008cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cce:	f043 0302 	orr.w	r3, r3, #2
 8008cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	613b      	str	r3, [r7, #16]
 8008cde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ce6:	2312      	movs	r3, #18
 8008ce8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008cf2:	2304      	movs	r3, #4
 8008cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d00:	f001 f9d4 	bl	800a0ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008d04:	2380      	movs	r3, #128	@ 0x80
 8008d06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d08:	2312      	movs	r3, #18
 8008d0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d10:	2300      	movs	r3, #0
 8008d12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008d14:	2304      	movs	r3, #4
 8008d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	480b      	ldr	r0, [pc, #44]	@ (8008d4c <HAL_I2C_MspInit+0xe8>)
 8008d20:	f001 f9c4 	bl	800a0ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d24:	4b08      	ldr	r3, [pc, #32]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d28:	4a07      	ldr	r2, [pc, #28]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d30:	4b05      	ldr	r3, [pc, #20]	@ (8008d48 <HAL_I2C_MspInit+0xe4>)
 8008d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d3c:	bf00      	nop
 8008d3e:	3770      	adds	r7, #112	@ 0x70
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40005400 	.word	0x40005400
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	48000400 	.word	0x48000400

08008d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d60:	d113      	bne.n	8008d8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d62:	4b0c      	ldr	r3, [pc, #48]	@ (8008d94 <HAL_TIM_Base_MspInit+0x44>)
 8008d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d66:	4a0b      	ldr	r2, [pc, #44]	@ (8008d94 <HAL_TIM_Base_MspInit+0x44>)
 8008d68:	f043 0301 	orr.w	r3, r3, #1
 8008d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d6e:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <HAL_TIM_Base_MspInit+0x44>)
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	201c      	movs	r0, #28
 8008d80:	f000 fb39 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008d84:	201c      	movs	r0, #28
 8008d86:	f000 fb50 	bl	800942a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40021000 	.word	0x40021000

08008d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b09c      	sub	sp, #112	@ 0x70
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	605a      	str	r2, [r3, #4]
 8008daa:	609a      	str	r2, [r3, #8]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008db0:	f107 0318 	add.w	r3, r7, #24
 8008db4:	2244      	movs	r2, #68	@ 0x44
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f005 fb11 	bl	800e3e0 <memset>
  if(huart->Instance==USART1)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8008ebc <HAL_UART_MspInit+0x124>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d138      	bne.n	8008e3a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008dd0:	f107 0318 	add.w	r3, r7, #24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 feff 	bl	800bbd8 <HAL_RCCEx_PeriphCLKConfig>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008de0:	f7fa ff70 	bl	8003cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008de4:	4b36      	ldr	r3, [pc, #216]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008de8:	4a35      	ldr	r2, [pc, #212]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dee:	6613      	str	r3, [r2, #96]	@ 0x60
 8008df0:	4b33      	ldr	r3, [pc, #204]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dfc:	4b30      	ldr	r3, [pc, #192]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e00:	4a2f      	ldr	r2, [pc, #188]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e08:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e1a:	2312      	movs	r3, #18
 8008e1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e22:	2303      	movs	r3, #3
 8008e24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e26:	2307      	movs	r3, #7
 8008e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008e2e:	4619      	mov	r1, r3
 8008e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e34:	f001 f93a 	bl	800a0ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008e38:	e03b      	b.n	8008eb2 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a21      	ldr	r2, [pc, #132]	@ (8008ec4 <HAL_UART_MspInit+0x12c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d136      	bne.n	8008eb2 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008e44:	2302      	movs	r3, #2
 8008e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e4c:	f107 0318 	add.w	r3, r7, #24
 8008e50:	4618      	mov	r0, r3
 8008e52:	f002 fec1 	bl	800bbd8 <HAL_RCCEx_PeriphCLKConfig>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8008e5c:	f7fa ff32 	bl	8003cc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e60:	4b17      	ldr	r3, [pc, #92]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e64:	4a16      	ldr	r2, [pc, #88]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e78:	4b11      	ldr	r3, [pc, #68]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e7c:	4a10      	ldr	r2, [pc, #64]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec0 <HAL_UART_MspInit+0x128>)
 8008e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	60bb      	str	r3, [r7, #8]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8008e90:	230c      	movs	r3, #12
 8008e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e94:	2302      	movs	r3, #2
 8008e96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ea0:	2307      	movs	r3, #7
 8008ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008eae:	f001 f8fd 	bl	800a0ac <HAL_GPIO_Init>
}
 8008eb2:	bf00      	nop
 8008eb4:	3770      	adds	r7, #112	@ 0x70
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	40013800 	.word	0x40013800
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40004400 	.word	0x40004400

08008ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <NMI_Handler+0x4>

08008ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <HardFault_Handler+0x4>

08008ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008edc:	bf00      	nop
 8008ede:	e7fd      	b.n	8008edc <MemManage_Handler+0x4>

08008ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <BusFault_Handler+0x4>

08008ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <UsageFault_Handler+0x4>

08008ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008efe:	b480      	push	{r7}
 8008f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f02:	bf00      	nop
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f10:	bf00      	nop
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f1e:	f000 f94f 	bl	80091c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f22:	bf00      	nop
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8008f2c:	4802      	ldr	r0, [pc, #8]	@ (8008f38 <FDCAN1_IT0_IRQHandler+0x10>)
 8008f2e:	f000 fe5d 	bl	8009bec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000090 	.word	0x20000090

08008f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008f40:	4802      	ldr	r0, [pc, #8]	@ (8008f4c <TIM2_IRQHandler+0x10>)
 8008f42:	f003 f8fb 	bl	800c13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000148 	.word	0x20000148

08008f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  return 1;
 8008f54:	2301      	movs	r3, #1
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_kill>:

int _kill(int pid, int sig)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f6a:	f005 fadb 	bl	800e524 <__errno>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2216      	movs	r2, #22
 8008f72:	601a      	str	r2, [r3, #0]
  return -1;
 8008f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <_exit>:

void _exit (int status)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ffe7 	bl	8008f60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <_exit+0x12>

08008f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b086      	sub	sp, #24
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	e00a      	b.n	8008fbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008fa8:	f3af 8000 	nop.w
 8008fac:	4601      	mov	r1, r0
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	60ba      	str	r2, [r7, #8]
 8008fb4:	b2ca      	uxtb	r2, r1
 8008fb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	dbf0      	blt.n	8008fa8 <_read+0x12>
  }

  return len;
 8008fc6:	687b      	ldr	r3, [r7, #4]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <_isatty>:

int _isatty(int file)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009010:	2301      	movs	r3, #1
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009040:	4a14      	ldr	r2, [pc, #80]	@ (8009094 <_sbrk+0x5c>)
 8009042:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <_sbrk+0x60>)
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800904c:	4b13      	ldr	r3, [pc, #76]	@ (800909c <_sbrk+0x64>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009054:	4b11      	ldr	r3, [pc, #68]	@ (800909c <_sbrk+0x64>)
 8009056:	4a12      	ldr	r2, [pc, #72]	@ (80090a0 <_sbrk+0x68>)
 8009058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800905a:	4b10      	ldr	r3, [pc, #64]	@ (800909c <_sbrk+0x64>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4413      	add	r3, r2
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	429a      	cmp	r2, r3
 8009066:	d207      	bcs.n	8009078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009068:	f005 fa5c 	bl	800e524 <__errno>
 800906c:	4603      	mov	r3, r0
 800906e:	220c      	movs	r2, #12
 8009070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009076:	e009      	b.n	800908c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009078:	4b08      	ldr	r3, [pc, #32]	@ (800909c <_sbrk+0x64>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800907e:	4b07      	ldr	r3, [pc, #28]	@ (800909c <_sbrk+0x64>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	4a05      	ldr	r2, [pc, #20]	@ (800909c <_sbrk+0x64>)
 8009088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20008000 	.word	0x20008000
 8009098:	00000400 	.word	0x00000400
 800909c:	200006cc 	.word	0x200006cc
 80090a0:	20000828 	.word	0x20000828

080090a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80090a8:	4b06      	ldr	r3, [pc, #24]	@ (80090c4 <SystemInit+0x20>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ae:	4a05      	ldr	r2, [pc, #20]	@ (80090c4 <SystemInit+0x20>)
 80090b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80090b8:	bf00      	nop
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	e000ed00 	.word	0xe000ed00

080090c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090c8:	480d      	ldr	r0, [pc, #52]	@ (8009100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
	    bl  SystemInit
 80090cc:	f7ff ffea 	bl	80090a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090d0:	480c      	ldr	r0, [pc, #48]	@ (8009104 <LoopForever+0x6>)
  ldr r1, =_edata
 80090d2:	490d      	ldr	r1, [pc, #52]	@ (8009108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090d4:	4a0d      	ldr	r2, [pc, #52]	@ (800910c <LoopForever+0xe>)
  movs r3, #0
 80090d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80090d8:	e002      	b.n	80090e0 <LoopCopyDataInit>

080090da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090de:	3304      	adds	r3, #4

080090e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090e4:	d3f9      	bcc.n	80090da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090e8:	4c0a      	ldr	r4, [pc, #40]	@ (8009114 <LoopForever+0x16>)
  movs r3, #0
 80090ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090ec:	e001      	b.n	80090f2 <LoopFillZerobss>

080090ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090f0:	3204      	adds	r2, #4

080090f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090f4:	d3fb      	bcc.n	80090ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80090f6:	f005 fa1b 	bl	800e530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80090fa:	f7fa fb59 	bl	80037b0 <main>

080090fe <LoopForever>:

LoopForever:
    b LoopForever
 80090fe:	e7fe      	b.n	80090fe <LoopForever>
  ldr   r0, =_estack
 8009100:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009108:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800910c:	0800f840 	.word	0x0800f840
  ldr r2, =_sbss
 8009110:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8009114:	20000824 	.word	0x20000824

08009118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009118:	e7fe      	b.n	8009118 <ADC1_2_IRQHandler>

0800911a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009124:	2003      	movs	r0, #3
 8009126:	f000 f95b 	bl	80093e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800912a:	2000      	movs	r0, #0
 800912c:	f000 f80e 	bl	800914c <HAL_InitTick>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	71fb      	strb	r3, [r7, #7]
 800913a:	e001      	b.n	8009140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800913c:	f7ff fd0c 	bl	8008b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009140:	79fb      	ldrb	r3, [r7, #7]

}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009158:	4b16      	ldr	r3, [pc, #88]	@ (80091b4 <HAL_InitTick+0x68>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d022      	beq.n	80091a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009160:	4b15      	ldr	r3, [pc, #84]	@ (80091b8 <HAL_InitTick+0x6c>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <HAL_InitTick+0x68>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800916c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f966 	bl	8009446 <HAL_SYSTICK_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10f      	bne.n	80091a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b0f      	cmp	r3, #15
 8009184:	d809      	bhi.n	800919a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009186:	2200      	movs	r2, #0
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800918e:	f000 f932 	bl	80093f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <HAL_InitTick+0x70>)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	e007      	b.n	80091aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e004      	b.n	80091aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	73fb      	strb	r3, [r7, #15]
 80091a4:	e001      	b.n	80091aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000008 	.word	0x20000008
 80091b8:	20000000 	.word	0x20000000
 80091bc:	20000004 	.word	0x20000004

080091c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <HAL_IncTick+0x1c>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b05      	ldr	r3, [pc, #20]	@ (80091e0 <HAL_IncTick+0x20>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4413      	add	r3, r2
 80091ce:	4a03      	ldr	r2, [pc, #12]	@ (80091dc <HAL_IncTick+0x1c>)
 80091d0:	6013      	str	r3, [r2, #0]
}
 80091d2:	bf00      	nop
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200006d0 	.word	0x200006d0
 80091e0:	20000008 	.word	0x20000008

080091e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  return uwTick;
 80091e8:	4b03      	ldr	r3, [pc, #12]	@ (80091f8 <HAL_GetTick+0x14>)
 80091ea:	681b      	ldr	r3, [r3, #0]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	200006d0 	.word	0x200006d0

080091fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009204:	f7ff ffee 	bl	80091e4 <HAL_GetTick>
 8009208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009214:	d004      	beq.n	8009220 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <HAL_Delay+0x40>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009220:	bf00      	nop
 8009222:	f7ff ffdf 	bl	80091e4 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	429a      	cmp	r2, r3
 8009230:	d8f7      	bhi.n	8009222 <HAL_Delay+0x26>
  {
  }
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000008 	.word	0x20000008

08009240 <__NVIC_SetPriorityGrouping>:
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009250:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <__NVIC_SetPriorityGrouping+0x44>)
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800925c:	4013      	ands	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800926c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009272:	4a04      	ldr	r2, [pc, #16]	@ (8009284 <__NVIC_SetPriorityGrouping+0x44>)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	60d3      	str	r3, [r2, #12]
}
 8009278:	bf00      	nop
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <__NVIC_GetPriorityGrouping>:
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800928c:	4b04      	ldr	r3, [pc, #16]	@ (80092a0 <__NVIC_GetPriorityGrouping+0x18>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	f003 0307 	and.w	r3, r3, #7
}
 8009296:	4618      	mov	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	e000ed00 	.word	0xe000ed00

080092a4 <__NVIC_EnableIRQ>:
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	db0b      	blt.n	80092ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	f003 021f 	and.w	r2, r3, #31
 80092bc:	4907      	ldr	r1, [pc, #28]	@ (80092dc <__NVIC_EnableIRQ+0x38>)
 80092be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	2001      	movs	r0, #1
 80092c6:	fa00 f202 	lsl.w	r2, r0, r2
 80092ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	e000e100 	.word	0xe000e100

080092e0 <__NVIC_SetPriority>:
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	db0a      	blt.n	800930a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	490c      	ldr	r1, [pc, #48]	@ (800932c <__NVIC_SetPriority+0x4c>)
 80092fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092fe:	0112      	lsls	r2, r2, #4
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	440b      	add	r3, r1
 8009304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009308:	e00a      	b.n	8009320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4908      	ldr	r1, [pc, #32]	@ (8009330 <__NVIC_SetPriority+0x50>)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	3b04      	subs	r3, #4
 8009318:	0112      	lsls	r2, r2, #4
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	440b      	add	r3, r1
 800931e:	761a      	strb	r2, [r3, #24]
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	e000e100 	.word	0xe000e100
 8009330:	e000ed00 	.word	0xe000ed00

08009334 <NVIC_EncodePriority>:
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	@ 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	f1c3 0307 	rsb	r3, r3, #7
 800934e:	2b04      	cmp	r3, #4
 8009350:	bf28      	it	cs
 8009352:	2304      	movcs	r3, #4
 8009354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3304      	adds	r3, #4
 800935a:	2b06      	cmp	r3, #6
 800935c:	d902      	bls.n	8009364 <NVIC_EncodePriority+0x30>
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3b03      	subs	r3, #3
 8009362:	e000      	b.n	8009366 <NVIC_EncodePriority+0x32>
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	43da      	mvns	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	401a      	ands	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800937c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	fa01 f303 	lsl.w	r3, r1, r3
 8009386:	43d9      	mvns	r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800938c:	4313      	orrs	r3, r2
}
 800938e:	4618      	mov	r0, r3
 8009390:	3724      	adds	r7, #36	@ 0x24
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ac:	d301      	bcc.n	80093b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093ae:	2301      	movs	r3, #1
 80093b0:	e00f      	b.n	80093d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093b2:	4a0a      	ldr	r2, [pc, #40]	@ (80093dc <SysTick_Config+0x40>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093ba:	210f      	movs	r1, #15
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c0:	f7ff ff8e 	bl	80092e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <SysTick_Config+0x40>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093ca:	4b04      	ldr	r3, [pc, #16]	@ (80093dc <SysTick_Config+0x40>)
 80093cc:	2207      	movs	r2, #7
 80093ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	e000e010 	.word	0xe000e010

080093e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ff29 	bl	8009240 <__NVIC_SetPriorityGrouping>
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b086      	sub	sp, #24
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	4603      	mov	r3, r0
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009404:	f7ff ff40 	bl	8009288 <__NVIC_GetPriorityGrouping>
 8009408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	6978      	ldr	r0, [r7, #20]
 8009410:	f7ff ff90 	bl	8009334 <NVIC_EncodePriority>
 8009414:	4602      	mov	r2, r0
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff ff5f 	bl	80092e0 <__NVIC_SetPriority>
}
 8009422:	bf00      	nop
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	4603      	mov	r3, r0
 8009432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff ff33 	bl	80092a4 <__NVIC_EnableIRQ>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff ffa4 	bl	800939c <SysTick_Config>
 8009454:	4603      	mov	r3, r0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e147      	b.n	8009702 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fb8a 	bl	8008ba0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0210 	bic.w	r2, r2, #16
 800949a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800949c:	f7ff fea2 	bl	80091e4 <HAL_GetTick>
 80094a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80094a2:	e012      	b.n	80094ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80094a4:	f7ff fe9e 	bl	80091e4 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b0a      	cmp	r3, #10
 80094b0:	d90b      	bls.n	80094ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b6:	f043 0201 	orr.w	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2203      	movs	r2, #3
 80094c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e11b      	b.n	8009702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d0e5      	beq.n	80094a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0201 	orr.w	r2, r2, #1
 80094e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094e8:	f7ff fe7c 	bl	80091e4 <HAL_GetTick>
 80094ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80094ee:	e012      	b.n	8009516 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80094f0:	f7ff fe78 	bl	80091e4 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b0a      	cmp	r3, #10
 80094fc:	d90b      	bls.n	8009516 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009502:	f043 0201 	orr.w	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2203      	movs	r2, #3
 800950e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e0f5      	b.n	8009702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0e5      	beq.n	80094f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699a      	ldr	r2, [r3, #24]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0202 	orr.w	r2, r2, #2
 8009532:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a74      	ldr	r2, [pc, #464]	@ (800970c <HAL_FDCAN_Init+0x2ac>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d103      	bne.n	8009546 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800953e:	4a74      	ldr	r2, [pc, #464]	@ (8009710 <HAL_FDCAN_Init+0x2b0>)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7c1b      	ldrb	r3, [r3, #16]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d108      	bne.n	8009560 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800955c:	619a      	str	r2, [r3, #24]
 800955e:	e007      	b.n	8009570 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800956e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	7c5b      	ldrb	r3, [r3, #17]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d108      	bne.n	800958a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009586:	619a      	str	r2, [r3, #24]
 8009588:	e007      	b.n	800959a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009598:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	7c9b      	ldrb	r3, [r3, #18]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d108      	bne.n	80095b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095b0:	619a      	str	r2, [r3, #24]
 80095b2:	e007      	b.n	80095c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80095e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0210 	bic.w	r2, r2, #16
 80095f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d108      	bne.n	8009614 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0204 	orr.w	r2, r2, #4
 8009610:	619a      	str	r2, [r3, #24]
 8009612:	e02c      	b.n	800966e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d028      	beq.n	800966e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d01c      	beq.n	800965e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009632:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0210 	orr.w	r2, r2, #16
 8009642:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d110      	bne.n	800966e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0220 	orr.w	r2, r2, #32
 800965a:	619a      	str	r2, [r3, #24]
 800965c:	e007      	b.n	800966e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f042 0220 	orr.w	r2, r2, #32
 800966c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	3b01      	subs	r3, #1
 8009674:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	3b01      	subs	r3, #1
 800967c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800967e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009686:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	3b01      	subs	r3, #1
 8009690:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009696:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009698:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096a2:	d115      	bne.n	80096d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ae:	3b01      	subs	r3, #1
 80096b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b8:	3b01      	subs	r3, #1
 80096ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80096bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c4:	3b01      	subs	r3, #1
 80096c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80096cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80096ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc0e 	bl	8009f08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40006400 	.word	0x40006400
 8009710:	40006500 	.word	0x40006500

08009714 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b01      	cmp	r3, #1
 8009726:	d110      	bne.n	800974a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0201 	bic.w	r2, r2, #1
 800973e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	e006      	b.n	8009758 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800974e:	f043 0204 	orr.w	r2, r3, #4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
  }
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b02      	cmp	r3, #2
 800977a:	d12c      	bne.n	80097d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d007      	beq.n	800979c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e023      	b.n	80097e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fbfe 	bl	8009fb4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2101      	movs	r1, #1
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	fa01 f202 	lsl.w	r2, r1, r2
 80097c4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80097c8:	2201      	movs	r2, #1
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	409a      	lsls	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e006      	b.n	80097e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097da:	f043 0208 	orr.w	r2, r3, #8
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
  }
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b08b      	sub	sp, #44	@ 0x2c
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009804:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8009806:	7efb      	ldrb	r3, [r7, #27]
 8009808:	2b02      	cmp	r3, #2
 800980a:	f040 80e8 	bne.w	80099de <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b40      	cmp	r3, #64	@ 0x40
 8009812:	d137      	bne.n	8009884 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	2b00      	cmp	r3, #0
 8009822:	d107      	bne.n	8009834 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009828:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e0db      	b.n	80099ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800983c:	0e1b      	lsrs	r3, r3, #24
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	d10a      	bne.n	800985c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984e:	0a5b      	lsrs	r3, r3, #9
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009858:	2301      	movs	r3, #1
 800985a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	0a1b      	lsrs	r3, r3, #8
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009874:	69fa      	ldr	r2, [r7, #28]
 8009876:	4613      	mov	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	4413      	add	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	440b      	add	r3, r1
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
 8009882:	e036      	b.n	80098f2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	2b00      	cmp	r3, #0
 8009892:	d107      	bne.n	80098a4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0a3      	b.n	80099ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098ac:	0e1b      	lsrs	r3, r3, #24
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d10a      	bne.n	80098cc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80098c8:	2301      	movs	r3, #1
 80098ca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d107      	bne.n	8009916 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	0c9b      	lsrs	r3, r3, #18
 800990c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e005      	b.n	8009922 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	3304      	adds	r3, #4
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	0c1b      	lsrs	r3, r3, #16
 8009950:	f003 020f 	and.w	r2, r3, #15
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	0e1b      	lsrs	r3, r3, #24
 8009976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	0fda      	lsrs	r2, r3, #31
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	3304      	adds	r3, #4
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009992:	2300      	movs	r3, #0
 8009994:	623b      	str	r3, [r7, #32]
 8009996:	e00a      	b.n	80099ae <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	441a      	add	r2, r3
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	440b      	add	r3, r1
 80099a4:	7812      	ldrb	r2, [r2, #0]
 80099a6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	3301      	adds	r3, #1
 80099ac:	623b      	str	r3, [r7, #32]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	4a11      	ldr	r2, [pc, #68]	@ (80099f8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80099b4:	5cd3      	ldrb	r3, [r2, r3]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d3ec      	bcc.n	8009998 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b40      	cmp	r3, #64	@ 0x40
 80099c2:	d105      	bne.n	80099d0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	69fa      	ldr	r2, [r7, #28]
 80099ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80099ce:	e004      	b.n	80099da <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	e006      	b.n	80099ec <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099e2:	f043 0208 	orr.w	r2, r3, #8
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
  }
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	372c      	adds	r7, #44	@ 0x2c
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	0800f75c 	.word	0x0800f75c

080099fc <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009a32:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d003      	beq.n	8009a42 <HAL_FDCAN_ActivateNotification+0x22>
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	f040 80c8 	bne.w	8009bd2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a48:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d03b      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d031      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d027      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d004      	beq.n	8009a9a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f003 0308 	and.w	r3, r3, #8
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01d      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d013      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00c      	beq.n	8009ae6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d107      	bne.n	8009ae6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0201 	orr.w	r2, r2, #1
 8009ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f003 0307 	and.w	r3, r3, #7
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d13b      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d131      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d127      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d004      	beq.n	8009b36 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11d      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d113      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d109      	bne.n	8009b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 0202 	orr.w	r2, r2, #2
 8009b80:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e006      	b.n	8009be0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd6:	f043 0202 	orr.w	r2, r3, #2
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	@ 0x30
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c08:	4013      	ands	r3, r2
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c20:	4013      	ands	r3, r2
 8009c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c38:	4013      	ands	r3, r2
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c42:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8009c46:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	4013      	ands	r3, r2
 8009c52:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8009c5e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c72:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d006      	beq.n	8009c9e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2240      	movs	r2, #64	@ 0x40
 8009c96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f916 	bl	8009eca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d019      	beq.n	8009cdc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d014      	beq.n	8009cdc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009cba:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009cd4:	6939      	ldr	r1, [r7, #16]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f8d8 	bl	8009e8c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ce8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f8a2 	bl	8009e36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cfe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7f8 fd18 	bl	8002738 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d14:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f897 	bl	8009e4c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00c      	beq.n	8009d42 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f890 	bl	8009e62 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d018      	beq.n	8009d7e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d013      	beq.n	8009d7e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009d5e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2280      	movs	r2, #128	@ 0x80
 8009d74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f87c 	bl	8009e76 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00c      	beq.n	8009da2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d007      	beq.n	8009da2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f880 	bl	8009ea2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00c      	beq.n	8009dc6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009dbe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f878 	bl	8009eb6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00f      	beq.n	8009df0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009de2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009de8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009dfe:	69f9      	ldr	r1, [r7, #28]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f876 	bl	8009ef2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d009      	beq.n	8009e20 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a3a      	ldr	r2, [r7, #32]
 8009e12:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f858 	bl	8009ede <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3730      	adds	r7, #48	@ 0x30
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009f10:	4b27      	ldr	r3, [pc, #156]	@ (8009fb0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8009f12:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f22:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2a:	041a      	lsls	r2, r3, #16
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f48:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	061a      	lsls	r2, r3, #24
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	e005      	b.n	8009f96 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3304      	adds	r3, #4
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d3f3      	bcc.n	8009f8a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	4000a400 	.word	0x4000a400

08009fb4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b089      	sub	sp, #36	@ 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009fd2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	e00a      	b.n	8009ff6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009fe8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009fee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009ff0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ff4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a000:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a006:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a00c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a014:	4313      	orrs	r3, r2
 800a016:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	4613      	mov	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4413      	add	r3, r2
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	440b      	add	r3, r1
 800a028:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	3304      	adds	r3, #4
 800a034:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	3304      	adds	r3, #4
 800a040:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e020      	b.n	800a08a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	3303      	adds	r3, #3
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	3302      	adds	r3, #2
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	440b      	add	r3, r1
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a060:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	3301      	adds	r3, #1
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	440b      	add	r3, r1
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a06e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	440a      	add	r2, r1
 800a076:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a078:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	3304      	adds	r3, #4
 800a082:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	3304      	adds	r3, #4
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	4a06      	ldr	r2, [pc, #24]	@ (800a0a8 <FDCAN_CopyMessageToRAM+0xf4>)
 800a090:	5cd3      	ldrb	r3, [r2, r3]
 800a092:	461a      	mov	r2, r3
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	4293      	cmp	r3, r2
 800a098:	d3d6      	bcc.n	800a048 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	3724      	adds	r7, #36	@ 0x24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	0800f75c 	.word	0x0800f75c

0800a0ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a0ba:	e15a      	b.n	800a372 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 814c 	beq.w	800a36c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d005      	beq.n	800a0ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d130      	bne.n	800a14e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fc:	43db      	mvns	r3, r3
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4013      	ands	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a122:	2201      	movs	r2, #1
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	43db      	mvns	r3, r3
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4013      	ands	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	091b      	lsrs	r3, r3, #4
 800a138:	f003 0201 	and.w	r2, r3, #1
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4313      	orrs	r3, r2
 800a146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d017      	beq.n	800a18a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	2203      	movs	r2, #3
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43db      	mvns	r3, r3
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	4013      	ands	r3, r2
 800a170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	fa02 f303 	lsl.w	r3, r2, r3
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d123      	bne.n	800a1de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	08da      	lsrs	r2, r3, #3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3208      	adds	r2, #8
 800a19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	220f      	movs	r2, #15
 800a1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	08da      	lsrs	r2, r3, #3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3208      	adds	r2, #8
 800a1d8:	6939      	ldr	r1, [r7, #16]
 800a1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 0203 	and.w	r2, r3, #3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	fa02 f303 	lsl.w	r3, r2, r3
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	4313      	orrs	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80a6 	beq.w	800a36c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a220:	4b5b      	ldr	r3, [pc, #364]	@ (800a390 <HAL_GPIO_Init+0x2e4>)
 800a222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a224:	4a5a      	ldr	r2, [pc, #360]	@ (800a390 <HAL_GPIO_Init+0x2e4>)
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	6613      	str	r3, [r2, #96]	@ 0x60
 800a22c:	4b58      	ldr	r3, [pc, #352]	@ (800a390 <HAL_GPIO_Init+0x2e4>)
 800a22e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	60bb      	str	r3, [r7, #8]
 800a236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a238:	4a56      	ldr	r2, [pc, #344]	@ (800a394 <HAL_GPIO_Init+0x2e8>)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	3302      	adds	r3, #2
 800a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	220f      	movs	r2, #15
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43db      	mvns	r3, r3
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4013      	ands	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a262:	d01f      	beq.n	800a2a4 <HAL_GPIO_Init+0x1f8>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a4c      	ldr	r2, [pc, #304]	@ (800a398 <HAL_GPIO_Init+0x2ec>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d019      	beq.n	800a2a0 <HAL_GPIO_Init+0x1f4>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a4b      	ldr	r2, [pc, #300]	@ (800a39c <HAL_GPIO_Init+0x2f0>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d013      	beq.n	800a29c <HAL_GPIO_Init+0x1f0>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a4a      	ldr	r2, [pc, #296]	@ (800a3a0 <HAL_GPIO_Init+0x2f4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d00d      	beq.n	800a298 <HAL_GPIO_Init+0x1ec>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a49      	ldr	r2, [pc, #292]	@ (800a3a4 <HAL_GPIO_Init+0x2f8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d007      	beq.n	800a294 <HAL_GPIO_Init+0x1e8>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a48      	ldr	r2, [pc, #288]	@ (800a3a8 <HAL_GPIO_Init+0x2fc>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d101      	bne.n	800a290 <HAL_GPIO_Init+0x1e4>
 800a28c:	2305      	movs	r3, #5
 800a28e:	e00a      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a290:	2306      	movs	r3, #6
 800a292:	e008      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a294:	2304      	movs	r3, #4
 800a296:	e006      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a298:	2303      	movs	r3, #3
 800a29a:	e004      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e002      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <HAL_GPIO_Init+0x1fa>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	f002 0203 	and.w	r2, r2, #3
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	4093      	lsls	r3, r2
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2b6:	4937      	ldr	r1, [pc, #220]	@ (800a394 <HAL_GPIO_Init+0x2e8>)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	089b      	lsrs	r3, r3, #2
 800a2bc:	3302      	adds	r3, #2
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a2c4:	4b39      	ldr	r3, [pc, #228]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	43db      	mvns	r3, r3
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a2e8:	4a30      	ldr	r2, [pc, #192]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	43db      	mvns	r3, r3
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4313      	orrs	r3, r2
 800a310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a312:	4a26      	ldr	r2, [pc, #152]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a318:	4b24      	ldr	r3, [pc, #144]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	43db      	mvns	r3, r3
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4013      	ands	r3, r2
 800a326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a33c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a342:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	43db      	mvns	r3, r3
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	4013      	ands	r3, r2
 800a350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a366:	4a11      	ldr	r2, [pc, #68]	@ (800a3ac <HAL_GPIO_Init+0x300>)
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	3301      	adds	r3, #1
 800a370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f47f ae9d 	bne.w	800a0bc <HAL_GPIO_Init+0x10>
  }
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	371c      	adds	r7, #28
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	40021000 	.word	0x40021000
 800a394:	40010000 	.word	0x40010000
 800a398:	48000400 	.word	0x48000400
 800a39c:	48000800 	.word	0x48000800
 800a3a0:	48000c00 	.word	0x48000c00
 800a3a4:	48001000 	.word	0x48001000
 800a3a8:	48001400 	.word	0x48001400
 800a3ac:	40010400 	.word	0x40010400

0800a3b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	887b      	ldrh	r3, [r7, #2]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	73fb      	strb	r3, [r7, #15]
 800a3cc:	e001      	b.n	800a3d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3f0:	787b      	ldrb	r3, [r7, #1]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3f6:	887a      	ldrh	r2, [r7, #2]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3fc:	e002      	b.n	800a404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3fe:	887a      	ldrh	r2, [r7, #2]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a422:	887a      	ldrh	r2, [r7, #2]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4013      	ands	r3, r2
 800a428:	041a      	lsls	r2, r3, #16
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	43d9      	mvns	r1, r3
 800a42e:	887b      	ldrh	r3, [r7, #2]
 800a430:	400b      	ands	r3, r1
 800a432:	431a      	orrs	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	619a      	str	r2, [r3, #24]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e08d      	b.n	800a572 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7fe fbfa 	bl	8008c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2224      	movs	r2, #36	@ 0x24
 800a474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d107      	bne.n	800a4be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4ba:	609a      	str	r2, [r3, #8]
 800a4bc:	e006      	b.n	800a4cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a4ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d108      	bne.n	800a4e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	e007      	b.n	800a4f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6812      	ldr	r2, [r2, #0]
 800a500:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68da      	ldr	r2, [r3, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	69d9      	ldr	r1, [r3, #28]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0201 	orr.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af02      	add	r7, sp, #8
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	461a      	mov	r2, r3
 800a588:	460b      	mov	r3, r1
 800a58a:	817b      	strh	r3, [r7, #10]
 800a58c:	4613      	mov	r3, r2
 800a58e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b20      	cmp	r3, #32
 800a59a:	f040 80fd 	bne.w	800a798 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <HAL_I2C_Master_Transmit+0x30>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e0f6      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a5b4:	f7fe fe16 	bl	80091e4 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2319      	movs	r3, #25
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fa0a 	bl	800a9e0 <I2C_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e0e1      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2221      	movs	r2, #33	@ 0x21
 800a5da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	893a      	ldrh	r2, [r7, #8]
 800a5f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a602:	b29b      	uxth	r3, r3
 800a604:	2bff      	cmp	r3, #255	@ 0xff
 800a606:	d906      	bls.n	800a616 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	22ff      	movs	r2, #255	@ 0xff
 800a60c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a60e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	e007      	b.n	800a626 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a624:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d024      	beq.n	800a678 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	781a      	ldrb	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	3b01      	subs	r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a656:	3b01      	subs	r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a662:	b2db      	uxtb	r3, r3
 800a664:	3301      	adds	r3, #1
 800a666:	b2da      	uxtb	r2, r3
 800a668:	8979      	ldrh	r1, [r7, #10]
 800a66a:	4b4e      	ldr	r3, [pc, #312]	@ (800a7a4 <HAL_I2C_Master_Transmit+0x228>)
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 fc05 	bl	800ae80 <I2C_TransferConfig>
 800a676:	e066      	b.n	800a746 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	8979      	ldrh	r1, [r7, #10]
 800a680:	4b48      	ldr	r3, [pc, #288]	@ (800a7a4 <HAL_I2C_Master_Transmit+0x228>)
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 fbfa 	bl	800ae80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a68c:	e05b      	b.n	800a746 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	6a39      	ldr	r1, [r7, #32]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 f9fd 	bl	800aa92 <I2C_WaitOnTXISFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e07b      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d034      	beq.n	800a746 <HAL_I2C_Master_Transmit+0x1ca>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d130      	bne.n	800a746 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2180      	movs	r1, #128	@ 0x80
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f976 	bl	800a9e0 <I2C_WaitOnFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e04d      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a702:	b29b      	uxth	r3, r3
 800a704:	2bff      	cmp	r3, #255	@ 0xff
 800a706:	d90e      	bls.n	800a726 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	22ff      	movs	r2, #255	@ 0xff
 800a70c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a712:	b2da      	uxtb	r2, r3
 800a714:	8979      	ldrh	r1, [r7, #10]
 800a716:	2300      	movs	r3, #0
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fbae 	bl	800ae80 <I2C_TransferConfig>
 800a724:	e00f      	b.n	800a746 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a734:	b2da      	uxtb	r2, r3
 800a736:	8979      	ldrh	r1, [r7, #10]
 800a738:	2300      	movs	r3, #0
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fb9d 	bl	800ae80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d19e      	bne.n	800a68e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	6a39      	ldr	r1, [r7, #32]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f9e3 	bl	800ab20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e01a      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2220      	movs	r2, #32
 800a76a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6859      	ldr	r1, [r3, #4]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a8 <HAL_I2C_Master_Transmit+0x22c>)
 800a778:	400b      	ands	r3, r1
 800a77a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	e000      	b.n	800a79a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800a798:	2302      	movs	r3, #2
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	80002000 	.word	0x80002000
 800a7a8:	fe00e800 	.word	0xfe00e800

0800a7ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	817b      	strh	r3, [r7, #10]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	f040 80db 	bne.w	800a984 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_I2C_Master_Receive+0x30>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e0d4      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a7e4:	f7fe fcfe 	bl	80091e4 <HAL_GetTick>
 800a7e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	2319      	movs	r3, #25
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f8f2 	bl	800a9e0 <I2C_WaitOnFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e0bf      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2222      	movs	r2, #34	@ 0x22
 800a80a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2210      	movs	r2, #16
 800a812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	893a      	ldrh	r2, [r7, #8]
 800a826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a832:	b29b      	uxth	r3, r3
 800a834:	2bff      	cmp	r3, #255	@ 0xff
 800a836:	d90e      	bls.n	800a856 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	22ff      	movs	r2, #255	@ 0xff
 800a83c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a842:	b2da      	uxtb	r2, r3
 800a844:	8979      	ldrh	r1, [r7, #10]
 800a846:	4b52      	ldr	r3, [pc, #328]	@ (800a990 <HAL_I2C_Master_Receive+0x1e4>)
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 fb16 	bl	800ae80 <I2C_TransferConfig>
 800a854:	e06d      	b.n	800a932 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a864:	b2da      	uxtb	r2, r3
 800a866:	8979      	ldrh	r1, [r7, #10]
 800a868:	4b49      	ldr	r3, [pc, #292]	@ (800a990 <HAL_I2C_Master_Receive+0x1e4>)
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fb05 	bl	800ae80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a876:	e05c      	b.n	800a932 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	6a39      	ldr	r1, [r7, #32]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 f993 	bl	800aba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e07c      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a896:	b2d2      	uxtb	r2, r2
 800a898:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d034      	beq.n	800a932 <HAL_I2C_Master_Receive+0x186>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d130      	bne.n	800a932 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2180      	movs	r1, #128	@ 0x80
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f880 	bl	800a9e0 <I2C_WaitOnFlagUntilTimeout>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e04d      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	2bff      	cmp	r3, #255	@ 0xff
 800a8f2:	d90e      	bls.n	800a912 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	22ff      	movs	r2, #255	@ 0xff
 800a8f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	8979      	ldrh	r1, [r7, #10]
 800a902:	2300      	movs	r3, #0
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 fab8 	bl	800ae80 <I2C_TransferConfig>
 800a910:	e00f      	b.n	800a932 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a920:	b2da      	uxtb	r2, r3
 800a922:	8979      	ldrh	r1, [r7, #10]
 800a924:	2300      	movs	r3, #0
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 faa7 	bl	800ae80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a936:	b29b      	uxth	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d19d      	bne.n	800a878 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	6a39      	ldr	r1, [r7, #32]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f8ed 	bl	800ab20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e01a      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2220      	movs	r2, #32
 800a956:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6859      	ldr	r1, [r3, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b0c      	ldr	r3, [pc, #48]	@ (800a994 <HAL_I2C_Master_Receive+0x1e8>)
 800a964:	400b      	ands	r3, r1
 800a966:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e000      	b.n	800a986 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a984:	2302      	movs	r3, #2
  }
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	80002400 	.word	0x80002400
 800a994:	fe00e800 	.word	0xfe00e800

0800a998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d103      	bne.n	800a9b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d007      	beq.n	800a9d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	699a      	ldr	r2, [r3, #24]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	619a      	str	r2, [r3, #24]
  }
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9f0:	e03b      	b.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f962 	bl	800acc0 <I2C_IsErrorOccurred>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e041      	b.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa0c:	d02d      	beq.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0e:	f7fe fbe9 	bl	80091e4 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d302      	bcc.n	800aa24 <I2C_WaitOnFlagUntilTimeout+0x44>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d122      	bne.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	bf0c      	ite	eq
 800aa34:	2301      	moveq	r3, #1
 800aa36:	2300      	movne	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d113      	bne.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa46:	f043 0220 	orr.w	r2, r3, #32
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e00f      	b.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	4013      	ands	r3, r2
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d0b4      	beq.n	800a9f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa9e:	e033      	b.n	800ab08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	68b9      	ldr	r1, [r7, #8]
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 f90b 	bl	800acc0 <I2C_IsErrorOccurred>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e031      	b.n	800ab18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaba:	d025      	beq.n	800ab08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aabc:	f7fe fb92 	bl	80091e4 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d302      	bcc.n	800aad2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d11a      	bne.n	800ab08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d013      	beq.n	800ab08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae4:	f043 0220 	orr.w	r2, r3, #32
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e007      	b.n	800ab18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	f003 0302 	and.w	r3, r3, #2
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d1c4      	bne.n	800aaa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab2c:	e02f      	b.n	800ab8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	68b9      	ldr	r1, [r7, #8]
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f8c4 	bl	800acc0 <I2C_IsErrorOccurred>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e02d      	b.n	800ab9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab42:	f7fe fb4f 	bl	80091e4 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d302      	bcc.n	800ab58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d11a      	bne.n	800ab8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f003 0320 	and.w	r3, r3, #32
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d013      	beq.n	800ab8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6a:	f043 0220 	orr.w	r2, r3, #32
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e007      	b.n	800ab9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b20      	cmp	r3, #32
 800ab9a:	d1c8      	bne.n	800ab2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800abb8:	e071      	b.n	800ac9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	68b9      	ldr	r1, [r7, #8]
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 f87e 	bl	800acc0 <I2C_IsErrorOccurred>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d13b      	bne.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d138      	bne.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b04      	cmp	r3, #4
 800abee:	d105      	bne.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	f003 0310 	and.w	r3, r3, #16
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d121      	bne.n	800ac4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2210      	movs	r2, #16
 800ac10:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2204      	movs	r2, #4
 800ac16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6859      	ldr	r1, [r3, #4]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b24      	ldr	r3, [pc, #144]	@ (800acbc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ac2c:	400b      	ands	r3, r1
 800ac2e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2220      	movs	r2, #32
 800ac34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	75fb      	strb	r3, [r7, #23]
 800ac4c:	e002      	b.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ac54:	f7fe fac6 	bl	80091e4 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d302      	bcc.n	800ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d119      	bne.n	800ac9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d116      	bne.n	800ac9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	f003 0304 	and.w	r3, r3, #4
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d00f      	beq.n	800ac9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac82:	f043 0220 	orr.w	r2, r3, #32
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d002      	beq.n	800acb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d083      	beq.n	800abba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	fe00e800 	.word	0xfe00e800

0800acc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	@ 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	f003 0310 	and.w	r3, r3, #16
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d068      	beq.n	800adbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2210      	movs	r2, #16
 800acf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800acf4:	e049      	b.n	800ad8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acfc:	d045      	beq.n	800ad8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800acfe:	f7fe fa71 	bl	80091e4 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d302      	bcc.n	800ad14 <I2C_IsErrorOccurred+0x54>
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d13a      	bne.n	800ad8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad36:	d121      	bne.n	800ad7c <I2C_IsErrorOccurred+0xbc>
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad3e:	d01d      	beq.n	800ad7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ad40:	7cfb      	ldrb	r3, [r7, #19]
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d01a      	beq.n	800ad7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ad56:	f7fe fa45 	bl	80091e4 <HAL_GetTick>
 800ad5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad5c:	e00e      	b.n	800ad7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad5e:	f7fe fa41 	bl	80091e4 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b19      	cmp	r3, #25
 800ad6a:	d907      	bls.n	800ad7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	f043 0320 	orr.w	r3, r3, #32
 800ad72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ad7a:	e006      	b.n	800ad8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	f003 0320 	and.w	r3, r3, #32
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d1e9      	bne.n	800ad5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d003      	beq.n	800ada0 <I2C_IsErrorOccurred+0xe0>
 800ad98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0aa      	beq.n	800acf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ada0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2220      	movs	r2, #32
 800adae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	f043 0304 	orr.w	r3, r3, #4
 800adb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ade0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	f043 0308 	orr.w	r3, r3, #8
 800adf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ae02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	f043 0302 	orr.w	r3, r3, #2
 800ae1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ae2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01c      	beq.n	800ae6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fdaf 	bl	800a998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6859      	ldr	r1, [r3, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <I2C_IsErrorOccurred+0x1bc>)
 800ae46:	400b      	ands	r3, r1
 800ae48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	431a      	orrs	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ae6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3728      	adds	r7, #40	@ 0x28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	fe00e800 	.word	0xfe00e800

0800ae80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	817b      	strh	r3, [r7, #10]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae92:	897b      	ldrh	r3, [r7, #10]
 800ae94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae98:	7a7b      	ldrb	r3, [r7, #9]
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aea0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aeae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	0d5b      	lsrs	r3, r3, #21
 800aeba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aebe:	4b08      	ldr	r3, [pc, #32]	@ (800aee0 <I2C_TransferConfig+0x60>)
 800aec0:	430b      	orrs	r3, r1
 800aec2:	43db      	mvns	r3, r3
 800aec4:	ea02 0103 	and.w	r1, r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	430a      	orrs	r2, r1
 800aed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	03ff63ff 	.word	0x03ff63ff

0800aee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d138      	bne.n	800af6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800af04:	2302      	movs	r3, #2
 800af06:	e032      	b.n	800af6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2224      	movs	r2, #36	@ 0x24
 800af14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0201 	bic.w	r2, r2, #1
 800af26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800af36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0201 	orr.w	r2, r2, #1
 800af56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	e000      	b.n	800af6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af6c:	2302      	movs	r3, #2
  }
}
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b20      	cmp	r3, #32
 800af8e:	d139      	bne.n	800b004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e033      	b.n	800b006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2224      	movs	r2, #36	@ 0x24
 800afaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 0201 	bic.w	r2, r2, #1
 800afbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800afcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0201 	orr.w	r2, r2, #1
 800afee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	e000      	b.n	800b006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b004:	2302      	movs	r3, #2
  }
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
	...

0800b014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d141      	bne.n	800b0a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b022:	4b4b      	ldr	r3, [pc, #300]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b02a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b02e:	d131      	bne.n	800b094 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b030:	4b47      	ldr	r3, [pc, #284]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	4a46      	ldr	r2, [pc, #280]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b03c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b040:	4b43      	ldr	r3, [pc, #268]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b048:	4a41      	ldr	r2, [pc, #260]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b04a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b04e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b050:	4b40      	ldr	r3, [pc, #256]	@ (800b154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2232      	movs	r2, #50	@ 0x32
 800b056:	fb02 f303 	mul.w	r3, r2, r3
 800b05a:	4a3f      	ldr	r2, [pc, #252]	@ (800b158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b05c:	fba2 2303 	umull	r2, r3, r2, r3
 800b060:	0c9b      	lsrs	r3, r3, #18
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b066:	e002      	b.n	800b06e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b06e:	4b38      	ldr	r3, [pc, #224]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b07a:	d102      	bne.n	800b082 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1f2      	bne.n	800b068 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b082:	4b33      	ldr	r3, [pc, #204]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b08e:	d158      	bne.n	800b142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	e057      	b.n	800b144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b094:	4b2e      	ldr	r3, [pc, #184]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b09a:	4a2d      	ldr	r2, [pc, #180]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b09c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b0a4:	e04d      	b.n	800b142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0ac:	d141      	bne.n	800b132 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0ae:	4b28      	ldr	r3, [pc, #160]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b0b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ba:	d131      	bne.n	800b120 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0bc:	4b24      	ldr	r3, [pc, #144]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c2:	4a23      	ldr	r2, [pc, #140]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0cc:	4b20      	ldr	r3, [pc, #128]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b0d4:	4a1e      	ldr	r2, [pc, #120]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b0da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2232      	movs	r2, #50	@ 0x32
 800b0e2:	fb02 f303 	mul.w	r3, r2, r3
 800b0e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ec:	0c9b      	lsrs	r3, r3, #18
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0f2:	e002      	b.n	800b0fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0fa:	4b15      	ldr	r3, [pc, #84]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b106:	d102      	bne.n	800b10e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1f2      	bne.n	800b0f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b10e:	4b10      	ldr	r3, [pc, #64]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b11a:	d112      	bne.n	800b142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e011      	b.n	800b144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b120:	4b0b      	ldr	r3, [pc, #44]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b126:	4a0a      	ldr	r2, [pc, #40]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b12c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b130:	e007      	b.n	800b142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b132:	4b07      	ldr	r3, [pc, #28]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b13a:	4a05      	ldr	r2, [pc, #20]	@ (800b150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b13c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b140:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	40007000 	.word	0x40007000
 800b154:	20000000 	.word	0x20000000
 800b158:	431bde83 	.word	0x431bde83

0800b15c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b15c:	b480      	push	{r7}
 800b15e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b160:	4b05      	ldr	r3, [pc, #20]	@ (800b178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	4a04      	ldr	r2, [pc, #16]	@ (800b178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b16a:	6093      	str	r3, [r2, #8]
}
 800b16c:	bf00      	nop
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	40007000 	.word	0x40007000

0800b17c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e2fe      	b.n	800b78c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	d075      	beq.n	800b286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b19a:	4b97      	ldr	r3, [pc, #604]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f003 030c 	and.w	r3, r3, #12
 800b1a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1a4:	4b94      	ldr	r3, [pc, #592]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b0c      	cmp	r3, #12
 800b1b2:	d102      	bne.n	800b1ba <HAL_RCC_OscConfig+0x3e>
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d002      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x44>
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d10b      	bne.n	800b1d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1c0:	4b8d      	ldr	r3, [pc, #564]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05b      	beq.n	800b284 <HAL_RCC_OscConfig+0x108>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d157      	bne.n	800b284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e2d9      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1e0:	d106      	bne.n	800b1f0 <HAL_RCC_OscConfig+0x74>
 800b1e2:	4b85      	ldr	r3, [pc, #532]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a84      	ldr	r2, [pc, #528]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b1e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	e01d      	b.n	800b22c <HAL_RCC_OscConfig+0xb0>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b1f8:	d10c      	bne.n	800b214 <HAL_RCC_OscConfig+0x98>
 800b1fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a7e      	ldr	r2, [pc, #504]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	4b7c      	ldr	r3, [pc, #496]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a7b      	ldr	r2, [pc, #492]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b20c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	e00b      	b.n	800b22c <HAL_RCC_OscConfig+0xb0>
 800b214:	4b78      	ldr	r3, [pc, #480]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a77      	ldr	r2, [pc, #476]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b21a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	4b75      	ldr	r3, [pc, #468]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a74      	ldr	r2, [pc, #464]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b22a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d013      	beq.n	800b25c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b234:	f7fd ffd6 	bl	80091e4 <HAL_GetTick>
 800b238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b23a:	e008      	b.n	800b24e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b23c:	f7fd ffd2 	bl	80091e4 <HAL_GetTick>
 800b240:	4602      	mov	r2, r0
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	2b64      	cmp	r3, #100	@ 0x64
 800b248:	d901      	bls.n	800b24e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e29e      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b24e:	4b6a      	ldr	r3, [pc, #424]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0f0      	beq.n	800b23c <HAL_RCC_OscConfig+0xc0>
 800b25a:	e014      	b.n	800b286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b25c:	f7fd ffc2 	bl	80091e4 <HAL_GetTick>
 800b260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b262:	e008      	b.n	800b276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b264:	f7fd ffbe 	bl	80091e4 <HAL_GetTick>
 800b268:	4602      	mov	r2, r0
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	2b64      	cmp	r3, #100	@ 0x64
 800b270:	d901      	bls.n	800b276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b272:	2303      	movs	r3, #3
 800b274:	e28a      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b276:	4b60      	ldr	r3, [pc, #384]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1f0      	bne.n	800b264 <HAL_RCC_OscConfig+0xe8>
 800b282:	e000      	b.n	800b286 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d075      	beq.n	800b37e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b292:	4b59      	ldr	r3, [pc, #356]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f003 030c 	and.w	r3, r3, #12
 800b29a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b29c:	4b56      	ldr	r3, [pc, #344]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f003 0303 	and.w	r3, r3, #3
 800b2a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b0c      	cmp	r3, #12
 800b2aa:	d102      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x136>
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d002      	beq.n	800b2b8 <HAL_RCC_OscConfig+0x13c>
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d11f      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2b8:	4b4f      	ldr	r3, [pc, #316]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d005      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x154>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e25d      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2d0:	4b49      	ldr	r3, [pc, #292]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	061b      	lsls	r3, r3, #24
 800b2de:	4946      	ldr	r1, [pc, #280]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b2e4:	4b45      	ldr	r3, [pc, #276]	@ (800b3fc <HAL_RCC_OscConfig+0x280>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd ff2f 	bl	800914c <HAL_InitTick>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d043      	beq.n	800b37c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e249      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d023      	beq.n	800b348 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b300:	4b3d      	ldr	r3, [pc, #244]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a3c      	ldr	r2, [pc, #240]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b30a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b30c:	f7fd ff6a 	bl	80091e4 <HAL_GetTick>
 800b310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b312:	e008      	b.n	800b326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b314:	f7fd ff66 	bl	80091e4 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d901      	bls.n	800b326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e232      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b326:	4b34      	ldr	r3, [pc, #208]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0f0      	beq.n	800b314 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b332:	4b31      	ldr	r3, [pc, #196]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	061b      	lsls	r3, r3, #24
 800b340:	492d      	ldr	r1, [pc, #180]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b342:	4313      	orrs	r3, r2
 800b344:	604b      	str	r3, [r1, #4]
 800b346:	e01a      	b.n	800b37e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b348:	4b2b      	ldr	r3, [pc, #172]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a2a      	ldr	r2, [pc, #168]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b34e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b354:	f7fd ff46 	bl	80091e4 <HAL_GetTick>
 800b358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b35a:	e008      	b.n	800b36e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b35c:	f7fd ff42 	bl	80091e4 <HAL_GetTick>
 800b360:	4602      	mov	r2, r0
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	2b02      	cmp	r3, #2
 800b368:	d901      	bls.n	800b36e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e20e      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b36e:	4b22      	ldr	r3, [pc, #136]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1f0      	bne.n	800b35c <HAL_RCC_OscConfig+0x1e0>
 800b37a:	e000      	b.n	800b37e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b37c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0308 	and.w	r3, r3, #8
 800b386:	2b00      	cmp	r3, #0
 800b388:	d041      	beq.n	800b40e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d01c      	beq.n	800b3cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b392:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b398:	4a17      	ldr	r2, [pc, #92]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3a2:	f7fd ff1f 	bl	80091e4 <HAL_GetTick>
 800b3a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3a8:	e008      	b.n	800b3bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3aa:	f7fd ff1b 	bl	80091e4 <HAL_GetTick>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d901      	bls.n	800b3bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e1e7      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3c2:	f003 0302 	and.w	r3, r3, #2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ef      	beq.n	800b3aa <HAL_RCC_OscConfig+0x22e>
 800b3ca:	e020      	b.n	800b40e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b3ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3d2:	4a09      	ldr	r2, [pc, #36]	@ (800b3f8 <HAL_RCC_OscConfig+0x27c>)
 800b3d4:	f023 0301 	bic.w	r3, r3, #1
 800b3d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3dc:	f7fd ff02 	bl	80091e4 <HAL_GetTick>
 800b3e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b3e2:	e00d      	b.n	800b400 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3e4:	f7fd fefe 	bl	80091e4 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d906      	bls.n	800b400 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e1ca      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
 800b3f6:	bf00      	nop
 800b3f8:	40021000 	.word	0x40021000
 800b3fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b400:	4b8c      	ldr	r3, [pc, #560]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1ea      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 80a6 	beq.w	800b568 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b41c:	2300      	movs	r3, #0
 800b41e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b420:	4b84      	ldr	r3, [pc, #528]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <HAL_RCC_OscConfig+0x2b4>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e000      	b.n	800b432 <HAL_RCC_OscConfig+0x2b6>
 800b430:	2300      	movs	r3, #0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00d      	beq.n	800b452 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b436:	4b7f      	ldr	r3, [pc, #508]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43a:	4a7e      	ldr	r2, [pc, #504]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b43c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b440:	6593      	str	r3, [r2, #88]	@ 0x58
 800b442:	4b7c      	ldr	r3, [pc, #496]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b44e:	2301      	movs	r3, #1
 800b450:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b452:	4b79      	ldr	r3, [pc, #484]	@ (800b638 <HAL_RCC_OscConfig+0x4bc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d118      	bne.n	800b490 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b45e:	4b76      	ldr	r3, [pc, #472]	@ (800b638 <HAL_RCC_OscConfig+0x4bc>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a75      	ldr	r2, [pc, #468]	@ (800b638 <HAL_RCC_OscConfig+0x4bc>)
 800b464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b46a:	f7fd febb 	bl	80091e4 <HAL_GetTick>
 800b46e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b470:	e008      	b.n	800b484 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b472:	f7fd feb7 	bl	80091e4 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d901      	bls.n	800b484 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e183      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b484:	4b6c      	ldr	r3, [pc, #432]	@ (800b638 <HAL_RCC_OscConfig+0x4bc>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0f0      	beq.n	800b472 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d108      	bne.n	800b4aa <HAL_RCC_OscConfig+0x32e>
 800b498:	4b66      	ldr	r3, [pc, #408]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49e:	4a65      	ldr	r2, [pc, #404]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4a0:	f043 0301 	orr.w	r3, r3, #1
 800b4a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4a8:	e024      	b.n	800b4f4 <HAL_RCC_OscConfig+0x378>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b05      	cmp	r3, #5
 800b4b0:	d110      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x358>
 800b4b2:	4b60      	ldr	r3, [pc, #384]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4b8:	4a5e      	ldr	r2, [pc, #376]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4ba:	f043 0304 	orr.w	r3, r3, #4
 800b4be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4c2:	4b5c      	ldr	r3, [pc, #368]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4c8:	4a5a      	ldr	r2, [pc, #360]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4d2:	e00f      	b.n	800b4f4 <HAL_RCC_OscConfig+0x378>
 800b4d4:	4b57      	ldr	r3, [pc, #348]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4da:	4a56      	ldr	r2, [pc, #344]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4dc:	f023 0301 	bic.w	r3, r3, #1
 800b4e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b4e4:	4b53      	ldr	r3, [pc, #332]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ea:	4a52      	ldr	r2, [pc, #328]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b4ec:	f023 0304 	bic.w	r3, r3, #4
 800b4f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d016      	beq.n	800b52a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4fc:	f7fd fe72 	bl	80091e4 <HAL_GetTick>
 800b500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b502:	e00a      	b.n	800b51a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b504:	f7fd fe6e 	bl	80091e4 <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b512:	4293      	cmp	r3, r2
 800b514:	d901      	bls.n	800b51a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e138      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b51a:	4b46      	ldr	r3, [pc, #280]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0ed      	beq.n	800b504 <HAL_RCC_OscConfig+0x388>
 800b528:	e015      	b.n	800b556 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b52a:	f7fd fe5b 	bl	80091e4 <HAL_GetTick>
 800b52e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b530:	e00a      	b.n	800b548 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b532:	f7fd fe57 	bl	80091e4 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b540:	4293      	cmp	r3, r2
 800b542:	d901      	bls.n	800b548 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e121      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b548:	4b3a      	ldr	r3, [pc, #232]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1ed      	bne.n	800b532 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b556:	7ffb      	ldrb	r3, [r7, #31]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d105      	bne.n	800b568 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b55c:	4b35      	ldr	r3, [pc, #212]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b55e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b560:	4a34      	ldr	r2, [pc, #208]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b566:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 0320 	and.w	r3, r3, #32
 800b570:	2b00      	cmp	r3, #0
 800b572:	d03c      	beq.n	800b5ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01c      	beq.n	800b5b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b57c:	4b2d      	ldr	r3, [pc, #180]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b57e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b582:	4a2c      	ldr	r2, [pc, #176]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b584:	f043 0301 	orr.w	r3, r3, #1
 800b588:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b58c:	f7fd fe2a 	bl	80091e4 <HAL_GetTick>
 800b590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b592:	e008      	b.n	800b5a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b594:	f7fd fe26 	bl	80091e4 <HAL_GetTick>
 800b598:	4602      	mov	r2, r0
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d901      	bls.n	800b5a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e0f2      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5a6:	4b23      	ldr	r3, [pc, #140]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b5a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0ef      	beq.n	800b594 <HAL_RCC_OscConfig+0x418>
 800b5b4:	e01b      	b.n	800b5ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b5b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b5b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b5be:	f023 0301 	bic.w	r3, r3, #1
 800b5c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5c6:	f7fd fe0d 	bl	80091e4 <HAL_GetTick>
 800b5ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5cc:	e008      	b.n	800b5e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5ce:	f7fd fe09 	bl	80091e4 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d901      	bls.n	800b5e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e0d5      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5e0:	4b14      	ldr	r3, [pc, #80]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b5e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1ef      	bne.n	800b5ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80c9 	beq.w	800b78a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b5f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f003 030c 	and.w	r3, r3, #12
 800b600:	2b0c      	cmp	r3, #12
 800b602:	f000 8083 	beq.w	800b70c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d15e      	bne.n	800b6cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b60e:	4b09      	ldr	r3, [pc, #36]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a08      	ldr	r2, [pc, #32]	@ (800b634 <HAL_RCC_OscConfig+0x4b8>)
 800b614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b61a:	f7fd fde3 	bl	80091e4 <HAL_GetTick>
 800b61e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b620:	e00c      	b.n	800b63c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b622:	f7fd fddf 	bl	80091e4 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d905      	bls.n	800b63c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e0ab      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
 800b634:	40021000 	.word	0x40021000
 800b638:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b63c:	4b55      	ldr	r3, [pc, #340]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1ec      	bne.n	800b622 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b648:	4b52      	ldr	r3, [pc, #328]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	4b52      	ldr	r3, [pc, #328]	@ (800b798 <HAL_RCC_OscConfig+0x61c>)
 800b64e:	4013      	ands	r3, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6a11      	ldr	r1, [r2, #32]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b658:	3a01      	subs	r2, #1
 800b65a:	0112      	lsls	r2, r2, #4
 800b65c:	4311      	orrs	r1, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b662:	0212      	lsls	r2, r2, #8
 800b664:	4311      	orrs	r1, r2
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b66a:	0852      	lsrs	r2, r2, #1
 800b66c:	3a01      	subs	r2, #1
 800b66e:	0552      	lsls	r2, r2, #21
 800b670:	4311      	orrs	r1, r2
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b676:	0852      	lsrs	r2, r2, #1
 800b678:	3a01      	subs	r2, #1
 800b67a:	0652      	lsls	r2, r2, #25
 800b67c:	4311      	orrs	r1, r2
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b682:	06d2      	lsls	r2, r2, #27
 800b684:	430a      	orrs	r2, r1
 800b686:	4943      	ldr	r1, [pc, #268]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b68c:	4b41      	ldr	r3, [pc, #260]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a40      	ldr	r2, [pc, #256]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b698:	4b3e      	ldr	r3, [pc, #248]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	4a3d      	ldr	r2, [pc, #244]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b69e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a4:	f7fd fd9e 	bl	80091e4 <HAL_GetTick>
 800b6a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6aa:	e008      	b.n	800b6be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6ac:	f7fd fd9a 	bl	80091e4 <HAL_GetTick>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d901      	bls.n	800b6be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e066      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6be:	4b35      	ldr	r3, [pc, #212]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0f0      	beq.n	800b6ac <HAL_RCC_OscConfig+0x530>
 800b6ca:	e05e      	b.n	800b78a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6cc:	4b31      	ldr	r3, [pc, #196]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a30      	ldr	r2, [pc, #192]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b6d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d8:	f7fd fd84 	bl	80091e4 <HAL_GetTick>
 800b6dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6de:	e008      	b.n	800b6f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6e0:	f7fd fd80 	bl	80091e4 <HAL_GetTick>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d901      	bls.n	800b6f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e04c      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6f2:	4b28      	ldr	r3, [pc, #160]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1f0      	bne.n	800b6e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b6fe:	4b25      	ldr	r3, [pc, #148]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	4924      	ldr	r1, [pc, #144]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b704:	4b25      	ldr	r3, [pc, #148]	@ (800b79c <HAL_RCC_OscConfig+0x620>)
 800b706:	4013      	ands	r3, r2
 800b708:	60cb      	str	r3, [r1, #12]
 800b70a:	e03e      	b.n	800b78a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e039      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b718:	4b1e      	ldr	r3, [pc, #120]	@ (800b794 <HAL_RCC_OscConfig+0x618>)
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f003 0203 	and.w	r2, r3, #3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d12c      	bne.n	800b786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	3b01      	subs	r3, #1
 800b738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d123      	bne.n	800b786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d11b      	bne.n	800b786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d113      	bne.n	800b786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b768:	085b      	lsrs	r3, r3, #1
 800b76a:	3b01      	subs	r3, #1
 800b76c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b76e:	429a      	cmp	r2, r3
 800b770:	d109      	bne.n	800b786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b77c:	085b      	lsrs	r3, r3, #1
 800b77e:	3b01      	subs	r3, #1
 800b780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b782:	429a      	cmp	r2, r3
 800b784:	d001      	beq.n	800b78a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e000      	b.n	800b78c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3720      	adds	r7, #32
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40021000 	.word	0x40021000
 800b798:	019f800c 	.word	0x019f800c
 800b79c:	feeefffc 	.word	0xfeeefffc

0800b7a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e11e      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7b8:	4b91      	ldr	r3, [pc, #580]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 030f 	and.w	r3, r3, #15
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d910      	bls.n	800b7e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7c6:	4b8e      	ldr	r3, [pc, #568]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f023 020f 	bic.w	r2, r3, #15
 800b7ce:	498c      	ldr	r1, [pc, #560]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7d6:	4b8a      	ldr	r3, [pc, #552]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d001      	beq.n	800b7e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e106      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0301 	and.w	r3, r3, #1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d073      	beq.n	800b8dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d129      	bne.n	800b850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7fc:	4b81      	ldr	r3, [pc, #516]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e0f4      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b80c:	f000 f99e 	bl	800bb4c <RCC_GetSysClockFreqFromPLLSource>
 800b810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	4a7c      	ldr	r2, [pc, #496]	@ (800ba08 <HAL_RCC_ClockConfig+0x268>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d93f      	bls.n	800b89a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b81a:	4b7a      	ldr	r3, [pc, #488]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d009      	beq.n	800b83a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d033      	beq.n	800b89a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b836:	2b00      	cmp	r3, #0
 800b838:	d12f      	bne.n	800b89a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b83a:	4b72      	ldr	r3, [pc, #456]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b842:	4a70      	ldr	r2, [pc, #448]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b84a:	2380      	movs	r3, #128	@ 0x80
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	e024      	b.n	800b89a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d107      	bne.n	800b868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b858:	4b6a      	ldr	r3, [pc, #424]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d109      	bne.n	800b878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e0c6      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b868:	4b66      	ldr	r3, [pc, #408]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e0be      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b878:	f000 f8ce 	bl	800ba18 <HAL_RCC_GetSysClockFreq>
 800b87c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	4a61      	ldr	r2, [pc, #388]	@ (800ba08 <HAL_RCC_ClockConfig+0x268>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d909      	bls.n	800b89a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b886:	4b5f      	ldr	r3, [pc, #380]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b88e:	4a5d      	ldr	r2, [pc, #372]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b896:	2380      	movs	r3, #128	@ 0x80
 800b898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b89a:	4b5a      	ldr	r3, [pc, #360]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f023 0203 	bic.w	r2, r3, #3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	4957      	ldr	r1, [pc, #348]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ac:	f7fd fc9a 	bl	80091e4 <HAL_GetTick>
 800b8b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8b2:	e00a      	b.n	800b8ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8b4:	f7fd fc96 	bl	80091e4 <HAL_GetTick>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d901      	bls.n	800b8ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e095      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ca:	4b4e      	ldr	r3, [pc, #312]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 020c 	and.w	r2, r3, #12
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d1eb      	bne.n	800b8b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d023      	beq.n	800b930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b8f4:	4b43      	ldr	r3, [pc, #268]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	4a42      	ldr	r2, [pc, #264]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b8fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b8fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0308 	and.w	r3, r3, #8
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b90c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b914:	4a3b      	ldr	r2, [pc, #236]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b91a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b91c:	4b39      	ldr	r3, [pc, #228]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	4936      	ldr	r1, [pc, #216]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b92a:	4313      	orrs	r3, r2
 800b92c:	608b      	str	r3, [r1, #8]
 800b92e:	e008      	b.n	800b942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b80      	cmp	r3, #128	@ 0x80
 800b934:	d105      	bne.n	800b942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b936:	4b33      	ldr	r3, [pc, #204]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	4a32      	ldr	r2, [pc, #200]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b93c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b942:	4b2f      	ldr	r3, [pc, #188]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 030f 	and.w	r3, r3, #15
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d21d      	bcs.n	800b98c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b950:	4b2b      	ldr	r3, [pc, #172]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f023 020f 	bic.w	r2, r3, #15
 800b958:	4929      	ldr	r1, [pc, #164]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b960:	f7fd fc40 	bl	80091e4 <HAL_GetTick>
 800b964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b966:	e00a      	b.n	800b97e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b968:	f7fd fc3c 	bl	80091e4 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b976:	4293      	cmp	r3, r2
 800b978:	d901      	bls.n	800b97e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e03b      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b97e:	4b20      	ldr	r3, [pc, #128]	@ (800ba00 <HAL_RCC_ClockConfig+0x260>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d1ed      	bne.n	800b968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b00      	cmp	r3, #0
 800b996:	d008      	beq.n	800b9aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b998:	4b1a      	ldr	r3, [pc, #104]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	4917      	ldr	r1, [pc, #92]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d009      	beq.n	800b9ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	490f      	ldr	r1, [pc, #60]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b9ca:	f000 f825 	bl	800ba18 <HAL_RCC_GetSysClockFreq>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	4b0c      	ldr	r3, [pc, #48]	@ (800ba04 <HAL_RCC_ClockConfig+0x264>)
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	091b      	lsrs	r3, r3, #4
 800b9d6:	f003 030f 	and.w	r3, r3, #15
 800b9da:	490c      	ldr	r1, [pc, #48]	@ (800ba0c <HAL_RCC_ClockConfig+0x26c>)
 800b9dc:	5ccb      	ldrb	r3, [r1, r3]
 800b9de:	f003 031f 	and.w	r3, r3, #31
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	4a0a      	ldr	r2, [pc, #40]	@ (800ba10 <HAL_RCC_ClockConfig+0x270>)
 800b9e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	@ (800ba14 <HAL_RCC_ClockConfig+0x274>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fd fbac 	bl	800914c <HAL_InitTick>
 800b9f4:	4603      	mov	r3, r0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	40022000 	.word	0x40022000
 800ba04:	40021000 	.word	0x40021000
 800ba08:	04c4b400 	.word	0x04c4b400
 800ba0c:	0800f744 	.word	0x0800f744
 800ba10:	20000000 	.word	0x20000000
 800ba14:	20000004 	.word	0x20000004

0800ba18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba1e:	4b2c      	ldr	r3, [pc, #176]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 030c 	and.w	r3, r3, #12
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	d102      	bne.n	800ba30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba2a:	4b2a      	ldr	r3, [pc, #168]	@ (800bad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	e047      	b.n	800bac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba30:	4b27      	ldr	r3, [pc, #156]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f003 030c 	and.w	r3, r3, #12
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d102      	bne.n	800ba42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba3c:	4b26      	ldr	r3, [pc, #152]	@ (800bad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba3e:	613b      	str	r3, [r7, #16]
 800ba40:	e03e      	b.n	800bac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ba42:	4b23      	ldr	r3, [pc, #140]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f003 030c 	and.w	r3, r3, #12
 800ba4a:	2b0c      	cmp	r3, #12
 800ba4c:	d136      	bne.n	800babc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba4e:	4b20      	ldr	r3, [pc, #128]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba58:	4b1d      	ldr	r3, [pc, #116]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	091b      	lsrs	r3, r3, #4
 800ba5e:	f003 030f 	and.w	r3, r3, #15
 800ba62:	3301      	adds	r3, #1
 800ba64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d10c      	bne.n	800ba86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba6c:	4a1a      	ldr	r2, [pc, #104]	@ (800bad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba74:	4a16      	ldr	r2, [pc, #88]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba76:	68d2      	ldr	r2, [r2, #12]
 800ba78:	0a12      	lsrs	r2, r2, #8
 800ba7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba7e:	fb02 f303 	mul.w	r3, r2, r3
 800ba82:	617b      	str	r3, [r7, #20]
      break;
 800ba84:	e00c      	b.n	800baa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba86:	4a13      	ldr	r2, [pc, #76]	@ (800bad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8e:	4a10      	ldr	r2, [pc, #64]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba90:	68d2      	ldr	r2, [r2, #12]
 800ba92:	0a12      	lsrs	r2, r2, #8
 800ba94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba98:	fb02 f303 	mul.w	r3, r2, r3
 800ba9c:	617b      	str	r3, [r7, #20]
      break;
 800ba9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	0e5b      	lsrs	r3, r3, #25
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	3301      	adds	r3, #1
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	e001      	b.n	800bac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bac0:	693b      	ldr	r3, [r7, #16]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	40021000 	.word	0x40021000
 800bad4:	00f42400 	.word	0x00f42400
 800bad8:	007a1200 	.word	0x007a1200

0800badc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bae0:	4b03      	ldr	r3, [pc, #12]	@ (800baf0 <HAL_RCC_GetHCLKFreq+0x14>)
 800bae2:	681b      	ldr	r3, [r3, #0]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	20000000 	.word	0x20000000

0800baf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800baf8:	f7ff fff0 	bl	800badc <HAL_RCC_GetHCLKFreq>
 800bafc:	4602      	mov	r2, r0
 800bafe:	4b06      	ldr	r3, [pc, #24]	@ (800bb18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	0a1b      	lsrs	r3, r3, #8
 800bb04:	f003 0307 	and.w	r3, r3, #7
 800bb08:	4904      	ldr	r1, [pc, #16]	@ (800bb1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb0a:	5ccb      	ldrb	r3, [r1, r3]
 800bb0c:	f003 031f 	and.w	r3, r3, #31
 800bb10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	40021000 	.word	0x40021000
 800bb1c:	0800f754 	.word	0x0800f754

0800bb20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bb24:	f7ff ffda 	bl	800badc <HAL_RCC_GetHCLKFreq>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	4b06      	ldr	r3, [pc, #24]	@ (800bb44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	0adb      	lsrs	r3, r3, #11
 800bb30:	f003 0307 	and.w	r3, r3, #7
 800bb34:	4904      	ldr	r1, [pc, #16]	@ (800bb48 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb36:	5ccb      	ldrb	r3, [r1, r3]
 800bb38:	f003 031f 	and.w	r3, r3, #31
 800bb3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	40021000 	.word	0x40021000
 800bb48:	0800f754 	.word	0x0800f754

0800bb4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb52:	4b1e      	ldr	r3, [pc, #120]	@ (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	f003 0303 	and.w	r3, r3, #3
 800bb5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	@ (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	091b      	lsrs	r3, r3, #4
 800bb62:	f003 030f 	and.w	r3, r3, #15
 800bb66:	3301      	adds	r3, #1
 800bb68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d10c      	bne.n	800bb8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb70:	4a17      	ldr	r2, [pc, #92]	@ (800bbd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	4a14      	ldr	r2, [pc, #80]	@ (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb7a:	68d2      	ldr	r2, [r2, #12]
 800bb7c:	0a12      	lsrs	r2, r2, #8
 800bb7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bb82:	fb02 f303 	mul.w	r3, r2, r3
 800bb86:	617b      	str	r3, [r7, #20]
    break;
 800bb88:	e00c      	b.n	800bba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb8a:	4a12      	ldr	r2, [pc, #72]	@ (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb92:	4a0e      	ldr	r2, [pc, #56]	@ (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb94:	68d2      	ldr	r2, [r2, #12]
 800bb96:	0a12      	lsrs	r2, r2, #8
 800bb98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	617b      	str	r3, [r7, #20]
    break;
 800bba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bba4:	4b09      	ldr	r3, [pc, #36]	@ (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	0e5b      	lsrs	r3, r3, #25
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	3301      	adds	r3, #1
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbbe:	687b      	ldr	r3, [r7, #4]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	371c      	adds	r7, #28
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	40021000 	.word	0x40021000
 800bbd0:	007a1200 	.word	0x007a1200
 800bbd4:	00f42400 	.word	0x00f42400

0800bbd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8098 	beq.w	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbfa:	4b43      	ldr	r3, [pc, #268]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10d      	bne.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc06:	4b40      	ldr	r3, [pc, #256]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc0a:	4a3f      	ldr	r2, [pc, #252]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc10:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc12:	4b3d      	ldr	r3, [pc, #244]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc1a:	60bb      	str	r3, [r7, #8]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc22:	4b3a      	ldr	r3, [pc, #232]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a39      	ldr	r2, [pc, #228]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc2e:	f7fd fad9 	bl	80091e4 <HAL_GetTick>
 800bc32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc34:	e009      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc36:	f7fd fad5 	bl	80091e4 <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d902      	bls.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	74fb      	strb	r3, [r7, #19]
        break;
 800bc48:	e005      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc4a:	4b30      	ldr	r3, [pc, #192]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0ef      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc56:	7cfb      	ldrb	r3, [r7, #19]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d159      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc5c:	4b2a      	ldr	r3, [pc, #168]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d01e      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d019      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc78:	4b23      	ldr	r3, [pc, #140]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc84:	4b20      	ldr	r3, [pc, #128]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc8a:	4a1f      	ldr	r2, [pc, #124]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc94:	4b1c      	ldr	r3, [pc, #112]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc9a:	4a1b      	ldr	r2, [pc, #108]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bca4:	4a18      	ldr	r2, [pc, #96]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d016      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb6:	f7fd fa95 	bl	80091e4 <HAL_GetTick>
 800bcba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcbc:	e00b      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcbe:	f7fd fa91 	bl	80091e4 <HAL_GetTick>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d902      	bls.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	74fb      	strb	r3, [r7, #19]
            break;
 800bcd4:	e006      	b.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d0ec      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bce4:	7cfb      	ldrb	r3, [r7, #19]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10b      	bne.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf8:	4903      	ldr	r1, [pc, #12]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bd00:	e008      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd02:	7cfb      	ldrb	r3, [r7, #19]
 800bd04:	74bb      	strb	r3, [r7, #18]
 800bd06:	e005      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd08:	40021000 	.word	0x40021000
 800bd0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd10:	7cfb      	ldrb	r3, [r7, #19]
 800bd12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd14:	7c7b      	ldrb	r3, [r7, #17]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d105      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd1a:	4ba6      	ldr	r3, [pc, #664]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd1e:	4aa5      	ldr	r2, [pc, #660]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00a      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd32:	4ba0      	ldr	r3, [pc, #640]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd38:	f023 0203 	bic.w	r2, r3, #3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	499c      	ldr	r1, [pc, #624]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0302 	and.w	r3, r3, #2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd54:	4b97      	ldr	r3, [pc, #604]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd5a:	f023 020c 	bic.w	r2, r3, #12
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	4994      	ldr	r1, [pc, #592]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd76:	4b8f      	ldr	r3, [pc, #572]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	498b      	ldr	r1, [pc, #556]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd98:	4b86      	ldr	r3, [pc, #536]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	4983      	ldr	r1, [pc, #524]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0320 	and.w	r3, r3, #32
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdba:	4b7e      	ldr	r3, [pc, #504]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	497a      	ldr	r1, [pc, #488]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bddc:	4b75      	ldr	r3, [pc, #468]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bde2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	4972      	ldr	r1, [pc, #456]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bdfe:	4b6d      	ldr	r3, [pc, #436]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	69db      	ldr	r3, [r3, #28]
 800be0c:	4969      	ldr	r1, [pc, #420]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00a      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be20:	4b64      	ldr	r3, [pc, #400]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	4961      	ldr	r1, [pc, #388]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be30:	4313      	orrs	r3, r2
 800be32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be42:	4b5c      	ldr	r3, [pc, #368]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be50:	4958      	ldr	r1, [pc, #352]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be52:	4313      	orrs	r3, r2
 800be54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be60:	2b00      	cmp	r3, #0
 800be62:	d015      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be64:	4b53      	ldr	r3, [pc, #332]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be72:	4950      	ldr	r1, [pc, #320]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be74:	4313      	orrs	r3, r2
 800be76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be82:	d105      	bne.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be84:	4b4b      	ldr	r3, [pc, #300]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	4a4a      	ldr	r2, [pc, #296]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d015      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be9c:	4b45      	ldr	r3, [pc, #276]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beaa:	4942      	ldr	r1, [pc, #264]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800beac:	4313      	orrs	r3, r2
 800beae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800beba:	d105      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bebc:	4b3d      	ldr	r3, [pc, #244]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	4a3c      	ldr	r2, [pc, #240]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bec6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d015      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bed4:	4b37      	ldr	r3, [pc, #220]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee2:	4934      	ldr	r1, [pc, #208]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bef2:	d105      	bne.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef4:	4b2f      	ldr	r3, [pc, #188]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	4a2e      	ldr	r2, [pc, #184]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800befa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800befe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d015      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf0c:	4b29      	ldr	r3, [pc, #164]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf1a:	4926      	ldr	r1, [pc, #152]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf2a:	d105      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf2c:	4b21      	ldr	r3, [pc, #132]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	4a20      	ldr	r2, [pc, #128]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d015      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf44:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf52:	4918      	ldr	r1, [pc, #96]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf62:	d105      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf64:	4b13      	ldr	r3, [pc, #76]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	4a12      	ldr	r2, [pc, #72]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d015      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf8a:	490a      	ldr	r1, [pc, #40]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf9a:	d105      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf9c:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	4a04      	ldr	r2, [pc, #16]	@ (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bfa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfa6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bfa8:	7cbb      	ldrb	r3, [r7, #18]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	40021000 	.word	0x40021000

0800bfb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e049      	b.n	800c05e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fc feb6 	bl	8008d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4619      	mov	r1, r3
 800bff6:	4610      	mov	r0, r2
 800bff8:	f000 fb12 	bl	800c620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d001      	beq.n	800c080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e04a      	b.n	800c116 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f042 0201 	orr.w	r2, r2, #1
 800c096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a21      	ldr	r2, [pc, #132]	@ (800c124 <HAL_TIM_Base_Start_IT+0xbc>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d018      	beq.n	800c0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0aa:	d013      	beq.n	800c0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c128 <HAL_TIM_Base_Start_IT+0xc0>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d00e      	beq.n	800c0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c12c <HAL_TIM_Base_Start_IT+0xc4>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d009      	beq.n	800c0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c130 <HAL_TIM_Base_Start_IT+0xc8>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d004      	beq.n	800c0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a19      	ldr	r2, [pc, #100]	@ (800c134 <HAL_TIM_Base_Start_IT+0xcc>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d115      	bne.n	800c100 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689a      	ldr	r2, [r3, #8]
 800c0da:	4b17      	ldr	r3, [pc, #92]	@ (800c138 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b06      	cmp	r3, #6
 800c0e4:	d015      	beq.n	800c112 <HAL_TIM_Base_Start_IT+0xaa>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0ec:	d011      	beq.n	800c112 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0201 	orr.w	r2, r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fe:	e008      	b.n	800c112 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0201 	orr.w	r2, r2, #1
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	e000      	b.n	800c114 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	40012c00 	.word	0x40012c00
 800c128:	40000400 	.word	0x40000400
 800c12c:	40000800 	.word	0x40000800
 800c130:	40013400 	.word	0x40013400
 800c134:	40014000 	.word	0x40014000
 800c138:	00010007 	.word	0x00010007

0800c13c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	f003 0302 	and.w	r3, r3, #2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d020      	beq.n	800c1a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d01b      	beq.n	800c1a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f06f 0202 	mvn.w	r2, #2
 800c170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fa2c 	bl	800c5e4 <HAL_TIM_IC_CaptureCallback>
 800c18c:	e005      	b.n	800c19a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa1e 	bl	800c5d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fa2f 	bl	800c5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d020      	beq.n	800c1ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f003 0304 	and.w	r3, r3, #4
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d01b      	beq.n	800c1ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f06f 0204 	mvn.w	r2, #4
 800c1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa06 	bl	800c5e4 <HAL_TIM_IC_CaptureCallback>
 800c1d8:	e005      	b.n	800c1e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f9f8 	bl	800c5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fa09 	bl	800c5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f003 0308 	and.w	r3, r3, #8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d020      	beq.n	800c238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f003 0308 	and.w	r3, r3, #8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01b      	beq.n	800c238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f06f 0208 	mvn.w	r2, #8
 800c208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2204      	movs	r2, #4
 800c20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	f003 0303 	and.w	r3, r3, #3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f9e0 	bl	800c5e4 <HAL_TIM_IC_CaptureCallback>
 800c224:	e005      	b.n	800c232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f9d2 	bl	800c5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f9e3 	bl	800c5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f003 0310 	and.w	r3, r3, #16
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d020      	beq.n	800c284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f003 0310 	and.w	r3, r3, #16
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01b      	beq.n	800c284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f06f 0210 	mvn.w	r2, #16
 800c254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2208      	movs	r2, #8
 800c25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f9ba 	bl	800c5e4 <HAL_TIM_IC_CaptureCallback>
 800c270:	e005      	b.n	800c27e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f9ac 	bl	800c5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f9bd 	bl	800c5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00c      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	d007      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f06f 0201 	mvn.w	r2, #1
 800c2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7f6 f9be 	bl	8002624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d104      	bne.n	800c2bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00c      	beq.n	800c2d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d007      	beq.n	800c2d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fb69 	bl	800c9a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00c      	beq.n	800c2fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d007      	beq.n	800c2fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fb61 	bl	800c9bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00c      	beq.n	800c31e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d007      	beq.n	800c31e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f977 	bl	800c60c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	f003 0320 	and.w	r3, r3, #32
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00c      	beq.n	800c342 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f003 0320 	and.w	r3, r3, #32
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d007      	beq.n	800c342 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f06f 0220 	mvn.w	r2, #32
 800c33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fb29 	bl	800c994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00c      	beq.n	800c366 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d007      	beq.n	800c366 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800c35e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fb35 	bl	800c9d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00c      	beq.n	800c38a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d007      	beq.n	800c38a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800c382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fb2d 	bl	800c9e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00c      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d007      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fb25 	bl	800c9f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb1d 	bl	800ca0c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3d2:	bf00      	nop
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d101      	bne.n	800c3f8 <HAL_TIM_ConfigClockSource+0x1c>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	e0de      	b.n	800c5b6 <HAL_TIM_ConfigClockSource+0x1da>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2202      	movs	r2, #2
 800c404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c416:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a63      	ldr	r2, [pc, #396]	@ (800c5c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c432:	4293      	cmp	r3, r2
 800c434:	f000 80a9 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c438:	4a61      	ldr	r2, [pc, #388]	@ (800c5c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f200 80ae 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c440:	4a60      	ldr	r2, [pc, #384]	@ (800c5c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c442:	4293      	cmp	r3, r2
 800c444:	f000 80a1 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c448:	4a5e      	ldr	r2, [pc, #376]	@ (800c5c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	f200 80a6 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c450:	4a5d      	ldr	r2, [pc, #372]	@ (800c5c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c452:	4293      	cmp	r3, r2
 800c454:	f000 8099 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c458:	4a5b      	ldr	r2, [pc, #364]	@ (800c5c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	f200 809e 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c460:	4a5a      	ldr	r2, [pc, #360]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800c462:	4293      	cmp	r3, r2
 800c464:	f000 8091 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c468:	4a58      	ldr	r2, [pc, #352]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	f200 8096 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c470:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c474:	f000 8089 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c478:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c47c:	f200 808e 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c484:	d03e      	beq.n	800c504 <HAL_TIM_ConfigClockSource+0x128>
 800c486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c48a:	f200 8087 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c48e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c492:	f000 8086 	beq.w	800c5a2 <HAL_TIM_ConfigClockSource+0x1c6>
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49a:	d87f      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c49c:	2b70      	cmp	r3, #112	@ 0x70
 800c49e:	d01a      	beq.n	800c4d6 <HAL_TIM_ConfigClockSource+0xfa>
 800c4a0:	2b70      	cmp	r3, #112	@ 0x70
 800c4a2:	d87b      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4a4:	2b60      	cmp	r3, #96	@ 0x60
 800c4a6:	d050      	beq.n	800c54a <HAL_TIM_ConfigClockSource+0x16e>
 800c4a8:	2b60      	cmp	r3, #96	@ 0x60
 800c4aa:	d877      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4ac:	2b50      	cmp	r3, #80	@ 0x50
 800c4ae:	d03c      	beq.n	800c52a <HAL_TIM_ConfigClockSource+0x14e>
 800c4b0:	2b50      	cmp	r3, #80	@ 0x50
 800c4b2:	d873      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4b4:	2b40      	cmp	r3, #64	@ 0x40
 800c4b6:	d058      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x18e>
 800c4b8:	2b40      	cmp	r3, #64	@ 0x40
 800c4ba:	d86f      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4bc:	2b30      	cmp	r3, #48	@ 0x30
 800c4be:	d064      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c4c0:	2b30      	cmp	r3, #48	@ 0x30
 800c4c2:	d86b      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d060      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d867      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d05c      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c4d0:	2b10      	cmp	r3, #16
 800c4d2:	d05a      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1ae>
 800c4d4:	e062      	b.n	800c59c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4e6:	f000 f9b3 	bl	800c850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	609a      	str	r2, [r3, #8]
      break;
 800c502:	e04f      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c514:	f000 f99c 	bl	800c850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689a      	ldr	r2, [r3, #8]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c526:	609a      	str	r2, [r3, #8]
      break;
 800c528:	e03c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c536:	461a      	mov	r2, r3
 800c538:	f000 f90e 	bl	800c758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2150      	movs	r1, #80	@ 0x50
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f967 	bl	800c816 <TIM_ITRx_SetConfig>
      break;
 800c548:	e02c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c556:	461a      	mov	r2, r3
 800c558:	f000 f92d 	bl	800c7b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2160      	movs	r1, #96	@ 0x60
 800c562:	4618      	mov	r0, r3
 800c564:	f000 f957 	bl	800c816 <TIM_ITRx_SetConfig>
      break;
 800c568:	e01c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c576:	461a      	mov	r2, r3
 800c578:	f000 f8ee 	bl	800c758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2140      	movs	r1, #64	@ 0x40
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f947 	bl	800c816 <TIM_ITRx_SetConfig>
      break;
 800c588:	e00c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f000 f93e 	bl	800c816 <TIM_ITRx_SetConfig>
      break;
 800c59a:	e003      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a0:	e000      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800c5a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	00100070 	.word	0x00100070
 800c5c4:	00100040 	.word	0x00100040
 800c5c8:	00100030 	.word	0x00100030
 800c5cc:	00100020 	.word	0x00100020

0800c5d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a42      	ldr	r2, [pc, #264]	@ (800c73c <TIM_Base_SetConfig+0x11c>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d00f      	beq.n	800c658 <TIM_Base_SetConfig+0x38>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c63e:	d00b      	beq.n	800c658 <TIM_Base_SetConfig+0x38>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a3f      	ldr	r2, [pc, #252]	@ (800c740 <TIM_Base_SetConfig+0x120>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d007      	beq.n	800c658 <TIM_Base_SetConfig+0x38>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a3e      	ldr	r2, [pc, #248]	@ (800c744 <TIM_Base_SetConfig+0x124>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d003      	beq.n	800c658 <TIM_Base_SetConfig+0x38>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a3d      	ldr	r2, [pc, #244]	@ (800c748 <TIM_Base_SetConfig+0x128>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d108      	bne.n	800c66a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a33      	ldr	r2, [pc, #204]	@ (800c73c <TIM_Base_SetConfig+0x11c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d01b      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c678:	d017      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a30      	ldr	r2, [pc, #192]	@ (800c740 <TIM_Base_SetConfig+0x120>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d013      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a2f      	ldr	r2, [pc, #188]	@ (800c744 <TIM_Base_SetConfig+0x124>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2e      	ldr	r2, [pc, #184]	@ (800c748 <TIM_Base_SetConfig+0x128>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00b      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a2d      	ldr	r2, [pc, #180]	@ (800c74c <TIM_Base_SetConfig+0x12c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d007      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a2c      	ldr	r2, [pc, #176]	@ (800c750 <TIM_Base_SetConfig+0x130>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <TIM_Base_SetConfig+0x8a>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c754 <TIM_Base_SetConfig+0x134>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d108      	bne.n	800c6bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a16      	ldr	r2, [pc, #88]	@ (800c73c <TIM_Base_SetConfig+0x11c>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00f      	beq.n	800c708 <TIM_Base_SetConfig+0xe8>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a17      	ldr	r2, [pc, #92]	@ (800c748 <TIM_Base_SetConfig+0x128>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00b      	beq.n	800c708 <TIM_Base_SetConfig+0xe8>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a16      	ldr	r2, [pc, #88]	@ (800c74c <TIM_Base_SetConfig+0x12c>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d007      	beq.n	800c708 <TIM_Base_SetConfig+0xe8>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a15      	ldr	r2, [pc, #84]	@ (800c750 <TIM_Base_SetConfig+0x130>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_Base_SetConfig+0xe8>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a14      	ldr	r2, [pc, #80]	@ (800c754 <TIM_Base_SetConfig+0x134>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d103      	bne.n	800c710 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d105      	bne.n	800c72e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	f023 0201 	bic.w	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	611a      	str	r2, [r3, #16]
  }
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	40012c00 	.word	0x40012c00
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40013400 	.word	0x40013400
 800c74c:	40014000 	.word	0x40014000
 800c750:	40014400 	.word	0x40014400
 800c754:	40014800 	.word	0x40014800

0800c758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6a1b      	ldr	r3, [r3, #32]
 800c768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	f023 0201 	bic.w	r2, r3, #1
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	699b      	ldr	r3, [r3, #24]
 800c77a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	011b      	lsls	r3, r3, #4
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f023 030a 	bic.w	r3, r3, #10
 800c794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	621a      	str	r2, [r3, #32]
}
 800c7aa:	bf00      	nop
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b087      	sub	sp, #28
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	60b9      	str	r1, [r7, #8]
 800c7c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a1b      	ldr	r3, [r3, #32]
 800c7cc:	f023 0210 	bic.w	r2, r3, #16
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	031b      	lsls	r3, r3, #12
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	011b      	lsls	r3, r3, #4
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	621a      	str	r2, [r3, #32]
}
 800c80a:	bf00      	nop
 800c80c:	371c      	adds	r7, #28
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c816:	b480      	push	{r7}
 800c818:	b085      	sub	sp, #20
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c82c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	f043 0307 	orr.w	r3, r3, #7
 800c83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	609a      	str	r2, [r3, #8]
}
 800c844:	bf00      	nop
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	021a      	lsls	r2, r3, #8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	431a      	orrs	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	4313      	orrs	r3, r2
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	609a      	str	r2, [r3, #8]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e065      	b.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a2c      	ldr	r2, [pc, #176]	@ (800c980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d004      	beq.n	800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a2b      	ldr	r2, [pc, #172]	@ (800c984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d108      	bne.n	800c8ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c8e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c8f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	4313      	orrs	r3, r2
 800c902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a1b      	ldr	r2, [pc, #108]	@ (800c980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d018      	beq.n	800c948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c91e:	d013      	beq.n	800c948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a18      	ldr	r2, [pc, #96]	@ (800c988 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00e      	beq.n	800c948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a17      	ldr	r2, [pc, #92]	@ (800c98c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d009      	beq.n	800c948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a12      	ldr	r2, [pc, #72]	@ (800c984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d004      	beq.n	800c948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a13      	ldr	r2, [pc, #76]	@ (800c990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d10c      	bne.n	800c962 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c94e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	4313      	orrs	r3, r2
 800c958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	40012c00 	.word	0x40012c00
 800c984:	40013400 	.word	0x40013400
 800c988:	40000400 	.word	0x40000400
 800c98c:	40000800 	.word	0x40000800
 800c990:	40014000 	.word	0x40014000

0800c994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e042      	b.n	800cab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d106      	bne.n	800ca4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7fc f9a7 	bl	8008d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2224      	movs	r2, #36	@ 0x24
 800ca4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f022 0201 	bic.w	r2, r2, #1
 800ca60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fca2 	bl	800d3b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f9d3 	bl	800ce1c <UART_SetConfig>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d101      	bne.n	800ca80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e01b      	b.n	800cab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f042 0201 	orr.w	r2, r2, #1
 800caae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fd21 	bl	800d4f8 <UART_CheckIdleState>
 800cab6:	4603      	mov	r3, r0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e04a      	b.n	800cb68 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d106      	bne.n	800caea <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fc f957 	bl	8008d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2224      	movs	r2, #36	@ 0x24
 800caee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f022 0201 	bic.w	r2, r2, #1
 800cb00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fc52 	bl	800d3b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f983 	bl	800ce1c <UART_SetConfig>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d101      	bne.n	800cb20 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e023      	b.n	800cb68 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689a      	ldr	r2, [r3, #8]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800cb3e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	689a      	ldr	r2, [r3, #8]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f042 0208 	orr.w	r2, r2, #8
 800cb4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0201 	orr.w	r2, r2, #1
 800cb5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fcc9 	bl	800d4f8 <UART_CheckIdleState>
 800cb66:	4603      	mov	r3, r0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08a      	sub	sp, #40	@ 0x28
 800cb74:	af02      	add	r7, sp, #8
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb86:	2b20      	cmp	r3, #32
 800cb88:	d17b      	bne.n	800cc82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <HAL_UART_Transmit+0x26>
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e074      	b.n	800cc84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2221      	movs	r2, #33	@ 0x21
 800cba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbaa:	f7fc fb1b 	bl	80091e4 <HAL_GetTick>
 800cbae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	88fa      	ldrh	r2, [r7, #6]
 800cbb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	88fa      	ldrh	r2, [r7, #6]
 800cbbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbc8:	d108      	bne.n	800cbdc <HAL_UART_Transmit+0x6c>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d104      	bne.n	800cbdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	61bb      	str	r3, [r7, #24]
 800cbda:	e003      	b.n	800cbe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbe4:	e030      	b.n	800cc48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	2200      	movs	r2, #0
 800cbee:	2180      	movs	r1, #128	@ 0x80
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 fd2b 	bl	800d64c <UART_WaitOnFlagUntilTimeout>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e03d      	b.n	800cc84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10b      	bne.n	800cc26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	3302      	adds	r3, #2
 800cc22:	61bb      	str	r3, [r7, #24]
 800cc24:	e007      	b.n	800cc36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	3301      	adds	r3, #1
 800cc34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1c8      	bne.n	800cbe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2140      	movs	r1, #64	@ 0x40
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 fcf4 	bl	800d64c <UART_WaitOnFlagUntilTimeout>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2220      	movs	r2, #32
 800cc6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e006      	b.n	800cc84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e000      	b.n	800cc84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cc82:	2302      	movs	r3, #2
  }
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3720      	adds	r7, #32
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cca2:	2b20      	cmp	r3, #32
 800cca4:	f040 80b5 	bne.w	800ce12 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <HAL_UART_Receive+0x28>
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e0ad      	b.n	800ce14 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2222      	movs	r2, #34	@ 0x22
 800ccc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccce:	f7fc fa89 	bl	80091e4 <HAL_GetTick>
 800ccd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	88fa      	ldrh	r2, [r7, #6]
 800ccd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	88fa      	ldrh	r2, [r7, #6]
 800cce0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccec:	d10e      	bne.n	800cd0c <HAL_UART_Receive+0x80>
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d105      	bne.n	800cd02 <HAL_UART_Receive+0x76>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ccfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd00:	e02d      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	22ff      	movs	r2, #255	@ 0xff
 800cd06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd0a:	e028      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10d      	bne.n	800cd30 <HAL_UART_Receive+0xa4>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d104      	bne.n	800cd26 <HAL_UART_Receive+0x9a>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	22ff      	movs	r2, #255	@ 0xff
 800cd20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd24:	e01b      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	227f      	movs	r2, #127	@ 0x7f
 800cd2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd2e:	e016      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd38:	d10d      	bne.n	800cd56 <HAL_UART_Receive+0xca>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d104      	bne.n	800cd4c <HAL_UART_Receive+0xc0>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	227f      	movs	r2, #127	@ 0x7f
 800cd46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd4a:	e008      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	223f      	movs	r2, #63	@ 0x3f
 800cd50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd54:	e003      	b.n	800cd5e <HAL_UART_Receive+0xd2>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd64:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd6e:	d108      	bne.n	800cd82 <HAL_UART_Receive+0xf6>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d104      	bne.n	800cd82 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	61bb      	str	r3, [r7, #24]
 800cd80:	e003      	b.n	800cd8a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cd8a:	e036      	b.n	800cdfa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2200      	movs	r2, #0
 800cd94:	2120      	movs	r1, #32
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fc58 	bl	800d64c <UART_WaitOnFlagUntilTimeout>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d005      	beq.n	800cdae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e032      	b.n	800ce14 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10c      	bne.n	800cdce <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	8a7b      	ldrh	r3, [r7, #18]
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	3302      	adds	r3, #2
 800cdca:	61bb      	str	r3, [r7, #24]
 800cdcc:	e00c      	b.n	800cde8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	8a7b      	ldrh	r3, [r7, #18]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	4013      	ands	r3, r2
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	3301      	adds	r3, #1
 800cde6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1c2      	bne.n	800cd8c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e000      	b.n	800ce14 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ce12:	2302      	movs	r3, #2
  }
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce20:	b08c      	sub	sp, #48	@ 0x30
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	431a      	orrs	r2, r3
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4bab      	ldr	r3, [pc, #684]	@ (800d0f8 <UART_SetConfig+0x2dc>)
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	6812      	ldr	r2, [r2, #0]
 800ce52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce54:	430b      	orrs	r3, r1
 800ce56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	68da      	ldr	r2, [r3, #12]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4aa0      	ldr	r2, [pc, #640]	@ (800d0fc <UART_SetConfig+0x2e0>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d004      	beq.n	800ce88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce84:	4313      	orrs	r3, r2
 800ce86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ce92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	6812      	ldr	r2, [r2, #0]
 800ce9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea6:	f023 010f 	bic.w	r1, r3, #15
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a91      	ldr	r2, [pc, #580]	@ (800d100 <UART_SetConfig+0x2e4>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d125      	bne.n	800cf0c <UART_SetConfig+0xf0>
 800cec0:	4b90      	ldr	r3, [pc, #576]	@ (800d104 <UART_SetConfig+0x2e8>)
 800cec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cec6:	f003 0303 	and.w	r3, r3, #3
 800ceca:	2b03      	cmp	r3, #3
 800cecc:	d81a      	bhi.n	800cf04 <UART_SetConfig+0xe8>
 800cece:	a201      	add	r2, pc, #4	@ (adr r2, 800ced4 <UART_SetConfig+0xb8>)
 800ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced4:	0800cee5 	.word	0x0800cee5
 800ced8:	0800cef5 	.word	0x0800cef5
 800cedc:	0800ceed 	.word	0x0800ceed
 800cee0:	0800cefd 	.word	0x0800cefd
 800cee4:	2301      	movs	r3, #1
 800cee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceea:	e0d6      	b.n	800d09a <UART_SetConfig+0x27e>
 800ceec:	2302      	movs	r3, #2
 800ceee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef2:	e0d2      	b.n	800d09a <UART_SetConfig+0x27e>
 800cef4:	2304      	movs	r3, #4
 800cef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefa:	e0ce      	b.n	800d09a <UART_SetConfig+0x27e>
 800cefc:	2308      	movs	r3, #8
 800cefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf02:	e0ca      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf04:	2310      	movs	r3, #16
 800cf06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0a:	e0c6      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a7d      	ldr	r2, [pc, #500]	@ (800d108 <UART_SetConfig+0x2ec>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d138      	bne.n	800cf88 <UART_SetConfig+0x16c>
 800cf16:	4b7b      	ldr	r3, [pc, #492]	@ (800d104 <UART_SetConfig+0x2e8>)
 800cf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf1c:	f003 030c 	and.w	r3, r3, #12
 800cf20:	2b0c      	cmp	r3, #12
 800cf22:	d82d      	bhi.n	800cf80 <UART_SetConfig+0x164>
 800cf24:	a201      	add	r2, pc, #4	@ (adr r2, 800cf2c <UART_SetConfig+0x110>)
 800cf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2a:	bf00      	nop
 800cf2c:	0800cf61 	.word	0x0800cf61
 800cf30:	0800cf81 	.word	0x0800cf81
 800cf34:	0800cf81 	.word	0x0800cf81
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cf71 	.word	0x0800cf71
 800cf40:	0800cf81 	.word	0x0800cf81
 800cf44:	0800cf81 	.word	0x0800cf81
 800cf48:	0800cf81 	.word	0x0800cf81
 800cf4c:	0800cf69 	.word	0x0800cf69
 800cf50:	0800cf81 	.word	0x0800cf81
 800cf54:	0800cf81 	.word	0x0800cf81
 800cf58:	0800cf81 	.word	0x0800cf81
 800cf5c:	0800cf79 	.word	0x0800cf79
 800cf60:	2300      	movs	r3, #0
 800cf62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf66:	e098      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf68:	2302      	movs	r3, #2
 800cf6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf6e:	e094      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf70:	2304      	movs	r3, #4
 800cf72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf76:	e090      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf78:	2308      	movs	r3, #8
 800cf7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf7e:	e08c      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf80:	2310      	movs	r3, #16
 800cf82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf86:	e088      	b.n	800d09a <UART_SetConfig+0x27e>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a5f      	ldr	r2, [pc, #380]	@ (800d10c <UART_SetConfig+0x2f0>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d125      	bne.n	800cfde <UART_SetConfig+0x1c2>
 800cf92:	4b5c      	ldr	r3, [pc, #368]	@ (800d104 <UART_SetConfig+0x2e8>)
 800cf94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cf9c:	2b30      	cmp	r3, #48	@ 0x30
 800cf9e:	d016      	beq.n	800cfce <UART_SetConfig+0x1b2>
 800cfa0:	2b30      	cmp	r3, #48	@ 0x30
 800cfa2:	d818      	bhi.n	800cfd6 <UART_SetConfig+0x1ba>
 800cfa4:	2b20      	cmp	r3, #32
 800cfa6:	d00a      	beq.n	800cfbe <UART_SetConfig+0x1a2>
 800cfa8:	2b20      	cmp	r3, #32
 800cfaa:	d814      	bhi.n	800cfd6 <UART_SetConfig+0x1ba>
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <UART_SetConfig+0x19a>
 800cfb0:	2b10      	cmp	r3, #16
 800cfb2:	d008      	beq.n	800cfc6 <UART_SetConfig+0x1aa>
 800cfb4:	e00f      	b.n	800cfd6 <UART_SetConfig+0x1ba>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfbc:	e06d      	b.n	800d09a <UART_SetConfig+0x27e>
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfc4:	e069      	b.n	800d09a <UART_SetConfig+0x27e>
 800cfc6:	2304      	movs	r3, #4
 800cfc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfcc:	e065      	b.n	800d09a <UART_SetConfig+0x27e>
 800cfce:	2308      	movs	r3, #8
 800cfd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd4:	e061      	b.n	800d09a <UART_SetConfig+0x27e>
 800cfd6:	2310      	movs	r3, #16
 800cfd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfdc:	e05d      	b.n	800d09a <UART_SetConfig+0x27e>
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a4b      	ldr	r2, [pc, #300]	@ (800d110 <UART_SetConfig+0x2f4>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d125      	bne.n	800d034 <UART_SetConfig+0x218>
 800cfe8:	4b46      	ldr	r3, [pc, #280]	@ (800d104 <UART_SetConfig+0x2e8>)
 800cfea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cff2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cff4:	d016      	beq.n	800d024 <UART_SetConfig+0x208>
 800cff6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cff8:	d818      	bhi.n	800d02c <UART_SetConfig+0x210>
 800cffa:	2b80      	cmp	r3, #128	@ 0x80
 800cffc:	d00a      	beq.n	800d014 <UART_SetConfig+0x1f8>
 800cffe:	2b80      	cmp	r3, #128	@ 0x80
 800d000:	d814      	bhi.n	800d02c <UART_SetConfig+0x210>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <UART_SetConfig+0x1f0>
 800d006:	2b40      	cmp	r3, #64	@ 0x40
 800d008:	d008      	beq.n	800d01c <UART_SetConfig+0x200>
 800d00a:	e00f      	b.n	800d02c <UART_SetConfig+0x210>
 800d00c:	2300      	movs	r3, #0
 800d00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d012:	e042      	b.n	800d09a <UART_SetConfig+0x27e>
 800d014:	2302      	movs	r3, #2
 800d016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d01a:	e03e      	b.n	800d09a <UART_SetConfig+0x27e>
 800d01c:	2304      	movs	r3, #4
 800d01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d022:	e03a      	b.n	800d09a <UART_SetConfig+0x27e>
 800d024:	2308      	movs	r3, #8
 800d026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d02a:	e036      	b.n	800d09a <UART_SetConfig+0x27e>
 800d02c:	2310      	movs	r3, #16
 800d02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d032:	e032      	b.n	800d09a <UART_SetConfig+0x27e>
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a30      	ldr	r2, [pc, #192]	@ (800d0fc <UART_SetConfig+0x2e0>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d12a      	bne.n	800d094 <UART_SetConfig+0x278>
 800d03e:	4b31      	ldr	r3, [pc, #196]	@ (800d104 <UART_SetConfig+0x2e8>)
 800d040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d044:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d048:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d04c:	d01a      	beq.n	800d084 <UART_SetConfig+0x268>
 800d04e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d052:	d81b      	bhi.n	800d08c <UART_SetConfig+0x270>
 800d054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d058:	d00c      	beq.n	800d074 <UART_SetConfig+0x258>
 800d05a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d05e:	d815      	bhi.n	800d08c <UART_SetConfig+0x270>
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <UART_SetConfig+0x250>
 800d064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d068:	d008      	beq.n	800d07c <UART_SetConfig+0x260>
 800d06a:	e00f      	b.n	800d08c <UART_SetConfig+0x270>
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d072:	e012      	b.n	800d09a <UART_SetConfig+0x27e>
 800d074:	2302      	movs	r3, #2
 800d076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d07a:	e00e      	b.n	800d09a <UART_SetConfig+0x27e>
 800d07c:	2304      	movs	r3, #4
 800d07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d082:	e00a      	b.n	800d09a <UART_SetConfig+0x27e>
 800d084:	2308      	movs	r3, #8
 800d086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d08a:	e006      	b.n	800d09a <UART_SetConfig+0x27e>
 800d08c:	2310      	movs	r3, #16
 800d08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d092:	e002      	b.n	800d09a <UART_SetConfig+0x27e>
 800d094:	2310      	movs	r3, #16
 800d096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a17      	ldr	r2, [pc, #92]	@ (800d0fc <UART_SetConfig+0x2e0>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	f040 80a8 	bne.w	800d1f6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0aa:	2b08      	cmp	r3, #8
 800d0ac:	d834      	bhi.n	800d118 <UART_SetConfig+0x2fc>
 800d0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b4 <UART_SetConfig+0x298>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d0d9 	.word	0x0800d0d9
 800d0b8:	0800d119 	.word	0x0800d119
 800d0bc:	0800d0e1 	.word	0x0800d0e1
 800d0c0:	0800d119 	.word	0x0800d119
 800d0c4:	0800d0e7 	.word	0x0800d0e7
 800d0c8:	0800d119 	.word	0x0800d119
 800d0cc:	0800d119 	.word	0x0800d119
 800d0d0:	0800d119 	.word	0x0800d119
 800d0d4:	0800d0ef 	.word	0x0800d0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0d8:	f7fe fd0c 	bl	800baf4 <HAL_RCC_GetPCLK1Freq>
 800d0dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0de:	e021      	b.n	800d124 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d114 <UART_SetConfig+0x2f8>)
 800d0e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0e4:	e01e      	b.n	800d124 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0e6:	f7fe fc97 	bl	800ba18 <HAL_RCC_GetSysClockFreq>
 800d0ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0ec:	e01a      	b.n	800d124 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0f4:	e016      	b.n	800d124 <UART_SetConfig+0x308>
 800d0f6:	bf00      	nop
 800d0f8:	cfff69f3 	.word	0xcfff69f3
 800d0fc:	40008000 	.word	0x40008000
 800d100:	40013800 	.word	0x40013800
 800d104:	40021000 	.word	0x40021000
 800d108:	40004400 	.word	0x40004400
 800d10c:	40004800 	.word	0x40004800
 800d110:	40004c00 	.word	0x40004c00
 800d114:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d118:	2300      	movs	r3, #0
 800d11a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d122:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 812a 	beq.w	800d380 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d130:	4a9e      	ldr	r2, [pc, #632]	@ (800d3ac <UART_SetConfig+0x590>)
 800d132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d136:	461a      	mov	r2, r3
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d13e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	69ba      	ldr	r2, [r7, #24]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d305      	bcc.n	800d15c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d156:	69ba      	ldr	r2, [r7, #24]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d903      	bls.n	800d164 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d162:	e10d      	b.n	800d380 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	2200      	movs	r2, #0
 800d168:	60bb      	str	r3, [r7, #8]
 800d16a:	60fa      	str	r2, [r7, #12]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d170:	4a8e      	ldr	r2, [pc, #568]	@ (800d3ac <UART_SetConfig+0x590>)
 800d172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d176:	b29b      	uxth	r3, r3
 800d178:	2200      	movs	r2, #0
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d186:	f7f3 fba9 	bl	80008dc <__aeabi_uldivmod>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4610      	mov	r0, r2
 800d190:	4619      	mov	r1, r3
 800d192:	f04f 0200 	mov.w	r2, #0
 800d196:	f04f 0300 	mov.w	r3, #0
 800d19a:	020b      	lsls	r3, r1, #8
 800d19c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1a0:	0202      	lsls	r2, r0, #8
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	6849      	ldr	r1, [r1, #4]
 800d1a6:	0849      	lsrs	r1, r1, #1
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	eb12 0804 	adds.w	r8, r2, r4
 800d1b2:	eb43 0905 	adc.w	r9, r3, r5
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	469a      	mov	sl, r3
 800d1be:	4693      	mov	fp, r2
 800d1c0:	4652      	mov	r2, sl
 800d1c2:	465b      	mov	r3, fp
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	f7f3 fb88 	bl	80008dc <__aeabi_uldivmod>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1da:	d308      	bcc.n	800d1ee <UART_SetConfig+0x3d2>
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1e2:	d204      	bcs.n	800d1ee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6a3a      	ldr	r2, [r7, #32]
 800d1ea:	60da      	str	r2, [r3, #12]
 800d1ec:	e0c8      	b.n	800d380 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d1f4:	e0c4      	b.n	800d380 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1fe:	d167      	bne.n	800d2d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d204:	2b08      	cmp	r3, #8
 800d206:	d828      	bhi.n	800d25a <UART_SetConfig+0x43e>
 800d208:	a201      	add	r2, pc, #4	@ (adr r2, 800d210 <UART_SetConfig+0x3f4>)
 800d20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20e:	bf00      	nop
 800d210:	0800d235 	.word	0x0800d235
 800d214:	0800d23d 	.word	0x0800d23d
 800d218:	0800d245 	.word	0x0800d245
 800d21c:	0800d25b 	.word	0x0800d25b
 800d220:	0800d24b 	.word	0x0800d24b
 800d224:	0800d25b 	.word	0x0800d25b
 800d228:	0800d25b 	.word	0x0800d25b
 800d22c:	0800d25b 	.word	0x0800d25b
 800d230:	0800d253 	.word	0x0800d253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d234:	f7fe fc5e 	bl	800baf4 <HAL_RCC_GetPCLK1Freq>
 800d238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d23a:	e014      	b.n	800d266 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d23c:	f7fe fc70 	bl	800bb20 <HAL_RCC_GetPCLK2Freq>
 800d240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d242:	e010      	b.n	800d266 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d244:	4b5a      	ldr	r3, [pc, #360]	@ (800d3b0 <UART_SetConfig+0x594>)
 800d246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d248:	e00d      	b.n	800d266 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d24a:	f7fe fbe5 	bl	800ba18 <HAL_RCC_GetSysClockFreq>
 800d24e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d250:	e009      	b.n	800d266 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d258:	e005      	b.n	800d266 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d25a:	2300      	movs	r3, #0
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 8089 	beq.w	800d380 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d272:	4a4e      	ldr	r2, [pc, #312]	@ (800d3ac <UART_SetConfig+0x590>)
 800d274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d278:	461a      	mov	r2, r3
 800d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d280:	005a      	lsls	r2, r3, #1
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	085b      	lsrs	r3, r3, #1
 800d288:	441a      	add	r2, r3
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d292:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	2b0f      	cmp	r3, #15
 800d298:	d916      	bls.n	800d2c8 <UART_SetConfig+0x4ac>
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2a0:	d212      	bcs.n	800d2c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	f023 030f 	bic.w	r3, r3, #15
 800d2aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	8bfb      	ldrh	r3, [r7, #30]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	8bfa      	ldrh	r2, [r7, #30]
 800d2c4:	60da      	str	r2, [r3, #12]
 800d2c6:	e05b      	b.n	800d380 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d2ce:	e057      	b.n	800d380 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	d828      	bhi.n	800d32a <UART_SetConfig+0x50e>
 800d2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2e0 <UART_SetConfig+0x4c4>)
 800d2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2de:	bf00      	nop
 800d2e0:	0800d305 	.word	0x0800d305
 800d2e4:	0800d30d 	.word	0x0800d30d
 800d2e8:	0800d315 	.word	0x0800d315
 800d2ec:	0800d32b 	.word	0x0800d32b
 800d2f0:	0800d31b 	.word	0x0800d31b
 800d2f4:	0800d32b 	.word	0x0800d32b
 800d2f8:	0800d32b 	.word	0x0800d32b
 800d2fc:	0800d32b 	.word	0x0800d32b
 800d300:	0800d323 	.word	0x0800d323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d304:	f7fe fbf6 	bl	800baf4 <HAL_RCC_GetPCLK1Freq>
 800d308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d30a:	e014      	b.n	800d336 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d30c:	f7fe fc08 	bl	800bb20 <HAL_RCC_GetPCLK2Freq>
 800d310:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d312:	e010      	b.n	800d336 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d314:	4b26      	ldr	r3, [pc, #152]	@ (800d3b0 <UART_SetConfig+0x594>)
 800d316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d318:	e00d      	b.n	800d336 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d31a:	f7fe fb7d 	bl	800ba18 <HAL_RCC_GetSysClockFreq>
 800d31e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d320:	e009      	b.n	800d336 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d328:	e005      	b.n	800d336 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d334:	bf00      	nop
    }

    if (pclk != 0U)
 800d336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d021      	beq.n	800d380 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d340:	4a1a      	ldr	r2, [pc, #104]	@ (800d3ac <UART_SetConfig+0x590>)
 800d342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d346:	461a      	mov	r2, r3
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	085b      	lsrs	r3, r3, #1
 800d354:	441a      	add	r2, r3
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d35e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d360:	6a3b      	ldr	r3, [r7, #32]
 800d362:	2b0f      	cmp	r3, #15
 800d364:	d909      	bls.n	800d37a <UART_SetConfig+0x55e>
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d36c:	d205      	bcs.n	800d37a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d36e:	6a3b      	ldr	r3, [r7, #32]
 800d370:	b29a      	uxth	r2, r3
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	60da      	str	r2, [r3, #12]
 800d378:	e002      	b.n	800d380 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2201      	movs	r2, #1
 800d384:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2200      	movs	r2, #0
 800d394:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2200      	movs	r2, #0
 800d39a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d39c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3730      	adds	r7, #48	@ 0x30
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3aa:	bf00      	nop
 800d3ac:	0800f76c 	.word	0x0800f76c
 800d3b0:	00f42400 	.word	0x00f42400

0800d3b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c0:	f003 0308 	and.w	r3, r3, #8
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00a      	beq.n	800d3de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	430a      	orrs	r2, r1
 800d3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00a      	beq.n	800d400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00a      	beq.n	800d422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d426:	f003 0304 	and.w	r3, r3, #4
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	430a      	orrs	r2, r1
 800d442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d448:	f003 0310 	and.w	r3, r3, #16
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00a      	beq.n	800d466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	430a      	orrs	r2, r1
 800d464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46a:	f003 0320 	and.w	r3, r3, #32
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00a      	beq.n	800d488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	430a      	orrs	r2, r1
 800d486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d490:	2b00      	cmp	r3, #0
 800d492:	d01a      	beq.n	800d4ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4b2:	d10a      	bne.n	800d4ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	605a      	str	r2, [r3, #4]
  }
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b098      	sub	sp, #96	@ 0x60
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d508:	f7fb fe6c 	bl	80091e4 <HAL_GetTick>
 800d50c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 0308 	and.w	r3, r3, #8
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d12f      	bne.n	800d57c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d51c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d524:	2200      	movs	r2, #0
 800d526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f88e 	bl	800d64c <UART_WaitOnFlagUntilTimeout>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d022      	beq.n	800d57c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53e:	e853 3f00 	ldrex	r3, [r3]
 800d542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d54a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	461a      	mov	r2, r3
 800d552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d554:	647b      	str	r3, [r7, #68]	@ 0x44
 800d556:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d55a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d55c:	e841 2300 	strex	r3, r2, [r1]
 800d560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e6      	bne.n	800d536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e063      	b.n	800d644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0304 	and.w	r3, r3, #4
 800d586:	2b04      	cmp	r3, #4
 800d588:	d149      	bne.n	800d61e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d58a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d592:	2200      	movs	r2, #0
 800d594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f857 	bl	800d64c <UART_WaitOnFlagUntilTimeout>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d03c      	beq.n	800d61e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ca:	e841 2300 	strex	r3, r2, [r1]
 800d5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1e6      	bne.n	800d5a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3308      	adds	r3, #8
 800d5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	e853 3f00 	ldrex	r3, [r3]
 800d5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f023 0301 	bic.w	r3, r3, #1
 800d5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5f6:	61fa      	str	r2, [r7, #28]
 800d5f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fa:	69b9      	ldr	r1, [r7, #24]
 800d5fc:	69fa      	ldr	r2, [r7, #28]
 800d5fe:	e841 2300 	strex	r3, r2, [r1]
 800d602:	617b      	str	r3, [r7, #20]
   return(result);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1e5      	bne.n	800d5d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2220      	movs	r2, #32
 800d60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d61a:	2303      	movs	r3, #3
 800d61c:	e012      	b.n	800d644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2220      	movs	r2, #32
 800d622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2220      	movs	r2, #32
 800d62a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3758      	adds	r7, #88	@ 0x58
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	4613      	mov	r3, r2
 800d65a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d65c:	e04f      	b.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d664:	d04b      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d666:	f7fb fdbd 	bl	80091e4 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	429a      	cmp	r2, r3
 800d674:	d302      	bcc.n	800d67c <UART_WaitOnFlagUntilTimeout+0x30>
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e04e      	b.n	800d71e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0304 	and.w	r3, r3, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d037      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b80      	cmp	r3, #128	@ 0x80
 800d692:	d034      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b40      	cmp	r3, #64	@ 0x40
 800d698:	d031      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b08      	cmp	r3, #8
 800d6a6:	d110      	bne.n	800d6ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2208      	movs	r2, #8
 800d6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f000 f838 	bl	800d726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e029      	b.n	800d71e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	69db      	ldr	r3, [r3, #28]
 800d6d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6d8:	d111      	bne.n	800d6fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 f81e 	bl	800d726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	e00f      	b.n	800d71e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	69da      	ldr	r2, [r3, #28]
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	4013      	ands	r3, r2
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	bf0c      	ite	eq
 800d70e:	2301      	moveq	r3, #1
 800d710:	2300      	movne	r3, #0
 800d712:	b2db      	uxtb	r3, r3
 800d714:	461a      	mov	r2, r3
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d0a0      	beq.n	800d65e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d726:	b480      	push	{r7}
 800d728:	b095      	sub	sp, #84	@ 0x54
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d736:	e853 3f00 	ldrex	r3, [r3]
 800d73a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d74c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d74e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d754:	e841 2300 	strex	r3, r2, [r1]
 800d758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1e6      	bne.n	800d72e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3308      	adds	r3, #8
 800d766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	e853 3f00 	ldrex	r3, [r3]
 800d76e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d776:	f023 0301 	bic.w	r3, r3, #1
 800d77a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3308      	adds	r3, #8
 800d782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e3      	bne.n	800d760 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d118      	bne.n	800d7d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	e853 3f00 	ldrex	r3, [r3]
 800d7ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	f023 0310 	bic.w	r3, r3, #16
 800d7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7be:	61bb      	str	r3, [r7, #24]
 800d7c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c2:	6979      	ldr	r1, [r7, #20]
 800d7c4:	69ba      	ldr	r2, [r7, #24]
 800d7c6:	e841 2300 	strex	r3, r2, [r1]
 800d7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1e6      	bne.n	800d7a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2220      	movs	r2, #32
 800d7d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d7e6:	bf00      	nop
 800d7e8:	3754      	adds	r7, #84	@ 0x54
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d800:	2b01      	cmp	r3, #1
 800d802:	d101      	bne.n	800d808 <HAL_UARTEx_EnableFifoMode+0x16>
 800d804:	2302      	movs	r3, #2
 800d806:	e02b      	b.n	800d860 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2224      	movs	r2, #36	@ 0x24
 800d814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f022 0201 	bic.w	r2, r2, #1
 800d82e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d83e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f8c3 	bl	800d9d4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2220      	movs	r2, #32
 800d852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d876:	2b01      	cmp	r3, #1
 800d878:	d101      	bne.n	800d87e <HAL_UARTEx_DisableFifoMode+0x16>
 800d87a:	2302      	movs	r3, #2
 800d87c:	e027      	b.n	800d8ce <HAL_UARTEx_DisableFifoMode+0x66>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2224      	movs	r2, #36	@ 0x24
 800d88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0201 	bic.w	r2, r2, #1
 800d8a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d8ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b084      	sub	sp, #16
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d101      	bne.n	800d8f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	e02d      	b.n	800d94e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2224      	movs	r2, #36	@ 0x24
 800d8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 0201 	bic.w	r2, r2, #1
 800d918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	430a      	orrs	r2, r1
 800d92c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f850 	bl	800d9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2220      	movs	r2, #32
 800d940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d966:	2b01      	cmp	r3, #1
 800d968:	d101      	bne.n	800d96e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d96a:	2302      	movs	r3, #2
 800d96c:	e02d      	b.n	800d9ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2224      	movs	r2, #36	@ 0x24
 800d97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f022 0201 	bic.w	r2, r2, #1
 800d994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	430a      	orrs	r2, r1
 800d9a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f812 	bl	800d9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
	...

0800d9d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d108      	bne.n	800d9f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9f4:	e031      	b.n	800da5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9f6:	2308      	movs	r3, #8
 800d9f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d9fa:	2308      	movs	r3, #8
 800d9fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	0e5b      	lsrs	r3, r3, #25
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0307 	and.w	r3, r3, #7
 800da0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	0f5b      	lsrs	r3, r3, #29
 800da16:	b2db      	uxtb	r3, r3
 800da18:	f003 0307 	and.w	r3, r3, #7
 800da1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	7b3a      	ldrb	r2, [r7, #12]
 800da22:	4911      	ldr	r1, [pc, #68]	@ (800da68 <UARTEx_SetNbDataToProcess+0x94>)
 800da24:	5c8a      	ldrb	r2, [r1, r2]
 800da26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da2a:	7b3a      	ldrb	r2, [r7, #12]
 800da2c:	490f      	ldr	r1, [pc, #60]	@ (800da6c <UARTEx_SetNbDataToProcess+0x98>)
 800da2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da30:	fb93 f3f2 	sdiv	r3, r3, r2
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	7b7a      	ldrb	r2, [r7, #13]
 800da40:	4909      	ldr	r1, [pc, #36]	@ (800da68 <UARTEx_SetNbDataToProcess+0x94>)
 800da42:	5c8a      	ldrb	r2, [r1, r2]
 800da44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da48:	7b7a      	ldrb	r2, [r7, #13]
 800da4a:	4908      	ldr	r1, [pc, #32]	@ (800da6c <UARTEx_SetNbDataToProcess+0x98>)
 800da4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800da5a:	bf00      	nop
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	0800f784 	.word	0x0800f784
 800da6c:	0800f78c 	.word	0x0800f78c

0800da70 <_ZdlPvj>:
 800da70:	f000 b9ba 	b.w	800dde8 <_ZdlPv>

0800da74 <_Znwj>:
 800da74:	2801      	cmp	r0, #1
 800da76:	bf38      	it	cc
 800da78:	2001      	movcc	r0, #1
 800da7a:	b510      	push	{r4, lr}
 800da7c:	4604      	mov	r4, r0
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f9c4 	bl	800de0c <malloc>
 800da84:	b100      	cbz	r0, 800da88 <_Znwj+0x14>
 800da86:	bd10      	pop	{r4, pc}
 800da88:	f000 f9b0 	bl	800ddec <_ZSt15get_new_handlerv>
 800da8c:	b908      	cbnz	r0, 800da92 <_Znwj+0x1e>
 800da8e:	f000 f9b5 	bl	800ddfc <abort>
 800da92:	4780      	blx	r0
 800da94:	e7f3      	b.n	800da7e <_Znwj+0xa>

0800da96 <_ZNSaIcEC1Ev>:
 800da96:	4770      	bx	lr

0800da98 <_ZNSaIcED1Ev>:
 800da98:	4770      	bx	lr

0800da9a <_ZSt17__throw_bad_allocv>:
 800da9a:	b508      	push	{r3, lr}
 800da9c:	f000 f9ae 	bl	800ddfc <abort>

0800daa0 <_ZSt28__throw_bad_array_new_lengthv>:
 800daa0:	b508      	push	{r3, lr}
 800daa2:	f000 f9ab 	bl	800ddfc <abort>

0800daa6 <_ZSt19__throw_logic_errorPKc>:
 800daa6:	b508      	push	{r3, lr}
 800daa8:	f000 f9a8 	bl	800ddfc <abort>

0800daac <_ZSt20__throw_length_errorPKc>:
 800daac:	b508      	push	{r3, lr}
 800daae:	f000 f9a5 	bl	800ddfc <abort>

0800dab2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800dab2:	b10a      	cbz	r2, 800dab8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800dab4:	f000 bd63 	b.w	800e57e <memcpy>
 800dab8:	4770      	bx	lr

0800daba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800daba:	f850 3b08 	ldr.w	r3, [r0], #8
 800dabe:	1a1b      	subs	r3, r3, r0
 800dac0:	4258      	negs	r0, r3
 800dac2:	4158      	adcs	r0, r3
 800dac4:	4770      	bx	lr
	...

0800dac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800dac8:	b508      	push	{r3, lr}
 800daca:	680b      	ldr	r3, [r1, #0]
 800dacc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dad0:	d302      	bcc.n	800dad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800dad2:	480d      	ldr	r0, [pc, #52]	@ (800db08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800dad4:	f7ff ffea 	bl	800daac <_ZSt20__throw_length_errorPKc>
 800dad8:	4293      	cmp	r3, r2
 800dada:	d90b      	bls.n	800daf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800dadc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800dae0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800dae4:	d206      	bcs.n	800daf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800dae6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800daea:	bf2a      	itet	cs
 800daec:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800daf0:	6008      	strcc	r0, [r1, #0]
 800daf2:	600b      	strcs	r3, [r1, #0]
 800daf4:	6808      	ldr	r0, [r1, #0]
 800daf6:	3001      	adds	r0, #1
 800daf8:	d501      	bpl.n	800dafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800dafa:	f7ff ffce 	bl	800da9a <_ZSt17__throw_bad_allocv>
 800dafe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db02:	f7ff bfb7 	b.w	800da74 <_Znwj>
 800db06:	bf00      	nop
 800db08:	0800f794 	.word	0x0800f794

0800db0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	4604      	mov	r4, r0
 800db10:	f7ff ffd3 	bl	800daba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db14:	b920      	cbnz	r0, 800db20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db1c:	f000 b964 	b.w	800dde8 <_ZdlPv>
 800db20:	bd10      	pop	{r4, pc}

0800db22 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800db22:	6840      	ldr	r0, [r0, #4]
 800db24:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800db28:	3901      	subs	r1, #1
 800db2a:	1a09      	subs	r1, r1, r0
 800db2c:	4291      	cmp	r1, r2
 800db2e:	b508      	push	{r3, lr}
 800db30:	d202      	bcs.n	800db38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff ffba 	bl	800daac <_ZSt20__throw_length_errorPKc>
 800db38:	bd08      	pop	{r3, pc}

0800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800db3a:	2a01      	cmp	r2, #1
 800db3c:	b410      	push	{r4}
 800db3e:	d104      	bne.n	800db4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800db40:	780a      	ldrb	r2, [r1, #0]
 800db42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db46:	7002      	strb	r2, [r0, #0]
 800db48:	4770      	bx	lr
 800db4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db4e:	f7ff bfb0 	b.w	800dab2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800db52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800db52:	b508      	push	{r3, lr}
 800db54:	1a52      	subs	r2, r2, r1
 800db56:	f7ff fff0 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db5a:	bd08      	pop	{r3, pc}

0800db5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800db5c:	b508      	push	{r3, lr}
 800db5e:	1a52      	subs	r2, r2, r1
 800db60:	f7ff ffeb 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db64:	bd08      	pop	{r3, pc}

0800db66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800db66:	f100 0208 	add.w	r2, r0, #8
 800db6a:	6002      	str	r2, [r0, #0]
 800db6c:	2200      	movs	r2, #0
 800db6e:	6042      	str	r2, [r0, #4]
 800db70:	7202      	strb	r2, [r0, #8]
 800db72:	4770      	bx	lr

0800db74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800db74:	b510      	push	{r4, lr}
 800db76:	4604      	mov	r4, r0
 800db78:	f7ff ffc8 	bl	800db0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800db7c:	4620      	mov	r0, r4
 800db7e:	bd10      	pop	{r4, pc}

0800db80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db82:	460c      	mov	r4, r1
 800db84:	4605      	mov	r5, r0
 800db86:	f7ff ff98 	bl	800daba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db8a:	4606      	mov	r6, r0
 800db8c:	4620      	mov	r0, r4
 800db8e:	f7ff ff94 	bl	800daba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800db92:	b190      	cbz	r0, 800dbba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 800db94:	42a5      	cmp	r5, r4
 800db96:	d00a      	beq.n	800dbae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800db98:	6862      	ldr	r2, [r4, #4]
 800db9a:	b11a      	cbz	r2, 800dba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 800db9c:	6821      	ldr	r1, [r4, #0]
 800db9e:	6828      	ldr	r0, [r5, #0]
 800dba0:	f7ff ffcb 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dba4:	6863      	ldr	r3, [r4, #4]
 800dba6:	682a      	ldr	r2, [r5, #0]
 800dba8:	606b      	str	r3, [r5, #4]
 800dbaa:	2100      	movs	r1, #0
 800dbac:	54d1      	strb	r1, [r2, r3]
 800dbae:	6822      	ldr	r2, [r4, #0]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	6063      	str	r3, [r4, #4]
 800dbb4:	7013      	strb	r3, [r2, #0]
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbba:	b90e      	cbnz	r6, 800dbc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800dbbc:	6828      	ldr	r0, [r5, #0]
 800dbbe:	68af      	ldr	r7, [r5, #8]
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	6863      	ldr	r3, [r4, #4]
 800dbc6:	606b      	str	r3, [r5, #4]
 800dbc8:	68a3      	ldr	r3, [r4, #8]
 800dbca:	60ab      	str	r3, [r5, #8]
 800dbcc:	b110      	cbz	r0, 800dbd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 800dbce:	6020      	str	r0, [r4, #0]
 800dbd0:	60a7      	str	r7, [r4, #8]
 800dbd2:	e7ec      	b.n	800dbae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800dbd4:	f104 0308 	add.w	r3, r4, #8
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	e7e8      	b.n	800dbae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0800dbdc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800dbdc:	6840      	ldr	r0, [r0, #4]
 800dbde:	4770      	bx	lr

0800dbe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	f7ff ff69 	bl	800daba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800dbe8:	b908      	cbnz	r0, 800dbee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800dbea:	68a0      	ldr	r0, [r4, #8]
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	200f      	movs	r0, #15
 800dbf0:	e7fc      	b.n	800dbec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800dbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800dbf2:	4288      	cmp	r0, r1
 800dbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460e      	mov	r6, r1
 800dbfa:	d01d      	beq.n	800dc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 800dbfc:	684d      	ldr	r5, [r1, #4]
 800dbfe:	f7ff ffef 	bl	800dbe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dc02:	42a8      	cmp	r0, r5
 800dc04:	4602      	mov	r2, r0
 800dc06:	d211      	bcs.n	800dc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 800dc08:	a901      	add	r1, sp, #4
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	9501      	str	r5, [sp, #4]
 800dc0e:	f7ff ff5b 	bl	800dac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dc12:	4607      	mov	r7, r0
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff ff79 	bl	800db0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800dc1a:	9b01      	ldr	r3, [sp, #4]
 800dc1c:	6027      	str	r7, [r4, #0]
 800dc1e:	60a3      	str	r3, [r4, #8]
 800dc20:	6831      	ldr	r1, [r6, #0]
 800dc22:	6820      	ldr	r0, [r4, #0]
 800dc24:	462a      	mov	r2, r5
 800dc26:	f7ff ff88 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc2a:	e001      	b.n	800dc30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 800dc2c:	2d00      	cmp	r5, #0
 800dc2e:	d1f7      	bne.n	800dc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	6065      	str	r5, [r4, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	555a      	strb	r2, [r3, r5]
 800dc38:	b003      	add	sp, #12
 800dc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4604      	mov	r4, r0
 800dc40:	f7ff ffd7 	bl	800dbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800dc44:	4620      	mov	r0, r4
 800dc46:	bd10      	pop	{r4, pc}

0800dc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800dc48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc4c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dc4e:	461f      	mov	r7, r3
 800dc50:	6843      	ldr	r3, [r0, #4]
 800dc52:	eb01 0802 	add.w	r8, r1, r2
 800dc56:	1ab2      	subs	r2, r6, r2
 800dc58:	441a      	add	r2, r3
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	eba3 0908 	sub.w	r9, r3, r8
 800dc62:	9201      	str	r2, [sp, #4]
 800dc64:	f7ff ffbc 	bl	800dbe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dc68:	a901      	add	r1, sp, #4
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f7ff ff2b 	bl	800dac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dc72:	4682      	mov	sl, r0
 800dc74:	b11d      	cbz	r5, 800dc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 800dc76:	6821      	ldr	r1, [r4, #0]
 800dc78:	462a      	mov	r2, r5
 800dc7a:	f7ff ff5e 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc7e:	b137      	cbz	r7, 800dc8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800dc80:	b12e      	cbz	r6, 800dc8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800dc82:	4632      	mov	r2, r6
 800dc84:	4639      	mov	r1, r7
 800dc86:	eb0a 0005 	add.w	r0, sl, r5
 800dc8a:	f7ff ff56 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dc8e:	f1b9 0f00 	cmp.w	r9, #0
 800dc92:	d007      	beq.n	800dca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800dc94:	6821      	ldr	r1, [r4, #0]
 800dc96:	4435      	add	r5, r6
 800dc98:	464a      	mov	r2, r9
 800dc9a:	4441      	add	r1, r8
 800dc9c:	eb0a 0005 	add.w	r0, sl, r5
 800dca0:	f7ff ff4b 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dca4:	4620      	mov	r0, r4
 800dca6:	f7ff ff31 	bl	800db0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800dcaa:	9b01      	ldr	r3, [sp, #4]
 800dcac:	f8c4 a000 	str.w	sl, [r4]
 800dcb0:	60a3      	str	r3, [r4, #8]
 800dcb2:	b002      	add	sp, #8
 800dcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dcb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800dcb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dcbc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	eb02 0708 	add.w	r7, r2, r8
 800dcc6:	460e      	mov	r6, r1
 800dcc8:	4615      	mov	r5, r2
 800dcca:	f7ff ff89 	bl	800dbe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800dcce:	42b8      	cmp	r0, r7
 800dcd0:	d30e      	bcc.n	800dcf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 800dcd2:	b12d      	cbz	r5, 800dce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	462a      	mov	r2, r5
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4440      	add	r0, r8
 800dcdc:	f7ff ff2d 	bl	800db3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	6067      	str	r7, [r4, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	4620      	mov	r0, r4
 800dce8:	55da      	strb	r2, [r3, r7]
 800dcea:	b002      	add	sp, #8
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	9500      	str	r5, [sp, #0]
 800dcf2:	4633      	mov	r3, r6
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	4641      	mov	r1, r8
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f7ff ffa5 	bl	800dc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800dcfe:	e7ef      	b.n	800dce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

0800dd00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800dd04:	4604      	mov	r4, r0
 800dd06:	460d      	mov	r5, r1
 800dd08:	4616      	mov	r6, r2
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	f7ff ff09 	bl	800db22 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800dd10:	4632      	mov	r2, r6
 800dd12:	4629      	mov	r1, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7ff ffcf 	bl	800dcb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800dd1a:	bd70      	pop	{r4, r5, r6, pc}
 800dd1c:	0800f7ac 	.word	0x0800f7ac

0800dd20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800dd20:	b508      	push	{r3, lr}
 800dd22:	e9d1 1200 	ldrd	r1, r2, [r1]
 800dd26:	f7ff ffeb 	bl	800dd00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 800dd2a:	bd08      	pop	{r3, pc}

0800dd2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800dd2c:	b508      	push	{r3, lr}
 800dd2e:	f7ff fff7 	bl	800dd20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800dd32:	bd08      	pop	{r3, pc}

0800dd34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800dd34:	6800      	ldr	r0, [r0, #0]
 800dd36:	4770      	bx	lr

0800dd38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800dd38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd3a:	1a53      	subs	r3, r2, r1
 800dd3c:	2b0f      	cmp	r3, #15
 800dd3e:	4604      	mov	r4, r0
 800dd40:	460d      	mov	r5, r1
 800dd42:	4616      	mov	r6, r2
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	d906      	bls.n	800dd56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 800dd48:	2200      	movs	r2, #0
 800dd4a:	a901      	add	r1, sp, #4
 800dd4c:	f7ff febc 	bl	800dac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dd50:	9b01      	ldr	r3, [sp, #4]
 800dd52:	6020      	str	r0, [r4, #0]
 800dd54:	60a3      	str	r3, [r4, #8]
 800dd56:	4632      	mov	r2, r6
 800dd58:	4629      	mov	r1, r5
 800dd5a:	6820      	ldr	r0, [r4, #0]
 800dd5c:	f7ff fef9 	bl	800db52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	6063      	str	r3, [r4, #4]
 800dd66:	2100      	movs	r1, #0
 800dd68:	54d1      	strb	r1, [r2, r3]
 800dd6a:	b002      	add	sp, #8
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}

0800dd6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800dd6e:	f100 0208 	add.w	r2, r0, #8
 800dd72:	b510      	push	{r4, lr}
 800dd74:	6002      	str	r2, [r0, #0]
 800dd76:	e9d1 1200 	ldrd	r1, r2, [r1]
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	f04f 0300 	mov.w	r3, #0
 800dd80:	440a      	add	r2, r1
 800dd82:	f7ff ffd9 	bl	800dd38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800dd86:	4620      	mov	r0, r4
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800dd8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd8c:	1a53      	subs	r3, r2, r1
 800dd8e:	2b0f      	cmp	r3, #15
 800dd90:	4604      	mov	r4, r0
 800dd92:	460d      	mov	r5, r1
 800dd94:	4616      	mov	r6, r2
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	d906      	bls.n	800dda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	a901      	add	r1, sp, #4
 800dd9e:	f7ff fe93 	bl	800dac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dda2:	9b01      	ldr	r3, [sp, #4]
 800dda4:	6020      	str	r0, [r4, #0]
 800dda6:	60a3      	str	r3, [r4, #8]
 800dda8:	4632      	mov	r2, r6
 800ddaa:	4629      	mov	r1, r5
 800ddac:	6820      	ldr	r0, [r4, #0]
 800ddae:	f7ff fed5 	bl	800db5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ddb2:	9b01      	ldr	r3, [sp, #4]
 800ddb4:	6822      	ldr	r2, [r4, #0]
 800ddb6:	6063      	str	r3, [r4, #4]
 800ddb8:	2100      	movs	r1, #0
 800ddba:	54d1      	strb	r1, [r2, r3]
 800ddbc:	b002      	add	sp, #8
 800ddbe:	bd70      	pop	{r4, r5, r6, pc}

0800ddc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800ddc0:	f100 0308 	add.w	r3, r0, #8
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	6003      	str	r3, [r0, #0]
 800ddca:	b919      	cbnz	r1, 800ddd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 800ddcc:	b112      	cbz	r2, 800ddd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 800ddce:	4805      	ldr	r0, [pc, #20]	@ (800dde4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x24>)
 800ddd0:	f7ff fe69 	bl	800daa6 <_ZSt19__throw_logic_errorPKc>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f04f 0300 	mov.w	r3, #0
 800ddda:	440a      	add	r2, r1
 800dddc:	f7ff ffd5 	bl	800dd8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800dde0:	4620      	mov	r0, r4
 800dde2:	bd10      	pop	{r4, pc}
 800dde4:	0800f7c1 	.word	0x0800f7c1

0800dde8 <_ZdlPv>:
 800dde8:	f000 b818 	b.w	800de1c <free>

0800ddec <_ZSt15get_new_handlerv>:
 800ddec:	4b02      	ldr	r3, [pc, #8]	@ (800ddf8 <_ZSt15get_new_handlerv+0xc>)
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	f3bf 8f5b 	dmb	ish
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	200006d4 	.word	0x200006d4

0800ddfc <abort>:
 800ddfc:	b508      	push	{r3, lr}
 800ddfe:	2006      	movs	r0, #6
 800de00:	f000 fb1e 	bl	800e440 <raise>
 800de04:	2001      	movs	r0, #1
 800de06:	f7fb f8bb 	bl	8008f80 <_exit>
	...

0800de0c <malloc>:
 800de0c:	4b02      	ldr	r3, [pc, #8]	@ (800de18 <malloc+0xc>)
 800de0e:	4601      	mov	r1, r0
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	f000 b82d 	b.w	800de70 <_malloc_r>
 800de16:	bf00      	nop
 800de18:	20000018 	.word	0x20000018

0800de1c <free>:
 800de1c:	4b02      	ldr	r3, [pc, #8]	@ (800de28 <free+0xc>)
 800de1e:	4601      	mov	r1, r0
 800de20:	6818      	ldr	r0, [r3, #0]
 800de22:	f000 bbbb 	b.w	800e59c <_free_r>
 800de26:	bf00      	nop
 800de28:	20000018 	.word	0x20000018

0800de2c <sbrk_aligned>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4e0f      	ldr	r6, [pc, #60]	@ (800de6c <sbrk_aligned+0x40>)
 800de30:	460c      	mov	r4, r1
 800de32:	6831      	ldr	r1, [r6, #0]
 800de34:	4605      	mov	r5, r0
 800de36:	b911      	cbnz	r1, 800de3e <sbrk_aligned+0x12>
 800de38:	f000 fb52 	bl	800e4e0 <_sbrk_r>
 800de3c:	6030      	str	r0, [r6, #0]
 800de3e:	4621      	mov	r1, r4
 800de40:	4628      	mov	r0, r5
 800de42:	f000 fb4d 	bl	800e4e0 <_sbrk_r>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	d103      	bne.n	800de52 <sbrk_aligned+0x26>
 800de4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de4e:	4620      	mov	r0, r4
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	1cc4      	adds	r4, r0, #3
 800de54:	f024 0403 	bic.w	r4, r4, #3
 800de58:	42a0      	cmp	r0, r4
 800de5a:	d0f8      	beq.n	800de4e <sbrk_aligned+0x22>
 800de5c:	1a21      	subs	r1, r4, r0
 800de5e:	4628      	mov	r0, r5
 800de60:	f000 fb3e 	bl	800e4e0 <_sbrk_r>
 800de64:	3001      	adds	r0, #1
 800de66:	d1f2      	bne.n	800de4e <sbrk_aligned+0x22>
 800de68:	e7ef      	b.n	800de4a <sbrk_aligned+0x1e>
 800de6a:	bf00      	nop
 800de6c:	200006d8 	.word	0x200006d8

0800de70 <_malloc_r>:
 800de70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de74:	1ccd      	adds	r5, r1, #3
 800de76:	f025 0503 	bic.w	r5, r5, #3
 800de7a:	3508      	adds	r5, #8
 800de7c:	2d0c      	cmp	r5, #12
 800de7e:	bf38      	it	cc
 800de80:	250c      	movcc	r5, #12
 800de82:	2d00      	cmp	r5, #0
 800de84:	4606      	mov	r6, r0
 800de86:	db01      	blt.n	800de8c <_malloc_r+0x1c>
 800de88:	42a9      	cmp	r1, r5
 800de8a:	d904      	bls.n	800de96 <_malloc_r+0x26>
 800de8c:	230c      	movs	r3, #12
 800de8e:	6033      	str	r3, [r6, #0]
 800de90:	2000      	movs	r0, #0
 800de92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df6c <_malloc_r+0xfc>
 800de9a:	f000 f869 	bl	800df70 <__malloc_lock>
 800de9e:	f8d8 3000 	ldr.w	r3, [r8]
 800dea2:	461c      	mov	r4, r3
 800dea4:	bb44      	cbnz	r4, 800def8 <_malloc_r+0x88>
 800dea6:	4629      	mov	r1, r5
 800dea8:	4630      	mov	r0, r6
 800deaa:	f7ff ffbf 	bl	800de2c <sbrk_aligned>
 800deae:	1c43      	adds	r3, r0, #1
 800deb0:	4604      	mov	r4, r0
 800deb2:	d158      	bne.n	800df66 <_malloc_r+0xf6>
 800deb4:	f8d8 4000 	ldr.w	r4, [r8]
 800deb8:	4627      	mov	r7, r4
 800deba:	2f00      	cmp	r7, #0
 800debc:	d143      	bne.n	800df46 <_malloc_r+0xd6>
 800debe:	2c00      	cmp	r4, #0
 800dec0:	d04b      	beq.n	800df5a <_malloc_r+0xea>
 800dec2:	6823      	ldr	r3, [r4, #0]
 800dec4:	4639      	mov	r1, r7
 800dec6:	4630      	mov	r0, r6
 800dec8:	eb04 0903 	add.w	r9, r4, r3
 800decc:	f000 fb08 	bl	800e4e0 <_sbrk_r>
 800ded0:	4581      	cmp	r9, r0
 800ded2:	d142      	bne.n	800df5a <_malloc_r+0xea>
 800ded4:	6821      	ldr	r1, [r4, #0]
 800ded6:	1a6d      	subs	r5, r5, r1
 800ded8:	4629      	mov	r1, r5
 800deda:	4630      	mov	r0, r6
 800dedc:	f7ff ffa6 	bl	800de2c <sbrk_aligned>
 800dee0:	3001      	adds	r0, #1
 800dee2:	d03a      	beq.n	800df5a <_malloc_r+0xea>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	442b      	add	r3, r5
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	f8d8 3000 	ldr.w	r3, [r8]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	bb62      	cbnz	r2, 800df4c <_malloc_r+0xdc>
 800def2:	f8c8 7000 	str.w	r7, [r8]
 800def6:	e00f      	b.n	800df18 <_malloc_r+0xa8>
 800def8:	6822      	ldr	r2, [r4, #0]
 800defa:	1b52      	subs	r2, r2, r5
 800defc:	d420      	bmi.n	800df40 <_malloc_r+0xd0>
 800defe:	2a0b      	cmp	r2, #11
 800df00:	d917      	bls.n	800df32 <_malloc_r+0xc2>
 800df02:	1961      	adds	r1, r4, r5
 800df04:	42a3      	cmp	r3, r4
 800df06:	6025      	str	r5, [r4, #0]
 800df08:	bf18      	it	ne
 800df0a:	6059      	strne	r1, [r3, #4]
 800df0c:	6863      	ldr	r3, [r4, #4]
 800df0e:	bf08      	it	eq
 800df10:	f8c8 1000 	streq.w	r1, [r8]
 800df14:	5162      	str	r2, [r4, r5]
 800df16:	604b      	str	r3, [r1, #4]
 800df18:	4630      	mov	r0, r6
 800df1a:	f000 f82f 	bl	800df7c <__malloc_unlock>
 800df1e:	f104 000b 	add.w	r0, r4, #11
 800df22:	1d23      	adds	r3, r4, #4
 800df24:	f020 0007 	bic.w	r0, r0, #7
 800df28:	1ac2      	subs	r2, r0, r3
 800df2a:	bf1c      	itt	ne
 800df2c:	1a1b      	subne	r3, r3, r0
 800df2e:	50a3      	strne	r3, [r4, r2]
 800df30:	e7af      	b.n	800de92 <_malloc_r+0x22>
 800df32:	6862      	ldr	r2, [r4, #4]
 800df34:	42a3      	cmp	r3, r4
 800df36:	bf0c      	ite	eq
 800df38:	f8c8 2000 	streq.w	r2, [r8]
 800df3c:	605a      	strne	r2, [r3, #4]
 800df3e:	e7eb      	b.n	800df18 <_malloc_r+0xa8>
 800df40:	4623      	mov	r3, r4
 800df42:	6864      	ldr	r4, [r4, #4]
 800df44:	e7ae      	b.n	800dea4 <_malloc_r+0x34>
 800df46:	463c      	mov	r4, r7
 800df48:	687f      	ldr	r7, [r7, #4]
 800df4a:	e7b6      	b.n	800deba <_malloc_r+0x4a>
 800df4c:	461a      	mov	r2, r3
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	42a3      	cmp	r3, r4
 800df52:	d1fb      	bne.n	800df4c <_malloc_r+0xdc>
 800df54:	2300      	movs	r3, #0
 800df56:	6053      	str	r3, [r2, #4]
 800df58:	e7de      	b.n	800df18 <_malloc_r+0xa8>
 800df5a:	230c      	movs	r3, #12
 800df5c:	6033      	str	r3, [r6, #0]
 800df5e:	4630      	mov	r0, r6
 800df60:	f000 f80c 	bl	800df7c <__malloc_unlock>
 800df64:	e794      	b.n	800de90 <_malloc_r+0x20>
 800df66:	6005      	str	r5, [r0, #0]
 800df68:	e7d6      	b.n	800df18 <_malloc_r+0xa8>
 800df6a:	bf00      	nop
 800df6c:	200006dc 	.word	0x200006dc

0800df70 <__malloc_lock>:
 800df70:	4801      	ldr	r0, [pc, #4]	@ (800df78 <__malloc_lock+0x8>)
 800df72:	f000 bb02 	b.w	800e57a <__retarget_lock_acquire_recursive>
 800df76:	bf00      	nop
 800df78:	20000820 	.word	0x20000820

0800df7c <__malloc_unlock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	@ (800df84 <__malloc_unlock+0x8>)
 800df7e:	f000 bafd 	b.w	800e57c <__retarget_lock_release_recursive>
 800df82:	bf00      	nop
 800df84:	20000820 	.word	0x20000820

0800df88 <std>:
 800df88:	2300      	movs	r3, #0
 800df8a:	b510      	push	{r4, lr}
 800df8c:	4604      	mov	r4, r0
 800df8e:	e9c0 3300 	strd	r3, r3, [r0]
 800df92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df96:	6083      	str	r3, [r0, #8]
 800df98:	8181      	strh	r1, [r0, #12]
 800df9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800df9c:	81c2      	strh	r2, [r0, #14]
 800df9e:	6183      	str	r3, [r0, #24]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	2208      	movs	r2, #8
 800dfa4:	305c      	adds	r0, #92	@ 0x5c
 800dfa6:	f000 fa1b 	bl	800e3e0 <memset>
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe0 <std+0x58>)
 800dfac:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <std+0x5c>)
 800dfb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe8 <std+0x60>)
 800dfb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <std+0x64>)
 800dfb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800dfba:	4b0d      	ldr	r3, [pc, #52]	@ (800dff0 <std+0x68>)
 800dfbc:	6224      	str	r4, [r4, #32]
 800dfbe:	429c      	cmp	r4, r3
 800dfc0:	d006      	beq.n	800dfd0 <std+0x48>
 800dfc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfc6:	4294      	cmp	r4, r2
 800dfc8:	d002      	beq.n	800dfd0 <std+0x48>
 800dfca:	33d0      	adds	r3, #208	@ 0xd0
 800dfcc:	429c      	cmp	r4, r3
 800dfce:	d105      	bne.n	800dfdc <std+0x54>
 800dfd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd8:	f000 bace 	b.w	800e578 <__retarget_lock_init_recursive>
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	bf00      	nop
 800dfe0:	0800e1fd 	.word	0x0800e1fd
 800dfe4:	0800e21f 	.word	0x0800e21f
 800dfe8:	0800e257 	.word	0x0800e257
 800dfec:	0800e27b 	.word	0x0800e27b
 800dff0:	200006e0 	.word	0x200006e0

0800dff4 <stdio_exit_handler>:
 800dff4:	4a02      	ldr	r2, [pc, #8]	@ (800e000 <stdio_exit_handler+0xc>)
 800dff6:	4903      	ldr	r1, [pc, #12]	@ (800e004 <stdio_exit_handler+0x10>)
 800dff8:	4803      	ldr	r0, [pc, #12]	@ (800e008 <stdio_exit_handler+0x14>)
 800dffa:	f000 b869 	b.w	800e0d0 <_fwalk_sglue>
 800dffe:	bf00      	nop
 800e000:	2000000c 	.word	0x2000000c
 800e004:	0800ecd9 	.word	0x0800ecd9
 800e008:	2000001c 	.word	0x2000001c

0800e00c <cleanup_stdio>:
 800e00c:	6841      	ldr	r1, [r0, #4]
 800e00e:	4b0c      	ldr	r3, [pc, #48]	@ (800e040 <cleanup_stdio+0x34>)
 800e010:	4299      	cmp	r1, r3
 800e012:	b510      	push	{r4, lr}
 800e014:	4604      	mov	r4, r0
 800e016:	d001      	beq.n	800e01c <cleanup_stdio+0x10>
 800e018:	f000 fe5e 	bl	800ecd8 <_fflush_r>
 800e01c:	68a1      	ldr	r1, [r4, #8]
 800e01e:	4b09      	ldr	r3, [pc, #36]	@ (800e044 <cleanup_stdio+0x38>)
 800e020:	4299      	cmp	r1, r3
 800e022:	d002      	beq.n	800e02a <cleanup_stdio+0x1e>
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fe57 	bl	800ecd8 <_fflush_r>
 800e02a:	68e1      	ldr	r1, [r4, #12]
 800e02c:	4b06      	ldr	r3, [pc, #24]	@ (800e048 <cleanup_stdio+0x3c>)
 800e02e:	4299      	cmp	r1, r3
 800e030:	d004      	beq.n	800e03c <cleanup_stdio+0x30>
 800e032:	4620      	mov	r0, r4
 800e034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e038:	f000 be4e 	b.w	800ecd8 <_fflush_r>
 800e03c:	bd10      	pop	{r4, pc}
 800e03e:	bf00      	nop
 800e040:	200006e0 	.word	0x200006e0
 800e044:	20000748 	.word	0x20000748
 800e048:	200007b0 	.word	0x200007b0

0800e04c <global_stdio_init.part.0>:
 800e04c:	b510      	push	{r4, lr}
 800e04e:	4b0b      	ldr	r3, [pc, #44]	@ (800e07c <global_stdio_init.part.0+0x30>)
 800e050:	4c0b      	ldr	r4, [pc, #44]	@ (800e080 <global_stdio_init.part.0+0x34>)
 800e052:	4a0c      	ldr	r2, [pc, #48]	@ (800e084 <global_stdio_init.part.0+0x38>)
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	4620      	mov	r0, r4
 800e058:	2200      	movs	r2, #0
 800e05a:	2104      	movs	r1, #4
 800e05c:	f7ff ff94 	bl	800df88 <std>
 800e060:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e064:	2201      	movs	r2, #1
 800e066:	2109      	movs	r1, #9
 800e068:	f7ff ff8e 	bl	800df88 <std>
 800e06c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e070:	2202      	movs	r2, #2
 800e072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e076:	2112      	movs	r1, #18
 800e078:	f7ff bf86 	b.w	800df88 <std>
 800e07c:	20000818 	.word	0x20000818
 800e080:	200006e0 	.word	0x200006e0
 800e084:	0800dff5 	.word	0x0800dff5

0800e088 <__sfp_lock_acquire>:
 800e088:	4801      	ldr	r0, [pc, #4]	@ (800e090 <__sfp_lock_acquire+0x8>)
 800e08a:	f000 ba76 	b.w	800e57a <__retarget_lock_acquire_recursive>
 800e08e:	bf00      	nop
 800e090:	20000821 	.word	0x20000821

0800e094 <__sfp_lock_release>:
 800e094:	4801      	ldr	r0, [pc, #4]	@ (800e09c <__sfp_lock_release+0x8>)
 800e096:	f000 ba71 	b.w	800e57c <__retarget_lock_release_recursive>
 800e09a:	bf00      	nop
 800e09c:	20000821 	.word	0x20000821

0800e0a0 <__sinit>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	f7ff fff0 	bl	800e088 <__sfp_lock_acquire>
 800e0a8:	6a23      	ldr	r3, [r4, #32]
 800e0aa:	b11b      	cbz	r3, 800e0b4 <__sinit+0x14>
 800e0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b0:	f7ff bff0 	b.w	800e094 <__sfp_lock_release>
 800e0b4:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <__sinit+0x28>)
 800e0b6:	6223      	str	r3, [r4, #32]
 800e0b8:	4b04      	ldr	r3, [pc, #16]	@ (800e0cc <__sinit+0x2c>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1f5      	bne.n	800e0ac <__sinit+0xc>
 800e0c0:	f7ff ffc4 	bl	800e04c <global_stdio_init.part.0>
 800e0c4:	e7f2      	b.n	800e0ac <__sinit+0xc>
 800e0c6:	bf00      	nop
 800e0c8:	0800e00d 	.word	0x0800e00d
 800e0cc:	20000818 	.word	0x20000818

0800e0d0 <_fwalk_sglue>:
 800e0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d4:	4607      	mov	r7, r0
 800e0d6:	4688      	mov	r8, r1
 800e0d8:	4614      	mov	r4, r2
 800e0da:	2600      	movs	r6, #0
 800e0dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0e0:	f1b9 0901 	subs.w	r9, r9, #1
 800e0e4:	d505      	bpl.n	800e0f2 <_fwalk_sglue+0x22>
 800e0e6:	6824      	ldr	r4, [r4, #0]
 800e0e8:	2c00      	cmp	r4, #0
 800e0ea:	d1f7      	bne.n	800e0dc <_fwalk_sglue+0xc>
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d907      	bls.n	800e108 <_fwalk_sglue+0x38>
 800e0f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	d003      	beq.n	800e108 <_fwalk_sglue+0x38>
 800e100:	4629      	mov	r1, r5
 800e102:	4638      	mov	r0, r7
 800e104:	47c0      	blx	r8
 800e106:	4306      	orrs	r6, r0
 800e108:	3568      	adds	r5, #104	@ 0x68
 800e10a:	e7e9      	b.n	800e0e0 <_fwalk_sglue+0x10>

0800e10c <iprintf>:
 800e10c:	b40f      	push	{r0, r1, r2, r3}
 800e10e:	b507      	push	{r0, r1, r2, lr}
 800e110:	4906      	ldr	r1, [pc, #24]	@ (800e12c <iprintf+0x20>)
 800e112:	ab04      	add	r3, sp, #16
 800e114:	6808      	ldr	r0, [r1, #0]
 800e116:	f853 2b04 	ldr.w	r2, [r3], #4
 800e11a:	6881      	ldr	r1, [r0, #8]
 800e11c:	9301      	str	r3, [sp, #4]
 800e11e:	f000 fab1 	bl	800e684 <_vfiprintf_r>
 800e122:	b003      	add	sp, #12
 800e124:	f85d eb04 	ldr.w	lr, [sp], #4
 800e128:	b004      	add	sp, #16
 800e12a:	4770      	bx	lr
 800e12c:	20000018 	.word	0x20000018

0800e130 <putchar>:
 800e130:	4b02      	ldr	r3, [pc, #8]	@ (800e13c <putchar+0xc>)
 800e132:	4601      	mov	r1, r0
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	6882      	ldr	r2, [r0, #8]
 800e138:	f000 be58 	b.w	800edec <_putc_r>
 800e13c:	20000018 	.word	0x20000018

0800e140 <_puts_r>:
 800e140:	6a03      	ldr	r3, [r0, #32]
 800e142:	b570      	push	{r4, r5, r6, lr}
 800e144:	6884      	ldr	r4, [r0, #8]
 800e146:	4605      	mov	r5, r0
 800e148:	460e      	mov	r6, r1
 800e14a:	b90b      	cbnz	r3, 800e150 <_puts_r+0x10>
 800e14c:	f7ff ffa8 	bl	800e0a0 <__sinit>
 800e150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e152:	07db      	lsls	r3, r3, #31
 800e154:	d405      	bmi.n	800e162 <_puts_r+0x22>
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	0598      	lsls	r0, r3, #22
 800e15a:	d402      	bmi.n	800e162 <_puts_r+0x22>
 800e15c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e15e:	f000 fa0c 	bl	800e57a <__retarget_lock_acquire_recursive>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	0719      	lsls	r1, r3, #28
 800e166:	d502      	bpl.n	800e16e <_puts_r+0x2e>
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d135      	bne.n	800e1da <_puts_r+0x9a>
 800e16e:	4621      	mov	r1, r4
 800e170:	4628      	mov	r0, r5
 800e172:	f000 f8c5 	bl	800e300 <__swsetup_r>
 800e176:	b380      	cbz	r0, 800e1da <_puts_r+0x9a>
 800e178:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e17c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e17e:	07da      	lsls	r2, r3, #31
 800e180:	d405      	bmi.n	800e18e <_puts_r+0x4e>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	059b      	lsls	r3, r3, #22
 800e186:	d402      	bmi.n	800e18e <_puts_r+0x4e>
 800e188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e18a:	f000 f9f7 	bl	800e57c <__retarget_lock_release_recursive>
 800e18e:	4628      	mov	r0, r5
 800e190:	bd70      	pop	{r4, r5, r6, pc}
 800e192:	2b00      	cmp	r3, #0
 800e194:	da04      	bge.n	800e1a0 <_puts_r+0x60>
 800e196:	69a2      	ldr	r2, [r4, #24]
 800e198:	429a      	cmp	r2, r3
 800e19a:	dc17      	bgt.n	800e1cc <_puts_r+0x8c>
 800e19c:	290a      	cmp	r1, #10
 800e19e:	d015      	beq.n	800e1cc <_puts_r+0x8c>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	6022      	str	r2, [r4, #0]
 800e1a6:	7019      	strb	r1, [r3, #0]
 800e1a8:	68a3      	ldr	r3, [r4, #8]
 800e1aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d1ed      	bne.n	800e192 <_puts_r+0x52>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	da11      	bge.n	800e1de <_puts_r+0x9e>
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	210a      	movs	r1, #10
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 f85f 	bl	800e282 <__swbuf_r>
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	d0d7      	beq.n	800e178 <_puts_r+0x38>
 800e1c8:	250a      	movs	r5, #10
 800e1ca:	e7d7      	b.n	800e17c <_puts_r+0x3c>
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 f857 	bl	800e282 <__swbuf_r>
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	d1e7      	bne.n	800e1a8 <_puts_r+0x68>
 800e1d8:	e7ce      	b.n	800e178 <_puts_r+0x38>
 800e1da:	3e01      	subs	r6, #1
 800e1dc:	e7e4      	b.n	800e1a8 <_puts_r+0x68>
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	6022      	str	r2, [r4, #0]
 800e1e4:	220a      	movs	r2, #10
 800e1e6:	701a      	strb	r2, [r3, #0]
 800e1e8:	e7ee      	b.n	800e1c8 <_puts_r+0x88>
	...

0800e1ec <puts>:
 800e1ec:	4b02      	ldr	r3, [pc, #8]	@ (800e1f8 <puts+0xc>)
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	6818      	ldr	r0, [r3, #0]
 800e1f2:	f7ff bfa5 	b.w	800e140 <_puts_r>
 800e1f6:	bf00      	nop
 800e1f8:	20000018 	.word	0x20000018

0800e1fc <__sread>:
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	460c      	mov	r4, r1
 800e200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e204:	f000 f946 	bl	800e494 <_read_r>
 800e208:	2800      	cmp	r0, #0
 800e20a:	bfab      	itete	ge
 800e20c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e20e:	89a3      	ldrhlt	r3, [r4, #12]
 800e210:	181b      	addge	r3, r3, r0
 800e212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e216:	bfac      	ite	ge
 800e218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e21a:	81a3      	strhlt	r3, [r4, #12]
 800e21c:	bd10      	pop	{r4, pc}

0800e21e <__swrite>:
 800e21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e222:	461f      	mov	r7, r3
 800e224:	898b      	ldrh	r3, [r1, #12]
 800e226:	05db      	lsls	r3, r3, #23
 800e228:	4605      	mov	r5, r0
 800e22a:	460c      	mov	r4, r1
 800e22c:	4616      	mov	r6, r2
 800e22e:	d505      	bpl.n	800e23c <__swrite+0x1e>
 800e230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e234:	2302      	movs	r3, #2
 800e236:	2200      	movs	r2, #0
 800e238:	f000 f91a 	bl	800e470 <_lseek_r>
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e246:	81a3      	strh	r3, [r4, #12]
 800e248:	4632      	mov	r2, r6
 800e24a:	463b      	mov	r3, r7
 800e24c:	4628      	mov	r0, r5
 800e24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e252:	f000 b955 	b.w	800e500 <_write_r>

0800e256 <__sseek>:
 800e256:	b510      	push	{r4, lr}
 800e258:	460c      	mov	r4, r1
 800e25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25e:	f000 f907 	bl	800e470 <_lseek_r>
 800e262:	1c43      	adds	r3, r0, #1
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	bf15      	itete	ne
 800e268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e26a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e26e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e272:	81a3      	strheq	r3, [r4, #12]
 800e274:	bf18      	it	ne
 800e276:	81a3      	strhne	r3, [r4, #12]
 800e278:	bd10      	pop	{r4, pc}

0800e27a <__sclose>:
 800e27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e27e:	f000 b8e7 	b.w	800e450 <_close_r>

0800e282 <__swbuf_r>:
 800e282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e284:	460e      	mov	r6, r1
 800e286:	4614      	mov	r4, r2
 800e288:	4605      	mov	r5, r0
 800e28a:	b118      	cbz	r0, 800e294 <__swbuf_r+0x12>
 800e28c:	6a03      	ldr	r3, [r0, #32]
 800e28e:	b90b      	cbnz	r3, 800e294 <__swbuf_r+0x12>
 800e290:	f7ff ff06 	bl	800e0a0 <__sinit>
 800e294:	69a3      	ldr	r3, [r4, #24]
 800e296:	60a3      	str	r3, [r4, #8]
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	071a      	lsls	r2, r3, #28
 800e29c:	d501      	bpl.n	800e2a2 <__swbuf_r+0x20>
 800e29e:	6923      	ldr	r3, [r4, #16]
 800e2a0:	b943      	cbnz	r3, 800e2b4 <__swbuf_r+0x32>
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f000 f82b 	bl	800e300 <__swsetup_r>
 800e2aa:	b118      	cbz	r0, 800e2b4 <__swbuf_r+0x32>
 800e2ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	6922      	ldr	r2, [r4, #16]
 800e2b8:	1a98      	subs	r0, r3, r2
 800e2ba:	6963      	ldr	r3, [r4, #20]
 800e2bc:	b2f6      	uxtb	r6, r6
 800e2be:	4283      	cmp	r3, r0
 800e2c0:	4637      	mov	r7, r6
 800e2c2:	dc05      	bgt.n	800e2d0 <__swbuf_r+0x4e>
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f000 fd06 	bl	800ecd8 <_fflush_r>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d1ed      	bne.n	800e2ac <__swbuf_r+0x2a>
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	60a3      	str	r3, [r4, #8]
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	701e      	strb	r6, [r3, #0]
 800e2de:	6962      	ldr	r2, [r4, #20]
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d004      	beq.n	800e2f0 <__swbuf_r+0x6e>
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	07db      	lsls	r3, r3, #31
 800e2ea:	d5e1      	bpl.n	800e2b0 <__swbuf_r+0x2e>
 800e2ec:	2e0a      	cmp	r6, #10
 800e2ee:	d1df      	bne.n	800e2b0 <__swbuf_r+0x2e>
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f000 fcf0 	bl	800ecd8 <_fflush_r>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d0d9      	beq.n	800e2b0 <__swbuf_r+0x2e>
 800e2fc:	e7d6      	b.n	800e2ac <__swbuf_r+0x2a>
	...

0800e300 <__swsetup_r>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	4b29      	ldr	r3, [pc, #164]	@ (800e3a8 <__swsetup_r+0xa8>)
 800e304:	4605      	mov	r5, r0
 800e306:	6818      	ldr	r0, [r3, #0]
 800e308:	460c      	mov	r4, r1
 800e30a:	b118      	cbz	r0, 800e314 <__swsetup_r+0x14>
 800e30c:	6a03      	ldr	r3, [r0, #32]
 800e30e:	b90b      	cbnz	r3, 800e314 <__swsetup_r+0x14>
 800e310:	f7ff fec6 	bl	800e0a0 <__sinit>
 800e314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e318:	0719      	lsls	r1, r3, #28
 800e31a:	d422      	bmi.n	800e362 <__swsetup_r+0x62>
 800e31c:	06da      	lsls	r2, r3, #27
 800e31e:	d407      	bmi.n	800e330 <__swsetup_r+0x30>
 800e320:	2209      	movs	r2, #9
 800e322:	602a      	str	r2, [r5, #0]
 800e324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e328:	81a3      	strh	r3, [r4, #12]
 800e32a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e32e:	e033      	b.n	800e398 <__swsetup_r+0x98>
 800e330:	0758      	lsls	r0, r3, #29
 800e332:	d512      	bpl.n	800e35a <__swsetup_r+0x5a>
 800e334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e336:	b141      	cbz	r1, 800e34a <__swsetup_r+0x4a>
 800e338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e33c:	4299      	cmp	r1, r3
 800e33e:	d002      	beq.n	800e346 <__swsetup_r+0x46>
 800e340:	4628      	mov	r0, r5
 800e342:	f000 f92b 	bl	800e59c <_free_r>
 800e346:	2300      	movs	r3, #0
 800e348:	6363      	str	r3, [r4, #52]	@ 0x34
 800e34a:	89a3      	ldrh	r3, [r4, #12]
 800e34c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e350:	81a3      	strh	r3, [r4, #12]
 800e352:	2300      	movs	r3, #0
 800e354:	6063      	str	r3, [r4, #4]
 800e356:	6923      	ldr	r3, [r4, #16]
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	89a3      	ldrh	r3, [r4, #12]
 800e35c:	f043 0308 	orr.w	r3, r3, #8
 800e360:	81a3      	strh	r3, [r4, #12]
 800e362:	6923      	ldr	r3, [r4, #16]
 800e364:	b94b      	cbnz	r3, 800e37a <__swsetup_r+0x7a>
 800e366:	89a3      	ldrh	r3, [r4, #12]
 800e368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e370:	d003      	beq.n	800e37a <__swsetup_r+0x7a>
 800e372:	4621      	mov	r1, r4
 800e374:	4628      	mov	r0, r5
 800e376:	f000 fcfd 	bl	800ed74 <__smakebuf_r>
 800e37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e37e:	f013 0201 	ands.w	r2, r3, #1
 800e382:	d00a      	beq.n	800e39a <__swsetup_r+0x9a>
 800e384:	2200      	movs	r2, #0
 800e386:	60a2      	str	r2, [r4, #8]
 800e388:	6962      	ldr	r2, [r4, #20]
 800e38a:	4252      	negs	r2, r2
 800e38c:	61a2      	str	r2, [r4, #24]
 800e38e:	6922      	ldr	r2, [r4, #16]
 800e390:	b942      	cbnz	r2, 800e3a4 <__swsetup_r+0xa4>
 800e392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e396:	d1c5      	bne.n	800e324 <__swsetup_r+0x24>
 800e398:	bd38      	pop	{r3, r4, r5, pc}
 800e39a:	0799      	lsls	r1, r3, #30
 800e39c:	bf58      	it	pl
 800e39e:	6962      	ldrpl	r2, [r4, #20]
 800e3a0:	60a2      	str	r2, [r4, #8]
 800e3a2:	e7f4      	b.n	800e38e <__swsetup_r+0x8e>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e7f7      	b.n	800e398 <__swsetup_r+0x98>
 800e3a8:	20000018 	.word	0x20000018

0800e3ac <memmove>:
 800e3ac:	4288      	cmp	r0, r1
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	eb01 0402 	add.w	r4, r1, r2
 800e3b4:	d902      	bls.n	800e3bc <memmove+0x10>
 800e3b6:	4284      	cmp	r4, r0
 800e3b8:	4623      	mov	r3, r4
 800e3ba:	d807      	bhi.n	800e3cc <memmove+0x20>
 800e3bc:	1e43      	subs	r3, r0, #1
 800e3be:	42a1      	cmp	r1, r4
 800e3c0:	d008      	beq.n	800e3d4 <memmove+0x28>
 800e3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3ca:	e7f8      	b.n	800e3be <memmove+0x12>
 800e3cc:	4402      	add	r2, r0
 800e3ce:	4601      	mov	r1, r0
 800e3d0:	428a      	cmp	r2, r1
 800e3d2:	d100      	bne.n	800e3d6 <memmove+0x2a>
 800e3d4:	bd10      	pop	{r4, pc}
 800e3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3de:	e7f7      	b.n	800e3d0 <memmove+0x24>

0800e3e0 <memset>:
 800e3e0:	4402      	add	r2, r0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d100      	bne.n	800e3ea <memset+0xa>
 800e3e8:	4770      	bx	lr
 800e3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ee:	e7f9      	b.n	800e3e4 <memset+0x4>

0800e3f0 <_raise_r>:
 800e3f0:	291f      	cmp	r1, #31
 800e3f2:	b538      	push	{r3, r4, r5, lr}
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	d904      	bls.n	800e404 <_raise_r+0x14>
 800e3fa:	2316      	movs	r3, #22
 800e3fc:	6003      	str	r3, [r0, #0]
 800e3fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e406:	b112      	cbz	r2, 800e40e <_raise_r+0x1e>
 800e408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e40c:	b94b      	cbnz	r3, 800e422 <_raise_r+0x32>
 800e40e:	4628      	mov	r0, r5
 800e410:	f000 f864 	bl	800e4dc <_getpid_r>
 800e414:	4622      	mov	r2, r4
 800e416:	4601      	mov	r1, r0
 800e418:	4628      	mov	r0, r5
 800e41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e41e:	f000 b84b 	b.w	800e4b8 <_kill_r>
 800e422:	2b01      	cmp	r3, #1
 800e424:	d00a      	beq.n	800e43c <_raise_r+0x4c>
 800e426:	1c59      	adds	r1, r3, #1
 800e428:	d103      	bne.n	800e432 <_raise_r+0x42>
 800e42a:	2316      	movs	r3, #22
 800e42c:	6003      	str	r3, [r0, #0]
 800e42e:	2001      	movs	r0, #1
 800e430:	e7e7      	b.n	800e402 <_raise_r+0x12>
 800e432:	2100      	movs	r1, #0
 800e434:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e438:	4620      	mov	r0, r4
 800e43a:	4798      	blx	r3
 800e43c:	2000      	movs	r0, #0
 800e43e:	e7e0      	b.n	800e402 <_raise_r+0x12>

0800e440 <raise>:
 800e440:	4b02      	ldr	r3, [pc, #8]	@ (800e44c <raise+0xc>)
 800e442:	4601      	mov	r1, r0
 800e444:	6818      	ldr	r0, [r3, #0]
 800e446:	f7ff bfd3 	b.w	800e3f0 <_raise_r>
 800e44a:	bf00      	nop
 800e44c:	20000018 	.word	0x20000018

0800e450 <_close_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d06      	ldr	r5, [pc, #24]	@ (800e46c <_close_r+0x1c>)
 800e454:	2300      	movs	r3, #0
 800e456:	4604      	mov	r4, r0
 800e458:	4608      	mov	r0, r1
 800e45a:	602b      	str	r3, [r5, #0]
 800e45c:	f7fa fdb8 	bl	8008fd0 <_close>
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	d102      	bne.n	800e46a <_close_r+0x1a>
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	b103      	cbz	r3, 800e46a <_close_r+0x1a>
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	bd38      	pop	{r3, r4, r5, pc}
 800e46c:	2000081c 	.word	0x2000081c

0800e470 <_lseek_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	4d07      	ldr	r5, [pc, #28]	@ (800e490 <_lseek_r+0x20>)
 800e474:	4604      	mov	r4, r0
 800e476:	4608      	mov	r0, r1
 800e478:	4611      	mov	r1, r2
 800e47a:	2200      	movs	r2, #0
 800e47c:	602a      	str	r2, [r5, #0]
 800e47e:	461a      	mov	r2, r3
 800e480:	f7fa fdcd 	bl	800901e <_lseek>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_lseek_r+0x1e>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_lseek_r+0x1e>
 800e48c:	6023      	str	r3, [r4, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	2000081c 	.word	0x2000081c

0800e494 <_read_r>:
 800e494:	b538      	push	{r3, r4, r5, lr}
 800e496:	4d07      	ldr	r5, [pc, #28]	@ (800e4b4 <_read_r+0x20>)
 800e498:	4604      	mov	r4, r0
 800e49a:	4608      	mov	r0, r1
 800e49c:	4611      	mov	r1, r2
 800e49e:	2200      	movs	r2, #0
 800e4a0:	602a      	str	r2, [r5, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	f7fa fd77 	bl	8008f96 <_read>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_read_r+0x1e>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_read_r+0x1e>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	2000081c 	.word	0x2000081c

0800e4b8 <_kill_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4d07      	ldr	r5, [pc, #28]	@ (800e4d8 <_kill_r+0x20>)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4604      	mov	r4, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	602b      	str	r3, [r5, #0]
 800e4c6:	f7fa fd4b 	bl	8008f60 <_kill>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d102      	bne.n	800e4d4 <_kill_r+0x1c>
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	b103      	cbz	r3, 800e4d4 <_kill_r+0x1c>
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	bd38      	pop	{r3, r4, r5, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2000081c 	.word	0x2000081c

0800e4dc <_getpid_r>:
 800e4dc:	f7fa bd38 	b.w	8008f50 <_getpid>

0800e4e0 <_sbrk_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d06      	ldr	r5, [pc, #24]	@ (800e4fc <_sbrk_r+0x1c>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	f7fa fda4 	bl	8009038 <_sbrk>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d102      	bne.n	800e4fa <_sbrk_r+0x1a>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b103      	cbz	r3, 800e4fa <_sbrk_r+0x1a>
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	2000081c 	.word	0x2000081c

0800e500 <_write_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d07      	ldr	r5, [pc, #28]	@ (800e520 <_write_r+0x20>)
 800e504:	4604      	mov	r4, r0
 800e506:	4608      	mov	r0, r1
 800e508:	4611      	mov	r1, r2
 800e50a:	2200      	movs	r2, #0
 800e50c:	602a      	str	r2, [r5, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	f7f4 f868 	bl	80025e4 <_write>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d102      	bne.n	800e51e <_write_r+0x1e>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	b103      	cbz	r3, 800e51e <_write_r+0x1e>
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	2000081c 	.word	0x2000081c

0800e524 <__errno>:
 800e524:	4b01      	ldr	r3, [pc, #4]	@ (800e52c <__errno+0x8>)
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	20000018 	.word	0x20000018

0800e530 <__libc_init_array>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	4d0d      	ldr	r5, [pc, #52]	@ (800e568 <__libc_init_array+0x38>)
 800e534:	4c0d      	ldr	r4, [pc, #52]	@ (800e56c <__libc_init_array+0x3c>)
 800e536:	1b64      	subs	r4, r4, r5
 800e538:	10a4      	asrs	r4, r4, #2
 800e53a:	2600      	movs	r6, #0
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	d109      	bne.n	800e554 <__libc_init_array+0x24>
 800e540:	4d0b      	ldr	r5, [pc, #44]	@ (800e570 <__libc_init_array+0x40>)
 800e542:	4c0c      	ldr	r4, [pc, #48]	@ (800e574 <__libc_init_array+0x44>)
 800e544:	f000 fca8 	bl	800ee98 <_init>
 800e548:	1b64      	subs	r4, r4, r5
 800e54a:	10a4      	asrs	r4, r4, #2
 800e54c:	2600      	movs	r6, #0
 800e54e:	42a6      	cmp	r6, r4
 800e550:	d105      	bne.n	800e55e <__libc_init_array+0x2e>
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	f855 3b04 	ldr.w	r3, [r5], #4
 800e558:	4798      	blx	r3
 800e55a:	3601      	adds	r6, #1
 800e55c:	e7ee      	b.n	800e53c <__libc_init_array+0xc>
 800e55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e562:	4798      	blx	r3
 800e564:	3601      	adds	r6, #1
 800e566:	e7f2      	b.n	800e54e <__libc_init_array+0x1e>
 800e568:	0800f830 	.word	0x0800f830
 800e56c:	0800f830 	.word	0x0800f830
 800e570:	0800f830 	.word	0x0800f830
 800e574:	0800f838 	.word	0x0800f838

0800e578 <__retarget_lock_init_recursive>:
 800e578:	4770      	bx	lr

0800e57a <__retarget_lock_acquire_recursive>:
 800e57a:	4770      	bx	lr

0800e57c <__retarget_lock_release_recursive>:
 800e57c:	4770      	bx	lr

0800e57e <memcpy>:
 800e57e:	440a      	add	r2, r1
 800e580:	4291      	cmp	r1, r2
 800e582:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e586:	d100      	bne.n	800e58a <memcpy+0xc>
 800e588:	4770      	bx	lr
 800e58a:	b510      	push	{r4, lr}
 800e58c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e590:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e594:	4291      	cmp	r1, r2
 800e596:	d1f9      	bne.n	800e58c <memcpy+0xe>
 800e598:	bd10      	pop	{r4, pc}
	...

0800e59c <_free_r>:
 800e59c:	b538      	push	{r3, r4, r5, lr}
 800e59e:	4605      	mov	r5, r0
 800e5a0:	2900      	cmp	r1, #0
 800e5a2:	d041      	beq.n	800e628 <_free_r+0x8c>
 800e5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5a8:	1f0c      	subs	r4, r1, #4
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	bfb8      	it	lt
 800e5ae:	18e4      	addlt	r4, r4, r3
 800e5b0:	f7ff fcde 	bl	800df70 <__malloc_lock>
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e62c <_free_r+0x90>)
 800e5b6:	6813      	ldr	r3, [r2, #0]
 800e5b8:	b933      	cbnz	r3, 800e5c8 <_free_r+0x2c>
 800e5ba:	6063      	str	r3, [r4, #4]
 800e5bc:	6014      	str	r4, [r2, #0]
 800e5be:	4628      	mov	r0, r5
 800e5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5c4:	f7ff bcda 	b.w	800df7c <__malloc_unlock>
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	d908      	bls.n	800e5de <_free_r+0x42>
 800e5cc:	6820      	ldr	r0, [r4, #0]
 800e5ce:	1821      	adds	r1, r4, r0
 800e5d0:	428b      	cmp	r3, r1
 800e5d2:	bf01      	itttt	eq
 800e5d4:	6819      	ldreq	r1, [r3, #0]
 800e5d6:	685b      	ldreq	r3, [r3, #4]
 800e5d8:	1809      	addeq	r1, r1, r0
 800e5da:	6021      	streq	r1, [r4, #0]
 800e5dc:	e7ed      	b.n	800e5ba <_free_r+0x1e>
 800e5de:	461a      	mov	r2, r3
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	b10b      	cbz	r3, 800e5e8 <_free_r+0x4c>
 800e5e4:	42a3      	cmp	r3, r4
 800e5e6:	d9fa      	bls.n	800e5de <_free_r+0x42>
 800e5e8:	6811      	ldr	r1, [r2, #0]
 800e5ea:	1850      	adds	r0, r2, r1
 800e5ec:	42a0      	cmp	r0, r4
 800e5ee:	d10b      	bne.n	800e608 <_free_r+0x6c>
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	4401      	add	r1, r0
 800e5f4:	1850      	adds	r0, r2, r1
 800e5f6:	4283      	cmp	r3, r0
 800e5f8:	6011      	str	r1, [r2, #0]
 800e5fa:	d1e0      	bne.n	800e5be <_free_r+0x22>
 800e5fc:	6818      	ldr	r0, [r3, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	6053      	str	r3, [r2, #4]
 800e602:	4408      	add	r0, r1
 800e604:	6010      	str	r0, [r2, #0]
 800e606:	e7da      	b.n	800e5be <_free_r+0x22>
 800e608:	d902      	bls.n	800e610 <_free_r+0x74>
 800e60a:	230c      	movs	r3, #12
 800e60c:	602b      	str	r3, [r5, #0]
 800e60e:	e7d6      	b.n	800e5be <_free_r+0x22>
 800e610:	6820      	ldr	r0, [r4, #0]
 800e612:	1821      	adds	r1, r4, r0
 800e614:	428b      	cmp	r3, r1
 800e616:	bf04      	itt	eq
 800e618:	6819      	ldreq	r1, [r3, #0]
 800e61a:	685b      	ldreq	r3, [r3, #4]
 800e61c:	6063      	str	r3, [r4, #4]
 800e61e:	bf04      	itt	eq
 800e620:	1809      	addeq	r1, r1, r0
 800e622:	6021      	streq	r1, [r4, #0]
 800e624:	6054      	str	r4, [r2, #4]
 800e626:	e7ca      	b.n	800e5be <_free_r+0x22>
 800e628:	bd38      	pop	{r3, r4, r5, pc}
 800e62a:	bf00      	nop
 800e62c:	200006dc 	.word	0x200006dc

0800e630 <__sfputc_r>:
 800e630:	6893      	ldr	r3, [r2, #8]
 800e632:	3b01      	subs	r3, #1
 800e634:	2b00      	cmp	r3, #0
 800e636:	b410      	push	{r4}
 800e638:	6093      	str	r3, [r2, #8]
 800e63a:	da08      	bge.n	800e64e <__sfputc_r+0x1e>
 800e63c:	6994      	ldr	r4, [r2, #24]
 800e63e:	42a3      	cmp	r3, r4
 800e640:	db01      	blt.n	800e646 <__sfputc_r+0x16>
 800e642:	290a      	cmp	r1, #10
 800e644:	d103      	bne.n	800e64e <__sfputc_r+0x1e>
 800e646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e64a:	f7ff be1a 	b.w	800e282 <__swbuf_r>
 800e64e:	6813      	ldr	r3, [r2, #0]
 800e650:	1c58      	adds	r0, r3, #1
 800e652:	6010      	str	r0, [r2, #0]
 800e654:	7019      	strb	r1, [r3, #0]
 800e656:	4608      	mov	r0, r1
 800e658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65c:	4770      	bx	lr

0800e65e <__sfputs_r>:
 800e65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e660:	4606      	mov	r6, r0
 800e662:	460f      	mov	r7, r1
 800e664:	4614      	mov	r4, r2
 800e666:	18d5      	adds	r5, r2, r3
 800e668:	42ac      	cmp	r4, r5
 800e66a:	d101      	bne.n	800e670 <__sfputs_r+0x12>
 800e66c:	2000      	movs	r0, #0
 800e66e:	e007      	b.n	800e680 <__sfputs_r+0x22>
 800e670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e674:	463a      	mov	r2, r7
 800e676:	4630      	mov	r0, r6
 800e678:	f7ff ffda 	bl	800e630 <__sfputc_r>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d1f3      	bne.n	800e668 <__sfputs_r+0xa>
 800e680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e684 <_vfiprintf_r>:
 800e684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e688:	460d      	mov	r5, r1
 800e68a:	b09d      	sub	sp, #116	@ 0x74
 800e68c:	4614      	mov	r4, r2
 800e68e:	4698      	mov	r8, r3
 800e690:	4606      	mov	r6, r0
 800e692:	b118      	cbz	r0, 800e69c <_vfiprintf_r+0x18>
 800e694:	6a03      	ldr	r3, [r0, #32]
 800e696:	b90b      	cbnz	r3, 800e69c <_vfiprintf_r+0x18>
 800e698:	f7ff fd02 	bl	800e0a0 <__sinit>
 800e69c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e69e:	07d9      	lsls	r1, r3, #31
 800e6a0:	d405      	bmi.n	800e6ae <_vfiprintf_r+0x2a>
 800e6a2:	89ab      	ldrh	r3, [r5, #12]
 800e6a4:	059a      	lsls	r2, r3, #22
 800e6a6:	d402      	bmi.n	800e6ae <_vfiprintf_r+0x2a>
 800e6a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6aa:	f7ff ff66 	bl	800e57a <__retarget_lock_acquire_recursive>
 800e6ae:	89ab      	ldrh	r3, [r5, #12]
 800e6b0:	071b      	lsls	r3, r3, #28
 800e6b2:	d501      	bpl.n	800e6b8 <_vfiprintf_r+0x34>
 800e6b4:	692b      	ldr	r3, [r5, #16]
 800e6b6:	b99b      	cbnz	r3, 800e6e0 <_vfiprintf_r+0x5c>
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f7ff fe20 	bl	800e300 <__swsetup_r>
 800e6c0:	b170      	cbz	r0, 800e6e0 <_vfiprintf_r+0x5c>
 800e6c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6c4:	07dc      	lsls	r4, r3, #31
 800e6c6:	d504      	bpl.n	800e6d2 <_vfiprintf_r+0x4e>
 800e6c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6cc:	b01d      	add	sp, #116	@ 0x74
 800e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d2:	89ab      	ldrh	r3, [r5, #12]
 800e6d4:	0598      	lsls	r0, r3, #22
 800e6d6:	d4f7      	bmi.n	800e6c8 <_vfiprintf_r+0x44>
 800e6d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6da:	f7ff ff4f 	bl	800e57c <__retarget_lock_release_recursive>
 800e6de:	e7f3      	b.n	800e6c8 <_vfiprintf_r+0x44>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6e4:	2320      	movs	r3, #32
 800e6e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6ee:	2330      	movs	r3, #48	@ 0x30
 800e6f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e8a0 <_vfiprintf_r+0x21c>
 800e6f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6f8:	f04f 0901 	mov.w	r9, #1
 800e6fc:	4623      	mov	r3, r4
 800e6fe:	469a      	mov	sl, r3
 800e700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e704:	b10a      	cbz	r2, 800e70a <_vfiprintf_r+0x86>
 800e706:	2a25      	cmp	r2, #37	@ 0x25
 800e708:	d1f9      	bne.n	800e6fe <_vfiprintf_r+0x7a>
 800e70a:	ebba 0b04 	subs.w	fp, sl, r4
 800e70e:	d00b      	beq.n	800e728 <_vfiprintf_r+0xa4>
 800e710:	465b      	mov	r3, fp
 800e712:	4622      	mov	r2, r4
 800e714:	4629      	mov	r1, r5
 800e716:	4630      	mov	r0, r6
 800e718:	f7ff ffa1 	bl	800e65e <__sfputs_r>
 800e71c:	3001      	adds	r0, #1
 800e71e:	f000 80a7 	beq.w	800e870 <_vfiprintf_r+0x1ec>
 800e722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e724:	445a      	add	r2, fp
 800e726:	9209      	str	r2, [sp, #36]	@ 0x24
 800e728:	f89a 3000 	ldrb.w	r3, [sl]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f000 809f 	beq.w	800e870 <_vfiprintf_r+0x1ec>
 800e732:	2300      	movs	r3, #0
 800e734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e73c:	f10a 0a01 	add.w	sl, sl, #1
 800e740:	9304      	str	r3, [sp, #16]
 800e742:	9307      	str	r3, [sp, #28]
 800e744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e748:	931a      	str	r3, [sp, #104]	@ 0x68
 800e74a:	4654      	mov	r4, sl
 800e74c:	2205      	movs	r2, #5
 800e74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e752:	4853      	ldr	r0, [pc, #332]	@ (800e8a0 <_vfiprintf_r+0x21c>)
 800e754:	f7f1 fd64 	bl	8000220 <memchr>
 800e758:	9a04      	ldr	r2, [sp, #16]
 800e75a:	b9d8      	cbnz	r0, 800e794 <_vfiprintf_r+0x110>
 800e75c:	06d1      	lsls	r1, r2, #27
 800e75e:	bf44      	itt	mi
 800e760:	2320      	movmi	r3, #32
 800e762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e766:	0713      	lsls	r3, r2, #28
 800e768:	bf44      	itt	mi
 800e76a:	232b      	movmi	r3, #43	@ 0x2b
 800e76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e770:	f89a 3000 	ldrb.w	r3, [sl]
 800e774:	2b2a      	cmp	r3, #42	@ 0x2a
 800e776:	d015      	beq.n	800e7a4 <_vfiprintf_r+0x120>
 800e778:	9a07      	ldr	r2, [sp, #28]
 800e77a:	4654      	mov	r4, sl
 800e77c:	2000      	movs	r0, #0
 800e77e:	f04f 0c0a 	mov.w	ip, #10
 800e782:	4621      	mov	r1, r4
 800e784:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e788:	3b30      	subs	r3, #48	@ 0x30
 800e78a:	2b09      	cmp	r3, #9
 800e78c:	d94b      	bls.n	800e826 <_vfiprintf_r+0x1a2>
 800e78e:	b1b0      	cbz	r0, 800e7be <_vfiprintf_r+0x13a>
 800e790:	9207      	str	r2, [sp, #28]
 800e792:	e014      	b.n	800e7be <_vfiprintf_r+0x13a>
 800e794:	eba0 0308 	sub.w	r3, r0, r8
 800e798:	fa09 f303 	lsl.w	r3, r9, r3
 800e79c:	4313      	orrs	r3, r2
 800e79e:	9304      	str	r3, [sp, #16]
 800e7a0:	46a2      	mov	sl, r4
 800e7a2:	e7d2      	b.n	800e74a <_vfiprintf_r+0xc6>
 800e7a4:	9b03      	ldr	r3, [sp, #12]
 800e7a6:	1d19      	adds	r1, r3, #4
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	9103      	str	r1, [sp, #12]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	bfbb      	ittet	lt
 800e7b0:	425b      	neglt	r3, r3
 800e7b2:	f042 0202 	orrlt.w	r2, r2, #2
 800e7b6:	9307      	strge	r3, [sp, #28]
 800e7b8:	9307      	strlt	r3, [sp, #28]
 800e7ba:	bfb8      	it	lt
 800e7bc:	9204      	strlt	r2, [sp, #16]
 800e7be:	7823      	ldrb	r3, [r4, #0]
 800e7c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7c2:	d10a      	bne.n	800e7da <_vfiprintf_r+0x156>
 800e7c4:	7863      	ldrb	r3, [r4, #1]
 800e7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7c8:	d132      	bne.n	800e830 <_vfiprintf_r+0x1ac>
 800e7ca:	9b03      	ldr	r3, [sp, #12]
 800e7cc:	1d1a      	adds	r2, r3, #4
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	9203      	str	r2, [sp, #12]
 800e7d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7d6:	3402      	adds	r4, #2
 800e7d8:	9305      	str	r3, [sp, #20]
 800e7da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e8b0 <_vfiprintf_r+0x22c>
 800e7de:	7821      	ldrb	r1, [r4, #0]
 800e7e0:	2203      	movs	r2, #3
 800e7e2:	4650      	mov	r0, sl
 800e7e4:	f7f1 fd1c 	bl	8000220 <memchr>
 800e7e8:	b138      	cbz	r0, 800e7fa <_vfiprintf_r+0x176>
 800e7ea:	9b04      	ldr	r3, [sp, #16]
 800e7ec:	eba0 000a 	sub.w	r0, r0, sl
 800e7f0:	2240      	movs	r2, #64	@ 0x40
 800e7f2:	4082      	lsls	r2, r0
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	3401      	adds	r4, #1
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7fe:	4829      	ldr	r0, [pc, #164]	@ (800e8a4 <_vfiprintf_r+0x220>)
 800e800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e804:	2206      	movs	r2, #6
 800e806:	f7f1 fd0b 	bl	8000220 <memchr>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d03f      	beq.n	800e88e <_vfiprintf_r+0x20a>
 800e80e:	4b26      	ldr	r3, [pc, #152]	@ (800e8a8 <_vfiprintf_r+0x224>)
 800e810:	bb1b      	cbnz	r3, 800e85a <_vfiprintf_r+0x1d6>
 800e812:	9b03      	ldr	r3, [sp, #12]
 800e814:	3307      	adds	r3, #7
 800e816:	f023 0307 	bic.w	r3, r3, #7
 800e81a:	3308      	adds	r3, #8
 800e81c:	9303      	str	r3, [sp, #12]
 800e81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e820:	443b      	add	r3, r7
 800e822:	9309      	str	r3, [sp, #36]	@ 0x24
 800e824:	e76a      	b.n	800e6fc <_vfiprintf_r+0x78>
 800e826:	fb0c 3202 	mla	r2, ip, r2, r3
 800e82a:	460c      	mov	r4, r1
 800e82c:	2001      	movs	r0, #1
 800e82e:	e7a8      	b.n	800e782 <_vfiprintf_r+0xfe>
 800e830:	2300      	movs	r3, #0
 800e832:	3401      	adds	r4, #1
 800e834:	9305      	str	r3, [sp, #20]
 800e836:	4619      	mov	r1, r3
 800e838:	f04f 0c0a 	mov.w	ip, #10
 800e83c:	4620      	mov	r0, r4
 800e83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e842:	3a30      	subs	r2, #48	@ 0x30
 800e844:	2a09      	cmp	r2, #9
 800e846:	d903      	bls.n	800e850 <_vfiprintf_r+0x1cc>
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d0c6      	beq.n	800e7da <_vfiprintf_r+0x156>
 800e84c:	9105      	str	r1, [sp, #20]
 800e84e:	e7c4      	b.n	800e7da <_vfiprintf_r+0x156>
 800e850:	fb0c 2101 	mla	r1, ip, r1, r2
 800e854:	4604      	mov	r4, r0
 800e856:	2301      	movs	r3, #1
 800e858:	e7f0      	b.n	800e83c <_vfiprintf_r+0x1b8>
 800e85a:	ab03      	add	r3, sp, #12
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	462a      	mov	r2, r5
 800e860:	4b12      	ldr	r3, [pc, #72]	@ (800e8ac <_vfiprintf_r+0x228>)
 800e862:	a904      	add	r1, sp, #16
 800e864:	4630      	mov	r0, r6
 800e866:	f3af 8000 	nop.w
 800e86a:	4607      	mov	r7, r0
 800e86c:	1c78      	adds	r0, r7, #1
 800e86e:	d1d6      	bne.n	800e81e <_vfiprintf_r+0x19a>
 800e870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e872:	07d9      	lsls	r1, r3, #31
 800e874:	d405      	bmi.n	800e882 <_vfiprintf_r+0x1fe>
 800e876:	89ab      	ldrh	r3, [r5, #12]
 800e878:	059a      	lsls	r2, r3, #22
 800e87a:	d402      	bmi.n	800e882 <_vfiprintf_r+0x1fe>
 800e87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e87e:	f7ff fe7d 	bl	800e57c <__retarget_lock_release_recursive>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	065b      	lsls	r3, r3, #25
 800e886:	f53f af1f 	bmi.w	800e6c8 <_vfiprintf_r+0x44>
 800e88a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e88c:	e71e      	b.n	800e6cc <_vfiprintf_r+0x48>
 800e88e:	ab03      	add	r3, sp, #12
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	462a      	mov	r2, r5
 800e894:	4b05      	ldr	r3, [pc, #20]	@ (800e8ac <_vfiprintf_r+0x228>)
 800e896:	a904      	add	r1, sp, #16
 800e898:	4630      	mov	r0, r6
 800e89a:	f000 f879 	bl	800e990 <_printf_i>
 800e89e:	e7e4      	b.n	800e86a <_vfiprintf_r+0x1e6>
 800e8a0:	0800f7f3 	.word	0x0800f7f3
 800e8a4:	0800f7fd 	.word	0x0800f7fd
 800e8a8:	00000000 	.word	0x00000000
 800e8ac:	0800e65f 	.word	0x0800e65f
 800e8b0:	0800f7f9 	.word	0x0800f7f9

0800e8b4 <_printf_common>:
 800e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	4698      	mov	r8, r3
 800e8bc:	688a      	ldr	r2, [r1, #8]
 800e8be:	690b      	ldr	r3, [r1, #16]
 800e8c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	bfb8      	it	lt
 800e8c8:	4613      	movlt	r3, r2
 800e8ca:	6033      	str	r3, [r6, #0]
 800e8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8d0:	4607      	mov	r7, r0
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	b10a      	cbz	r2, 800e8da <_printf_common+0x26>
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	6033      	str	r3, [r6, #0]
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	0699      	lsls	r1, r3, #26
 800e8de:	bf42      	ittt	mi
 800e8e0:	6833      	ldrmi	r3, [r6, #0]
 800e8e2:	3302      	addmi	r3, #2
 800e8e4:	6033      	strmi	r3, [r6, #0]
 800e8e6:	6825      	ldr	r5, [r4, #0]
 800e8e8:	f015 0506 	ands.w	r5, r5, #6
 800e8ec:	d106      	bne.n	800e8fc <_printf_common+0x48>
 800e8ee:	f104 0a19 	add.w	sl, r4, #25
 800e8f2:	68e3      	ldr	r3, [r4, #12]
 800e8f4:	6832      	ldr	r2, [r6, #0]
 800e8f6:	1a9b      	subs	r3, r3, r2
 800e8f8:	42ab      	cmp	r3, r5
 800e8fa:	dc26      	bgt.n	800e94a <_printf_common+0x96>
 800e8fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e900:	6822      	ldr	r2, [r4, #0]
 800e902:	3b00      	subs	r3, #0
 800e904:	bf18      	it	ne
 800e906:	2301      	movne	r3, #1
 800e908:	0692      	lsls	r2, r2, #26
 800e90a:	d42b      	bmi.n	800e964 <_printf_common+0xb0>
 800e90c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e910:	4641      	mov	r1, r8
 800e912:	4638      	mov	r0, r7
 800e914:	47c8      	blx	r9
 800e916:	3001      	adds	r0, #1
 800e918:	d01e      	beq.n	800e958 <_printf_common+0xa4>
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	6922      	ldr	r2, [r4, #16]
 800e91e:	f003 0306 	and.w	r3, r3, #6
 800e922:	2b04      	cmp	r3, #4
 800e924:	bf02      	ittt	eq
 800e926:	68e5      	ldreq	r5, [r4, #12]
 800e928:	6833      	ldreq	r3, [r6, #0]
 800e92a:	1aed      	subeq	r5, r5, r3
 800e92c:	68a3      	ldr	r3, [r4, #8]
 800e92e:	bf0c      	ite	eq
 800e930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e934:	2500      	movne	r5, #0
 800e936:	4293      	cmp	r3, r2
 800e938:	bfc4      	itt	gt
 800e93a:	1a9b      	subgt	r3, r3, r2
 800e93c:	18ed      	addgt	r5, r5, r3
 800e93e:	2600      	movs	r6, #0
 800e940:	341a      	adds	r4, #26
 800e942:	42b5      	cmp	r5, r6
 800e944:	d11a      	bne.n	800e97c <_printf_common+0xc8>
 800e946:	2000      	movs	r0, #0
 800e948:	e008      	b.n	800e95c <_printf_common+0xa8>
 800e94a:	2301      	movs	r3, #1
 800e94c:	4652      	mov	r2, sl
 800e94e:	4641      	mov	r1, r8
 800e950:	4638      	mov	r0, r7
 800e952:	47c8      	blx	r9
 800e954:	3001      	adds	r0, #1
 800e956:	d103      	bne.n	800e960 <_printf_common+0xac>
 800e958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e960:	3501      	adds	r5, #1
 800e962:	e7c6      	b.n	800e8f2 <_printf_common+0x3e>
 800e964:	18e1      	adds	r1, r4, r3
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	2030      	movs	r0, #48	@ 0x30
 800e96a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e96e:	4422      	add	r2, r4
 800e970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e978:	3302      	adds	r3, #2
 800e97a:	e7c7      	b.n	800e90c <_printf_common+0x58>
 800e97c:	2301      	movs	r3, #1
 800e97e:	4622      	mov	r2, r4
 800e980:	4641      	mov	r1, r8
 800e982:	4638      	mov	r0, r7
 800e984:	47c8      	blx	r9
 800e986:	3001      	adds	r0, #1
 800e988:	d0e6      	beq.n	800e958 <_printf_common+0xa4>
 800e98a:	3601      	adds	r6, #1
 800e98c:	e7d9      	b.n	800e942 <_printf_common+0x8e>
	...

0800e990 <_printf_i>:
 800e990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e994:	7e0f      	ldrb	r7, [r1, #24]
 800e996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e998:	2f78      	cmp	r7, #120	@ 0x78
 800e99a:	4691      	mov	r9, r2
 800e99c:	4680      	mov	r8, r0
 800e99e:	460c      	mov	r4, r1
 800e9a0:	469a      	mov	sl, r3
 800e9a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9a6:	d807      	bhi.n	800e9b8 <_printf_i+0x28>
 800e9a8:	2f62      	cmp	r7, #98	@ 0x62
 800e9aa:	d80a      	bhi.n	800e9c2 <_printf_i+0x32>
 800e9ac:	2f00      	cmp	r7, #0
 800e9ae:	f000 80d2 	beq.w	800eb56 <_printf_i+0x1c6>
 800e9b2:	2f58      	cmp	r7, #88	@ 0x58
 800e9b4:	f000 80b9 	beq.w	800eb2a <_printf_i+0x19a>
 800e9b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9c0:	e03a      	b.n	800ea38 <_printf_i+0xa8>
 800e9c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9c6:	2b15      	cmp	r3, #21
 800e9c8:	d8f6      	bhi.n	800e9b8 <_printf_i+0x28>
 800e9ca:	a101      	add	r1, pc, #4	@ (adr r1, 800e9d0 <_printf_i+0x40>)
 800e9cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9d0:	0800ea29 	.word	0x0800ea29
 800e9d4:	0800ea3d 	.word	0x0800ea3d
 800e9d8:	0800e9b9 	.word	0x0800e9b9
 800e9dc:	0800e9b9 	.word	0x0800e9b9
 800e9e0:	0800e9b9 	.word	0x0800e9b9
 800e9e4:	0800e9b9 	.word	0x0800e9b9
 800e9e8:	0800ea3d 	.word	0x0800ea3d
 800e9ec:	0800e9b9 	.word	0x0800e9b9
 800e9f0:	0800e9b9 	.word	0x0800e9b9
 800e9f4:	0800e9b9 	.word	0x0800e9b9
 800e9f8:	0800e9b9 	.word	0x0800e9b9
 800e9fc:	0800eb3d 	.word	0x0800eb3d
 800ea00:	0800ea67 	.word	0x0800ea67
 800ea04:	0800eaf7 	.word	0x0800eaf7
 800ea08:	0800e9b9 	.word	0x0800e9b9
 800ea0c:	0800e9b9 	.word	0x0800e9b9
 800ea10:	0800eb5f 	.word	0x0800eb5f
 800ea14:	0800e9b9 	.word	0x0800e9b9
 800ea18:	0800ea67 	.word	0x0800ea67
 800ea1c:	0800e9b9 	.word	0x0800e9b9
 800ea20:	0800e9b9 	.word	0x0800e9b9
 800ea24:	0800eaff 	.word	0x0800eaff
 800ea28:	6833      	ldr	r3, [r6, #0]
 800ea2a:	1d1a      	adds	r2, r3, #4
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6032      	str	r2, [r6, #0]
 800ea30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e09d      	b.n	800eb78 <_printf_i+0x1e8>
 800ea3c:	6833      	ldr	r3, [r6, #0]
 800ea3e:	6820      	ldr	r0, [r4, #0]
 800ea40:	1d19      	adds	r1, r3, #4
 800ea42:	6031      	str	r1, [r6, #0]
 800ea44:	0606      	lsls	r6, r0, #24
 800ea46:	d501      	bpl.n	800ea4c <_printf_i+0xbc>
 800ea48:	681d      	ldr	r5, [r3, #0]
 800ea4a:	e003      	b.n	800ea54 <_printf_i+0xc4>
 800ea4c:	0645      	lsls	r5, r0, #25
 800ea4e:	d5fb      	bpl.n	800ea48 <_printf_i+0xb8>
 800ea50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea54:	2d00      	cmp	r5, #0
 800ea56:	da03      	bge.n	800ea60 <_printf_i+0xd0>
 800ea58:	232d      	movs	r3, #45	@ 0x2d
 800ea5a:	426d      	negs	r5, r5
 800ea5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea60:	4859      	ldr	r0, [pc, #356]	@ (800ebc8 <_printf_i+0x238>)
 800ea62:	230a      	movs	r3, #10
 800ea64:	e011      	b.n	800ea8a <_printf_i+0xfa>
 800ea66:	6821      	ldr	r1, [r4, #0]
 800ea68:	6833      	ldr	r3, [r6, #0]
 800ea6a:	0608      	lsls	r0, r1, #24
 800ea6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea70:	d402      	bmi.n	800ea78 <_printf_i+0xe8>
 800ea72:	0649      	lsls	r1, r1, #25
 800ea74:	bf48      	it	mi
 800ea76:	b2ad      	uxthmi	r5, r5
 800ea78:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea7a:	4853      	ldr	r0, [pc, #332]	@ (800ebc8 <_printf_i+0x238>)
 800ea7c:	6033      	str	r3, [r6, #0]
 800ea7e:	bf14      	ite	ne
 800ea80:	230a      	movne	r3, #10
 800ea82:	2308      	moveq	r3, #8
 800ea84:	2100      	movs	r1, #0
 800ea86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea8a:	6866      	ldr	r6, [r4, #4]
 800ea8c:	60a6      	str	r6, [r4, #8]
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	bfa2      	ittt	ge
 800ea92:	6821      	ldrge	r1, [r4, #0]
 800ea94:	f021 0104 	bicge.w	r1, r1, #4
 800ea98:	6021      	strge	r1, [r4, #0]
 800ea9a:	b90d      	cbnz	r5, 800eaa0 <_printf_i+0x110>
 800ea9c:	2e00      	cmp	r6, #0
 800ea9e:	d04b      	beq.n	800eb38 <_printf_i+0x1a8>
 800eaa0:	4616      	mov	r6, r2
 800eaa2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eaa6:	fb03 5711 	mls	r7, r3, r1, r5
 800eaaa:	5dc7      	ldrb	r7, [r0, r7]
 800eaac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eab0:	462f      	mov	r7, r5
 800eab2:	42bb      	cmp	r3, r7
 800eab4:	460d      	mov	r5, r1
 800eab6:	d9f4      	bls.n	800eaa2 <_printf_i+0x112>
 800eab8:	2b08      	cmp	r3, #8
 800eaba:	d10b      	bne.n	800ead4 <_printf_i+0x144>
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	07df      	lsls	r7, r3, #31
 800eac0:	d508      	bpl.n	800ead4 <_printf_i+0x144>
 800eac2:	6923      	ldr	r3, [r4, #16]
 800eac4:	6861      	ldr	r1, [r4, #4]
 800eac6:	4299      	cmp	r1, r3
 800eac8:	bfde      	ittt	le
 800eaca:	2330      	movle	r3, #48	@ 0x30
 800eacc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ead0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ead4:	1b92      	subs	r2, r2, r6
 800ead6:	6122      	str	r2, [r4, #16]
 800ead8:	f8cd a000 	str.w	sl, [sp]
 800eadc:	464b      	mov	r3, r9
 800eade:	aa03      	add	r2, sp, #12
 800eae0:	4621      	mov	r1, r4
 800eae2:	4640      	mov	r0, r8
 800eae4:	f7ff fee6 	bl	800e8b4 <_printf_common>
 800eae8:	3001      	adds	r0, #1
 800eaea:	d14a      	bne.n	800eb82 <_printf_i+0x1f2>
 800eaec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eaf0:	b004      	add	sp, #16
 800eaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	f043 0320 	orr.w	r3, r3, #32
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	4833      	ldr	r0, [pc, #204]	@ (800ebcc <_printf_i+0x23c>)
 800eb00:	2778      	movs	r7, #120	@ 0x78
 800eb02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	6831      	ldr	r1, [r6, #0]
 800eb0a:	061f      	lsls	r7, r3, #24
 800eb0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb10:	d402      	bmi.n	800eb18 <_printf_i+0x188>
 800eb12:	065f      	lsls	r7, r3, #25
 800eb14:	bf48      	it	mi
 800eb16:	b2ad      	uxthmi	r5, r5
 800eb18:	6031      	str	r1, [r6, #0]
 800eb1a:	07d9      	lsls	r1, r3, #31
 800eb1c:	bf44      	itt	mi
 800eb1e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb22:	6023      	strmi	r3, [r4, #0]
 800eb24:	b11d      	cbz	r5, 800eb2e <_printf_i+0x19e>
 800eb26:	2310      	movs	r3, #16
 800eb28:	e7ac      	b.n	800ea84 <_printf_i+0xf4>
 800eb2a:	4827      	ldr	r0, [pc, #156]	@ (800ebc8 <_printf_i+0x238>)
 800eb2c:	e7e9      	b.n	800eb02 <_printf_i+0x172>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	f023 0320 	bic.w	r3, r3, #32
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	e7f6      	b.n	800eb26 <_printf_i+0x196>
 800eb38:	4616      	mov	r6, r2
 800eb3a:	e7bd      	b.n	800eab8 <_printf_i+0x128>
 800eb3c:	6833      	ldr	r3, [r6, #0]
 800eb3e:	6825      	ldr	r5, [r4, #0]
 800eb40:	6961      	ldr	r1, [r4, #20]
 800eb42:	1d18      	adds	r0, r3, #4
 800eb44:	6030      	str	r0, [r6, #0]
 800eb46:	062e      	lsls	r6, r5, #24
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	d501      	bpl.n	800eb50 <_printf_i+0x1c0>
 800eb4c:	6019      	str	r1, [r3, #0]
 800eb4e:	e002      	b.n	800eb56 <_printf_i+0x1c6>
 800eb50:	0668      	lsls	r0, r5, #25
 800eb52:	d5fb      	bpl.n	800eb4c <_printf_i+0x1bc>
 800eb54:	8019      	strh	r1, [r3, #0]
 800eb56:	2300      	movs	r3, #0
 800eb58:	6123      	str	r3, [r4, #16]
 800eb5a:	4616      	mov	r6, r2
 800eb5c:	e7bc      	b.n	800ead8 <_printf_i+0x148>
 800eb5e:	6833      	ldr	r3, [r6, #0]
 800eb60:	1d1a      	adds	r2, r3, #4
 800eb62:	6032      	str	r2, [r6, #0]
 800eb64:	681e      	ldr	r6, [r3, #0]
 800eb66:	6862      	ldr	r2, [r4, #4]
 800eb68:	2100      	movs	r1, #0
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f7f1 fb58 	bl	8000220 <memchr>
 800eb70:	b108      	cbz	r0, 800eb76 <_printf_i+0x1e6>
 800eb72:	1b80      	subs	r0, r0, r6
 800eb74:	6060      	str	r0, [r4, #4]
 800eb76:	6863      	ldr	r3, [r4, #4]
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb80:	e7aa      	b.n	800ead8 <_printf_i+0x148>
 800eb82:	6923      	ldr	r3, [r4, #16]
 800eb84:	4632      	mov	r2, r6
 800eb86:	4649      	mov	r1, r9
 800eb88:	4640      	mov	r0, r8
 800eb8a:	47d0      	blx	sl
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d0ad      	beq.n	800eaec <_printf_i+0x15c>
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	079b      	lsls	r3, r3, #30
 800eb94:	d413      	bmi.n	800ebbe <_printf_i+0x22e>
 800eb96:	68e0      	ldr	r0, [r4, #12]
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	4298      	cmp	r0, r3
 800eb9c:	bfb8      	it	lt
 800eb9e:	4618      	movlt	r0, r3
 800eba0:	e7a6      	b.n	800eaf0 <_printf_i+0x160>
 800eba2:	2301      	movs	r3, #1
 800eba4:	4632      	mov	r2, r6
 800eba6:	4649      	mov	r1, r9
 800eba8:	4640      	mov	r0, r8
 800ebaa:	47d0      	blx	sl
 800ebac:	3001      	adds	r0, #1
 800ebae:	d09d      	beq.n	800eaec <_printf_i+0x15c>
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	68e3      	ldr	r3, [r4, #12]
 800ebb4:	9903      	ldr	r1, [sp, #12]
 800ebb6:	1a5b      	subs	r3, r3, r1
 800ebb8:	42ab      	cmp	r3, r5
 800ebba:	dcf2      	bgt.n	800eba2 <_printf_i+0x212>
 800ebbc:	e7eb      	b.n	800eb96 <_printf_i+0x206>
 800ebbe:	2500      	movs	r5, #0
 800ebc0:	f104 0619 	add.w	r6, r4, #25
 800ebc4:	e7f5      	b.n	800ebb2 <_printf_i+0x222>
 800ebc6:	bf00      	nop
 800ebc8:	0800f804 	.word	0x0800f804
 800ebcc:	0800f815 	.word	0x0800f815

0800ebd0 <__sflush_r>:
 800ebd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd8:	0716      	lsls	r6, r2, #28
 800ebda:	4605      	mov	r5, r0
 800ebdc:	460c      	mov	r4, r1
 800ebde:	d454      	bmi.n	800ec8a <__sflush_r+0xba>
 800ebe0:	684b      	ldr	r3, [r1, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	dc02      	bgt.n	800ebec <__sflush_r+0x1c>
 800ebe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dd48      	ble.n	800ec7e <__sflush_r+0xae>
 800ebec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebee:	2e00      	cmp	r6, #0
 800ebf0:	d045      	beq.n	800ec7e <__sflush_r+0xae>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ebf8:	682f      	ldr	r7, [r5, #0]
 800ebfa:	6a21      	ldr	r1, [r4, #32]
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	d030      	beq.n	800ec62 <__sflush_r+0x92>
 800ec00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	0759      	lsls	r1, r3, #29
 800ec06:	d505      	bpl.n	800ec14 <__sflush_r+0x44>
 800ec08:	6863      	ldr	r3, [r4, #4]
 800ec0a:	1ad2      	subs	r2, r2, r3
 800ec0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec0e:	b10b      	cbz	r3, 800ec14 <__sflush_r+0x44>
 800ec10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec12:	1ad2      	subs	r2, r2, r3
 800ec14:	2300      	movs	r3, #0
 800ec16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec18:	6a21      	ldr	r1, [r4, #32]
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b0      	blx	r6
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	d106      	bne.n	800ec32 <__sflush_r+0x62>
 800ec24:	6829      	ldr	r1, [r5, #0]
 800ec26:	291d      	cmp	r1, #29
 800ec28:	d82b      	bhi.n	800ec82 <__sflush_r+0xb2>
 800ec2a:	4a2a      	ldr	r2, [pc, #168]	@ (800ecd4 <__sflush_r+0x104>)
 800ec2c:	410a      	asrs	r2, r1
 800ec2e:	07d6      	lsls	r6, r2, #31
 800ec30:	d427      	bmi.n	800ec82 <__sflush_r+0xb2>
 800ec32:	2200      	movs	r2, #0
 800ec34:	6062      	str	r2, [r4, #4]
 800ec36:	04d9      	lsls	r1, r3, #19
 800ec38:	6922      	ldr	r2, [r4, #16]
 800ec3a:	6022      	str	r2, [r4, #0]
 800ec3c:	d504      	bpl.n	800ec48 <__sflush_r+0x78>
 800ec3e:	1c42      	adds	r2, r0, #1
 800ec40:	d101      	bne.n	800ec46 <__sflush_r+0x76>
 800ec42:	682b      	ldr	r3, [r5, #0]
 800ec44:	b903      	cbnz	r3, 800ec48 <__sflush_r+0x78>
 800ec46:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec4a:	602f      	str	r7, [r5, #0]
 800ec4c:	b1b9      	cbz	r1, 800ec7e <__sflush_r+0xae>
 800ec4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec52:	4299      	cmp	r1, r3
 800ec54:	d002      	beq.n	800ec5c <__sflush_r+0x8c>
 800ec56:	4628      	mov	r0, r5
 800ec58:	f7ff fca0 	bl	800e59c <_free_r>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec60:	e00d      	b.n	800ec7e <__sflush_r+0xae>
 800ec62:	2301      	movs	r3, #1
 800ec64:	4628      	mov	r0, r5
 800ec66:	47b0      	blx	r6
 800ec68:	4602      	mov	r2, r0
 800ec6a:	1c50      	adds	r0, r2, #1
 800ec6c:	d1c9      	bne.n	800ec02 <__sflush_r+0x32>
 800ec6e:	682b      	ldr	r3, [r5, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d0c6      	beq.n	800ec02 <__sflush_r+0x32>
 800ec74:	2b1d      	cmp	r3, #29
 800ec76:	d001      	beq.n	800ec7c <__sflush_r+0xac>
 800ec78:	2b16      	cmp	r3, #22
 800ec7a:	d11e      	bne.n	800ecba <__sflush_r+0xea>
 800ec7c:	602f      	str	r7, [r5, #0]
 800ec7e:	2000      	movs	r0, #0
 800ec80:	e022      	b.n	800ecc8 <__sflush_r+0xf8>
 800ec82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	e01b      	b.n	800ecc2 <__sflush_r+0xf2>
 800ec8a:	690f      	ldr	r7, [r1, #16]
 800ec8c:	2f00      	cmp	r7, #0
 800ec8e:	d0f6      	beq.n	800ec7e <__sflush_r+0xae>
 800ec90:	0793      	lsls	r3, r2, #30
 800ec92:	680e      	ldr	r6, [r1, #0]
 800ec94:	bf08      	it	eq
 800ec96:	694b      	ldreq	r3, [r1, #20]
 800ec98:	600f      	str	r7, [r1, #0]
 800ec9a:	bf18      	it	ne
 800ec9c:	2300      	movne	r3, #0
 800ec9e:	eba6 0807 	sub.w	r8, r6, r7
 800eca2:	608b      	str	r3, [r1, #8]
 800eca4:	f1b8 0f00 	cmp.w	r8, #0
 800eca8:	dde9      	ble.n	800ec7e <__sflush_r+0xae>
 800ecaa:	6a21      	ldr	r1, [r4, #32]
 800ecac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecae:	4643      	mov	r3, r8
 800ecb0:	463a      	mov	r2, r7
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	47b0      	blx	r6
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	dc08      	bgt.n	800eccc <__sflush_r+0xfc>
 800ecba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecc2:	81a3      	strh	r3, [r4, #12]
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eccc:	4407      	add	r7, r0
 800ecce:	eba8 0800 	sub.w	r8, r8, r0
 800ecd2:	e7e7      	b.n	800eca4 <__sflush_r+0xd4>
 800ecd4:	dfbffffe 	.word	0xdfbffffe

0800ecd8 <_fflush_r>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	690b      	ldr	r3, [r1, #16]
 800ecdc:	4605      	mov	r5, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	b913      	cbnz	r3, 800ece8 <_fflush_r+0x10>
 800ece2:	2500      	movs	r5, #0
 800ece4:	4628      	mov	r0, r5
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	b118      	cbz	r0, 800ecf2 <_fflush_r+0x1a>
 800ecea:	6a03      	ldr	r3, [r0, #32]
 800ecec:	b90b      	cbnz	r3, 800ecf2 <_fflush_r+0x1a>
 800ecee:	f7ff f9d7 	bl	800e0a0 <__sinit>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0f3      	beq.n	800ece2 <_fflush_r+0xa>
 800ecfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ecfc:	07d0      	lsls	r0, r2, #31
 800ecfe:	d404      	bmi.n	800ed0a <_fflush_r+0x32>
 800ed00:	0599      	lsls	r1, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_fflush_r+0x32>
 800ed04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed06:	f7ff fc38 	bl	800e57a <__retarget_lock_acquire_recursive>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f7ff ff5f 	bl	800ebd0 <__sflush_r>
 800ed12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed14:	07da      	lsls	r2, r3, #31
 800ed16:	4605      	mov	r5, r0
 800ed18:	d4e4      	bmi.n	800ece4 <_fflush_r+0xc>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	059b      	lsls	r3, r3, #22
 800ed1e:	d4e1      	bmi.n	800ece4 <_fflush_r+0xc>
 800ed20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed22:	f7ff fc2b 	bl	800e57c <__retarget_lock_release_recursive>
 800ed26:	e7dd      	b.n	800ece4 <_fflush_r+0xc>

0800ed28 <__swhatbuf_r>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed30:	2900      	cmp	r1, #0
 800ed32:	b096      	sub	sp, #88	@ 0x58
 800ed34:	4615      	mov	r5, r2
 800ed36:	461e      	mov	r6, r3
 800ed38:	da0d      	bge.n	800ed56 <__swhatbuf_r+0x2e>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed40:	f04f 0100 	mov.w	r1, #0
 800ed44:	bf14      	ite	ne
 800ed46:	2340      	movne	r3, #64	@ 0x40
 800ed48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	6031      	str	r1, [r6, #0]
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	b016      	add	sp, #88	@ 0x58
 800ed54:	bd70      	pop	{r4, r5, r6, pc}
 800ed56:	466a      	mov	r2, sp
 800ed58:	f000 f87c 	bl	800ee54 <_fstat_r>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	dbec      	blt.n	800ed3a <__swhatbuf_r+0x12>
 800ed60:	9901      	ldr	r1, [sp, #4]
 800ed62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed6a:	4259      	negs	r1, r3
 800ed6c:	4159      	adcs	r1, r3
 800ed6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed72:	e7eb      	b.n	800ed4c <__swhatbuf_r+0x24>

0800ed74 <__smakebuf_r>:
 800ed74:	898b      	ldrh	r3, [r1, #12]
 800ed76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed78:	079d      	lsls	r5, r3, #30
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	d507      	bpl.n	800ed90 <__smakebuf_r+0x1c>
 800ed80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	6123      	str	r3, [r4, #16]
 800ed88:	2301      	movs	r3, #1
 800ed8a:	6163      	str	r3, [r4, #20]
 800ed8c:	b003      	add	sp, #12
 800ed8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed90:	ab01      	add	r3, sp, #4
 800ed92:	466a      	mov	r2, sp
 800ed94:	f7ff ffc8 	bl	800ed28 <__swhatbuf_r>
 800ed98:	9f00      	ldr	r7, [sp, #0]
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4630      	mov	r0, r6
 800eda0:	f7ff f866 	bl	800de70 <_malloc_r>
 800eda4:	b948      	cbnz	r0, 800edba <__smakebuf_r+0x46>
 800eda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edaa:	059a      	lsls	r2, r3, #22
 800edac:	d4ee      	bmi.n	800ed8c <__smakebuf_r+0x18>
 800edae:	f023 0303 	bic.w	r3, r3, #3
 800edb2:	f043 0302 	orr.w	r3, r3, #2
 800edb6:	81a3      	strh	r3, [r4, #12]
 800edb8:	e7e2      	b.n	800ed80 <__smakebuf_r+0xc>
 800edba:	89a3      	ldrh	r3, [r4, #12]
 800edbc:	6020      	str	r0, [r4, #0]
 800edbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edca:	b15b      	cbz	r3, 800ede4 <__smakebuf_r+0x70>
 800edcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edd0:	4630      	mov	r0, r6
 800edd2:	f000 f851 	bl	800ee78 <_isatty_r>
 800edd6:	b128      	cbz	r0, 800ede4 <__smakebuf_r+0x70>
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	f023 0303 	bic.w	r3, r3, #3
 800edde:	f043 0301 	orr.w	r3, r3, #1
 800ede2:	81a3      	strh	r3, [r4, #12]
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	431d      	orrs	r5, r3
 800ede8:	81a5      	strh	r5, [r4, #12]
 800edea:	e7cf      	b.n	800ed8c <__smakebuf_r+0x18>

0800edec <_putc_r>:
 800edec:	b570      	push	{r4, r5, r6, lr}
 800edee:	460d      	mov	r5, r1
 800edf0:	4614      	mov	r4, r2
 800edf2:	4606      	mov	r6, r0
 800edf4:	b118      	cbz	r0, 800edfe <_putc_r+0x12>
 800edf6:	6a03      	ldr	r3, [r0, #32]
 800edf8:	b90b      	cbnz	r3, 800edfe <_putc_r+0x12>
 800edfa:	f7ff f951 	bl	800e0a0 <__sinit>
 800edfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee00:	07d8      	lsls	r0, r3, #31
 800ee02:	d405      	bmi.n	800ee10 <_putc_r+0x24>
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	0599      	lsls	r1, r3, #22
 800ee08:	d402      	bmi.n	800ee10 <_putc_r+0x24>
 800ee0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee0c:	f7ff fbb5 	bl	800e57a <__retarget_lock_acquire_recursive>
 800ee10:	68a3      	ldr	r3, [r4, #8]
 800ee12:	3b01      	subs	r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	60a3      	str	r3, [r4, #8]
 800ee18:	da05      	bge.n	800ee26 <_putc_r+0x3a>
 800ee1a:	69a2      	ldr	r2, [r4, #24]
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	db12      	blt.n	800ee46 <_putc_r+0x5a>
 800ee20:	b2eb      	uxtb	r3, r5
 800ee22:	2b0a      	cmp	r3, #10
 800ee24:	d00f      	beq.n	800ee46 <_putc_r+0x5a>
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	1c5a      	adds	r2, r3, #1
 800ee2a:	6022      	str	r2, [r4, #0]
 800ee2c:	701d      	strb	r5, [r3, #0]
 800ee2e:	b2ed      	uxtb	r5, r5
 800ee30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee32:	07da      	lsls	r2, r3, #31
 800ee34:	d405      	bmi.n	800ee42 <_putc_r+0x56>
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	059b      	lsls	r3, r3, #22
 800ee3a:	d402      	bmi.n	800ee42 <_putc_r+0x56>
 800ee3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee3e:	f7ff fb9d 	bl	800e57c <__retarget_lock_release_recursive>
 800ee42:	4628      	mov	r0, r5
 800ee44:	bd70      	pop	{r4, r5, r6, pc}
 800ee46:	4629      	mov	r1, r5
 800ee48:	4622      	mov	r2, r4
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7ff fa19 	bl	800e282 <__swbuf_r>
 800ee50:	4605      	mov	r5, r0
 800ee52:	e7ed      	b.n	800ee30 <_putc_r+0x44>

0800ee54 <_fstat_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d07      	ldr	r5, [pc, #28]	@ (800ee74 <_fstat_r+0x20>)
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	602b      	str	r3, [r5, #0]
 800ee62:	f7fa f8c1 	bl	8008fe8 <_fstat>
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	d102      	bne.n	800ee70 <_fstat_r+0x1c>
 800ee6a:	682b      	ldr	r3, [r5, #0]
 800ee6c:	b103      	cbz	r3, 800ee70 <_fstat_r+0x1c>
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	bf00      	nop
 800ee74:	2000081c 	.word	0x2000081c

0800ee78 <_isatty_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4d06      	ldr	r5, [pc, #24]	@ (800ee94 <_isatty_r+0x1c>)
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4604      	mov	r4, r0
 800ee80:	4608      	mov	r0, r1
 800ee82:	602b      	str	r3, [r5, #0]
 800ee84:	f7fa f8c0 	bl	8009008 <_isatty>
 800ee88:	1c43      	adds	r3, r0, #1
 800ee8a:	d102      	bne.n	800ee92 <_isatty_r+0x1a>
 800ee8c:	682b      	ldr	r3, [r5, #0]
 800ee8e:	b103      	cbz	r3, 800ee92 <_isatty_r+0x1a>
 800ee90:	6023      	str	r3, [r4, #0]
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	2000081c 	.word	0x2000081c

0800ee98 <_init>:
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9a:	bf00      	nop
 800ee9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee9e:	bc08      	pop	{r3}
 800eea0:	469e      	mov	lr, r3
 800eea2:	4770      	bx	lr

0800eea4 <_fini>:
 800eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea6:	bf00      	nop
 800eea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeaa:	bc08      	pop	{r3}
 800eeac:	469e      	mov	lr, r3
 800eeae:	4770      	bx	lr
